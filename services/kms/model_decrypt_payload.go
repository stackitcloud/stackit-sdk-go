/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the DecryptPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptPayload{}

/*
	types and functions for data
*/

// isByteArray
type DecryptPayloadGetDataAttributeType = *[]byte
type DecryptPayloadGetDataArgType = []byte
type DecryptPayloadGetDataRetType = []byte

func getDecryptPayloadGetDataAttributeTypeOk(arg DecryptPayloadGetDataAttributeType) (ret DecryptPayloadGetDataRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDecryptPayloadGetDataAttributeType(arg *DecryptPayloadGetDataAttributeType, val DecryptPayloadGetDataRetType) {
	*arg = &val
}

// DecryptPayload struct for DecryptPayload
type DecryptPayload struct {
	// The data that has to be decrypted. Encoded in base64.
	// REQUIRED
	Data DecryptPayloadGetDataAttributeType `json:"data" required:"true"`
}

type _DecryptPayload DecryptPayload

// NewDecryptPayload instantiates a new DecryptPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptPayload(data DecryptPayloadGetDataArgType) *DecryptPayload {
	this := DecryptPayload{}
	setDecryptPayloadGetDataAttributeType(&this.Data, data)
	return &this
}

// NewDecryptPayloadWithDefaults instantiates a new DecryptPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptPayloadWithDefaults() *DecryptPayload {
	this := DecryptPayload{}
	return &this
}

// GetData returns the Data field value
func (o *DecryptPayload) GetData() (ret DecryptPayloadGetDataRetType) {
	ret, _ = o.GetDataOk()
	return ret
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DecryptPayload) GetDataOk() (ret DecryptPayloadGetDataRetType, ok bool) {
	return getDecryptPayloadGetDataAttributeTypeOk(o.Data)
}

// SetData sets field value
func (o *DecryptPayload) SetData(v DecryptPayloadGetDataRetType) {
	setDecryptPayloadGetDataAttributeType(&o.Data, v)
}

func (o DecryptPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getDecryptPayloadGetDataAttributeTypeOk(o.Data); ok {
		toSerialize["Data"] = val
	}
	return toSerialize, nil
}

type NullableDecryptPayload struct {
	value *DecryptPayload
	isSet bool
}

func (v NullableDecryptPayload) Get() *DecryptPayload {
	return v.value
}

func (v *NullableDecryptPayload) Set(val *DecryptPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptPayload(val *DecryptPayload) *NullableDecryptPayload {
	return &NullableDecryptPayload{value: val, isSet: true}
}

func (v NullableDecryptPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
