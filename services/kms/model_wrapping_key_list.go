/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the WrappingKeyList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WrappingKeyList{}

/*
	types and functions for wrappingKeys
*/

// isArray
type WrappingKeyListGetWrappingKeysAttributeType = *[]WrappingKey
type WrappingKeyListGetWrappingKeysArgType = []WrappingKey
type WrappingKeyListGetWrappingKeysRetType = []WrappingKey

func getWrappingKeyListGetWrappingKeysAttributeTypeOk(arg WrappingKeyListGetWrappingKeysAttributeType) (ret WrappingKeyListGetWrappingKeysRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setWrappingKeyListGetWrappingKeysAttributeType(arg *WrappingKeyListGetWrappingKeysAttributeType, val WrappingKeyListGetWrappingKeysRetType) {
	*arg = &val
}

// WrappingKeyList struct for WrappingKeyList
type WrappingKeyList struct {
	// REQUIRED
	WrappingKeys WrappingKeyListGetWrappingKeysAttributeType `json:"wrappingKeys" required:"true"`
}

type _WrappingKeyList WrappingKeyList

// NewWrappingKeyList instantiates a new WrappingKeyList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWrappingKeyList(wrappingKeys WrappingKeyListGetWrappingKeysArgType) *WrappingKeyList {
	this := WrappingKeyList{}
	setWrappingKeyListGetWrappingKeysAttributeType(&this.WrappingKeys, wrappingKeys)
	return &this
}

// NewWrappingKeyListWithDefaults instantiates a new WrappingKeyList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWrappingKeyListWithDefaults() *WrappingKeyList {
	this := WrappingKeyList{}
	return &this
}

// GetWrappingKeys returns the WrappingKeys field value
func (o *WrappingKeyList) GetWrappingKeys() (ret WrappingKeyListGetWrappingKeysRetType) {
	ret, _ = o.GetWrappingKeysOk()
	return ret
}

// GetWrappingKeysOk returns a tuple with the WrappingKeys field value
// and a boolean to check if the value has been set.
func (o *WrappingKeyList) GetWrappingKeysOk() (ret WrappingKeyListGetWrappingKeysRetType, ok bool) {
	return getWrappingKeyListGetWrappingKeysAttributeTypeOk(o.WrappingKeys)
}

// SetWrappingKeys sets field value
func (o *WrappingKeyList) SetWrappingKeys(v WrappingKeyListGetWrappingKeysRetType) {
	setWrappingKeyListGetWrappingKeysAttributeType(&o.WrappingKeys, v)
}

func (o WrappingKeyList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getWrappingKeyListGetWrappingKeysAttributeTypeOk(o.WrappingKeys); ok {
		toSerialize["WrappingKeys"] = val
	}
	return toSerialize, nil
}

type NullableWrappingKeyList struct {
	value *WrappingKeyList
	isSet bool
}

func (v NullableWrappingKeyList) Get() *WrappingKeyList {
	return v.value
}

func (v *NullableWrappingKeyList) Set(val *WrappingKeyList) {
	v.value = val
	v.isSet = true
}

func (v NullableWrappingKeyList) IsSet() bool {
	return v.isSet
}

func (v *NullableWrappingKeyList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWrappingKeyList(val *WrappingKeyList) *NullableWrappingKeyList {
	return &NullableWrappingKeyList{value: val, isSet: true}
}

func (v NullableWrappingKeyList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWrappingKeyList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
