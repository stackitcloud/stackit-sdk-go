/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
	"fmt"
)

// WrappingAlgorithm The wrapping algorithm used to wrap the key to import.
type WrappingAlgorithm string

// List of wrappingAlgorithm
const (
	WRAPPINGALGORITHM__2048_OAEP_SHA256                  WrappingAlgorithm = "rsa_2048_oaep_sha256"
	WRAPPINGALGORITHM__3072_OAEP_SHA256                  WrappingAlgorithm = "rsa_3072_oaep_sha256"
	WRAPPINGALGORITHM__4096_OAEP_SHA256                  WrappingAlgorithm = "rsa_4096_oaep_sha256"
	WRAPPINGALGORITHM__4096_OAEP_SHA512                  WrappingAlgorithm = "rsa_4096_oaep_sha512"
	WRAPPINGALGORITHM__2048_OAEP_SHA256_AES_256_KEY_WRAP WrappingAlgorithm = "rsa_2048_oaep_sha256_aes_256_key_wrap"
	WRAPPINGALGORITHM__3072_OAEP_SHA256_AES_256_KEY_WRAP WrappingAlgorithm = "rsa_3072_oaep_sha256_aes_256_key_wrap"
	WRAPPINGALGORITHM__4096_OAEP_SHA256_AES_256_KEY_WRAP WrappingAlgorithm = "rsa_4096_oaep_sha256_aes_256_key_wrap"
	WRAPPINGALGORITHM__4096_OAEP_SHA512_AES_256_KEY_WRAP WrappingAlgorithm = "rsa_4096_oaep_sha512_aes_256_key_wrap"
)

// All allowed values of WrappingAlgorithm enum
var AllowedWrappingAlgorithmEnumValues = []WrappingAlgorithm{
	"rsa_2048_oaep_sha256",
	"rsa_3072_oaep_sha256",
	"rsa_4096_oaep_sha256",
	"rsa_4096_oaep_sha512",
	"rsa_2048_oaep_sha256_aes_256_key_wrap",
	"rsa_3072_oaep_sha256_aes_256_key_wrap",
	"rsa_4096_oaep_sha256_aes_256_key_wrap",
	"rsa_4096_oaep_sha512_aes_256_key_wrap",
}

func (v *WrappingAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := WrappingAlgorithm(value)
	for _, existing := range AllowedWrappingAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WrappingAlgorithm", value)
}

// NewWrappingAlgorithmFromValue returns a pointer to a valid WrappingAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWrappingAlgorithmFromValue(v string) (*WrappingAlgorithm, error) {
	ev := WrappingAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WrappingAlgorithm: valid values are %v", v, AllowedWrappingAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WrappingAlgorithm) IsValid() bool {
	for _, existing := range AllowedWrappingAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wrappingAlgorithm value
func (v WrappingAlgorithm) Ptr() *WrappingAlgorithm {
	return &v
}

type NullableWrappingAlgorithm struct {
	value *WrappingAlgorithm
	isSet bool
}

func (v NullableWrappingAlgorithm) Get() *WrappingAlgorithm {
	return v.value
}

func (v *NullableWrappingAlgorithm) Set(val *WrappingAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableWrappingAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableWrappingAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWrappingAlgorithm(val *WrappingAlgorithm) *NullableWrappingAlgorithm {
	return &NullableWrappingAlgorithm{value: val, isSet: true}
}

func (v NullableWrappingAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWrappingAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
