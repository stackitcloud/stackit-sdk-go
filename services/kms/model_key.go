/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Key type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Key{}

/*
	types and functions for algorithm
*/

// isEnumRef
type KeyGetAlgorithmAttributeType = *Algorithm
type KeyGetAlgorithmArgType = Algorithm
type KeyGetAlgorithmRetType = Algorithm

func getKeyGetAlgorithmAttributeTypeOk(arg KeyGetAlgorithmAttributeType) (ret KeyGetAlgorithmRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetAlgorithmAttributeType(arg *KeyGetAlgorithmAttributeType, val KeyGetAlgorithmRetType) {
	*arg = &val
}

/*
	types and functions for backend
*/

// isEnumRef
type KeyGetBackendAttributeType = *Backend
type KeyGetBackendArgType = Backend
type KeyGetBackendRetType = Backend

func getKeyGetBackendAttributeTypeOk(arg KeyGetBackendAttributeType) (ret KeyGetBackendRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetBackendAttributeType(arg *KeyGetBackendAttributeType, val KeyGetBackendRetType) {
	*arg = &val
}

/*
	types and functions for createdAt
*/

// isDateTime
type KeyGetCreatedAtAttributeType = *time.Time
type KeyGetCreatedAtArgType = time.Time
type KeyGetCreatedAtRetType = time.Time

func getKeyGetCreatedAtAttributeTypeOk(arg KeyGetCreatedAtAttributeType) (ret KeyGetCreatedAtRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetCreatedAtAttributeType(arg *KeyGetCreatedAtAttributeType, val KeyGetCreatedAtRetType) {
	*arg = &val
}

/*
	types and functions for deletionDate
*/

// isDateTime
type KeyGetDeletionDateAttributeType = *time.Time
type KeyGetDeletionDateArgType = time.Time
type KeyGetDeletionDateRetType = time.Time

func getKeyGetDeletionDateAttributeTypeOk(arg KeyGetDeletionDateAttributeType) (ret KeyGetDeletionDateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetDeletionDateAttributeType(arg *KeyGetDeletionDateAttributeType, val KeyGetDeletionDateRetType) {
	*arg = &val
}

/*
	types and functions for description
*/

// isNotNullableString
type KeyGetDescriptionAttributeType = *string

func getKeyGetDescriptionAttributeTypeOk(arg KeyGetDescriptionAttributeType) (ret KeyGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetDescriptionAttributeType(arg *KeyGetDescriptionAttributeType, val KeyGetDescriptionRetType) {
	*arg = &val
}

type KeyGetDescriptionArgType = string
type KeyGetDescriptionRetType = string

/*
	types and functions for displayName
*/

// isNotNullableString
type KeyGetDisplayNameAttributeType = *string

func getKeyGetDisplayNameAttributeTypeOk(arg KeyGetDisplayNameAttributeType) (ret KeyGetDisplayNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetDisplayNameAttributeType(arg *KeyGetDisplayNameAttributeType, val KeyGetDisplayNameRetType) {
	*arg = &val
}

type KeyGetDisplayNameArgType = string
type KeyGetDisplayNameRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type KeyGetIdAttributeType = *string

func getKeyGetIdAttributeTypeOk(arg KeyGetIdAttributeType) (ret KeyGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetIdAttributeType(arg *KeyGetIdAttributeType, val KeyGetIdRetType) {
	*arg = &val
}

type KeyGetIdArgType = string
type KeyGetIdRetType = string

/*
	types and functions for importOnly
*/

// isBoolean
type KeygetImportOnlyAttributeType = *bool
type KeygetImportOnlyArgType = bool
type KeygetImportOnlyRetType = bool

func getKeygetImportOnlyAttributeTypeOk(arg KeygetImportOnlyAttributeType) (ret KeygetImportOnlyRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeygetImportOnlyAttributeType(arg *KeygetImportOnlyAttributeType, val KeygetImportOnlyRetType) {
	*arg = &val
}

/*
	types and functions for keyRingId
*/

// isNotNullableString
type KeyGetKeyRingIdAttributeType = *string

func getKeyGetKeyRingIdAttributeTypeOk(arg KeyGetKeyRingIdAttributeType) (ret KeyGetKeyRingIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetKeyRingIdAttributeType(arg *KeyGetKeyRingIdAttributeType, val KeyGetKeyRingIdRetType) {
	*arg = &val
}

type KeyGetKeyRingIdArgType = string
type KeyGetKeyRingIdRetType = string

/*
	types and functions for purpose
*/

// isEnumRef
type KeyGetPurposeAttributeType = *Purpose
type KeyGetPurposeArgType = Purpose
type KeyGetPurposeRetType = Purpose

func getKeyGetPurposeAttributeTypeOk(arg KeyGetPurposeAttributeType) (ret KeyGetPurposeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetPurposeAttributeType(arg *KeyGetPurposeAttributeType, val KeyGetPurposeRetType) {
	*arg = &val
}

/*
	types and functions for state
*/

// isEnum

// KeyState The current state of the key.
type KeyState string

// List of State
const (
	KEYSTATE_ACTIVE            KeyState = "active"
	KEYSTATE_VERSION_NOT_READY KeyState = "version_not_ready"
	KEYSTATE_DELETED           KeyState = "deleted"
)

// All allowed values of Key enum
var AllowedKeyStateEnumValues = []KeyState{
	"active",
	"version_not_ready",
	"deleted",
}

func (v *KeyState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := KeyState(value)
	for _, existing := range AllowedKeyStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Key", value)
}

// NewKeyStateFromValue returns a pointer to a valid KeyState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyStateFromValue(v string) (*KeyState, error) {
	ev := KeyState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyState: valid values are %v", v, AllowedKeyStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyState) IsValid() bool {
	for _, existing := range AllowedKeyStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v KeyState) Ptr() *KeyState {
	return &v
}

type NullableKeyState struct {
	value *KeyState
	isSet bool
}

func (v NullableKeyState) Get() *KeyState {
	return v.value
}

func (v *NullableKeyState) Set(val *KeyState) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyState) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyState(val *KeyState) *NullableKeyState {
	return &NullableKeyState{value: val, isSet: true}
}

func (v NullableKeyState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type KeyGetStateAttributeType = *KeyState
type KeyGetStateArgType = KeyState
type KeyGetStateRetType = KeyState

func getKeyGetStateAttributeTypeOk(arg KeyGetStateAttributeType) (ret KeyGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKeyGetStateAttributeType(arg *KeyGetStateAttributeType, val KeyGetStateRetType) {
	*arg = &val
}

// Key struct for Key
type Key struct {
	// REQUIRED
	Algorithm KeyGetAlgorithmAttributeType `json:"algorithm"`
	// REQUIRED
	Backend KeyGetBackendAttributeType `json:"backend"`
	// The date and time the creation of the key was triggered.
	// REQUIRED
	CreatedAt KeyGetCreatedAtAttributeType `json:"createdAt"`
	// This date is set when a key is pending deletion and refers to the scheduled date of deletion
	DeletionDate KeyGetDeletionDateAttributeType `json:"deletionDate,omitempty"`
	// A user chosen description to distinguish multiple keys.
	Description KeyGetDescriptionAttributeType `json:"description,omitempty"`
	// The display name to distinguish multiple keys.
	// REQUIRED
	DisplayName KeyGetDisplayNameAttributeType `json:"displayName"`
	// A auto generated unique id which identifies the keys.
	// REQUIRED
	Id KeyGetIdAttributeType `json:"id"`
	// States whether versions can be created or only imported.
	ImportOnly KeygetImportOnlyAttributeType `json:"importOnly,omitempty"`
	// The unique id of the key ring this key is assigned to.
	// REQUIRED
	KeyRingId KeyGetKeyRingIdAttributeType `json:"keyRingId"`
	// REQUIRED
	Purpose KeyGetPurposeAttributeType `json:"purpose"`
	// The current state of the key.
	// REQUIRED
	State KeyGetStateAttributeType `json:"state"`
}

type _Key Key

// NewKey instantiates a new Key object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKey(algorithm KeyGetAlgorithmArgType, backend KeyGetBackendArgType, createdAt KeyGetCreatedAtArgType, displayName KeyGetDisplayNameArgType, id KeyGetIdArgType, keyRingId KeyGetKeyRingIdArgType, purpose KeyGetPurposeArgType, state KeyGetStateArgType) *Key {
	this := Key{}
	setKeyGetAlgorithmAttributeType(&this.Algorithm, algorithm)
	setKeyGetBackendAttributeType(&this.Backend, backend)
	setKeyGetCreatedAtAttributeType(&this.CreatedAt, createdAt)
	setKeyGetDisplayNameAttributeType(&this.DisplayName, displayName)
	setKeyGetIdAttributeType(&this.Id, id)
	setKeyGetKeyRingIdAttributeType(&this.KeyRingId, keyRingId)
	setKeyGetPurposeAttributeType(&this.Purpose, purpose)
	setKeyGetStateAttributeType(&this.State, state)
	return &this
}

// NewKeyWithDefaults instantiates a new Key object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyWithDefaults() *Key {
	this := Key{}
	var importOnly bool = false
	this.ImportOnly = &importOnly
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *Key) GetAlgorithm() (ret KeyGetAlgorithmRetType) {
	ret, _ = o.GetAlgorithmOk()
	return ret
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *Key) GetAlgorithmOk() (ret KeyGetAlgorithmRetType, ok bool) {
	return getKeyGetAlgorithmAttributeTypeOk(o.Algorithm)
}

// SetAlgorithm sets field value
func (o *Key) SetAlgorithm(v KeyGetAlgorithmRetType) {
	setKeyGetAlgorithmAttributeType(&o.Algorithm, v)
}

// GetBackend returns the Backend field value
func (o *Key) GetBackend() (ret KeyGetBackendRetType) {
	ret, _ = o.GetBackendOk()
	return ret
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *Key) GetBackendOk() (ret KeyGetBackendRetType, ok bool) {
	return getKeyGetBackendAttributeTypeOk(o.Backend)
}

// SetBackend sets field value
func (o *Key) SetBackend(v KeyGetBackendRetType) {
	setKeyGetBackendAttributeType(&o.Backend, v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Key) GetCreatedAt() (ret KeyGetCreatedAtRetType) {
	ret, _ = o.GetCreatedAtOk()
	return ret
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Key) GetCreatedAtOk() (ret KeyGetCreatedAtRetType, ok bool) {
	return getKeyGetCreatedAtAttributeTypeOk(o.CreatedAt)
}

// SetCreatedAt sets field value
func (o *Key) SetCreatedAt(v KeyGetCreatedAtRetType) {
	setKeyGetCreatedAtAttributeType(&o.CreatedAt, v)
}

// GetDeletionDate returns the DeletionDate field value if set, zero value otherwise.
func (o *Key) GetDeletionDate() (res KeyGetDeletionDateRetType) {
	res, _ = o.GetDeletionDateOk()
	return
}

// GetDeletionDateOk returns a tuple with the DeletionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Key) GetDeletionDateOk() (ret KeyGetDeletionDateRetType, ok bool) {
	return getKeyGetDeletionDateAttributeTypeOk(o.DeletionDate)
}

// HasDeletionDate returns a boolean if a field has been set.
func (o *Key) HasDeletionDate() bool {
	_, ok := o.GetDeletionDateOk()
	return ok
}

// SetDeletionDate gets a reference to the given time.Time and assigns it to the DeletionDate field.
func (o *Key) SetDeletionDate(v KeyGetDeletionDateRetType) {
	setKeyGetDeletionDateAttributeType(&o.DeletionDate, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Key) GetDescription() (res KeyGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Key) GetDescriptionOk() (ret KeyGetDescriptionRetType, ok bool) {
	return getKeyGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *Key) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Key) SetDescription(v KeyGetDescriptionRetType) {
	setKeyGetDescriptionAttributeType(&o.Description, v)
}

// GetDisplayName returns the DisplayName field value
func (o *Key) GetDisplayName() (ret KeyGetDisplayNameRetType) {
	ret, _ = o.GetDisplayNameOk()
	return ret
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Key) GetDisplayNameOk() (ret KeyGetDisplayNameRetType, ok bool) {
	return getKeyGetDisplayNameAttributeTypeOk(o.DisplayName)
}

// SetDisplayName sets field value
func (o *Key) SetDisplayName(v KeyGetDisplayNameRetType) {
	setKeyGetDisplayNameAttributeType(&o.DisplayName, v)
}

// GetId returns the Id field value
func (o *Key) GetId() (ret KeyGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Key) GetIdOk() (ret KeyGetIdRetType, ok bool) {
	return getKeyGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Key) SetId(v KeyGetIdRetType) {
	setKeyGetIdAttributeType(&o.Id, v)
}

// GetImportOnly returns the ImportOnly field value if set, zero value otherwise.
func (o *Key) GetImportOnly() (res KeygetImportOnlyRetType) {
	res, _ = o.GetImportOnlyOk()
	return
}

// GetImportOnlyOk returns a tuple with the ImportOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Key) GetImportOnlyOk() (ret KeygetImportOnlyRetType, ok bool) {
	return getKeygetImportOnlyAttributeTypeOk(o.ImportOnly)
}

// HasImportOnly returns a boolean if a field has been set.
func (o *Key) HasImportOnly() bool {
	_, ok := o.GetImportOnlyOk()
	return ok
}

// SetImportOnly gets a reference to the given bool and assigns it to the ImportOnly field.
func (o *Key) SetImportOnly(v KeygetImportOnlyRetType) {
	setKeygetImportOnlyAttributeType(&o.ImportOnly, v)
}

// GetKeyRingId returns the KeyRingId field value
func (o *Key) GetKeyRingId() (ret KeyGetKeyRingIdRetType) {
	ret, _ = o.GetKeyRingIdOk()
	return ret
}

// GetKeyRingIdOk returns a tuple with the KeyRingId field value
// and a boolean to check if the value has been set.
func (o *Key) GetKeyRingIdOk() (ret KeyGetKeyRingIdRetType, ok bool) {
	return getKeyGetKeyRingIdAttributeTypeOk(o.KeyRingId)
}

// SetKeyRingId sets field value
func (o *Key) SetKeyRingId(v KeyGetKeyRingIdRetType) {
	setKeyGetKeyRingIdAttributeType(&o.KeyRingId, v)
}

// GetPurpose returns the Purpose field value
func (o *Key) GetPurpose() (ret KeyGetPurposeRetType) {
	ret, _ = o.GetPurposeOk()
	return ret
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *Key) GetPurposeOk() (ret KeyGetPurposeRetType, ok bool) {
	return getKeyGetPurposeAttributeTypeOk(o.Purpose)
}

// SetPurpose sets field value
func (o *Key) SetPurpose(v KeyGetPurposeRetType) {
	setKeyGetPurposeAttributeType(&o.Purpose, v)
}

// GetState returns the State field value
func (o *Key) GetState() (ret KeyGetStateRetType) {
	ret, _ = o.GetStateOk()
	return ret
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Key) GetStateOk() (ret KeyGetStateRetType, ok bool) {
	return getKeyGetStateAttributeTypeOk(o.State)
}

// SetState sets field value
func (o *Key) SetState(v KeyGetStateRetType) {
	setKeyGetStateAttributeType(&o.State, v)
}

func (o Key) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getKeyGetAlgorithmAttributeTypeOk(o.Algorithm); ok {
		toSerialize["Algorithm"] = val
	}
	if val, ok := getKeyGetBackendAttributeTypeOk(o.Backend); ok {
		toSerialize["Backend"] = val
	}
	if val, ok := getKeyGetCreatedAtAttributeTypeOk(o.CreatedAt); ok {
		toSerialize["CreatedAt"] = val
	}
	if val, ok := getKeyGetDeletionDateAttributeTypeOk(o.DeletionDate); ok {
		toSerialize["DeletionDate"] = val
	}
	if val, ok := getKeyGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getKeyGetDisplayNameAttributeTypeOk(o.DisplayName); ok {
		toSerialize["DisplayName"] = val
	}
	if val, ok := getKeyGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getKeygetImportOnlyAttributeTypeOk(o.ImportOnly); ok {
		toSerialize["ImportOnly"] = val
	}
	if val, ok := getKeyGetKeyRingIdAttributeTypeOk(o.KeyRingId); ok {
		toSerialize["KeyRingId"] = val
	}
	if val, ok := getKeyGetPurposeAttributeTypeOk(o.Purpose); ok {
		toSerialize["Purpose"] = val
	}
	if val, ok := getKeyGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	return toSerialize, nil
}

type NullableKey struct {
	value *Key
	isSet bool
}

func (v NullableKey) Get() *Key {
	return v.value
}

func (v *NullableKey) Set(val *Key) {
	v.value = val
	v.isSet = true
}

func (v NullableKey) IsSet() bool {
	return v.isSet
}

func (v *NullableKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKey(val *Key) *NullableKey {
	return &NullableKey{value: val, isSet: true}
}

func (v NullableKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
