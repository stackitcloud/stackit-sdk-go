/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the EncryptedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptedData{}

/*
	types and functions for data
*/

// isByteArray
type EncryptedDataGetDataAttributeType = *[]byte
type EncryptedDataGetDataArgType = []byte
type EncryptedDataGetDataRetType = []byte

func getEncryptedDataGetDataAttributeTypeOk(arg EncryptedDataGetDataAttributeType) (ret EncryptedDataGetDataRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setEncryptedDataGetDataAttributeType(arg *EncryptedDataGetDataAttributeType, val EncryptedDataGetDataRetType) {
	*arg = &val
}

// EncryptedData struct for EncryptedData
type EncryptedData struct {
	// The encrypted data. Encoded in base64.
	// REQUIRED
	Data EncryptedDataGetDataAttributeType `json:"data"`
}

type _EncryptedData EncryptedData

// NewEncryptedData instantiates a new EncryptedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptedData(data EncryptedDataGetDataArgType) *EncryptedData {
	this := EncryptedData{}
	setEncryptedDataGetDataAttributeType(&this.Data, data)
	return &this
}

// NewEncryptedDataWithDefaults instantiates a new EncryptedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptedDataWithDefaults() *EncryptedData {
	this := EncryptedData{}
	return &this
}

// GetData returns the Data field value
func (o *EncryptedData) GetData() (ret EncryptedDataGetDataRetType) {
	ret, _ = o.GetDataOk()
	return ret
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EncryptedData) GetDataOk() (ret EncryptedDataGetDataRetType, ok bool) {
	return getEncryptedDataGetDataAttributeTypeOk(o.Data)
}

// SetData sets field value
func (o *EncryptedData) SetData(v EncryptedDataGetDataRetType) {
	setEncryptedDataGetDataAttributeType(&o.Data, v)
}

func (o EncryptedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getEncryptedDataGetDataAttributeTypeOk(o.Data); ok {
		toSerialize["Data"] = val
	}
	return toSerialize, nil
}

type NullableEncryptedData struct {
	value *EncryptedData
	isSet bool
}

func (v NullableEncryptedData) Get() *EncryptedData {
	return v.value
}

func (v *NullableEncryptedData) Set(val *EncryptedData) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptedData) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptedData(val *EncryptedData) *NullableEncryptedData {
	return &NullableEncryptedData{value: val, isSet: true}
}

func (v NullableEncryptedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
