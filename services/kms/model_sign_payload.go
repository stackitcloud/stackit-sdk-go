/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the SignPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignPayload{}

/*
	types and functions for data
*/

// isByteArray
type SignPayloadGetDataAttributeType = *[]byte
type SignPayloadGetDataArgType = []byte
type SignPayloadGetDataRetType = []byte

func getSignPayloadGetDataAttributeTypeOk(arg SignPayloadGetDataAttributeType) (ret SignPayloadGetDataRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSignPayloadGetDataAttributeType(arg *SignPayloadGetDataAttributeType, val SignPayloadGetDataRetType) {
	*arg = &val
}

// SignPayload struct for SignPayload
type SignPayload struct {
	// The data that has to be signed. Encoded in base64.
	// REQUIRED
	Data SignPayloadGetDataAttributeType `json:"data"`
}

type _SignPayload SignPayload

// NewSignPayload instantiates a new SignPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignPayload(data SignPayloadGetDataArgType) *SignPayload {
	this := SignPayload{}
	setSignPayloadGetDataAttributeType(&this.Data, data)
	return &this
}

// NewSignPayloadWithDefaults instantiates a new SignPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignPayloadWithDefaults() *SignPayload {
	this := SignPayload{}
	return &this
}

// GetData returns the Data field value
func (o *SignPayload) GetData() (ret SignPayloadGetDataRetType) {
	ret, _ = o.GetDataOk()
	return ret
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SignPayload) GetDataOk() (ret SignPayloadGetDataRetType, ok bool) {
	return getSignPayloadGetDataAttributeTypeOk(o.Data)
}

// SetData sets field value
func (o *SignPayload) SetData(v SignPayloadGetDataRetType) {
	setSignPayloadGetDataAttributeType(&o.Data, v)
}

func (o SignPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getSignPayloadGetDataAttributeTypeOk(o.Data); ok {
		toSerialize["Data"] = val
	}
	return toSerialize, nil
}

type NullableSignPayload struct {
	value *SignPayload
	isSet bool
}

func (v NullableSignPayload) Get() *SignPayload {
	return v.value
}

func (v *NullableSignPayload) Set(val *SignPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSignPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSignPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignPayload(val *SignPayload) *NullableSignPayload {
	return &NullableSignPayload{value: val, isSet: true}
}

func (v NullableSignPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
