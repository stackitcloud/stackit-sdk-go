/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the VersionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionList{}

/*
	types and functions for versions
*/

// isArray
type VersionListGetVersionsAttributeType = *[]Version
type VersionListGetVersionsArgType = []Version
type VersionListGetVersionsRetType = []Version

func getVersionListGetVersionsAttributeTypeOk(arg VersionListGetVersionsAttributeType) (ret VersionListGetVersionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setVersionListGetVersionsAttributeType(arg *VersionListGetVersionsAttributeType, val VersionListGetVersionsRetType) {
	*arg = &val
}

// VersionList struct for VersionList
type VersionList struct {
	// REQUIRED
	Versions VersionListGetVersionsAttributeType `json:"versions" required:"true"`
}

type _VersionList VersionList

// NewVersionList instantiates a new VersionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionList(versions VersionListGetVersionsArgType) *VersionList {
	this := VersionList{}
	setVersionListGetVersionsAttributeType(&this.Versions, versions)
	return &this
}

// NewVersionListWithDefaults instantiates a new VersionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionListWithDefaults() *VersionList {
	this := VersionList{}
	return &this
}

// GetVersions returns the Versions field value
func (o *VersionList) GetVersions() (ret VersionListGetVersionsRetType) {
	ret, _ = o.GetVersionsOk()
	return ret
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *VersionList) GetVersionsOk() (ret VersionListGetVersionsRetType, ok bool) {
	return getVersionListGetVersionsAttributeTypeOk(o.Versions)
}

// SetVersions sets field value
func (o *VersionList) SetVersions(v VersionListGetVersionsRetType) {
	setVersionListGetVersionsAttributeType(&o.Versions, v)
}

func (o VersionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getVersionListGetVersionsAttributeTypeOk(o.Versions); ok {
		toSerialize["Versions"] = val
	}
	return toSerialize, nil
}

type NullableVersionList struct {
	value *VersionList
	isSet bool
}

func (v NullableVersionList) Get() *VersionList {
	return v.value
}

func (v *NullableVersionList) Set(val *VersionList) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionList) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionList(val *VersionList) *NullableVersionList {
	return &NullableVersionList{value: val, isSet: true}
}

func (v NullableVersionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
