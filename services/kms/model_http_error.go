/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the HttpError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpError{}

/*
	types and functions for message
*/

// isNotNullableString
type HttpErrorGetMessageAttributeType = *string

func getHttpErrorGetMessageAttributeTypeOk(arg HttpErrorGetMessageAttributeType) (ret HttpErrorGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHttpErrorGetMessageAttributeType(arg *HttpErrorGetMessageAttributeType, val HttpErrorGetMessageRetType) {
	*arg = &val
}

type HttpErrorGetMessageArgType = string
type HttpErrorGetMessageRetType = string

// HttpError struct for HttpError
type HttpError struct {
	// A string that gives a short information about what went wrong.
	// REQUIRED
	Message HttpErrorGetMessageAttributeType `json:"message" required:"true"`
}

type _HttpError HttpError

// NewHttpError instantiates a new HttpError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpError(message HttpErrorGetMessageArgType) *HttpError {
	this := HttpError{}
	setHttpErrorGetMessageAttributeType(&this.Message, message)
	return &this
}

// NewHttpErrorWithDefaults instantiates a new HttpError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpErrorWithDefaults() *HttpError {
	this := HttpError{}
	return &this
}

// GetMessage returns the Message field value
func (o *HttpError) GetMessage() (ret HttpErrorGetMessageRetType) {
	ret, _ = o.GetMessageOk()
	return ret
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *HttpError) GetMessageOk() (ret HttpErrorGetMessageRetType, ok bool) {
	return getHttpErrorGetMessageAttributeTypeOk(o.Message)
}

// SetMessage sets field value
func (o *HttpError) SetMessage(v HttpErrorGetMessageRetType) {
	setHttpErrorGetMessageAttributeType(&o.Message, v)
}

func (o HttpError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHttpErrorGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	return toSerialize, nil
}

type NullableHttpError struct {
	value *HttpError
	isSet bool
}

func (v NullableHttpError) Get() *HttpError {
	return v.value
}

func (v *NullableHttpError) Set(val *HttpError) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpError) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpError(val *HttpError) *NullableHttpError {
	return &NullableHttpError{value: val, isSet: true}
}

func (v NullableHttpError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
