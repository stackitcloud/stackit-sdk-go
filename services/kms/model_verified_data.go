/*
STACKIT Key Management Service API

This API provides endpoints for managing keys and key rings.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kms

import (
	"encoding/json"
)

// checks if the VerifiedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifiedData{}

/*
	types and functions for valid
*/

// isBoolean
type VerifiedDatagetValidAttributeType = *bool
type VerifiedDatagetValidArgType = bool
type VerifiedDatagetValidRetType = bool

func getVerifiedDatagetValidAttributeTypeOk(arg VerifiedDatagetValidAttributeType) (ret VerifiedDatagetValidRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setVerifiedDatagetValidAttributeType(arg *VerifiedDatagetValidAttributeType, val VerifiedDatagetValidRetType) {
	*arg = &val
}

// VerifiedData struct for VerifiedData
type VerifiedData struct {
	// Whether or not the data has a valid signature.
	// REQUIRED
	Valid VerifiedDatagetValidAttributeType `json:"valid" required:"true"`
}

type _VerifiedData VerifiedData

// NewVerifiedData instantiates a new VerifiedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifiedData(valid VerifiedDatagetValidArgType) *VerifiedData {
	this := VerifiedData{}
	setVerifiedDatagetValidAttributeType(&this.Valid, valid)
	return &this
}

// NewVerifiedDataWithDefaults instantiates a new VerifiedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifiedDataWithDefaults() *VerifiedData {
	this := VerifiedData{}
	return &this
}

// GetValid returns the Valid field value
func (o *VerifiedData) GetValid() (ret VerifiedDatagetValidRetType) {
	ret, _ = o.GetValidOk()
	return ret
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *VerifiedData) GetValidOk() (ret VerifiedDatagetValidRetType, ok bool) {
	return getVerifiedDatagetValidAttributeTypeOk(o.Valid)
}

// SetValid sets field value
func (o *VerifiedData) SetValid(v VerifiedDatagetValidRetType) {
	setVerifiedDatagetValidAttributeType(&o.Valid, v)
}

func (o VerifiedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getVerifiedDatagetValidAttributeTypeOk(o.Valid); ok {
		toSerialize["Valid"] = val
	}
	return toSerialize, nil
}

type NullableVerifiedData struct {
	value *VerifiedData
	isSet bool
}

func (v NullableVerifiedData) Get() *VerifiedData {
	return v.value
}

func (v *NullableVerifiedData) Set(val *VerifiedData) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifiedData) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifiedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifiedData(val *VerifiedData) *NullableVerifiedData {
	return &NullableVerifiedData{value: val, isSet: true}
}

func (v NullableVerifiedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifiedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
