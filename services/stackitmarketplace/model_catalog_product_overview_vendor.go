/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the CatalogProductOverviewVendor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogProductOverviewVendor{}

// CatalogProductOverviewVendor struct for CatalogProductOverviewVendor
type CatalogProductOverviewVendor struct {
	// The vendor name.
	// REQUIRED
	Name *string `json:"name"`
	// The vendor ID.
	// REQUIRED
	VendorId *string `json:"vendorId"`
	// The vendor website URL.
	// REQUIRED
	WebsiteUrl *string `json:"websiteUrl"`
}

type _CatalogProductOverviewVendor CatalogProductOverviewVendor

// NewCatalogProductOverviewVendor instantiates a new CatalogProductOverviewVendor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogProductOverviewVendor(name *string, vendorId *string, websiteUrl *string) *CatalogProductOverviewVendor {
	this := CatalogProductOverviewVendor{}
	this.Name = name
	this.VendorId = vendorId
	this.WebsiteUrl = websiteUrl
	return &this
}

// NewCatalogProductOverviewVendorWithDefaults instantiates a new CatalogProductOverviewVendor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogProductOverviewVendorWithDefaults() *CatalogProductOverviewVendor {
	this := CatalogProductOverviewVendor{}
	return &this
}

// GetName returns the Name field value
func (o *CatalogProductOverviewVendor) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CatalogProductOverviewVendor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *CatalogProductOverviewVendor) SetName(v *string) {
	o.Name = v
}

// GetVendorId returns the VendorId field value
func (o *CatalogProductOverviewVendor) GetVendorId() *string {
	if o == nil || IsNil(o.VendorId) {
		var ret *string
		return ret
	}

	return o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value
// and a boolean to check if the value has been set.
func (o *CatalogProductOverviewVendor) GetVendorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VendorId, true
}

// SetVendorId sets field value
func (o *CatalogProductOverviewVendor) SetVendorId(v *string) {
	o.VendorId = v
}

// GetWebsiteUrl returns the WebsiteUrl field value
func (o *CatalogProductOverviewVendor) GetWebsiteUrl() *string {
	if o == nil || IsNil(o.WebsiteUrl) {
		var ret *string
		return ret
	}

	return o.WebsiteUrl
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value
// and a boolean to check if the value has been set.
func (o *CatalogProductOverviewVendor) GetWebsiteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebsiteUrl, true
}

// SetWebsiteUrl sets field value
func (o *CatalogProductOverviewVendor) SetWebsiteUrl(v *string) {
	o.WebsiteUrl = v
}

func (o CatalogProductOverviewVendor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["vendorId"] = o.VendorId
	toSerialize["websiteUrl"] = o.WebsiteUrl
	return toSerialize, nil
}

type NullableCatalogProductOverviewVendor struct {
	value *CatalogProductOverviewVendor
	isSet bool
}

func (v NullableCatalogProductOverviewVendor) Get() *CatalogProductOverviewVendor {
	return v.value
}

func (v *NullableCatalogProductOverviewVendor) Set(val *CatalogProductOverviewVendor) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogProductOverviewVendor) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogProductOverviewVendor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogProductOverviewVendor(val *CatalogProductOverviewVendor) *NullableCatalogProductOverviewVendor {
	return &NullableCatalogProductOverviewVendor{value: val, isSet: true}
}

func (v NullableCatalogProductOverviewVendor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogProductOverviewVendor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
