/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
	"fmt"
)

// SubscriptionLifecycleState Lifecycle state of the subscription.
type SubscriptionLifecycleState string

// List of subscriptionLifecycleState
const (
	SUBSCRIPTIONLIFECYCLESTATE_PENDING    SubscriptionLifecycleState = "SUBSCRIPTION_PENDING"
	SUBSCRIPTIONLIFECYCLESTATE_ACTIVE     SubscriptionLifecycleState = "SUBSCRIPTION_ACTIVE"
	SUBSCRIPTIONLIFECYCLESTATE_INACTIVE   SubscriptionLifecycleState = "SUBSCRIPTION_INACTIVE"
	SUBSCRIPTIONLIFECYCLESTATE_CANCELLING SubscriptionLifecycleState = "SUBSCRIPTION_CANCELLING"
	SUBSCRIPTIONLIFECYCLESTATE_CANCELLED  SubscriptionLifecycleState = "SUBSCRIPTION_CANCELLED"
	SUBSCRIPTIONLIFECYCLESTATE_REJECTED   SubscriptionLifecycleState = "SUBSCRIPTION_REJECTED"
)

// All allowed values of SubscriptionLifecycleState enum
var AllowedSubscriptionLifecycleStateEnumValues = []SubscriptionLifecycleState{
	"SUBSCRIPTION_PENDING",
	"SUBSCRIPTION_ACTIVE",
	"SUBSCRIPTION_INACTIVE",
	"SUBSCRIPTION_CANCELLING",
	"SUBSCRIPTION_CANCELLED",
	"SUBSCRIPTION_REJECTED",
}

func (v *SubscriptionLifecycleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := SubscriptionLifecycleState(value)
	for _, existing := range AllowedSubscriptionLifecycleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionLifecycleState", value)
}

// NewSubscriptionLifecycleStateFromValue returns a pointer to a valid SubscriptionLifecycleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionLifecycleStateFromValue(v string) (*SubscriptionLifecycleState, error) {
	ev := SubscriptionLifecycleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionLifecycleState: valid values are %v", v, AllowedSubscriptionLifecycleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionLifecycleState) IsValid() bool {
	for _, existing := range AllowedSubscriptionLifecycleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to subscriptionLifecycleState value
func (v SubscriptionLifecycleState) Ptr() *SubscriptionLifecycleState {
	return &v
}

type NullableSubscriptionLifecycleState struct {
	value *SubscriptionLifecycleState
	isSet bool
}

func (v NullableSubscriptionLifecycleState) Get() *SubscriptionLifecycleState {
	return v.value
}

func (v *NullableSubscriptionLifecycleState) Set(val *SubscriptionLifecycleState) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionLifecycleState) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionLifecycleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionLifecycleState(val *SubscriptionLifecycleState) *NullableSubscriptionLifecycleState {
	return &NullableSubscriptionLifecycleState{value: val, isSet: true}
}

func (v NullableSubscriptionLifecycleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionLifecycleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
