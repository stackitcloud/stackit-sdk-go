/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the VendorSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VendorSubscription{}

// VendorSubscription struct for VendorSubscription
type VendorSubscription struct {
	// Lifecycle state of the subscription.
	// REQUIRED
	LifecycleState *string `json:"lifecycleState"`
	// REQUIRED
	Product *SubscriptionProduct `json:"product"`
	// The associated consumer project ID.
	// REQUIRED
	ProjectId *string `json:"projectId"`
	// The subscription ID.
	// REQUIRED
	SubscriptionId *string `json:"subscriptionId"`
}

type _VendorSubscription VendorSubscription

// NewVendorSubscription instantiates a new VendorSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorSubscription(lifecycleState *string, product *SubscriptionProduct, projectId *string, subscriptionId *string) *VendorSubscription {
	this := VendorSubscription{}
	this.LifecycleState = lifecycleState
	this.Product = product
	this.ProjectId = projectId
	this.SubscriptionId = subscriptionId
	return &this
}

// NewVendorSubscriptionWithDefaults instantiates a new VendorSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorSubscriptionWithDefaults() *VendorSubscription {
	this := VendorSubscription{}
	return &this
}

// GetLifecycleState returns the LifecycleState field value
func (o *VendorSubscription) GetLifecycleState() *string {
	if o == nil || IsNil(o.LifecycleState) {
		var ret *string
		return ret
	}

	return o.LifecycleState
}

// GetLifecycleStateOk returns a tuple with the LifecycleState field value
// and a boolean to check if the value has been set.
func (o *VendorSubscription) GetLifecycleStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LifecycleState, true
}

// SetLifecycleState sets field value
func (o *VendorSubscription) SetLifecycleState(v *string) {
	o.LifecycleState = v
}

// GetProduct returns the Product field value
func (o *VendorSubscription) GetProduct() *SubscriptionProduct {
	if o == nil || IsNil(o.Product) {
		var ret *SubscriptionProduct
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *VendorSubscription) GetProductOk() (*SubscriptionProduct, bool) {
	if o == nil {
		return nil, false
	}
	return o.Product, true
}

// SetProduct sets field value
func (o *VendorSubscription) SetProduct(v *SubscriptionProduct) {
	o.Product = v
}

// GetProjectId returns the ProjectId field value
func (o *VendorSubscription) GetProjectId() *string {
	if o == nil || IsNil(o.ProjectId) {
		var ret *string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *VendorSubscription) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// SetProjectId sets field value
func (o *VendorSubscription) SetProjectId(v *string) {
	o.ProjectId = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *VendorSubscription) GetSubscriptionId() *string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret *string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *VendorSubscription) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *VendorSubscription) SetSubscriptionId(v *string) {
	o.SubscriptionId = v
}

func (o VendorSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lifecycleState"] = o.LifecycleState
	toSerialize["product"] = o.Product
	toSerialize["projectId"] = o.ProjectId
	toSerialize["subscriptionId"] = o.SubscriptionId
	return toSerialize, nil
}

type NullableVendorSubscription struct {
	value *VendorSubscription
	isSet bool
}

func (v NullableVendorSubscription) Get() *VendorSubscription {
	return v.value
}

func (v *NullableVendorSubscription) Set(val *VendorSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorSubscription(val *VendorSubscription) *NullableVendorSubscription {
	return &NullableVendorSubscription{value: val, isSet: true}
}

func (v NullableVendorSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
