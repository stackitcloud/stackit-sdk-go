/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the SubscriptionCancelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCancelResponse{}

// SubscriptionCancelResponse struct for SubscriptionCancelResponse
type SubscriptionCancelResponse struct {
	// REQUIRED
	CurrentSubscription *CurrentSubscriptionStateResponse `json:"currentSubscription"`
	// REQUIRED
	RequestedSubscription *RequestedSubscriptionStateResponse `json:"requestedSubscription"`
}

type _SubscriptionCancelResponse SubscriptionCancelResponse

// NewSubscriptionCancelResponse instantiates a new SubscriptionCancelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCancelResponse(currentSubscription *CurrentSubscriptionStateResponse, requestedSubscription *RequestedSubscriptionStateResponse) *SubscriptionCancelResponse {
	this := SubscriptionCancelResponse{}
	this.CurrentSubscription = currentSubscription
	this.RequestedSubscription = requestedSubscription
	return &this
}

// NewSubscriptionCancelResponseWithDefaults instantiates a new SubscriptionCancelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCancelResponseWithDefaults() *SubscriptionCancelResponse {
	this := SubscriptionCancelResponse{}
	return &this
}

// GetCurrentSubscription returns the CurrentSubscription field value
func (o *SubscriptionCancelResponse) GetCurrentSubscription() *CurrentSubscriptionStateResponse {
	if o == nil || IsNil(o.CurrentSubscription) {
		var ret *CurrentSubscriptionStateResponse
		return ret
	}

	return o.CurrentSubscription
}

// GetCurrentSubscriptionOk returns a tuple with the CurrentSubscription field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCancelResponse) GetCurrentSubscriptionOk() (*CurrentSubscriptionStateResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentSubscription, true
}

// SetCurrentSubscription sets field value
func (o *SubscriptionCancelResponse) SetCurrentSubscription(v *CurrentSubscriptionStateResponse) {
	o.CurrentSubscription = v
}

// GetRequestedSubscription returns the RequestedSubscription field value
func (o *SubscriptionCancelResponse) GetRequestedSubscription() *RequestedSubscriptionStateResponse {
	if o == nil || IsNil(o.RequestedSubscription) {
		var ret *RequestedSubscriptionStateResponse
		return ret
	}

	return o.RequestedSubscription
}

// GetRequestedSubscriptionOk returns a tuple with the RequestedSubscription field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCancelResponse) GetRequestedSubscriptionOk() (*RequestedSubscriptionStateResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestedSubscription, true
}

// SetRequestedSubscription sets field value
func (o *SubscriptionCancelResponse) SetRequestedSubscription(v *RequestedSubscriptionStateResponse) {
	o.RequestedSubscription = v
}

func (o SubscriptionCancelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currentSubscription"] = o.CurrentSubscription
	toSerialize["requestedSubscription"] = o.RequestedSubscription
	return toSerialize, nil
}

type NullableSubscriptionCancelResponse struct {
	value *SubscriptionCancelResponse
	isSet bool
}

func (v NullableSubscriptionCancelResponse) Get() *SubscriptionCancelResponse {
	return v.value
}

func (v *NullableSubscriptionCancelResponse) Set(val *SubscriptionCancelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCancelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCancelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCancelResponse(val *SubscriptionCancelResponse) *NullableSubscriptionCancelResponse {
	return &NullableSubscriptionCancelResponse{value: val, isSet: true}
}

func (v NullableSubscriptionCancelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCancelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
