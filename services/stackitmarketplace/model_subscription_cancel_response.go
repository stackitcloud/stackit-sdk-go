/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the SubscriptionCancelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCancelResponse{}

/*
	types and functions for currentSubscription
*/

// isModel
type SubscriptionCancelResponseGetCurrentSubscriptionAttributeType = *CurrentSubscriptionStateResponse
type SubscriptionCancelResponseGetCurrentSubscriptionArgType = CurrentSubscriptionStateResponse
type SubscriptionCancelResponseGetCurrentSubscriptionRetType = CurrentSubscriptionStateResponse

func getSubscriptionCancelResponseGetCurrentSubscriptionAttributeTypeOk(arg SubscriptionCancelResponseGetCurrentSubscriptionAttributeType) (ret SubscriptionCancelResponseGetCurrentSubscriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubscriptionCancelResponseGetCurrentSubscriptionAttributeType(arg *SubscriptionCancelResponseGetCurrentSubscriptionAttributeType, val SubscriptionCancelResponseGetCurrentSubscriptionRetType) {
	*arg = &val
}

/*
	types and functions for requestedSubscription
*/

// isModel
type SubscriptionCancelResponseGetRequestedSubscriptionAttributeType = *RequestedSubscriptionStateResponse
type SubscriptionCancelResponseGetRequestedSubscriptionArgType = RequestedSubscriptionStateResponse
type SubscriptionCancelResponseGetRequestedSubscriptionRetType = RequestedSubscriptionStateResponse

func getSubscriptionCancelResponseGetRequestedSubscriptionAttributeTypeOk(arg SubscriptionCancelResponseGetRequestedSubscriptionAttributeType) (ret SubscriptionCancelResponseGetRequestedSubscriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubscriptionCancelResponseGetRequestedSubscriptionAttributeType(arg *SubscriptionCancelResponseGetRequestedSubscriptionAttributeType, val SubscriptionCancelResponseGetRequestedSubscriptionRetType) {
	*arg = &val
}

// SubscriptionCancelResponse struct for SubscriptionCancelResponse
type SubscriptionCancelResponse struct {
	// REQUIRED
	CurrentSubscription SubscriptionCancelResponseGetCurrentSubscriptionAttributeType `json:"currentSubscription"`
	// REQUIRED
	RequestedSubscription SubscriptionCancelResponseGetRequestedSubscriptionAttributeType `json:"requestedSubscription"`
}

type _SubscriptionCancelResponse SubscriptionCancelResponse

// NewSubscriptionCancelResponse instantiates a new SubscriptionCancelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCancelResponse(currentSubscription SubscriptionCancelResponseGetCurrentSubscriptionArgType, requestedSubscription SubscriptionCancelResponseGetRequestedSubscriptionArgType) *SubscriptionCancelResponse {
	this := SubscriptionCancelResponse{}
	setSubscriptionCancelResponseGetCurrentSubscriptionAttributeType(&this.CurrentSubscription, currentSubscription)
	setSubscriptionCancelResponseGetRequestedSubscriptionAttributeType(&this.RequestedSubscription, requestedSubscription)
	return &this
}

// NewSubscriptionCancelResponseWithDefaults instantiates a new SubscriptionCancelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCancelResponseWithDefaults() *SubscriptionCancelResponse {
	this := SubscriptionCancelResponse{}
	return &this
}

// GetCurrentSubscription returns the CurrentSubscription field value
func (o *SubscriptionCancelResponse) GetCurrentSubscription() (ret SubscriptionCancelResponseGetCurrentSubscriptionRetType) {
	ret, _ = o.GetCurrentSubscriptionOk()
	return ret
}

// GetCurrentSubscriptionOk returns a tuple with the CurrentSubscription field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCancelResponse) GetCurrentSubscriptionOk() (ret SubscriptionCancelResponseGetCurrentSubscriptionRetType, ok bool) {
	return getSubscriptionCancelResponseGetCurrentSubscriptionAttributeTypeOk(o.CurrentSubscription)
}

// SetCurrentSubscription sets field value
func (o *SubscriptionCancelResponse) SetCurrentSubscription(v SubscriptionCancelResponseGetCurrentSubscriptionRetType) {
	setSubscriptionCancelResponseGetCurrentSubscriptionAttributeType(&o.CurrentSubscription, v)
}

// GetRequestedSubscription returns the RequestedSubscription field value
func (o *SubscriptionCancelResponse) GetRequestedSubscription() (ret SubscriptionCancelResponseGetRequestedSubscriptionRetType) {
	ret, _ = o.GetRequestedSubscriptionOk()
	return ret
}

// GetRequestedSubscriptionOk returns a tuple with the RequestedSubscription field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCancelResponse) GetRequestedSubscriptionOk() (ret SubscriptionCancelResponseGetRequestedSubscriptionRetType, ok bool) {
	return getSubscriptionCancelResponseGetRequestedSubscriptionAttributeTypeOk(o.RequestedSubscription)
}

// SetRequestedSubscription sets field value
func (o *SubscriptionCancelResponse) SetRequestedSubscription(v SubscriptionCancelResponseGetRequestedSubscriptionRetType) {
	setSubscriptionCancelResponseGetRequestedSubscriptionAttributeType(&o.RequestedSubscription, v)
}

func (o SubscriptionCancelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getSubscriptionCancelResponseGetCurrentSubscriptionAttributeTypeOk(o.CurrentSubscription); ok {
		toSerialize["CurrentSubscription"] = val
	}
	if val, ok := getSubscriptionCancelResponseGetRequestedSubscriptionAttributeTypeOk(o.RequestedSubscription); ok {
		toSerialize["RequestedSubscription"] = val
	}
	return toSerialize, nil
}

type NullableSubscriptionCancelResponse struct {
	value *SubscriptionCancelResponse
	isSet bool
}

func (v NullableSubscriptionCancelResponse) Get() *SubscriptionCancelResponse {
	return v.value
}

func (v *NullableSubscriptionCancelResponse) Set(val *SubscriptionCancelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCancelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCancelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCancelResponse(val *SubscriptionCancelResponse) *NullableSubscriptionCancelResponse {
	return &NullableSubscriptionCancelResponse{value: val, isSet: true}
}

func (v NullableSubscriptionCancelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCancelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
