/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the Assets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assets{}

/*
	types and functions for serviceCertificate
*/

// isModel
type AssetsGetServiceCertificateAttributeType = *ServiceCertificate
type AssetsGetServiceCertificateArgType = ServiceCertificate
type AssetsGetServiceCertificateRetType = ServiceCertificate

func getAssetsGetServiceCertificateAttributeTypeOk(arg AssetsGetServiceCertificateAttributeType) (ret AssetsGetServiceCertificateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAssetsGetServiceCertificateAttributeType(arg *AssetsGetServiceCertificateAttributeType, val AssetsGetServiceCertificateRetType) {
	*arg = &val
}

// Assets The assets associated with the product.
type Assets struct {
	ServiceCertificate AssetsGetServiceCertificateAttributeType `json:"serviceCertificate,omitempty"`
}

// NewAssets instantiates a new Assets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssets() *Assets {
	this := Assets{}
	return &this
}

// NewAssetsWithDefaults instantiates a new Assets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsWithDefaults() *Assets {
	this := Assets{}
	return &this
}

// GetServiceCertificate returns the ServiceCertificate field value if set, zero value otherwise.
func (o *Assets) GetServiceCertificate() (res AssetsGetServiceCertificateRetType) {
	res, _ = o.GetServiceCertificateOk()
	return
}

// GetServiceCertificateOk returns a tuple with the ServiceCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assets) GetServiceCertificateOk() (ret AssetsGetServiceCertificateRetType, ok bool) {
	return getAssetsGetServiceCertificateAttributeTypeOk(o.ServiceCertificate)
}

// HasServiceCertificate returns a boolean if a field has been set.
func (o *Assets) HasServiceCertificate() bool {
	_, ok := o.GetServiceCertificateOk()
	return ok
}

// SetServiceCertificate gets a reference to the given ServiceCertificate and assigns it to the ServiceCertificate field.
func (o *Assets) SetServiceCertificate(v AssetsGetServiceCertificateRetType) {
	setAssetsGetServiceCertificateAttributeType(&o.ServiceCertificate, v)
}

func (o Assets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAssetsGetServiceCertificateAttributeTypeOk(o.ServiceCertificate); ok {
		toSerialize["ServiceCertificate"] = val
	}
	return toSerialize, nil
}

type NullableAssets struct {
	value *Assets
	isSet bool
}

func (v NullableAssets) Get() *Assets {
	return v.value
}

func (v *NullableAssets) Set(val *Assets) {
	v.value = val
	v.isSet = true
}

func (v NullableAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssets(val *Assets) *NullableAssets {
	return &NullableAssets{value: val, isSet: true}
}

func (v NullableAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
