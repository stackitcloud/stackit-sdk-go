/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
	"fmt"
)

// PriceType The product's price type.
type PriceType string

// List of priceType
const (
	PRICETYPE_CONTRACT   PriceType = "CONTRACT"
	PRICETYPE_FREE       PriceType = "FREE"
	PRICETYPE_FREE_TRIAL PriceType = "FREE_TRIAL"
	PRICETYPE_BYOL       PriceType = "BYOL"
	PRICETYPE_PAYG       PriceType = "PAYG"
)

// All allowed values of PriceType enum
var AllowedPriceTypeEnumValues = []PriceType{
	"CONTRACT",
	"FREE",
	"FREE_TRIAL",
	"BYOL",
	"PAYG",
}

func (v *PriceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := PriceType(value)
	for _, existing := range AllowedPriceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceType", value)
}

// NewPriceTypeFromValue returns a pointer to a valid PriceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceTypeFromValue(v string) (*PriceType, error) {
	ev := PriceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceType: valid values are %v", v, AllowedPriceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceType) IsValid() bool {
	for _, existing := range AllowedPriceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to priceType value
func (v PriceType) Ptr() *PriceType {
	return &v
}

type NullablePriceType struct {
	value *PriceType
	isSet bool
}

func (v NullablePriceType) Get() *PriceType {
	return v.value
}

func (v *NullablePriceType) Set(val *PriceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceType(val *PriceType) *NullablePriceType {
	return &NullablePriceType{value: val, isSet: true}
}

func (v NullablePriceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
