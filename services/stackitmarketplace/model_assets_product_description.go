/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the AssetsProductDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetsProductDescription{}

/*
	types and functions for version
*/

// isModel
type AssetsProductDescriptionGetVersionAttributeType = *LocalizedVersion
type AssetsProductDescriptionGetVersionArgType = LocalizedVersion
type AssetsProductDescriptionGetVersionRetType = LocalizedVersion

func getAssetsProductDescriptionGetVersionAttributeTypeOk(arg AssetsProductDescriptionGetVersionAttributeType) (ret AssetsProductDescriptionGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAssetsProductDescriptionGetVersionAttributeType(arg *AssetsProductDescriptionGetVersionAttributeType, val AssetsProductDescriptionGetVersionRetType) {
	*arg = &val
}

// AssetsProductDescription The related product description of the (subscription) product.
type AssetsProductDescription struct {
	Version AssetsProductDescriptionGetVersionAttributeType `json:"version,omitempty"`
}

// NewAssetsProductDescription instantiates a new AssetsProductDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetsProductDescription() *AssetsProductDescription {
	this := AssetsProductDescription{}
	return &this
}

// NewAssetsProductDescriptionWithDefaults instantiates a new AssetsProductDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsProductDescriptionWithDefaults() *AssetsProductDescription {
	this := AssetsProductDescription{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AssetsProductDescription) GetVersion() (res AssetsProductDescriptionGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsProductDescription) GetVersionOk() (ret AssetsProductDescriptionGetVersionRetType, ok bool) {
	return getAssetsProductDescriptionGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *AssetsProductDescription) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given LocalizedVersion and assigns it to the Version field.
func (o *AssetsProductDescription) SetVersion(v AssetsProductDescriptionGetVersionRetType) {
	setAssetsProductDescriptionGetVersionAttributeType(&o.Version, v)
}

func (o AssetsProductDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAssetsProductDescriptionGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableAssetsProductDescription struct {
	value *AssetsProductDescription
	isSet bool
}

func (v NullableAssetsProductDescription) Get() *AssetsProductDescription {
	return v.value
}

func (v *NullableAssetsProductDescription) Set(val *AssetsProductDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetsProductDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetsProductDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetsProductDescription(val *AssetsProductDescription) *NullableAssetsProductDescription {
	return &NullableAssetsProductDescription{value: val, isSet: true}
}

func (v NullableAssetsProductDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetsProductDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
