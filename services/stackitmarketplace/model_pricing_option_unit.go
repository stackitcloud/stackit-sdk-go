/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
	"fmt"
)

// PricingOptionUnit The interval to which the rate applies.
type PricingOptionUnit string

// List of pricingOptionUnit
const (
	PRICINGOPTIONUNIT_MONTH PricingOptionUnit = "month"
)

// All allowed values of PricingOptionUnit enum
var AllowedPricingOptionUnitEnumValues = []PricingOptionUnit{
	"month",
}

func (v *PricingOptionUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := PricingOptionUnit(value)
	for _, existing := range AllowedPricingOptionUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PricingOptionUnit", value)
}

// NewPricingOptionUnitFromValue returns a pointer to a valid PricingOptionUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPricingOptionUnitFromValue(v string) (*PricingOptionUnit, error) {
	ev := PricingOptionUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PricingOptionUnit: valid values are %v", v, AllowedPricingOptionUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PricingOptionUnit) IsValid() bool {
	for _, existing := range AllowedPricingOptionUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to pricingOptionUnit value
func (v PricingOptionUnit) Ptr() *PricingOptionUnit {
	return &v
}

type NullablePricingOptionUnit struct {
	value *PricingOptionUnit
	isSet bool
}

func (v NullablePricingOptionUnit) Get() *PricingOptionUnit {
	return v.value
}

func (v *NullablePricingOptionUnit) Set(val *PricingOptionUnit) {
	v.value = val
	v.isSet = true
}

func (v NullablePricingOptionUnit) IsSet() bool {
	return v.isSet
}

func (v *NullablePricingOptionUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricingOptionUnit(val *PricingOptionUnit) *NullablePricingOptionUnit {
	return &NullablePricingOptionUnit{value: val, isSet: true}
}

func (v NullablePricingOptionUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricingOptionUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
