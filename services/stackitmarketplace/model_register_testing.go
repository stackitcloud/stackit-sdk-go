/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the RegisterTesting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterTesting{}

/*
	types and functions for registerTesting
*/

// isModel
type RegisterTestingGetRegisterTestingAttributeType = *InquiryRegisterTesting
type RegisterTestingGetRegisterTestingArgType = InquiryRegisterTesting
type RegisterTestingGetRegisterTestingRetType = InquiryRegisterTesting

func getRegisterTestingGetRegisterTestingAttributeTypeOk(arg RegisterTestingGetRegisterTestingAttributeType) (ret RegisterTestingGetRegisterTestingRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegisterTestingGetRegisterTestingAttributeType(arg *RegisterTestingGetRegisterTestingAttributeType, val RegisterTestingGetRegisterTestingRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isEnumRef
type RegisterTestingGetTypeAttributeType = *InquiryFormType
type RegisterTestingGetTypeArgType = InquiryFormType
type RegisterTestingGetTypeRetType = InquiryFormType

func getRegisterTestingGetTypeAttributeTypeOk(arg RegisterTestingGetTypeAttributeType) (ret RegisterTestingGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegisterTestingGetTypeAttributeType(arg *RegisterTestingGetTypeAttributeType, val RegisterTestingGetTypeRetType) {
	*arg = &val
}

// RegisterTesting Register for testing.
type RegisterTesting struct {
	// REQUIRED
	RegisterTesting RegisterTestingGetRegisterTestingAttributeType `json:"registerTesting"`
	// REQUIRED
	Type RegisterTestingGetTypeAttributeType `json:"type"`
}

type _RegisterTesting RegisterTesting

// NewRegisterTesting instantiates a new RegisterTesting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterTesting(registerTesting RegisterTestingGetRegisterTestingArgType, types RegisterTestingGetTypeArgType) *RegisterTesting {
	this := RegisterTesting{}
	setRegisterTestingGetRegisterTestingAttributeType(&this.RegisterTesting, registerTesting)
	setRegisterTestingGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewRegisterTestingWithDefaults instantiates a new RegisterTesting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterTestingWithDefaults() *RegisterTesting {
	this := RegisterTesting{}
	return &this
}

// GetRegisterTesting returns the RegisterTesting field value
func (o *RegisterTesting) GetRegisterTesting() (ret RegisterTestingGetRegisterTestingRetType) {
	ret, _ = o.GetRegisterTestingOk()
	return ret
}

// GetRegisterTestingOk returns a tuple with the RegisterTesting field value
// and a boolean to check if the value has been set.
func (o *RegisterTesting) GetRegisterTestingOk() (ret RegisterTestingGetRegisterTestingRetType, ok bool) {
	return getRegisterTestingGetRegisterTestingAttributeTypeOk(o.RegisterTesting)
}

// SetRegisterTesting sets field value
func (o *RegisterTesting) SetRegisterTesting(v RegisterTestingGetRegisterTestingRetType) {
	setRegisterTestingGetRegisterTestingAttributeType(&o.RegisterTesting, v)
}

// GetType returns the Type field value
func (o *RegisterTesting) GetType() (ret RegisterTestingGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegisterTesting) GetTypeOk() (ret RegisterTestingGetTypeRetType, ok bool) {
	return getRegisterTestingGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *RegisterTesting) SetType(v RegisterTestingGetTypeRetType) {
	setRegisterTestingGetTypeAttributeType(&o.Type, v)
}

func (o RegisterTesting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getRegisterTestingGetRegisterTestingAttributeTypeOk(o.RegisterTesting); ok {
		toSerialize["RegisterTesting"] = val
	}
	if val, ok := getRegisterTestingGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableRegisterTesting struct {
	value *RegisterTesting
	isSet bool
}

func (v NullableRegisterTesting) Get() *RegisterTesting {
	return v.value
}

func (v *NullableRegisterTesting) Set(val *RegisterTesting) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterTesting) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterTesting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterTesting(val *RegisterTesting) *NullableRegisterTesting {
	return &NullableRegisterTesting{value: val, isSet: true}
}

func (v NullableRegisterTesting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterTesting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
