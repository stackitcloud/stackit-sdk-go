/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the RegisterTesting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterTesting{}

// RegisterTesting Register for testing.
type RegisterTesting struct {
	// REQUIRED
	RegisterTesting *RegisterTestingRegisterTesting `json:"registerTesting"`
	// The form type.
	// REQUIRED
	Type *string `json:"type"`
}

type _RegisterTesting RegisterTesting

// NewRegisterTesting instantiates a new RegisterTesting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterTesting(registerTesting *RegisterTestingRegisterTesting, type_ *string) *RegisterTesting {
	this := RegisterTesting{}
	this.RegisterTesting = registerTesting
	this.Type = type_
	return &this
}

// NewRegisterTestingWithDefaults instantiates a new RegisterTesting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterTestingWithDefaults() *RegisterTesting {
	this := RegisterTesting{}
	return &this
}

// GetRegisterTesting returns the RegisterTesting field value
func (o *RegisterTesting) GetRegisterTesting() *RegisterTestingRegisterTesting {
	if o == nil || IsNil(o.RegisterTesting) {
		var ret *RegisterTestingRegisterTesting
		return ret
	}

	return o.RegisterTesting
}

// GetRegisterTestingOk returns a tuple with the RegisterTesting field value
// and a boolean to check if the value has been set.
func (o *RegisterTesting) GetRegisterTestingOk() (*RegisterTestingRegisterTesting, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisterTesting, true
}

// SetRegisterTesting sets field value
func (o *RegisterTesting) SetRegisterTesting(v *RegisterTestingRegisterTesting) {
	o.RegisterTesting = v
}

// GetType returns the Type field value
func (o *RegisterTesting) GetType() *string {
	if o == nil || IsNil(o.Type) {
		var ret *string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegisterTesting) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *RegisterTesting) SetType(v *string) {
	o.Type = v
}

func (o RegisterTesting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registerTesting"] = o.RegisterTesting
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableRegisterTesting struct {
	value *RegisterTesting
	isSet bool
}

func (v NullableRegisterTesting) Get() *RegisterTesting {
	return v.value
}

func (v *NullableRegisterTesting) Set(val *RegisterTesting) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterTesting) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterTesting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterTesting(val *RegisterTesting) *NullableRegisterTesting {
	return &NullableRegisterTesting{value: val, isSet: true}
}

func (v NullableRegisterTesting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterTesting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
