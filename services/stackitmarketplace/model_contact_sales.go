/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the ContactSales type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactSales{}

/*
	types and functions for contactSales
*/

// isModel
type ContactSalesGetContactSalesAttributeType = *InquiryContactSales
type ContactSalesGetContactSalesArgType = InquiryContactSales
type ContactSalesGetContactSalesRetType = InquiryContactSales

func getContactSalesGetContactSalesAttributeTypeOk(arg ContactSalesGetContactSalesAttributeType) (ret ContactSalesGetContactSalesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setContactSalesGetContactSalesAttributeType(arg *ContactSalesGetContactSalesAttributeType, val ContactSalesGetContactSalesRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isEnumRef
type ContactSalesGetTypeAttributeType = *InquiryFormType
type ContactSalesGetTypeArgType = InquiryFormType
type ContactSalesGetTypeRetType = InquiryFormType

func getContactSalesGetTypeAttributeTypeOk(arg ContactSalesGetTypeAttributeType) (ret ContactSalesGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setContactSalesGetTypeAttributeType(arg *ContactSalesGetTypeAttributeType, val ContactSalesGetTypeRetType) {
	*arg = &val
}

// ContactSales Contact sales.
type ContactSales struct {
	// REQUIRED
	ContactSales ContactSalesGetContactSalesAttributeType `json:"contactSales"`
	// REQUIRED
	Type ContactSalesGetTypeAttributeType `json:"type"`
}

type _ContactSales ContactSales

// NewContactSales instantiates a new ContactSales object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactSales(contactSales ContactSalesGetContactSalesArgType, types ContactSalesGetTypeArgType) *ContactSales {
	this := ContactSales{}
	setContactSalesGetContactSalesAttributeType(&this.ContactSales, contactSales)
	setContactSalesGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewContactSalesWithDefaults instantiates a new ContactSales object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactSalesWithDefaults() *ContactSales {
	this := ContactSales{}
	return &this
}

// GetContactSales returns the ContactSales field value
func (o *ContactSales) GetContactSales() (ret ContactSalesGetContactSalesRetType) {
	ret, _ = o.GetContactSalesOk()
	return ret
}

// GetContactSalesOk returns a tuple with the ContactSales field value
// and a boolean to check if the value has been set.
func (o *ContactSales) GetContactSalesOk() (ret ContactSalesGetContactSalesRetType, ok bool) {
	return getContactSalesGetContactSalesAttributeTypeOk(o.ContactSales)
}

// SetContactSales sets field value
func (o *ContactSales) SetContactSales(v ContactSalesGetContactSalesRetType) {
	setContactSalesGetContactSalesAttributeType(&o.ContactSales, v)
}

// GetType returns the Type field value
func (o *ContactSales) GetType() (ret ContactSalesGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContactSales) GetTypeOk() (ret ContactSalesGetTypeRetType, ok bool) {
	return getContactSalesGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *ContactSales) SetType(v ContactSalesGetTypeRetType) {
	setContactSalesGetTypeAttributeType(&o.Type, v)
}

func (o ContactSales) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getContactSalesGetContactSalesAttributeTypeOk(o.ContactSales); ok {
		toSerialize["ContactSales"] = val
	}
	if val, ok := getContactSalesGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableContactSales struct {
	value *ContactSales
	isSet bool
}

func (v NullableContactSales) Get() *ContactSales {
	return v.value
}

func (v *NullableContactSales) Set(val *ContactSales) {
	v.value = val
	v.isSet = true
}

func (v NullableContactSales) IsSet() bool {
	return v.isSet
}

func (v *NullableContactSales) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactSales(val *ContactSales) *NullableContactSales {
	return &NullableContactSales{value: val, isSet: true}
}

func (v NullableContactSales) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactSales) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
