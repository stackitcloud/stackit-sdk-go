/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
	"fmt"
)

// InquiryFormType The form type.
type InquiryFormType string

// List of inquiryFormType
const (
	INQUIRYFORMTYPE_SUGGEST_PRODUCT  InquiryFormType = "SUGGEST_PRODUCT"
	INQUIRYFORMTYPE_CONTACT_SALES    InquiryFormType = "CONTACT_SALES"
	INQUIRYFORMTYPE_BECOME_VENDOR    InquiryFormType = "BECOME_VENDOR"
	INQUIRYFORMTYPE_REGISTER_TESTING InquiryFormType = "REGISTER_TESTING"
)

// All allowed values of InquiryFormType enum
var AllowedInquiryFormTypeEnumValues = []InquiryFormType{
	"SUGGEST_PRODUCT",
	"CONTACT_SALES",
	"BECOME_VENDOR",
	"REGISTER_TESTING",
}

func (v *InquiryFormType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InquiryFormType(value)
	for _, existing := range AllowedInquiryFormTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InquiryFormType", value)
}

// NewInquiryFormTypeFromValue returns a pointer to a valid InquiryFormType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInquiryFormTypeFromValue(v string) (*InquiryFormType, error) {
	ev := InquiryFormType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InquiryFormType: valid values are %v", v, AllowedInquiryFormTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InquiryFormType) IsValid() bool {
	for _, existing := range AllowedInquiryFormTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to inquiryFormType value
func (v InquiryFormType) Ptr() *InquiryFormType {
	return &v
}

type NullableInquiryFormType struct {
	value *InquiryFormType
	isSet bool
}

func (v NullableInquiryFormType) Get() *InquiryFormType {
	return v.value
}

func (v *NullableInquiryFormType) Set(val *InquiryFormType) {
	v.value = val
	v.isSet = true
}

func (v NullableInquiryFormType) IsSet() bool {
	return v.isSet
}

func (v *NullableInquiryFormType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInquiryFormType(val *InquiryFormType) *NullableInquiryFormType {
	return &NullableInquiryFormType{value: val, isSet: true}
}

func (v NullableInquiryFormType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInquiryFormType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
