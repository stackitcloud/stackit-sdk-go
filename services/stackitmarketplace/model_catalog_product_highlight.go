/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the CatalogProductHighlight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogProductHighlight{}

// CatalogProductHighlight struct for CatalogProductHighlight
type CatalogProductHighlight struct {
	// The highlight content.
	HighlightContent *string `json:"highlightContent,omitempty"`
	// The highlight icon.
	HighlightIcon *string `json:"highlightIcon,omitempty"`
	// The highlight title.
	HighlightTitle *string `json:"highlightTitle,omitempty"`
}

// NewCatalogProductHighlight instantiates a new CatalogProductHighlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogProductHighlight() *CatalogProductHighlight {
	this := CatalogProductHighlight{}
	return &this
}

// NewCatalogProductHighlightWithDefaults instantiates a new CatalogProductHighlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogProductHighlightWithDefaults() *CatalogProductHighlight {
	this := CatalogProductHighlight{}
	return &this
}

// GetHighlightContent returns the HighlightContent field value if set, zero value otherwise.
func (o *CatalogProductHighlight) GetHighlightContent() *string {
	if o == nil || IsNil(o.HighlightContent) {
		var ret *string
		return ret
	}
	return o.HighlightContent
}

// GetHighlightContentOk returns a tuple with the HighlightContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogProductHighlight) GetHighlightContentOk() (*string, bool) {
	if o == nil || IsNil(o.HighlightContent) {
		return nil, false
	}
	return o.HighlightContent, true
}

// HasHighlightContent returns a boolean if a field has been set.
func (o *CatalogProductHighlight) HasHighlightContent() bool {
	if o != nil && !IsNil(o.HighlightContent) {
		return true
	}

	return false
}

// SetHighlightContent gets a reference to the given string and assigns it to the HighlightContent field.
func (o *CatalogProductHighlight) SetHighlightContent(v *string) {
	o.HighlightContent = v
}

// GetHighlightIcon returns the HighlightIcon field value if set, zero value otherwise.
func (o *CatalogProductHighlight) GetHighlightIcon() *string {
	if o == nil || IsNil(o.HighlightIcon) {
		var ret *string
		return ret
	}
	return o.HighlightIcon
}

// GetHighlightIconOk returns a tuple with the HighlightIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogProductHighlight) GetHighlightIconOk() (*string, bool) {
	if o == nil || IsNil(o.HighlightIcon) {
		return nil, false
	}
	return o.HighlightIcon, true
}

// HasHighlightIcon returns a boolean if a field has been set.
func (o *CatalogProductHighlight) HasHighlightIcon() bool {
	if o != nil && !IsNil(o.HighlightIcon) {
		return true
	}

	return false
}

// SetHighlightIcon gets a reference to the given string and assigns it to the HighlightIcon field.
func (o *CatalogProductHighlight) SetHighlightIcon(v *string) {
	o.HighlightIcon = v
}

// GetHighlightTitle returns the HighlightTitle field value if set, zero value otherwise.
func (o *CatalogProductHighlight) GetHighlightTitle() *string {
	if o == nil || IsNil(o.HighlightTitle) {
		var ret *string
		return ret
	}
	return o.HighlightTitle
}

// GetHighlightTitleOk returns a tuple with the HighlightTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogProductHighlight) GetHighlightTitleOk() (*string, bool) {
	if o == nil || IsNil(o.HighlightTitle) {
		return nil, false
	}
	return o.HighlightTitle, true
}

// HasHighlightTitle returns a boolean if a field has been set.
func (o *CatalogProductHighlight) HasHighlightTitle() bool {
	if o != nil && !IsNil(o.HighlightTitle) {
		return true
	}

	return false
}

// SetHighlightTitle gets a reference to the given string and assigns it to the HighlightTitle field.
func (o *CatalogProductHighlight) SetHighlightTitle(v *string) {
	o.HighlightTitle = v
}

func (o CatalogProductHighlight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HighlightContent) {
		toSerialize["highlightContent"] = o.HighlightContent
	}
	if !IsNil(o.HighlightIcon) {
		toSerialize["highlightIcon"] = o.HighlightIcon
	}
	if !IsNil(o.HighlightTitle) {
		toSerialize["highlightTitle"] = o.HighlightTitle
	}
	return toSerialize, nil
}

type NullableCatalogProductHighlight struct {
	value *CatalogProductHighlight
	isSet bool
}

func (v NullableCatalogProductHighlight) Get() *CatalogProductHighlight {
	return v.value
}

func (v *NullableCatalogProductHighlight) Set(val *CatalogProductHighlight) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogProductHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogProductHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogProductHighlight(val *CatalogProductHighlight) *NullableCatalogProductHighlight {
	return &NullableCatalogProductHighlight{value: val, isSet: true}
}

func (v NullableCatalogProductHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogProductHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
