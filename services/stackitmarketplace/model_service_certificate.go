/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the ServiceCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceCertificate{}

/*
	types and functions for version
*/

// isModel
type ServiceCertificateGetVersionAttributeType = *LocalizedVersion
type ServiceCertificateGetVersionArgType = LocalizedVersion
type ServiceCertificateGetVersionRetType = LocalizedVersion

func getServiceCertificateGetVersionAttributeTypeOk(arg ServiceCertificateGetVersionAttributeType) (ret ServiceCertificateGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceCertificateGetVersionAttributeType(arg *ServiceCertificateGetVersionAttributeType, val ServiceCertificateGetVersionRetType) {
	*arg = &val
}

// ServiceCertificate The related service certificate of the (subscription) product.
type ServiceCertificate struct {
	Version ServiceCertificateGetVersionAttributeType `json:"version,omitempty"`
}

// NewServiceCertificate instantiates a new ServiceCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceCertificate() *ServiceCertificate {
	this := ServiceCertificate{}
	return &this
}

// NewServiceCertificateWithDefaults instantiates a new ServiceCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceCertificateWithDefaults() *ServiceCertificate {
	this := ServiceCertificate{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServiceCertificate) GetVersion() (res ServiceCertificateGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCertificate) GetVersionOk() (ret ServiceCertificateGetVersionRetType, ok bool) {
	return getServiceCertificateGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *ServiceCertificate) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given LocalizedVersion and assigns it to the Version field.
func (o *ServiceCertificate) SetVersion(v ServiceCertificateGetVersionRetType) {
	setServiceCertificateGetVersionAttributeType(&o.Version, v)
}

func (o ServiceCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getServiceCertificateGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableServiceCertificate struct {
	value *ServiceCertificate
	isSet bool
}

func (v NullableServiceCertificate) Get() *ServiceCertificate {
	return v.value
}

func (v *NullableServiceCertificate) Set(val *ServiceCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceCertificate(val *ServiceCertificate) *NullableServiceCertificate {
	return &NullableServiceCertificate{value: val, isSet: true}
}

func (v NullableServiceCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
