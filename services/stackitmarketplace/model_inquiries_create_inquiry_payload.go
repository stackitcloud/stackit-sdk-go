/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
	"fmt"
)

// InquiriesCreateInquiryPayload - struct for InquiriesCreateInquiryPayload
type InquiriesCreateInquiryPayload struct {
	BecomeVendor    *BecomeVendor
	ContactSales    *ContactSales
	RegisterTesting *RegisterTesting
	SuggestProduct  *SuggestProduct
}

// BecomeVendorAsInquiriesCreateInquiryPayload is a convenience function that returns BecomeVendor wrapped in InquiriesCreateInquiryPayload
func BecomeVendorAsInquiriesCreateInquiryPayload(v *BecomeVendor) InquiriesCreateInquiryPayload {
	return InquiriesCreateInquiryPayload{
		BecomeVendor: v,
	}
}

// ContactSalesAsInquiriesCreateInquiryPayload is a convenience function that returns ContactSales wrapped in InquiriesCreateInquiryPayload
func ContactSalesAsInquiriesCreateInquiryPayload(v *ContactSales) InquiriesCreateInquiryPayload {
	return InquiriesCreateInquiryPayload{
		ContactSales: v,
	}
}

// RegisterTestingAsInquiriesCreateInquiryPayload is a convenience function that returns RegisterTesting wrapped in InquiriesCreateInquiryPayload
func RegisterTestingAsInquiriesCreateInquiryPayload(v *RegisterTesting) InquiriesCreateInquiryPayload {
	return InquiriesCreateInquiryPayload{
		RegisterTesting: v,
	}
}

// SuggestProductAsInquiriesCreateInquiryPayload is a convenience function that returns SuggestProduct wrapped in InquiriesCreateInquiryPayload
func SuggestProductAsInquiriesCreateInquiryPayload(v *SuggestProduct) InquiriesCreateInquiryPayload {
	return InquiriesCreateInquiryPayload{
		SuggestProduct: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InquiriesCreateInquiryPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BecomeVendor
	err = newStrictDecoder(data).Decode(&dst.BecomeVendor)
	if err == nil {
		jsonBecomeVendor, _ := json.Marshal(dst.BecomeVendor)
		if string(jsonBecomeVendor) == "{}" { // empty struct
			dst.BecomeVendor = nil
		} else {
			match++
		}
	} else {
		dst.BecomeVendor = nil
	}

	// try to unmarshal data into ContactSales
	err = newStrictDecoder(data).Decode(&dst.ContactSales)
	if err == nil {
		jsonContactSales, _ := json.Marshal(dst.ContactSales)
		if string(jsonContactSales) == "{}" { // empty struct
			dst.ContactSales = nil
		} else {
			match++
		}
	} else {
		dst.ContactSales = nil
	}

	// try to unmarshal data into RegisterTesting
	err = newStrictDecoder(data).Decode(&dst.RegisterTesting)
	if err == nil {
		jsonRegisterTesting, _ := json.Marshal(dst.RegisterTesting)
		if string(jsonRegisterTesting) == "{}" { // empty struct
			dst.RegisterTesting = nil
		} else {
			match++
		}
	} else {
		dst.RegisterTesting = nil
	}

	// try to unmarshal data into SuggestProduct
	err = newStrictDecoder(data).Decode(&dst.SuggestProduct)
	if err == nil {
		jsonSuggestProduct, _ := json.Marshal(dst.SuggestProduct)
		if string(jsonSuggestProduct) == "{}" { // empty struct
			dst.SuggestProduct = nil
		} else {
			match++
		}
	} else {
		dst.SuggestProduct = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BecomeVendor = nil
		dst.ContactSales = nil
		dst.RegisterTesting = nil
		dst.SuggestProduct = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InquiriesCreateInquiryPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InquiriesCreateInquiryPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InquiriesCreateInquiryPayload) MarshalJSON() ([]byte, error) {
	if src.BecomeVendor != nil {
		return json.Marshal(&src.BecomeVendor)
	}

	if src.ContactSales != nil {
		return json.Marshal(&src.ContactSales)
	}

	if src.RegisterTesting != nil {
		return json.Marshal(&src.RegisterTesting)
	}

	if src.SuggestProduct != nil {
		return json.Marshal(&src.SuggestProduct)
	}

	return []byte("{}"), nil // no data in oneOf schemas => empty JSON object
}

// Get the actual instance
func (obj *InquiriesCreateInquiryPayload) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BecomeVendor != nil {
		return obj.BecomeVendor
	}

	if obj.ContactSales != nil {
		return obj.ContactSales
	}

	if obj.RegisterTesting != nil {
		return obj.RegisterTesting
	}

	if obj.SuggestProduct != nil {
		return obj.SuggestProduct
	}

	// all schemas are nil
	return nil
}

type NullableInquiriesCreateInquiryPayload struct {
	value *InquiriesCreateInquiryPayload
	isSet bool
}

func (v NullableInquiriesCreateInquiryPayload) Get() *InquiriesCreateInquiryPayload {
	return v.value
}

func (v *NullableInquiriesCreateInquiryPayload) Set(val *InquiriesCreateInquiryPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableInquiriesCreateInquiryPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableInquiriesCreateInquiryPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInquiriesCreateInquiryPayload(val *InquiriesCreateInquiryPayload) *NullableInquiriesCreateInquiryPayload {
	return &NullableInquiriesCreateInquiryPayload{value: val, isSet: true}
}

func (v NullableInquiriesCreateInquiryPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInquiriesCreateInquiryPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
