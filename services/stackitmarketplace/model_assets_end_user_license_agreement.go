/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
)

// checks if the AssetsEndUserLicenseAgreement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetsEndUserLicenseAgreement{}

/*
	types and functions for version
*/

// isModel
type AssetsEndUserLicenseAgreementGetVersionAttributeType = *LocalizedVersion
type AssetsEndUserLicenseAgreementGetVersionArgType = LocalizedVersion
type AssetsEndUserLicenseAgreementGetVersionRetType = LocalizedVersion

func getAssetsEndUserLicenseAgreementGetVersionAttributeTypeOk(arg AssetsEndUserLicenseAgreementGetVersionAttributeType) (ret AssetsEndUserLicenseAgreementGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAssetsEndUserLicenseAgreementGetVersionAttributeType(arg *AssetsEndUserLicenseAgreementGetVersionAttributeType, val AssetsEndUserLicenseAgreementGetVersionRetType) {
	*arg = &val
}

// AssetsEndUserLicenseAgreement The related end user license agreement of the (subscription) product.
type AssetsEndUserLicenseAgreement struct {
	Version AssetsEndUserLicenseAgreementGetVersionAttributeType `json:"version,omitempty"`
}

// NewAssetsEndUserLicenseAgreement instantiates a new AssetsEndUserLicenseAgreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetsEndUserLicenseAgreement() *AssetsEndUserLicenseAgreement {
	this := AssetsEndUserLicenseAgreement{}
	return &this
}

// NewAssetsEndUserLicenseAgreementWithDefaults instantiates a new AssetsEndUserLicenseAgreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsEndUserLicenseAgreementWithDefaults() *AssetsEndUserLicenseAgreement {
	this := AssetsEndUserLicenseAgreement{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AssetsEndUserLicenseAgreement) GetVersion() (res AssetsEndUserLicenseAgreementGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsEndUserLicenseAgreement) GetVersionOk() (ret AssetsEndUserLicenseAgreementGetVersionRetType, ok bool) {
	return getAssetsEndUserLicenseAgreementGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *AssetsEndUserLicenseAgreement) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given LocalizedVersion and assigns it to the Version field.
func (o *AssetsEndUserLicenseAgreement) SetVersion(v AssetsEndUserLicenseAgreementGetVersionRetType) {
	setAssetsEndUserLicenseAgreementGetVersionAttributeType(&o.Version, v)
}

func (o AssetsEndUserLicenseAgreement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAssetsEndUserLicenseAgreementGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableAssetsEndUserLicenseAgreement struct {
	value *AssetsEndUserLicenseAgreement
	isSet bool
}

func (v NullableAssetsEndUserLicenseAgreement) Get() *AssetsEndUserLicenseAgreement {
	return v.value
}

func (v *NullableAssetsEndUserLicenseAgreement) Set(val *AssetsEndUserLicenseAgreement) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetsEndUserLicenseAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetsEndUserLicenseAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetsEndUserLicenseAgreement(val *AssetsEndUserLicenseAgreement) *NullableAssetsEndUserLicenseAgreement {
	return &NullableAssetsEndUserLicenseAgreement{value: val, isSet: true}
}

func (v NullableAssetsEndUserLicenseAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetsEndUserLicenseAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
