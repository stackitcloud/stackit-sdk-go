/*
STACKIT Marketplace API

API to manage STACKIT Marketplace.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackitmarketplace

import (
	"encoding/json"
	"fmt"
)

// checks if the NoticePeriod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoticePeriod{}

/*
	types and functions for type
*/

// isEnum

// NoticePeriodTypes The notice period type.
// value type for enums
type NoticePeriodTypes string

// List of Type
const (
	NOTICEPERIODTYPE_SAME_DAY NoticePeriodTypes = "SAME_DAY"
	NOTICEPERIODTYPE_DAYS     NoticePeriodTypes = "DAYS"
	NOTICEPERIODTYPE_MONTHS   NoticePeriodTypes = "MONTHS"
)

// All allowed values of NoticePeriod enum
var AllowedNoticePeriodTypesEnumValues = []NoticePeriodTypes{
	"SAME_DAY",
	"DAYS",
	"MONTHS",
}

func (v *NoticePeriodTypes) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson NoticePeriodTypes
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := NoticePeriodTypes(value)
	for _, existing := range AllowedNoticePeriodTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NoticePeriod", value)
}

// NewNoticePeriodTypesFromValue returns a pointer to a valid NoticePeriodTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNoticePeriodTypesFromValue(v NoticePeriodTypes) (*NoticePeriodTypes, error) {
	ev := NoticePeriodTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NoticePeriodTypes: valid values are %v", v, AllowedNoticePeriodTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NoticePeriodTypes) IsValid() bool {
	for _, existing := range AllowedNoticePeriodTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v NoticePeriodTypes) Ptr() *NoticePeriodTypes {
	return &v
}

type NullableNoticePeriodTypes struct {
	value *NoticePeriodTypes
	isSet bool
}

func (v NullableNoticePeriodTypes) Get() *NoticePeriodTypes {
	return v.value
}

func (v *NullableNoticePeriodTypes) Set(val *NoticePeriodTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableNoticePeriodTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableNoticePeriodTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoticePeriodTypes(val *NoticePeriodTypes) *NullableNoticePeriodTypes {
	return &NullableNoticePeriodTypes{value: val, isSet: true}
}

func (v NullableNoticePeriodTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoticePeriodTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NoticePeriodGetTypeAttributeType = *NoticePeriodTypes
type NoticePeriodGetTypeArgType = NoticePeriodTypes
type NoticePeriodGetTypeRetType = NoticePeriodTypes

func getNoticePeriodGetTypeAttributeTypeOk(arg NoticePeriodGetTypeAttributeType) (ret NoticePeriodGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNoticePeriodGetTypeAttributeType(arg *NoticePeriodGetTypeAttributeType, val NoticePeriodGetTypeRetType) {
	*arg = &val
}

/*
	types and functions for value
*/

// isInteger
type NoticePeriodGetValueAttributeType = *int64
type NoticePeriodGetValueArgType = int64
type NoticePeriodGetValueRetType = int64

func getNoticePeriodGetValueAttributeTypeOk(arg NoticePeriodGetValueAttributeType) (ret NoticePeriodGetValueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNoticePeriodGetValueAttributeType(arg *NoticePeriodGetValueAttributeType, val NoticePeriodGetValueRetType) {
	*arg = &val
}

// NoticePeriod The notice period for a product and plan.
type NoticePeriod struct {
	// The notice period type.
	Type NoticePeriodGetTypeAttributeType `json:"type,omitempty"`
	// The value of the corresponding type. Omitted for _SAME_DAY_.
	Value NoticePeriodGetValueAttributeType `json:"value,omitempty"`
}

// NewNoticePeriod instantiates a new NoticePeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoticePeriod() *NoticePeriod {
	this := NoticePeriod{}
	return &this
}

// NewNoticePeriodWithDefaults instantiates a new NoticePeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoticePeriodWithDefaults() *NoticePeriod {
	this := NoticePeriod{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NoticePeriod) GetType() (res NoticePeriodGetTypeRetType) {
	res, _ = o.GetTypeOk()
	return
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoticePeriod) GetTypeOk() (ret NoticePeriodGetTypeRetType, ok bool) {
	return getNoticePeriodGetTypeAttributeTypeOk(o.Type)
}

// HasType returns a boolean if a field has been set.
func (o *NoticePeriod) HasType() bool {
	_, ok := o.GetTypeOk()
	return ok
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NoticePeriod) SetType(v NoticePeriodGetTypeRetType) {
	setNoticePeriodGetTypeAttributeType(&o.Type, v)
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *NoticePeriod) GetValue() (res NoticePeriodGetValueRetType) {
	res, _ = o.GetValueOk()
	return
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoticePeriod) GetValueOk() (ret NoticePeriodGetValueRetType, ok bool) {
	return getNoticePeriodGetValueAttributeTypeOk(o.Value)
}

// HasValue returns a boolean if a field has been set.
func (o *NoticePeriod) HasValue() bool {
	_, ok := o.GetValueOk()
	return ok
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *NoticePeriod) SetValue(v NoticePeriodGetValueRetType) {
	setNoticePeriodGetValueAttributeType(&o.Value, v)
}

func (o NoticePeriod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getNoticePeriodGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	if val, ok := getNoticePeriodGetValueAttributeTypeOk(o.Value); ok {
		toSerialize["Value"] = val
	}
	return toSerialize, nil
}

type NullableNoticePeriod struct {
	value *NoticePeriod
	isSet bool
}

func (v NullableNoticePeriod) Get() *NoticePeriod {
	return v.value
}

func (v *NullableNoticePeriod) Set(val *NoticePeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableNoticePeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableNoticePeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoticePeriod(val *NoticePeriod) *NullableNoticePeriod {
	return &NullableNoticePeriod{value: val, isSet: true}
}

func (v NullableNoticePeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoticePeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
