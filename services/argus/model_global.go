/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// checks if the Global type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Global{}

// Global struct for Global
type Global struct {
	OpsgenieApiKey   *string `json:"opsgenieApiKey,omitempty"`
	OpsgenieApiUrl   *string `json:"opsgenieApiUrl,omitempty"`
	ResolveTimeout   *string `json:"resolveTimeout,omitempty"`
	SmtpAuthIdentity *string `json:"smtpAuthIdentity,omitempty"`
	SmtpAuthPassword *string `json:"smtpAuthPassword,omitempty"`
	SmtpAuthUsername *string `json:"smtpAuthUsername,omitempty"`
	SmtpFrom         *string `json:"smtpFrom,omitempty"`
	SmtpSmarthost    *string `json:"smtpSmarthost,omitempty"`
}

// NewGlobal instantiates a new Global object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobal() *Global {
	this := Global{}
	var resolveTimeout string = "5m"
	this.ResolveTimeout = &resolveTimeout
	return &this
}

// NewGlobalWithDefaults instantiates a new Global object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalWithDefaults() *Global {
	this := Global{}
	var resolveTimeout string = "5m"
	this.ResolveTimeout = &resolveTimeout
	return &this
}

// GetOpsgenieApiKey returns the OpsgenieApiKey field value if set, zero value otherwise.
func (o *Global) GetOpsgenieApiKey() *string {
	if o == nil || IsNil(o.OpsgenieApiKey) {
		var ret *string
		return ret
	}
	return o.OpsgenieApiKey
}

// GetOpsgenieApiKeyOk returns a tuple with the OpsgenieApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetOpsgenieApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OpsgenieApiKey) {
		return nil, false
	}
	return o.OpsgenieApiKey, true
}

// HasOpsgenieApiKey returns a boolean if a field has been set.
func (o *Global) HasOpsgenieApiKey() bool {
	if o != nil && !IsNil(o.OpsgenieApiKey) {
		return true
	}

	return false
}

// SetOpsgenieApiKey gets a reference to the given string and assigns it to the OpsgenieApiKey field.
func (o *Global) SetOpsgenieApiKey(v *string) {
	o.OpsgenieApiKey = v
}

// GetOpsgenieApiUrl returns the OpsgenieApiUrl field value if set, zero value otherwise.
func (o *Global) GetOpsgenieApiUrl() *string {
	if o == nil || IsNil(o.OpsgenieApiUrl) {
		var ret *string
		return ret
	}
	return o.OpsgenieApiUrl
}

// GetOpsgenieApiUrlOk returns a tuple with the OpsgenieApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetOpsgenieApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OpsgenieApiUrl) {
		return nil, false
	}
	return o.OpsgenieApiUrl, true
}

// HasOpsgenieApiUrl returns a boolean if a field has been set.
func (o *Global) HasOpsgenieApiUrl() bool {
	if o != nil && !IsNil(o.OpsgenieApiUrl) {
		return true
	}

	return false
}

// SetOpsgenieApiUrl gets a reference to the given string and assigns it to the OpsgenieApiUrl field.
func (o *Global) SetOpsgenieApiUrl(v *string) {
	o.OpsgenieApiUrl = v
}

// GetResolveTimeout returns the ResolveTimeout field value if set, zero value otherwise.
func (o *Global) GetResolveTimeout() *string {
	if o == nil || IsNil(o.ResolveTimeout) {
		var ret *string
		return ret
	}
	return o.ResolveTimeout
}

// GetResolveTimeoutOk returns a tuple with the ResolveTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetResolveTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.ResolveTimeout) {
		return nil, false
	}
	return o.ResolveTimeout, true
}

// HasResolveTimeout returns a boolean if a field has been set.
func (o *Global) HasResolveTimeout() bool {
	if o != nil && !IsNil(o.ResolveTimeout) {
		return true
	}

	return false
}

// SetResolveTimeout gets a reference to the given string and assigns it to the ResolveTimeout field.
func (o *Global) SetResolveTimeout(v *string) {
	o.ResolveTimeout = v
}

// GetSmtpAuthIdentity returns the SmtpAuthIdentity field value if set, zero value otherwise.
func (o *Global) GetSmtpAuthIdentity() *string {
	if o == nil || IsNil(o.SmtpAuthIdentity) {
		var ret *string
		return ret
	}
	return o.SmtpAuthIdentity
}

// GetSmtpAuthIdentityOk returns a tuple with the SmtpAuthIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetSmtpAuthIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpAuthIdentity) {
		return nil, false
	}
	return o.SmtpAuthIdentity, true
}

// HasSmtpAuthIdentity returns a boolean if a field has been set.
func (o *Global) HasSmtpAuthIdentity() bool {
	if o != nil && !IsNil(o.SmtpAuthIdentity) {
		return true
	}

	return false
}

// SetSmtpAuthIdentity gets a reference to the given string and assigns it to the SmtpAuthIdentity field.
func (o *Global) SetSmtpAuthIdentity(v *string) {
	o.SmtpAuthIdentity = v
}

// GetSmtpAuthPassword returns the SmtpAuthPassword field value if set, zero value otherwise.
func (o *Global) GetSmtpAuthPassword() *string {
	if o == nil || IsNil(o.SmtpAuthPassword) {
		var ret *string
		return ret
	}
	return o.SmtpAuthPassword
}

// GetSmtpAuthPasswordOk returns a tuple with the SmtpAuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetSmtpAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpAuthPassword) {
		return nil, false
	}
	return o.SmtpAuthPassword, true
}

// HasSmtpAuthPassword returns a boolean if a field has been set.
func (o *Global) HasSmtpAuthPassword() bool {
	if o != nil && !IsNil(o.SmtpAuthPassword) {
		return true
	}

	return false
}

// SetSmtpAuthPassword gets a reference to the given string and assigns it to the SmtpAuthPassword field.
func (o *Global) SetSmtpAuthPassword(v *string) {
	o.SmtpAuthPassword = v
}

// GetSmtpAuthUsername returns the SmtpAuthUsername field value if set, zero value otherwise.
func (o *Global) GetSmtpAuthUsername() *string {
	if o == nil || IsNil(o.SmtpAuthUsername) {
		var ret *string
		return ret
	}
	return o.SmtpAuthUsername
}

// GetSmtpAuthUsernameOk returns a tuple with the SmtpAuthUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetSmtpAuthUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpAuthUsername) {
		return nil, false
	}
	return o.SmtpAuthUsername, true
}

// HasSmtpAuthUsername returns a boolean if a field has been set.
func (o *Global) HasSmtpAuthUsername() bool {
	if o != nil && !IsNil(o.SmtpAuthUsername) {
		return true
	}

	return false
}

// SetSmtpAuthUsername gets a reference to the given string and assigns it to the SmtpAuthUsername field.
func (o *Global) SetSmtpAuthUsername(v *string) {
	o.SmtpAuthUsername = v
}

// GetSmtpFrom returns the SmtpFrom field value if set, zero value otherwise.
func (o *Global) GetSmtpFrom() *string {
	if o == nil || IsNil(o.SmtpFrom) {
		var ret *string
		return ret
	}
	return o.SmtpFrom
}

// GetSmtpFromOk returns a tuple with the SmtpFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetSmtpFromOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpFrom) {
		return nil, false
	}
	return o.SmtpFrom, true
}

// HasSmtpFrom returns a boolean if a field has been set.
func (o *Global) HasSmtpFrom() bool {
	if o != nil && !IsNil(o.SmtpFrom) {
		return true
	}

	return false
}

// SetSmtpFrom gets a reference to the given string and assigns it to the SmtpFrom field.
func (o *Global) SetSmtpFrom(v *string) {
	o.SmtpFrom = v
}

// GetSmtpSmarthost returns the SmtpSmarthost field value if set, zero value otherwise.
func (o *Global) GetSmtpSmarthost() *string {
	if o == nil || IsNil(o.SmtpSmarthost) {
		var ret *string
		return ret
	}
	return o.SmtpSmarthost
}

// GetSmtpSmarthostOk returns a tuple with the SmtpSmarthost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetSmtpSmarthostOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpSmarthost) {
		return nil, false
	}
	return o.SmtpSmarthost, true
}

// HasSmtpSmarthost returns a boolean if a field has been set.
func (o *Global) HasSmtpSmarthost() bool {
	if o != nil && !IsNil(o.SmtpSmarthost) {
		return true
	}

	return false
}

// SetSmtpSmarthost gets a reference to the given string and assigns it to the SmtpSmarthost field.
func (o *Global) SetSmtpSmarthost(v *string) {
	o.SmtpSmarthost = v
}

func (o Global) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpsgenieApiKey) {
		toSerialize["opsgenieApiKey"] = o.OpsgenieApiKey
	}
	if !IsNil(o.OpsgenieApiUrl) {
		toSerialize["opsgenieApiUrl"] = o.OpsgenieApiUrl
	}
	if !IsNil(o.ResolveTimeout) {
		toSerialize["resolveTimeout"] = o.ResolveTimeout
	}
	if !IsNil(o.SmtpAuthIdentity) {
		toSerialize["smtpAuthIdentity"] = o.SmtpAuthIdentity
	}
	if !IsNil(o.SmtpAuthPassword) {
		toSerialize["smtpAuthPassword"] = o.SmtpAuthPassword
	}
	if !IsNil(o.SmtpAuthUsername) {
		toSerialize["smtpAuthUsername"] = o.SmtpAuthUsername
	}
	if !IsNil(o.SmtpFrom) {
		toSerialize["smtpFrom"] = o.SmtpFrom
	}
	if !IsNil(o.SmtpSmarthost) {
		toSerialize["smtpSmarthost"] = o.SmtpSmarthost
	}
	return toSerialize, nil
}

type NullableGlobal struct {
	value *Global
	isSet bool
}

func (v NullableGlobal) Get() *Global {
	return v.value
}

func (v *NullableGlobal) Set(val *Global) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobal(val *Global) *NullableGlobal {
	return &NullableGlobal{value: val, isSet: true}
}

func (v NullableGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
