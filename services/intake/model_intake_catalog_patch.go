/*
STACKIT Intake API

This API provides endpoints for managing Intakes.

API version: 1beta.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intake

import (
	"encoding/json"
)

// checks if the IntakeCatalogPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntakeCatalogPatch{}

/*
	types and functions for auth
*/

// isModel
type IntakeCatalogPatchGetAuthAttributeType = *CatalogAuthPatch
type IntakeCatalogPatchGetAuthArgType = CatalogAuthPatch
type IntakeCatalogPatchGetAuthRetType = CatalogAuthPatch

func getIntakeCatalogPatchGetAuthAttributeTypeOk(arg IntakeCatalogPatchGetAuthAttributeType) (ret IntakeCatalogPatchGetAuthRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeCatalogPatchGetAuthAttributeType(arg *IntakeCatalogPatchGetAuthAttributeType, val IntakeCatalogPatchGetAuthRetType) {
	*arg = &val
}

/*
	types and functions for namespace
*/

// isNotNullableString
type IntakeCatalogPatchGetNamespaceAttributeType = *string

func getIntakeCatalogPatchGetNamespaceAttributeTypeOk(arg IntakeCatalogPatchGetNamespaceAttributeType) (ret IntakeCatalogPatchGetNamespaceRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeCatalogPatchGetNamespaceAttributeType(arg *IntakeCatalogPatchGetNamespaceAttributeType, val IntakeCatalogPatchGetNamespaceRetType) {
	*arg = &val
}

type IntakeCatalogPatchGetNamespaceArgType = string
type IntakeCatalogPatchGetNamespaceRetType = string

/*
	types and functions for tableName
*/

// isNotNullableString
type IntakeCatalogPatchGetTableNameAttributeType = *string

func getIntakeCatalogPatchGetTableNameAttributeTypeOk(arg IntakeCatalogPatchGetTableNameAttributeType) (ret IntakeCatalogPatchGetTableNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeCatalogPatchGetTableNameAttributeType(arg *IntakeCatalogPatchGetTableNameAttributeType, val IntakeCatalogPatchGetTableNameRetType) {
	*arg = &val
}

type IntakeCatalogPatchGetTableNameArgType = string
type IntakeCatalogPatchGetTableNameRetType = string

/*
	types and functions for uri
*/

// isNotNullableString
type IntakeCatalogPatchGetUriAttributeType = *string

func getIntakeCatalogPatchGetUriAttributeTypeOk(arg IntakeCatalogPatchGetUriAttributeType) (ret IntakeCatalogPatchGetUriRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeCatalogPatchGetUriAttributeType(arg *IntakeCatalogPatchGetUriAttributeType, val IntakeCatalogPatchGetUriRetType) {
	*arg = &val
}

type IntakeCatalogPatchGetUriArgType = string
type IntakeCatalogPatchGetUriRetType = string

/*
	types and functions for warehouse
*/

// isNotNullableString
type IntakeCatalogPatchGetWarehouseAttributeType = *string

func getIntakeCatalogPatchGetWarehouseAttributeTypeOk(arg IntakeCatalogPatchGetWarehouseAttributeType) (ret IntakeCatalogPatchGetWarehouseRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeCatalogPatchGetWarehouseAttributeType(arg *IntakeCatalogPatchGetWarehouseAttributeType, val IntakeCatalogPatchGetWarehouseRetType) {
	*arg = &val
}

type IntakeCatalogPatchGetWarehouseArgType = string
type IntakeCatalogPatchGetWarehouseRetType = string

// IntakeCatalogPatch The Iceberg catalog configuration
type IntakeCatalogPatch struct {
	Auth IntakeCatalogPatchGetAuthAttributeType `json:"auth,omitempty"`
	// The namespace to which data shall be written. It will be automatically created, if it does not exist.
	Namespace IntakeCatalogPatchGetNamespaceAttributeType `json:"namespace,omitempty"`
	// The table name is a short name chosen by the user to identify the table in Iceberg.
	TableName IntakeCatalogPatchGetTableNameAttributeType `json:"tableName,omitempty"`
	// The URI to the Iceberg catalog endpoint
	Uri IntakeCatalogPatchGetUriAttributeType `json:"uri,omitempty"`
	// The Iceberg warehouse to connect to, required when the catalog has no default warehouse configured.
	Warehouse IntakeCatalogPatchGetWarehouseAttributeType `json:"warehouse,omitempty"`
}

// NewIntakeCatalogPatch instantiates a new IntakeCatalogPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntakeCatalogPatch() *IntakeCatalogPatch {
	this := IntakeCatalogPatch{}
	return &this
}

// NewIntakeCatalogPatchWithDefaults instantiates a new IntakeCatalogPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntakeCatalogPatchWithDefaults() *IntakeCatalogPatch {
	this := IntakeCatalogPatch{}
	var namespace string = "intake"
	this.Namespace = &namespace
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *IntakeCatalogPatch) GetAuth() (res IntakeCatalogPatchGetAuthRetType) {
	res, _ = o.GetAuthOk()
	return
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeCatalogPatch) GetAuthOk() (ret IntakeCatalogPatchGetAuthRetType, ok bool) {
	return getIntakeCatalogPatchGetAuthAttributeTypeOk(o.Auth)
}

// HasAuth returns a boolean if a field has been set.
func (o *IntakeCatalogPatch) HasAuth() bool {
	_, ok := o.GetAuthOk()
	return ok
}

// SetAuth gets a reference to the given CatalogAuthPatch and assigns it to the Auth field.
func (o *IntakeCatalogPatch) SetAuth(v IntakeCatalogPatchGetAuthRetType) {
	setIntakeCatalogPatchGetAuthAttributeType(&o.Auth, v)
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IntakeCatalogPatch) GetNamespace() (res IntakeCatalogPatchGetNamespaceRetType) {
	res, _ = o.GetNamespaceOk()
	return
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeCatalogPatch) GetNamespaceOk() (ret IntakeCatalogPatchGetNamespaceRetType, ok bool) {
	return getIntakeCatalogPatchGetNamespaceAttributeTypeOk(o.Namespace)
}

// HasNamespace returns a boolean if a field has been set.
func (o *IntakeCatalogPatch) HasNamespace() bool {
	_, ok := o.GetNamespaceOk()
	return ok
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IntakeCatalogPatch) SetNamespace(v IntakeCatalogPatchGetNamespaceRetType) {
	setIntakeCatalogPatchGetNamespaceAttributeType(&o.Namespace, v)
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *IntakeCatalogPatch) GetTableName() (res IntakeCatalogPatchGetTableNameRetType) {
	res, _ = o.GetTableNameOk()
	return
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeCatalogPatch) GetTableNameOk() (ret IntakeCatalogPatchGetTableNameRetType, ok bool) {
	return getIntakeCatalogPatchGetTableNameAttributeTypeOk(o.TableName)
}

// HasTableName returns a boolean if a field has been set.
func (o *IntakeCatalogPatch) HasTableName() bool {
	_, ok := o.GetTableNameOk()
	return ok
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *IntakeCatalogPatch) SetTableName(v IntakeCatalogPatchGetTableNameRetType) {
	setIntakeCatalogPatchGetTableNameAttributeType(&o.TableName, v)
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *IntakeCatalogPatch) GetUri() (res IntakeCatalogPatchGetUriRetType) {
	res, _ = o.GetUriOk()
	return
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeCatalogPatch) GetUriOk() (ret IntakeCatalogPatchGetUriRetType, ok bool) {
	return getIntakeCatalogPatchGetUriAttributeTypeOk(o.Uri)
}

// HasUri returns a boolean if a field has been set.
func (o *IntakeCatalogPatch) HasUri() bool {
	_, ok := o.GetUriOk()
	return ok
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *IntakeCatalogPatch) SetUri(v IntakeCatalogPatchGetUriRetType) {
	setIntakeCatalogPatchGetUriAttributeType(&o.Uri, v)
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *IntakeCatalogPatch) GetWarehouse() (res IntakeCatalogPatchGetWarehouseRetType) {
	res, _ = o.GetWarehouseOk()
	return
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeCatalogPatch) GetWarehouseOk() (ret IntakeCatalogPatchGetWarehouseRetType, ok bool) {
	return getIntakeCatalogPatchGetWarehouseAttributeTypeOk(o.Warehouse)
}

// HasWarehouse returns a boolean if a field has been set.
func (o *IntakeCatalogPatch) HasWarehouse() bool {
	_, ok := o.GetWarehouseOk()
	return ok
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *IntakeCatalogPatch) SetWarehouse(v IntakeCatalogPatchGetWarehouseRetType) {
	setIntakeCatalogPatchGetWarehouseAttributeType(&o.Warehouse, v)
}

func (o IntakeCatalogPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getIntakeCatalogPatchGetAuthAttributeTypeOk(o.Auth); ok {
		toSerialize["Auth"] = val
	}
	if val, ok := getIntakeCatalogPatchGetNamespaceAttributeTypeOk(o.Namespace); ok {
		toSerialize["Namespace"] = val
	}
	if val, ok := getIntakeCatalogPatchGetTableNameAttributeTypeOk(o.TableName); ok {
		toSerialize["TableName"] = val
	}
	if val, ok := getIntakeCatalogPatchGetUriAttributeTypeOk(o.Uri); ok {
		toSerialize["Uri"] = val
	}
	if val, ok := getIntakeCatalogPatchGetWarehouseAttributeTypeOk(o.Warehouse); ok {
		toSerialize["Warehouse"] = val
	}
	return toSerialize, nil
}

type NullableIntakeCatalogPatch struct {
	value *IntakeCatalogPatch
	isSet bool
}

func (v NullableIntakeCatalogPatch) Get() *IntakeCatalogPatch {
	return v.value
}

func (v *NullableIntakeCatalogPatch) Set(val *IntakeCatalogPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableIntakeCatalogPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableIntakeCatalogPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntakeCatalogPatch(val *IntakeCatalogPatch) *NullableIntakeCatalogPatch {
	return &NullableIntakeCatalogPatch{value: val, isSet: true}
}

func (v NullableIntakeCatalogPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntakeCatalogPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
