/*
STACKIT Intake API

This API provides endpoints for managing Intakes.

API version: 1beta.3.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intake

import (
	"encoding/json"
	"fmt"
)

// PartitioningType The target table's partitioning. * `none` disables partitioning, the default. * `intake-time` configures daily partitioning based on the automatically created ingestion time column `__intake_ts`. * `manual` allows arbitrary Iceberg partitioning expression to be set via `partitionBy`.
type PartitioningType string

// List of partitioningType
const (
	PARTITIONINGTYPE_NONE        PartitioningType = "none"
	PARTITIONINGTYPE_INTAKE_TIME PartitioningType = "intake-time"
	PARTITIONINGTYPE_MANUAL      PartitioningType = "manual"
)

// All allowed values of PartitioningType enum
var AllowedPartitioningTypeEnumValues = []PartitioningType{
	"none",
	"intake-time",
	"manual",
}

func (v *PartitioningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := PartitioningType(value)
	for _, existing := range AllowedPartitioningTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PartitioningType", value)
}

// NewPartitioningTypeFromValue returns a pointer to a valid PartitioningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartitioningTypeFromValue(v string) (*PartitioningType, error) {
	ev := PartitioningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PartitioningType: valid values are %v", v, AllowedPartitioningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PartitioningType) IsValid() bool {
	for _, existing := range AllowedPartitioningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to partitioningType value
func (v PartitioningType) Ptr() *PartitioningType {
	return &v
}

type NullablePartitioningType struct {
	value *PartitioningType
	isSet bool
}

func (v NullablePartitioningType) Get() *PartitioningType {
	return v.value
}

func (v *NullablePartitioningType) Set(val *PartitioningType) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitioningType) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitioningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitioningType(val *PartitioningType) *NullablePartitioningType {
	return &NullablePartitioningType{value: val, isSet: true}
}

func (v NullablePartitioningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitioningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
