/*
STACKIT Intake API

This API provides endpoints for managing Intakes.

API version: 1beta.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intake

import (
	"encoding/json"
)

// checks if the UpdateIntakeUserPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIntakeUserPayload{}

/*
	types and functions for description
*/

// isNotNullableString
type UpdateIntakeUserPayloadGetDescriptionAttributeType = *string

func getUpdateIntakeUserPayloadGetDescriptionAttributeTypeOk(arg UpdateIntakeUserPayloadGetDescriptionAttributeType) (ret UpdateIntakeUserPayloadGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateIntakeUserPayloadGetDescriptionAttributeType(arg *UpdateIntakeUserPayloadGetDescriptionAttributeType, val UpdateIntakeUserPayloadGetDescriptionRetType) {
	*arg = &val
}

type UpdateIntakeUserPayloadGetDescriptionArgType = string
type UpdateIntakeUserPayloadGetDescriptionRetType = string

/*
	types and functions for displayName
*/

// isNotNullableString
type UpdateIntakeUserPayloadGetDisplayNameAttributeType = *string

func getUpdateIntakeUserPayloadGetDisplayNameAttributeTypeOk(arg UpdateIntakeUserPayloadGetDisplayNameAttributeType) (ret UpdateIntakeUserPayloadGetDisplayNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateIntakeUserPayloadGetDisplayNameAttributeType(arg *UpdateIntakeUserPayloadGetDisplayNameAttributeType, val UpdateIntakeUserPayloadGetDisplayNameRetType) {
	*arg = &val
}

type UpdateIntakeUserPayloadGetDisplayNameArgType = string
type UpdateIntakeUserPayloadGetDisplayNameRetType = string

/*
	types and functions for labels
*/

// isContainer
type UpdateIntakeUserPayloadGetLabelsAttributeType = *map[string]string
type UpdateIntakeUserPayloadGetLabelsArgType = *map[string]string
type UpdateIntakeUserPayloadGetLabelsRetType = *map[string]string

func getUpdateIntakeUserPayloadGetLabelsAttributeTypeOk(arg UpdateIntakeUserPayloadGetLabelsAttributeType) (ret UpdateIntakeUserPayloadGetLabelsRetType, ok bool) {
	if arg == nil {
		return nil, false
	}
	return arg, true
}

func setUpdateIntakeUserPayloadGetLabelsAttributeType(arg *UpdateIntakeUserPayloadGetLabelsAttributeType, val UpdateIntakeUserPayloadGetLabelsRetType) {
	*arg = val
}

/*
	types and functions for password
*/

// isNotNullableString
type UpdateIntakeUserPayloadGetPasswordAttributeType = *string

func getUpdateIntakeUserPayloadGetPasswordAttributeTypeOk(arg UpdateIntakeUserPayloadGetPasswordAttributeType) (ret UpdateIntakeUserPayloadGetPasswordRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateIntakeUserPayloadGetPasswordAttributeType(arg *UpdateIntakeUserPayloadGetPasswordAttributeType, val UpdateIntakeUserPayloadGetPasswordRetType) {
	*arg = &val
}

type UpdateIntakeUserPayloadGetPasswordArgType = string
type UpdateIntakeUserPayloadGetPasswordRetType = string

/*
	types and functions for type
*/

// isEnumRef
type UpdateIntakeUserPayloadGetTypeAttributeType = *UserType
type UpdateIntakeUserPayloadGetTypeArgType = UserType
type UpdateIntakeUserPayloadGetTypeRetType = UserType

func getUpdateIntakeUserPayloadGetTypeAttributeTypeOk(arg UpdateIntakeUserPayloadGetTypeAttributeType) (ret UpdateIntakeUserPayloadGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateIntakeUserPayloadGetTypeAttributeType(arg *UpdateIntakeUserPayloadGetTypeAttributeType, val UpdateIntakeUserPayloadGetTypeRetType) {
	*arg = &val
}

// UpdateIntakeUserPayload struct for UpdateIntakeUserPayload
type UpdateIntakeUserPayload struct {
	// The description is a longer text chosen by the user to provide more context for the resource.
	Description UpdateIntakeUserPayloadGetDescriptionAttributeType `json:"description,omitempty"`
	// The display name is a short name chosen by the user to identify the resource.
	DisplayName UpdateIntakeUserPayloadGetDisplayNameAttributeType `json:"displayName,omitempty"`
	// Labels are key-value pairs associated with the resource. To update labels:   - Provide a new set of key-value pairs to replace the existing labels.   - Send empty object `{}` to remove all labels.   - Omit this field to leave the labels unchanged.
	Labels UpdateIntakeUserPayloadGetLabelsAttributeType `json:"labels,omitempty"`
	// A password chosen by the user.
	Password UpdateIntakeUserPayloadGetPasswordAttributeType `json:"password,omitempty"`
	Type     UpdateIntakeUserPayloadGetTypeAttributeType     `json:"type,omitempty"`
}

// NewUpdateIntakeUserPayload instantiates a new UpdateIntakeUserPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIntakeUserPayload() *UpdateIntakeUserPayload {
	this := UpdateIntakeUserPayload{}
	return &this
}

// NewUpdateIntakeUserPayloadWithDefaults instantiates a new UpdateIntakeUserPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIntakeUserPayloadWithDefaults() *UpdateIntakeUserPayload {
	this := UpdateIntakeUserPayload{}
	var types UserType = USERTYPE_INTAKE
	this.Type = &types
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateIntakeUserPayload) GetDescription() (res UpdateIntakeUserPayloadGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntakeUserPayload) GetDescriptionOk() (ret UpdateIntakeUserPayloadGetDescriptionRetType, ok bool) {
	return getUpdateIntakeUserPayloadGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateIntakeUserPayload) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateIntakeUserPayload) SetDescription(v UpdateIntakeUserPayloadGetDescriptionRetType) {
	setUpdateIntakeUserPayloadGetDescriptionAttributeType(&o.Description, v)
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateIntakeUserPayload) GetDisplayName() (res UpdateIntakeUserPayloadGetDisplayNameRetType) {
	res, _ = o.GetDisplayNameOk()
	return
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntakeUserPayload) GetDisplayNameOk() (ret UpdateIntakeUserPayloadGetDisplayNameRetType, ok bool) {
	return getUpdateIntakeUserPayloadGetDisplayNameAttributeTypeOk(o.DisplayName)
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateIntakeUserPayload) HasDisplayName() bool {
	_, ok := o.GetDisplayNameOk()
	return ok
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateIntakeUserPayload) SetDisplayName(v UpdateIntakeUserPayloadGetDisplayNameRetType) {
	setUpdateIntakeUserPayloadGetDisplayNameAttributeType(&o.DisplayName, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIntakeUserPayload) GetLabels() (res UpdateIntakeUserPayloadGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIntakeUserPayload) GetLabelsOk() (ret UpdateIntakeUserPayloadGetLabelsRetType, ok bool) {
	return getUpdateIntakeUserPayloadGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateIntakeUserPayload) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *UpdateIntakeUserPayload) SetLabels(v UpdateIntakeUserPayloadGetLabelsRetType) {
	setUpdateIntakeUserPayloadGetLabelsAttributeType(&o.Labels, v)
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateIntakeUserPayload) GetPassword() (res UpdateIntakeUserPayloadGetPasswordRetType) {
	res, _ = o.GetPasswordOk()
	return
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntakeUserPayload) GetPasswordOk() (ret UpdateIntakeUserPayloadGetPasswordRetType, ok bool) {
	return getUpdateIntakeUserPayloadGetPasswordAttributeTypeOk(o.Password)
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateIntakeUserPayload) HasPassword() bool {
	_, ok := o.GetPasswordOk()
	return ok
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateIntakeUserPayload) SetPassword(v UpdateIntakeUserPayloadGetPasswordRetType) {
	setUpdateIntakeUserPayloadGetPasswordAttributeType(&o.Password, v)
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateIntakeUserPayload) GetType() (res UpdateIntakeUserPayloadGetTypeRetType) {
	res, _ = o.GetTypeOk()
	return
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntakeUserPayload) GetTypeOk() (ret UpdateIntakeUserPayloadGetTypeRetType, ok bool) {
	return getUpdateIntakeUserPayloadGetTypeAttributeTypeOk(o.Type)
}

// HasType returns a boolean if a field has been set.
func (o *UpdateIntakeUserPayload) HasType() bool {
	_, ok := o.GetTypeOk()
	return ok
}

// SetType gets a reference to the given UserType and assigns it to the Type field.
func (o *UpdateIntakeUserPayload) SetType(v UpdateIntakeUserPayloadGetTypeRetType) {
	setUpdateIntakeUserPayloadGetTypeAttributeType(&o.Type, v)
}

func (o UpdateIntakeUserPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUpdateIntakeUserPayloadGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getUpdateIntakeUserPayloadGetDisplayNameAttributeTypeOk(o.DisplayName); ok {
		toSerialize["DisplayName"] = val
	}
	if val, ok := getUpdateIntakeUserPayloadGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getUpdateIntakeUserPayloadGetPasswordAttributeTypeOk(o.Password); ok {
		toSerialize["Password"] = val
	}
	if val, ok := getUpdateIntakeUserPayloadGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableUpdateIntakeUserPayload struct {
	value *UpdateIntakeUserPayload
	isSet bool
}

func (v NullableUpdateIntakeUserPayload) Get() *UpdateIntakeUserPayload {
	return v.value
}

func (v *NullableUpdateIntakeUserPayload) Set(val *UpdateIntakeUserPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIntakeUserPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIntakeUserPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIntakeUserPayload(val *UpdateIntakeUserPayload) *NullableUpdateIntakeUserPayload {
	return &NullableUpdateIntakeUserPayload{value: val, isSet: true}
}

func (v NullableUpdateIntakeUserPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIntakeUserPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
