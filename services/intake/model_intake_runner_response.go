/*
STACKIT Intake API

This API provides endpoints for managing Intakes.

API version: 1beta.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intake

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IntakeRunnerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntakeRunnerResponse{}

/*
	types and functions for create_time
*/

// isDateTime
type IntakeRunnerResponseGetCreateTimeAttributeType = *time.Time
type IntakeRunnerResponseGetCreateTimeArgType = time.Time
type IntakeRunnerResponseGetCreateTimeRetType = time.Time

func getIntakeRunnerResponseGetCreateTimeAttributeTypeOk(arg IntakeRunnerResponseGetCreateTimeAttributeType) (ret IntakeRunnerResponseGetCreateTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetCreateTimeAttributeType(arg *IntakeRunnerResponseGetCreateTimeAttributeType, val IntakeRunnerResponseGetCreateTimeRetType) {
	*arg = &val
}

/*
	types and functions for description
*/

// isNotNullableString
type IntakeRunnerResponseGetDescriptionAttributeType = *string

func getIntakeRunnerResponseGetDescriptionAttributeTypeOk(arg IntakeRunnerResponseGetDescriptionAttributeType) (ret IntakeRunnerResponseGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetDescriptionAttributeType(arg *IntakeRunnerResponseGetDescriptionAttributeType, val IntakeRunnerResponseGetDescriptionRetType) {
	*arg = &val
}

type IntakeRunnerResponseGetDescriptionArgType = string
type IntakeRunnerResponseGetDescriptionRetType = string

/*
	types and functions for displayName
*/

// isNotNullableString
type IntakeRunnerResponseGetDisplayNameAttributeType = *string

func getIntakeRunnerResponseGetDisplayNameAttributeTypeOk(arg IntakeRunnerResponseGetDisplayNameAttributeType) (ret IntakeRunnerResponseGetDisplayNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetDisplayNameAttributeType(arg *IntakeRunnerResponseGetDisplayNameAttributeType, val IntakeRunnerResponseGetDisplayNameRetType) {
	*arg = &val
}

type IntakeRunnerResponseGetDisplayNameArgType = string
type IntakeRunnerResponseGetDisplayNameRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type IntakeRunnerResponseGetIdAttributeType = *string

func getIntakeRunnerResponseGetIdAttributeTypeOk(arg IntakeRunnerResponseGetIdAttributeType) (ret IntakeRunnerResponseGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetIdAttributeType(arg *IntakeRunnerResponseGetIdAttributeType, val IntakeRunnerResponseGetIdRetType) {
	*arg = &val
}

type IntakeRunnerResponseGetIdArgType = string
type IntakeRunnerResponseGetIdRetType = string

/*
	types and functions for labels
*/

// isContainer
type IntakeRunnerResponseGetLabelsAttributeType = *map[string]string
type IntakeRunnerResponseGetLabelsArgType = *map[string]string
type IntakeRunnerResponseGetLabelsRetType = *map[string]string

func getIntakeRunnerResponseGetLabelsAttributeTypeOk(arg IntakeRunnerResponseGetLabelsAttributeType) (ret IntakeRunnerResponseGetLabelsRetType, ok bool) {
	if arg == nil {
		return nil, false
	}
	return arg, true
}

func setIntakeRunnerResponseGetLabelsAttributeType(arg *IntakeRunnerResponseGetLabelsAttributeType, val IntakeRunnerResponseGetLabelsRetType) {
	*arg = val
}

/*
	types and functions for maxMessageSizeKiB
*/

// isInteger
type IntakeRunnerResponseGetMaxMessageSizeKiBAttributeType = *int64
type IntakeRunnerResponseGetMaxMessageSizeKiBArgType = int64
type IntakeRunnerResponseGetMaxMessageSizeKiBRetType = int64

func getIntakeRunnerResponseGetMaxMessageSizeKiBAttributeTypeOk(arg IntakeRunnerResponseGetMaxMessageSizeKiBAttributeType) (ret IntakeRunnerResponseGetMaxMessageSizeKiBRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetMaxMessageSizeKiBAttributeType(arg *IntakeRunnerResponseGetMaxMessageSizeKiBAttributeType, val IntakeRunnerResponseGetMaxMessageSizeKiBRetType) {
	*arg = &val
}

/*
	types and functions for maxMessagesPerHour
*/

// isInteger
type IntakeRunnerResponseGetMaxMessagesPerHourAttributeType = *int64
type IntakeRunnerResponseGetMaxMessagesPerHourArgType = int64
type IntakeRunnerResponseGetMaxMessagesPerHourRetType = int64

func getIntakeRunnerResponseGetMaxMessagesPerHourAttributeTypeOk(arg IntakeRunnerResponseGetMaxMessagesPerHourAttributeType) (ret IntakeRunnerResponseGetMaxMessagesPerHourRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetMaxMessagesPerHourAttributeType(arg *IntakeRunnerResponseGetMaxMessagesPerHourAttributeType, val IntakeRunnerResponseGetMaxMessagesPerHourRetType) {
	*arg = &val
}

/*
	types and functions for state
*/

// isEnum

// IntakeRunnerResponseState The current state of the resource.
// value type for enums
type IntakeRunnerResponseState string

// List of State
const (
	INTAKERUNNERRESPONSESTATE_RECONCILING IntakeRunnerResponseState = "reconciling"
	INTAKERUNNERRESPONSESTATE_ACTIVE      IntakeRunnerResponseState = "active"
	INTAKERUNNERRESPONSESTATE_DELETING    IntakeRunnerResponseState = "deleting"
)

// All allowed values of IntakeRunnerResponse enum
var AllowedIntakeRunnerResponseStateEnumValues = []IntakeRunnerResponseState{
	"reconciling",
	"active",
	"deleting",
}

func (v *IntakeRunnerResponseState) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson IntakeRunnerResponseState
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := IntakeRunnerResponseState(value)
	for _, existing := range AllowedIntakeRunnerResponseStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntakeRunnerResponse", value)
}

// NewIntakeRunnerResponseStateFromValue returns a pointer to a valid IntakeRunnerResponseState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntakeRunnerResponseStateFromValue(v IntakeRunnerResponseState) (*IntakeRunnerResponseState, error) {
	ev := IntakeRunnerResponseState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntakeRunnerResponseState: valid values are %v", v, AllowedIntakeRunnerResponseStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntakeRunnerResponseState) IsValid() bool {
	for _, existing := range AllowedIntakeRunnerResponseStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v IntakeRunnerResponseState) Ptr() *IntakeRunnerResponseState {
	return &v
}

type NullableIntakeRunnerResponseState struct {
	value *IntakeRunnerResponseState
	isSet bool
}

func (v NullableIntakeRunnerResponseState) Get() *IntakeRunnerResponseState {
	return v.value
}

func (v *NullableIntakeRunnerResponseState) Set(val *IntakeRunnerResponseState) {
	v.value = val
	v.isSet = true
}

func (v NullableIntakeRunnerResponseState) IsSet() bool {
	return v.isSet
}

func (v *NullableIntakeRunnerResponseState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntakeRunnerResponseState(val *IntakeRunnerResponseState) *NullableIntakeRunnerResponseState {
	return &NullableIntakeRunnerResponseState{value: val, isSet: true}
}

func (v NullableIntakeRunnerResponseState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntakeRunnerResponseState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type IntakeRunnerResponseGetStateAttributeType = *IntakeRunnerResponseState
type IntakeRunnerResponseGetStateArgType = IntakeRunnerResponseState
type IntakeRunnerResponseGetStateRetType = IntakeRunnerResponseState

func getIntakeRunnerResponseGetStateAttributeTypeOk(arg IntakeRunnerResponseGetStateAttributeType) (ret IntakeRunnerResponseGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetStateAttributeType(arg *IntakeRunnerResponseGetStateAttributeType, val IntakeRunnerResponseGetStateRetType) {
	*arg = &val
}

/*
	types and functions for uri
*/

// isNotNullableString
type IntakeRunnerResponseGetUriAttributeType = *string

func getIntakeRunnerResponseGetUriAttributeTypeOk(arg IntakeRunnerResponseGetUriAttributeType) (ret IntakeRunnerResponseGetUriRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeRunnerResponseGetUriAttributeType(arg *IntakeRunnerResponseGetUriAttributeType, val IntakeRunnerResponseGetUriRetType) {
	*arg = &val
}

type IntakeRunnerResponseGetUriArgType = string
type IntakeRunnerResponseGetUriRetType = string

// IntakeRunnerResponse struct for IntakeRunnerResponse
type IntakeRunnerResponse struct {
	// The point in time the resource was created.
	// REQUIRED
	CreateTime IntakeRunnerResponseGetCreateTimeAttributeType `json:"create_time" required:"true"`
	// The description is a longer text chosen by the user to provide more context for the resource.
	Description IntakeRunnerResponseGetDescriptionAttributeType `json:"description,omitempty"`
	// The display name is a short name chosen by the user to identify the resource.
	// REQUIRED
	DisplayName IntakeRunnerResponseGetDisplayNameAttributeType `json:"displayName" required:"true"`
	// A auto generated unique id which identifies the resource.
	// REQUIRED
	Id IntakeRunnerResponseGetIdAttributeType `json:"id" required:"true"`
	// Labels are a set of key-value pairs assigned to resources.
	Labels IntakeRunnerResponseGetLabelsAttributeType `json:"labels,omitempty"`
	// The maximum size of a message in kibibytes (1 KiB = 1024 bytes).
	// REQUIRED
	MaxMessageSizeKiB IntakeRunnerResponseGetMaxMessageSizeKiBAttributeType `json:"maxMessageSizeKiB" required:"true"`
	// The maximum number of messages per hour.
	// REQUIRED
	MaxMessagesPerHour IntakeRunnerResponseGetMaxMessagesPerHourAttributeType `json:"maxMessagesPerHour" required:"true"`
	// The current state of the resource.
	// REQUIRED
	State IntakeRunnerResponseGetStateAttributeType `json:"state" required:"true"`
	// The URI for reaching the resource.
	// REQUIRED
	Uri IntakeRunnerResponseGetUriAttributeType `json:"uri" required:"true"`
}

type _IntakeRunnerResponse IntakeRunnerResponse

// NewIntakeRunnerResponse instantiates a new IntakeRunnerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntakeRunnerResponse(createTime IntakeRunnerResponseGetCreateTimeArgType, displayName IntakeRunnerResponseGetDisplayNameArgType, id IntakeRunnerResponseGetIdArgType, maxMessageSizeKiB IntakeRunnerResponseGetMaxMessageSizeKiBArgType, maxMessagesPerHour IntakeRunnerResponseGetMaxMessagesPerHourArgType, state IntakeRunnerResponseGetStateArgType, uri IntakeRunnerResponseGetUriArgType) *IntakeRunnerResponse {
	this := IntakeRunnerResponse{}
	setIntakeRunnerResponseGetCreateTimeAttributeType(&this.CreateTime, createTime)
	setIntakeRunnerResponseGetDisplayNameAttributeType(&this.DisplayName, displayName)
	setIntakeRunnerResponseGetIdAttributeType(&this.Id, id)
	setIntakeRunnerResponseGetMaxMessageSizeKiBAttributeType(&this.MaxMessageSizeKiB, maxMessageSizeKiB)
	setIntakeRunnerResponseGetMaxMessagesPerHourAttributeType(&this.MaxMessagesPerHour, maxMessagesPerHour)
	setIntakeRunnerResponseGetStateAttributeType(&this.State, state)
	setIntakeRunnerResponseGetUriAttributeType(&this.Uri, uri)
	return &this
}

// NewIntakeRunnerResponseWithDefaults instantiates a new IntakeRunnerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntakeRunnerResponseWithDefaults() *IntakeRunnerResponse {
	this := IntakeRunnerResponse{}
	return &this
}

// GetCreateTime returns the CreateTime field value
func (o *IntakeRunnerResponse) GetCreateTime() (ret IntakeRunnerResponseGetCreateTimeRetType) {
	ret, _ = o.GetCreateTimeOk()
	return ret
}

// GetCreateTimeOk returns a tuple with the CreateTime field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetCreateTimeOk() (ret IntakeRunnerResponseGetCreateTimeRetType, ok bool) {
	return getIntakeRunnerResponseGetCreateTimeAttributeTypeOk(o.CreateTime)
}

// SetCreateTime sets field value
func (o *IntakeRunnerResponse) SetCreateTime(v IntakeRunnerResponseGetCreateTimeRetType) {
	setIntakeRunnerResponseGetCreateTimeAttributeType(&o.CreateTime, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IntakeRunnerResponse) GetDescription() (res IntakeRunnerResponseGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetDescriptionOk() (ret IntakeRunnerResponseGetDescriptionRetType, ok bool) {
	return getIntakeRunnerResponseGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *IntakeRunnerResponse) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IntakeRunnerResponse) SetDescription(v IntakeRunnerResponseGetDescriptionRetType) {
	setIntakeRunnerResponseGetDescriptionAttributeType(&o.Description, v)
}

// GetDisplayName returns the DisplayName field value
func (o *IntakeRunnerResponse) GetDisplayName() (ret IntakeRunnerResponseGetDisplayNameRetType) {
	ret, _ = o.GetDisplayNameOk()
	return ret
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetDisplayNameOk() (ret IntakeRunnerResponseGetDisplayNameRetType, ok bool) {
	return getIntakeRunnerResponseGetDisplayNameAttributeTypeOk(o.DisplayName)
}

// SetDisplayName sets field value
func (o *IntakeRunnerResponse) SetDisplayName(v IntakeRunnerResponseGetDisplayNameRetType) {
	setIntakeRunnerResponseGetDisplayNameAttributeType(&o.DisplayName, v)
}

// GetId returns the Id field value
func (o *IntakeRunnerResponse) GetId() (ret IntakeRunnerResponseGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetIdOk() (ret IntakeRunnerResponseGetIdRetType, ok bool) {
	return getIntakeRunnerResponseGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *IntakeRunnerResponse) SetId(v IntakeRunnerResponseGetIdRetType) {
	setIntakeRunnerResponseGetIdAttributeType(&o.Id, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntakeRunnerResponse) GetLabels() (res IntakeRunnerResponseGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntakeRunnerResponse) GetLabelsOk() (ret IntakeRunnerResponseGetLabelsRetType, ok bool) {
	return getIntakeRunnerResponseGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *IntakeRunnerResponse) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *IntakeRunnerResponse) SetLabels(v IntakeRunnerResponseGetLabelsRetType) {
	setIntakeRunnerResponseGetLabelsAttributeType(&o.Labels, v)
}

// GetMaxMessageSizeKiB returns the MaxMessageSizeKiB field value
func (o *IntakeRunnerResponse) GetMaxMessageSizeKiB() (ret IntakeRunnerResponseGetMaxMessageSizeKiBRetType) {
	ret, _ = o.GetMaxMessageSizeKiBOk()
	return ret
}

// GetMaxMessageSizeKiBOk returns a tuple with the MaxMessageSizeKiB field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetMaxMessageSizeKiBOk() (ret IntakeRunnerResponseGetMaxMessageSizeKiBRetType, ok bool) {
	return getIntakeRunnerResponseGetMaxMessageSizeKiBAttributeTypeOk(o.MaxMessageSizeKiB)
}

// SetMaxMessageSizeKiB sets field value
func (o *IntakeRunnerResponse) SetMaxMessageSizeKiB(v IntakeRunnerResponseGetMaxMessageSizeKiBRetType) {
	setIntakeRunnerResponseGetMaxMessageSizeKiBAttributeType(&o.MaxMessageSizeKiB, v)
}

// GetMaxMessagesPerHour returns the MaxMessagesPerHour field value
func (o *IntakeRunnerResponse) GetMaxMessagesPerHour() (ret IntakeRunnerResponseGetMaxMessagesPerHourRetType) {
	ret, _ = o.GetMaxMessagesPerHourOk()
	return ret
}

// GetMaxMessagesPerHourOk returns a tuple with the MaxMessagesPerHour field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetMaxMessagesPerHourOk() (ret IntakeRunnerResponseGetMaxMessagesPerHourRetType, ok bool) {
	return getIntakeRunnerResponseGetMaxMessagesPerHourAttributeTypeOk(o.MaxMessagesPerHour)
}

// SetMaxMessagesPerHour sets field value
func (o *IntakeRunnerResponse) SetMaxMessagesPerHour(v IntakeRunnerResponseGetMaxMessagesPerHourRetType) {
	setIntakeRunnerResponseGetMaxMessagesPerHourAttributeType(&o.MaxMessagesPerHour, v)
}

// GetState returns the State field value
func (o *IntakeRunnerResponse) GetState() (ret IntakeRunnerResponseGetStateRetType) {
	ret, _ = o.GetStateOk()
	return ret
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetStateOk() (ret IntakeRunnerResponseGetStateRetType, ok bool) {
	return getIntakeRunnerResponseGetStateAttributeTypeOk(o.State)
}

// SetState sets field value
func (o *IntakeRunnerResponse) SetState(v IntakeRunnerResponseGetStateRetType) {
	setIntakeRunnerResponseGetStateAttributeType(&o.State, v)
}

// GetUri returns the Uri field value
func (o *IntakeRunnerResponse) GetUri() (ret IntakeRunnerResponseGetUriRetType) {
	ret, _ = o.GetUriOk()
	return ret
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *IntakeRunnerResponse) GetUriOk() (ret IntakeRunnerResponseGetUriRetType, ok bool) {
	return getIntakeRunnerResponseGetUriAttributeTypeOk(o.Uri)
}

// SetUri sets field value
func (o *IntakeRunnerResponse) SetUri(v IntakeRunnerResponseGetUriRetType) {
	setIntakeRunnerResponseGetUriAttributeType(&o.Uri, v)
}

func (o IntakeRunnerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getIntakeRunnerResponseGetCreateTimeAttributeTypeOk(o.CreateTime); ok {
		toSerialize["CreateTime"] = val
	}
	if val, ok := getIntakeRunnerResponseGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getIntakeRunnerResponseGetDisplayNameAttributeTypeOk(o.DisplayName); ok {
		toSerialize["DisplayName"] = val
	}
	if val, ok := getIntakeRunnerResponseGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getIntakeRunnerResponseGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getIntakeRunnerResponseGetMaxMessageSizeKiBAttributeTypeOk(o.MaxMessageSizeKiB); ok {
		toSerialize["MaxMessageSizeKiB"] = val
	}
	if val, ok := getIntakeRunnerResponseGetMaxMessagesPerHourAttributeTypeOk(o.MaxMessagesPerHour); ok {
		toSerialize["MaxMessagesPerHour"] = val
	}
	if val, ok := getIntakeRunnerResponseGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getIntakeRunnerResponseGetUriAttributeTypeOk(o.Uri); ok {
		toSerialize["Uri"] = val
	}
	return toSerialize, nil
}

type NullableIntakeRunnerResponse struct {
	value *IntakeRunnerResponse
	isSet bool
}

func (v NullableIntakeRunnerResponse) Get() *IntakeRunnerResponse {
	return v.value
}

func (v *NullableIntakeRunnerResponse) Set(val *IntakeRunnerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIntakeRunnerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIntakeRunnerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntakeRunnerResponse(val *IntakeRunnerResponse) *NullableIntakeRunnerResponse {
	return &NullableIntakeRunnerResponse{value: val, isSet: true}
}

func (v NullableIntakeRunnerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntakeRunnerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
