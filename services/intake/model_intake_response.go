/*
STACKIT Intake API

This API provides endpoints for managing Intakes.

API version: 1beta.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intake

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IntakeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntakeResponse{}

/*
	types and functions for catalog
*/

// isModel
type IntakeResponseGetCatalogAttributeType = *IntakeCatalog
type IntakeResponseGetCatalogArgType = IntakeCatalog
type IntakeResponseGetCatalogRetType = IntakeCatalog

func getIntakeResponseGetCatalogAttributeTypeOk(arg IntakeResponseGetCatalogAttributeType) (ret IntakeResponseGetCatalogRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetCatalogAttributeType(arg *IntakeResponseGetCatalogAttributeType, val IntakeResponseGetCatalogRetType) {
	*arg = &val
}

/*
	types and functions for create_time
*/

// isDateTime
type IntakeResponseGetCreateTimeAttributeType = *time.Time
type IntakeResponseGetCreateTimeArgType = time.Time
type IntakeResponseGetCreateTimeRetType = time.Time

func getIntakeResponseGetCreateTimeAttributeTypeOk(arg IntakeResponseGetCreateTimeAttributeType) (ret IntakeResponseGetCreateTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetCreateTimeAttributeType(arg *IntakeResponseGetCreateTimeAttributeType, val IntakeResponseGetCreateTimeRetType) {
	*arg = &val
}

/*
	types and functions for deadLetterTopic
*/

// isNotNullableString
type IntakeResponseGetDeadLetterTopicAttributeType = *string

func getIntakeResponseGetDeadLetterTopicAttributeTypeOk(arg IntakeResponseGetDeadLetterTopicAttributeType) (ret IntakeResponseGetDeadLetterTopicRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetDeadLetterTopicAttributeType(arg *IntakeResponseGetDeadLetterTopicAttributeType, val IntakeResponseGetDeadLetterTopicRetType) {
	*arg = &val
}

type IntakeResponseGetDeadLetterTopicArgType = string
type IntakeResponseGetDeadLetterTopicRetType = string

/*
	types and functions for description
*/

// isNotNullableString
type IntakeResponseGetDescriptionAttributeType = *string

func getIntakeResponseGetDescriptionAttributeTypeOk(arg IntakeResponseGetDescriptionAttributeType) (ret IntakeResponseGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetDescriptionAttributeType(arg *IntakeResponseGetDescriptionAttributeType, val IntakeResponseGetDescriptionRetType) {
	*arg = &val
}

type IntakeResponseGetDescriptionArgType = string
type IntakeResponseGetDescriptionRetType = string

/*
	types and functions for displayName
*/

// isNotNullableString
type IntakeResponseGetDisplayNameAttributeType = *string

func getIntakeResponseGetDisplayNameAttributeTypeOk(arg IntakeResponseGetDisplayNameAttributeType) (ret IntakeResponseGetDisplayNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetDisplayNameAttributeType(arg *IntakeResponseGetDisplayNameAttributeType, val IntakeResponseGetDisplayNameRetType) {
	*arg = &val
}

type IntakeResponseGetDisplayNameArgType = string
type IntakeResponseGetDisplayNameRetType = string

/*
	types and functions for failure_message
*/

// isNotNullableString
type IntakeResponseGetFailureMessageAttributeType = *string

func getIntakeResponseGetFailureMessageAttributeTypeOk(arg IntakeResponseGetFailureMessageAttributeType) (ret IntakeResponseGetFailureMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetFailureMessageAttributeType(arg *IntakeResponseGetFailureMessageAttributeType, val IntakeResponseGetFailureMessageRetType) {
	*arg = &val
}

type IntakeResponseGetFailureMessageArgType = string
type IntakeResponseGetFailureMessageRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type IntakeResponseGetIdAttributeType = *string

func getIntakeResponseGetIdAttributeTypeOk(arg IntakeResponseGetIdAttributeType) (ret IntakeResponseGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetIdAttributeType(arg *IntakeResponseGetIdAttributeType, val IntakeResponseGetIdRetType) {
	*arg = &val
}

type IntakeResponseGetIdArgType = string
type IntakeResponseGetIdRetType = string

/*
	types and functions for intakeRunnerId
*/

// isNotNullableString
type IntakeResponseGetIntakeRunnerIdAttributeType = *string

func getIntakeResponseGetIntakeRunnerIdAttributeTypeOk(arg IntakeResponseGetIntakeRunnerIdAttributeType) (ret IntakeResponseGetIntakeRunnerIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetIntakeRunnerIdAttributeType(arg *IntakeResponseGetIntakeRunnerIdAttributeType, val IntakeResponseGetIntakeRunnerIdRetType) {
	*arg = &val
}

type IntakeResponseGetIntakeRunnerIdArgType = string
type IntakeResponseGetIntakeRunnerIdRetType = string

/*
	types and functions for labels
*/

// isContainer
type IntakeResponseGetLabelsAttributeType = *map[string]string
type IntakeResponseGetLabelsArgType = *map[string]string
type IntakeResponseGetLabelsRetType = *map[string]string

func getIntakeResponseGetLabelsAttributeTypeOk(arg IntakeResponseGetLabelsAttributeType) (ret IntakeResponseGetLabelsRetType, ok bool) {
	if arg == nil {
		return nil, false
	}
	return arg, true
}

func setIntakeResponseGetLabelsAttributeType(arg *IntakeResponseGetLabelsAttributeType, val IntakeResponseGetLabelsRetType) {
	*arg = val
}

/*
	types and functions for state
*/

// isEnum

// IntakeResponseState The current state of the resource.
// value type for enums
type IntakeResponseState string

// List of State
const (
	INTAKERESPONSESTATE_RECONCILING IntakeResponseState = "reconciling"
	INTAKERESPONSESTATE_ACTIVE      IntakeResponseState = "active"
	INTAKERESPONSESTATE_DELETING    IntakeResponseState = "deleting"
	INTAKERESPONSESTATE_FAILED      IntakeResponseState = "failed"
)

// All allowed values of IntakeResponse enum
var AllowedIntakeResponseStateEnumValues = []IntakeResponseState{
	"reconciling",
	"active",
	"deleting",
	"failed",
}

func (v *IntakeResponseState) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson IntakeResponseState
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := IntakeResponseState(value)
	for _, existing := range AllowedIntakeResponseStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntakeResponse", value)
}

// NewIntakeResponseStateFromValue returns a pointer to a valid IntakeResponseState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntakeResponseStateFromValue(v IntakeResponseState) (*IntakeResponseState, error) {
	ev := IntakeResponseState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntakeResponseState: valid values are %v", v, AllowedIntakeResponseStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntakeResponseState) IsValid() bool {
	for _, existing := range AllowedIntakeResponseStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v IntakeResponseState) Ptr() *IntakeResponseState {
	return &v
}

type NullableIntakeResponseState struct {
	value *IntakeResponseState
	isSet bool
}

func (v NullableIntakeResponseState) Get() *IntakeResponseState {
	return v.value
}

func (v *NullableIntakeResponseState) Set(val *IntakeResponseState) {
	v.value = val
	v.isSet = true
}

func (v NullableIntakeResponseState) IsSet() bool {
	return v.isSet
}

func (v *NullableIntakeResponseState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntakeResponseState(val *IntakeResponseState) *NullableIntakeResponseState {
	return &NullableIntakeResponseState{value: val, isSet: true}
}

func (v NullableIntakeResponseState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntakeResponseState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type IntakeResponseGetStateAttributeType = *IntakeResponseState
type IntakeResponseGetStateArgType = IntakeResponseState
type IntakeResponseGetStateRetType = IntakeResponseState

func getIntakeResponseGetStateAttributeTypeOk(arg IntakeResponseGetStateAttributeType) (ret IntakeResponseGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetStateAttributeType(arg *IntakeResponseGetStateAttributeType, val IntakeResponseGetStateRetType) {
	*arg = &val
}

/*
	types and functions for topic
*/

// isNotNullableString
type IntakeResponseGetTopicAttributeType = *string

func getIntakeResponseGetTopicAttributeTypeOk(arg IntakeResponseGetTopicAttributeType) (ret IntakeResponseGetTopicRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetTopicAttributeType(arg *IntakeResponseGetTopicAttributeType, val IntakeResponseGetTopicRetType) {
	*arg = &val
}

type IntakeResponseGetTopicArgType = string
type IntakeResponseGetTopicRetType = string

/*
	types and functions for undeliveredMessageCount
*/

// isLong
type IntakeResponseGetUndeliveredMessageCountAttributeType = *int64
type IntakeResponseGetUndeliveredMessageCountArgType = int64
type IntakeResponseGetUndeliveredMessageCountRetType = int64

func getIntakeResponseGetUndeliveredMessageCountAttributeTypeOk(arg IntakeResponseGetUndeliveredMessageCountAttributeType) (ret IntakeResponseGetUndeliveredMessageCountRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetUndeliveredMessageCountAttributeType(arg *IntakeResponseGetUndeliveredMessageCountAttributeType, val IntakeResponseGetUndeliveredMessageCountRetType) {
	*arg = &val
}

/*
	types and functions for uri
*/

// isNotNullableString
type IntakeResponseGetUriAttributeType = *string

func getIntakeResponseGetUriAttributeTypeOk(arg IntakeResponseGetUriAttributeType) (ret IntakeResponseGetUriRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setIntakeResponseGetUriAttributeType(arg *IntakeResponseGetUriAttributeType, val IntakeResponseGetUriRetType) {
	*arg = &val
}

type IntakeResponseGetUriArgType = string
type IntakeResponseGetUriRetType = string

// IntakeResponse struct for IntakeResponse
type IntakeResponse struct {
	// REQUIRED
	Catalog IntakeResponseGetCatalogAttributeType `json:"catalog" required:"true"`
	// The point in time the resource was created.
	// REQUIRED
	CreateTime IntakeResponseGetCreateTimeAttributeType `json:"create_time" required:"true"`
	// The topic where undelivered messages are published (Dead Letter Queue).
	// REQUIRED
	DeadLetterTopic IntakeResponseGetDeadLetterTopicAttributeType `json:"deadLetterTopic" required:"true"`
	// The description is a longer text chosen by the user to provide more context for the resource.
	Description IntakeResponseGetDescriptionAttributeType `json:"description,omitempty"`
	// The display name is a short name chosen by the user to identify the resource.
	// REQUIRED
	DisplayName IntakeResponseGetDisplayNameAttributeType `json:"displayName" required:"true"`
	// A human-readable description of the error, if the state is 'failed'.
	FailureMessage IntakeResponseGetFailureMessageAttributeType `json:"failure_message,omitempty"`
	// A auto generated unique id which identifies the resource.
	// REQUIRED
	Id IntakeResponseGetIdAttributeType `json:"id" required:"true"`
	// The unique id of the intake runner this intake is running on.
	// REQUIRED
	IntakeRunnerId IntakeResponseGetIntakeRunnerIdAttributeType `json:"intakeRunnerId" required:"true"`
	// Labels are a set of key-value pairs assigned to resources.
	Labels IntakeResponseGetLabelsAttributeType `json:"labels,omitempty"`
	// The current state of the resource.
	// REQUIRED
	State IntakeResponseGetStateAttributeType `json:"state" required:"true"`
	// The topic to publish data to.
	// REQUIRED
	Topic IntakeResponseGetTopicAttributeType `json:"topic" required:"true"`
	// Number of messages that failed delivery and were sent to the Dead Letter Queue.
	UndeliveredMessageCount IntakeResponseGetUndeliveredMessageCountAttributeType `json:"undeliveredMessageCount,omitempty"`
	// The URI for reaching the resource.
	// REQUIRED
	Uri IntakeResponseGetUriAttributeType `json:"uri" required:"true"`
}

type _IntakeResponse IntakeResponse

// NewIntakeResponse instantiates a new IntakeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntakeResponse(catalog IntakeResponseGetCatalogArgType, createTime IntakeResponseGetCreateTimeArgType, deadLetterTopic IntakeResponseGetDeadLetterTopicArgType, displayName IntakeResponseGetDisplayNameArgType, id IntakeResponseGetIdArgType, intakeRunnerId IntakeResponseGetIntakeRunnerIdArgType, state IntakeResponseGetStateArgType, topic IntakeResponseGetTopicArgType, uri IntakeResponseGetUriArgType) *IntakeResponse {
	this := IntakeResponse{}
	setIntakeResponseGetCatalogAttributeType(&this.Catalog, catalog)
	setIntakeResponseGetCreateTimeAttributeType(&this.CreateTime, createTime)
	setIntakeResponseGetDeadLetterTopicAttributeType(&this.DeadLetterTopic, deadLetterTopic)
	setIntakeResponseGetDisplayNameAttributeType(&this.DisplayName, displayName)
	setIntakeResponseGetIdAttributeType(&this.Id, id)
	setIntakeResponseGetIntakeRunnerIdAttributeType(&this.IntakeRunnerId, intakeRunnerId)
	setIntakeResponseGetStateAttributeType(&this.State, state)
	setIntakeResponseGetTopicAttributeType(&this.Topic, topic)
	setIntakeResponseGetUriAttributeType(&this.Uri, uri)
	return &this
}

// NewIntakeResponseWithDefaults instantiates a new IntakeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntakeResponseWithDefaults() *IntakeResponse {
	this := IntakeResponse{}
	return &this
}

// GetCatalog returns the Catalog field value
func (o *IntakeResponse) GetCatalog() (ret IntakeResponseGetCatalogRetType) {
	ret, _ = o.GetCatalogOk()
	return ret
}

// GetCatalogOk returns a tuple with the Catalog field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetCatalogOk() (ret IntakeResponseGetCatalogRetType, ok bool) {
	return getIntakeResponseGetCatalogAttributeTypeOk(o.Catalog)
}

// SetCatalog sets field value
func (o *IntakeResponse) SetCatalog(v IntakeResponseGetCatalogRetType) {
	setIntakeResponseGetCatalogAttributeType(&o.Catalog, v)
}

// GetCreateTime returns the CreateTime field value
func (o *IntakeResponse) GetCreateTime() (ret IntakeResponseGetCreateTimeRetType) {
	ret, _ = o.GetCreateTimeOk()
	return ret
}

// GetCreateTimeOk returns a tuple with the CreateTime field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetCreateTimeOk() (ret IntakeResponseGetCreateTimeRetType, ok bool) {
	return getIntakeResponseGetCreateTimeAttributeTypeOk(o.CreateTime)
}

// SetCreateTime sets field value
func (o *IntakeResponse) SetCreateTime(v IntakeResponseGetCreateTimeRetType) {
	setIntakeResponseGetCreateTimeAttributeType(&o.CreateTime, v)
}

// GetDeadLetterTopic returns the DeadLetterTopic field value
func (o *IntakeResponse) GetDeadLetterTopic() (ret IntakeResponseGetDeadLetterTopicRetType) {
	ret, _ = o.GetDeadLetterTopicOk()
	return ret
}

// GetDeadLetterTopicOk returns a tuple with the DeadLetterTopic field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetDeadLetterTopicOk() (ret IntakeResponseGetDeadLetterTopicRetType, ok bool) {
	return getIntakeResponseGetDeadLetterTopicAttributeTypeOk(o.DeadLetterTopic)
}

// SetDeadLetterTopic sets field value
func (o *IntakeResponse) SetDeadLetterTopic(v IntakeResponseGetDeadLetterTopicRetType) {
	setIntakeResponseGetDeadLetterTopicAttributeType(&o.DeadLetterTopic, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IntakeResponse) GetDescription() (res IntakeResponseGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetDescriptionOk() (ret IntakeResponseGetDescriptionRetType, ok bool) {
	return getIntakeResponseGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *IntakeResponse) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IntakeResponse) SetDescription(v IntakeResponseGetDescriptionRetType) {
	setIntakeResponseGetDescriptionAttributeType(&o.Description, v)
}

// GetDisplayName returns the DisplayName field value
func (o *IntakeResponse) GetDisplayName() (ret IntakeResponseGetDisplayNameRetType) {
	ret, _ = o.GetDisplayNameOk()
	return ret
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetDisplayNameOk() (ret IntakeResponseGetDisplayNameRetType, ok bool) {
	return getIntakeResponseGetDisplayNameAttributeTypeOk(o.DisplayName)
}

// SetDisplayName sets field value
func (o *IntakeResponse) SetDisplayName(v IntakeResponseGetDisplayNameRetType) {
	setIntakeResponseGetDisplayNameAttributeType(&o.DisplayName, v)
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *IntakeResponse) GetFailureMessage() (res IntakeResponseGetFailureMessageRetType) {
	res, _ = o.GetFailureMessageOk()
	return
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetFailureMessageOk() (ret IntakeResponseGetFailureMessageRetType, ok bool) {
	return getIntakeResponseGetFailureMessageAttributeTypeOk(o.FailureMessage)
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *IntakeResponse) HasFailureMessage() bool {
	_, ok := o.GetFailureMessageOk()
	return ok
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *IntakeResponse) SetFailureMessage(v IntakeResponseGetFailureMessageRetType) {
	setIntakeResponseGetFailureMessageAttributeType(&o.FailureMessage, v)
}

// GetId returns the Id field value
func (o *IntakeResponse) GetId() (ret IntakeResponseGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetIdOk() (ret IntakeResponseGetIdRetType, ok bool) {
	return getIntakeResponseGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *IntakeResponse) SetId(v IntakeResponseGetIdRetType) {
	setIntakeResponseGetIdAttributeType(&o.Id, v)
}

// GetIntakeRunnerId returns the IntakeRunnerId field value
func (o *IntakeResponse) GetIntakeRunnerId() (ret IntakeResponseGetIntakeRunnerIdRetType) {
	ret, _ = o.GetIntakeRunnerIdOk()
	return ret
}

// GetIntakeRunnerIdOk returns a tuple with the IntakeRunnerId field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetIntakeRunnerIdOk() (ret IntakeResponseGetIntakeRunnerIdRetType, ok bool) {
	return getIntakeResponseGetIntakeRunnerIdAttributeTypeOk(o.IntakeRunnerId)
}

// SetIntakeRunnerId sets field value
func (o *IntakeResponse) SetIntakeRunnerId(v IntakeResponseGetIntakeRunnerIdRetType) {
	setIntakeResponseGetIntakeRunnerIdAttributeType(&o.IntakeRunnerId, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntakeResponse) GetLabels() (res IntakeResponseGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntakeResponse) GetLabelsOk() (ret IntakeResponseGetLabelsRetType, ok bool) {
	return getIntakeResponseGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *IntakeResponse) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *IntakeResponse) SetLabels(v IntakeResponseGetLabelsRetType) {
	setIntakeResponseGetLabelsAttributeType(&o.Labels, v)
}

// GetState returns the State field value
func (o *IntakeResponse) GetState() (ret IntakeResponseGetStateRetType) {
	ret, _ = o.GetStateOk()
	return ret
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetStateOk() (ret IntakeResponseGetStateRetType, ok bool) {
	return getIntakeResponseGetStateAttributeTypeOk(o.State)
}

// SetState sets field value
func (o *IntakeResponse) SetState(v IntakeResponseGetStateRetType) {
	setIntakeResponseGetStateAttributeType(&o.State, v)
}

// GetTopic returns the Topic field value
func (o *IntakeResponse) GetTopic() (ret IntakeResponseGetTopicRetType) {
	ret, _ = o.GetTopicOk()
	return ret
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetTopicOk() (ret IntakeResponseGetTopicRetType, ok bool) {
	return getIntakeResponseGetTopicAttributeTypeOk(o.Topic)
}

// SetTopic sets field value
func (o *IntakeResponse) SetTopic(v IntakeResponseGetTopicRetType) {
	setIntakeResponseGetTopicAttributeType(&o.Topic, v)
}

// GetUndeliveredMessageCount returns the UndeliveredMessageCount field value if set, zero value otherwise.
func (o *IntakeResponse) GetUndeliveredMessageCount() (res IntakeResponseGetUndeliveredMessageCountRetType) {
	res, _ = o.GetUndeliveredMessageCountOk()
	return
}

// GetUndeliveredMessageCountOk returns a tuple with the UndeliveredMessageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetUndeliveredMessageCountOk() (ret IntakeResponseGetUndeliveredMessageCountRetType, ok bool) {
	return getIntakeResponseGetUndeliveredMessageCountAttributeTypeOk(o.UndeliveredMessageCount)
}

// HasUndeliveredMessageCount returns a boolean if a field has been set.
func (o *IntakeResponse) HasUndeliveredMessageCount() bool {
	_, ok := o.GetUndeliveredMessageCountOk()
	return ok
}

// SetUndeliveredMessageCount gets a reference to the given int64 and assigns it to the UndeliveredMessageCount field.
func (o *IntakeResponse) SetUndeliveredMessageCount(v IntakeResponseGetUndeliveredMessageCountRetType) {
	setIntakeResponseGetUndeliveredMessageCountAttributeType(&o.UndeliveredMessageCount, v)
}

// GetUri returns the Uri field value
func (o *IntakeResponse) GetUri() (ret IntakeResponseGetUriRetType) {
	ret, _ = o.GetUriOk()
	return ret
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *IntakeResponse) GetUriOk() (ret IntakeResponseGetUriRetType, ok bool) {
	return getIntakeResponseGetUriAttributeTypeOk(o.Uri)
}

// SetUri sets field value
func (o *IntakeResponse) SetUri(v IntakeResponseGetUriRetType) {
	setIntakeResponseGetUriAttributeType(&o.Uri, v)
}

func (o IntakeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getIntakeResponseGetCatalogAttributeTypeOk(o.Catalog); ok {
		toSerialize["Catalog"] = val
	}
	if val, ok := getIntakeResponseGetCreateTimeAttributeTypeOk(o.CreateTime); ok {
		toSerialize["CreateTime"] = val
	}
	if val, ok := getIntakeResponseGetDeadLetterTopicAttributeTypeOk(o.DeadLetterTopic); ok {
		toSerialize["DeadLetterTopic"] = val
	}
	if val, ok := getIntakeResponseGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getIntakeResponseGetDisplayNameAttributeTypeOk(o.DisplayName); ok {
		toSerialize["DisplayName"] = val
	}
	if val, ok := getIntakeResponseGetFailureMessageAttributeTypeOk(o.FailureMessage); ok {
		toSerialize["FailureMessage"] = val
	}
	if val, ok := getIntakeResponseGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getIntakeResponseGetIntakeRunnerIdAttributeTypeOk(o.IntakeRunnerId); ok {
		toSerialize["IntakeRunnerId"] = val
	}
	if val, ok := getIntakeResponseGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getIntakeResponseGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getIntakeResponseGetTopicAttributeTypeOk(o.Topic); ok {
		toSerialize["Topic"] = val
	}
	if val, ok := getIntakeResponseGetUndeliveredMessageCountAttributeTypeOk(o.UndeliveredMessageCount); ok {
		toSerialize["UndeliveredMessageCount"] = val
	}
	if val, ok := getIntakeResponseGetUriAttributeTypeOk(o.Uri); ok {
		toSerialize["Uri"] = val
	}
	return toSerialize, nil
}

type NullableIntakeResponse struct {
	value *IntakeResponse
	isSet bool
}

func (v NullableIntakeResponse) Get() *IntakeResponse {
	return v.value
}

func (v *NullableIntakeResponse) Set(val *IntakeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIntakeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIntakeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntakeResponse(val *IntakeResponse) *NullableIntakeResponse {
	return &NullableIntakeResponse{value: val, isSet: true}
}

func (v NullableIntakeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntakeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
