/*
STACKIT Intake API

This API provides endpoints for managing Intakes.

API version: 1beta.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intake

import (
	"encoding/json"
	"fmt"
)

// CatalogAuthType Means of authentication for catalog requests
type CatalogAuthType string

// List of catalogAuthType
const (
	CATALOGAUTHTYPE_NONE   CatalogAuthType = "none"
	CATALOGAUTHTYPE_DREMIO CatalogAuthType = "dremio"
)

// All allowed values of CatalogAuthType enum
var AllowedCatalogAuthTypeEnumValues = []CatalogAuthType{
	"none",
	"dremio",
}

func (v *CatalogAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := CatalogAuthType(value)
	for _, existing := range AllowedCatalogAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogAuthType", value)
}

// NewCatalogAuthTypeFromValue returns a pointer to a valid CatalogAuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogAuthTypeFromValue(v string) (*CatalogAuthType, error) {
	ev := CatalogAuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogAuthType: valid values are %v", v, AllowedCatalogAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogAuthType) IsValid() bool {
	for _, existing := range AllowedCatalogAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to catalogAuthType value
func (v CatalogAuthType) Ptr() *CatalogAuthType {
	return &v
}

type NullableCatalogAuthType struct {
	value *CatalogAuthType
	isSet bool
}

func (v NullableCatalogAuthType) Get() *CatalogAuthType {
	return v.value
}

func (v *NullableCatalogAuthType) Set(val *CatalogAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogAuthType(val *CatalogAuthType) *NullableCatalogAuthType {
	return &NullableCatalogAuthType{value: val, isSet: true}
}

func (v NullableCatalogAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
