/*
STACKIT Cloud Foundry API

API endpoints for managing STACKIT Cloud Foundry

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scf

import (
	"encoding/json"
	"fmt"
)

// OrgRoleType the model 'OrgRoleType'
type OrgRoleType string

// List of OrgRoleType
const (
	ORGROLETYPE_USER            OrgRoleType = "organization_user"
	ORGROLETYPE_AUDITOR         OrgRoleType = "organization_auditor"
	ORGROLETYPE_MANAGER         OrgRoleType = "organization_manager"
	ORGROLETYPE_BILLING_MANAGER OrgRoleType = "organization_billing_manager"
)

// All allowed values of OrgRoleType enum
var AllowedOrgRoleTypeEnumValues = []OrgRoleType{
	"organization_user",
	"organization_auditor",
	"organization_manager",
	"organization_billing_manager",
}

func (v *OrgRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := OrgRoleType(value)
	for _, existing := range AllowedOrgRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgRoleType", value)
}

// NewOrgRoleTypeFromValue returns a pointer to a valid OrgRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgRoleTypeFromValue(v string) (*OrgRoleType, error) {
	ev := OrgRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgRoleType: valid values are %v", v, AllowedOrgRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgRoleType) IsValid() bool {
	for _, existing := range AllowedOrgRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrgRoleType value
func (v OrgRoleType) Ptr() *OrgRoleType {
	return &v
}

type NullableOrgRoleType struct {
	value *OrgRoleType
	isSet bool
}

func (v NullableOrgRoleType) Get() *OrgRoleType {
	return v.value
}

func (v *NullableOrgRoleType) Set(val *OrgRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgRoleType(val *OrgRoleType) *NullableOrgRoleType {
	return &NullableOrgRoleType{value: val, isSet: true}
}

func (v NullableOrgRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
