/*
STACKIT Cloud Foundry API

API endpoints for managing STACKIT Cloud Foundry

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scf

import (
	"encoding/json"
	"fmt"
)

// SpaceRoleType the model 'SpaceRoleType'
type SpaceRoleType string

// List of SpaceRoleType
const (
	SPACEROLETYPE_AUDITOR   SpaceRoleType = "space_auditor"
	SPACEROLETYPE_DEVELOPER SpaceRoleType = "space_developer"
	SPACEROLETYPE_MANAGER   SpaceRoleType = "space_manager"
	SPACEROLETYPE_SUPPORTER SpaceRoleType = "space_supporter"
)

// All allowed values of SpaceRoleType enum
var AllowedSpaceRoleTypeEnumValues = []SpaceRoleType{
	"space_auditor",
	"space_developer",
	"space_manager",
	"space_supporter",
}

func (v *SpaceRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := SpaceRoleType(value)
	for _, existing := range AllowedSpaceRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpaceRoleType", value)
}

// NewSpaceRoleTypeFromValue returns a pointer to a valid SpaceRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpaceRoleTypeFromValue(v string) (*SpaceRoleType, error) {
	ev := SpaceRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpaceRoleType: valid values are %v", v, AllowedSpaceRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpaceRoleType) IsValid() bool {
	for _, existing := range AllowedSpaceRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpaceRoleType value
func (v SpaceRoleType) Ptr() *SpaceRoleType {
	return &v
}

type NullableSpaceRoleType struct {
	value *SpaceRoleType
	isSet bool
}

func (v NullableSpaceRoleType) Get() *SpaceRoleType {
	return v.value
}

func (v *NullableSpaceRoleType) Set(val *SpaceRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceRoleType(val *SpaceRoleType) *NullableSpaceRoleType {
	return &NullableSpaceRoleType{value: val, isSet: true}
}

func (v NullableSpaceRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
