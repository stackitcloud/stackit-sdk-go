/*
STACKIT Cloud Foundry API

API endpoints for managing STACKIT Cloud Foundry

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package scf

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateOrgRolePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrgRolePayload{}

/*
	types and functions for type
*/

// isEnum

// CreateOrgRolePayloadTypes the model 'CreateOrgRolePayload'
// value type for enums
type CreateOrgRolePayloadTypes string

// List of Type
const (
	CREATEORGROLEPAYLOADTYPE_USER            CreateOrgRolePayloadTypes = "organization_user"
	CREATEORGROLEPAYLOADTYPE_AUDITOR         CreateOrgRolePayloadTypes = "organization_auditor"
	CREATEORGROLEPAYLOADTYPE_MANAGER         CreateOrgRolePayloadTypes = "organization_manager"
	CREATEORGROLEPAYLOADTYPE_BILLING_MANAGER CreateOrgRolePayloadTypes = "organization_billing_manager"
)

// All allowed values of CreateOrgRolePayload enum
var AllowedCreateOrgRolePayloadTypesEnumValues = []CreateOrgRolePayloadTypes{
	"organization_user",
	"organization_auditor",
	"organization_manager",
	"organization_billing_manager",
}

func (v *CreateOrgRolePayloadTypes) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson CreateOrgRolePayloadTypes
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := CreateOrgRolePayloadTypes(value)
	for _, existing := range AllowedCreateOrgRolePayloadTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreateOrgRolePayload", value)
}

// NewCreateOrgRolePayloadTypesFromValue returns a pointer to a valid CreateOrgRolePayloadTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreateOrgRolePayloadTypesFromValue(v CreateOrgRolePayloadTypes) (*CreateOrgRolePayloadTypes, error) {
	ev := CreateOrgRolePayloadTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreateOrgRolePayloadTypes: valid values are %v", v, AllowedCreateOrgRolePayloadTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreateOrgRolePayloadTypes) IsValid() bool {
	for _, existing := range AllowedCreateOrgRolePayloadTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v CreateOrgRolePayloadTypes) Ptr() *CreateOrgRolePayloadTypes {
	return &v
}

type NullableCreateOrgRolePayloadTypes struct {
	value *CreateOrgRolePayloadTypes
	isSet bool
}

func (v NullableCreateOrgRolePayloadTypes) Get() *CreateOrgRolePayloadTypes {
	return v.value
}

func (v *NullableCreateOrgRolePayloadTypes) Set(val *CreateOrgRolePayloadTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrgRolePayloadTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrgRolePayloadTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrgRolePayloadTypes(val *CreateOrgRolePayloadTypes) *NullableCreateOrgRolePayloadTypes {
	return &NullableCreateOrgRolePayloadTypes{value: val, isSet: true}
}

func (v NullableCreateOrgRolePayloadTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrgRolePayloadTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type CreateOrgRolePayloadGetTypeAttributeType = *CreateOrgRolePayloadTypes
type CreateOrgRolePayloadGetTypeArgType = CreateOrgRolePayloadTypes
type CreateOrgRolePayloadGetTypeRetType = CreateOrgRolePayloadTypes

func getCreateOrgRolePayloadGetTypeAttributeTypeOk(arg CreateOrgRolePayloadGetTypeAttributeType) (ret CreateOrgRolePayloadGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateOrgRolePayloadGetTypeAttributeType(arg *CreateOrgRolePayloadGetTypeAttributeType, val CreateOrgRolePayloadGetTypeRetType) {
	*arg = &val
}

/*
	types and functions for userGuid
*/

// isNotNullableString
type CreateOrgRolePayloadGetUserGuidAttributeType = *string

func getCreateOrgRolePayloadGetUserGuidAttributeTypeOk(arg CreateOrgRolePayloadGetUserGuidAttributeType) (ret CreateOrgRolePayloadGetUserGuidRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateOrgRolePayloadGetUserGuidAttributeType(arg *CreateOrgRolePayloadGetUserGuidAttributeType, val CreateOrgRolePayloadGetUserGuidRetType) {
	*arg = &val
}

type CreateOrgRolePayloadGetUserGuidArgType = string
type CreateOrgRolePayloadGetUserGuidRetType = string

/*
	types and functions for userName
*/

// isNotNullableString
type CreateOrgRolePayloadGetUserNameAttributeType = *string

func getCreateOrgRolePayloadGetUserNameAttributeTypeOk(arg CreateOrgRolePayloadGetUserNameAttributeType) (ret CreateOrgRolePayloadGetUserNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateOrgRolePayloadGetUserNameAttributeType(arg *CreateOrgRolePayloadGetUserNameAttributeType, val CreateOrgRolePayloadGetUserNameRetType) {
	*arg = &val
}

type CreateOrgRolePayloadGetUserNameArgType = string
type CreateOrgRolePayloadGetUserNameRetType = string

// CreateOrgRolePayload struct for CreateOrgRolePayload
type CreateOrgRolePayload struct {
	// REQUIRED
	Type     CreateOrgRolePayloadGetTypeAttributeType     `json:"type" required:"true"`
	UserGuid CreateOrgRolePayloadGetUserGuidAttributeType `json:"userGuid,omitempty"`
	UserName CreateOrgRolePayloadGetUserNameAttributeType `json:"userName,omitempty"`
}

type _CreateOrgRolePayload CreateOrgRolePayload

// NewCreateOrgRolePayload instantiates a new CreateOrgRolePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrgRolePayload(types CreateOrgRolePayloadGetTypeArgType) *CreateOrgRolePayload {
	this := CreateOrgRolePayload{}
	setCreateOrgRolePayloadGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewCreateOrgRolePayloadWithDefaults instantiates a new CreateOrgRolePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrgRolePayloadWithDefaults() *CreateOrgRolePayload {
	this := CreateOrgRolePayload{}
	return &this
}

// GetType returns the Type field value
func (o *CreateOrgRolePayload) GetType() (ret CreateOrgRolePayloadGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateOrgRolePayload) GetTypeOk() (ret CreateOrgRolePayloadGetTypeRetType, ok bool) {
	return getCreateOrgRolePayloadGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *CreateOrgRolePayload) SetType(v CreateOrgRolePayloadGetTypeRetType) {
	setCreateOrgRolePayloadGetTypeAttributeType(&o.Type, v)
}

// GetUserGuid returns the UserGuid field value if set, zero value otherwise.
func (o *CreateOrgRolePayload) GetUserGuid() (res CreateOrgRolePayloadGetUserGuidRetType) {
	res, _ = o.GetUserGuidOk()
	return
}

// GetUserGuidOk returns a tuple with the UserGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgRolePayload) GetUserGuidOk() (ret CreateOrgRolePayloadGetUserGuidRetType, ok bool) {
	return getCreateOrgRolePayloadGetUserGuidAttributeTypeOk(o.UserGuid)
}

// HasUserGuid returns a boolean if a field has been set.
func (o *CreateOrgRolePayload) HasUserGuid() bool {
	_, ok := o.GetUserGuidOk()
	return ok
}

// SetUserGuid gets a reference to the given string and assigns it to the UserGuid field.
func (o *CreateOrgRolePayload) SetUserGuid(v CreateOrgRolePayloadGetUserGuidRetType) {
	setCreateOrgRolePayloadGetUserGuidAttributeType(&o.UserGuid, v)
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *CreateOrgRolePayload) GetUserName() (res CreateOrgRolePayloadGetUserNameRetType) {
	res, _ = o.GetUserNameOk()
	return
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgRolePayload) GetUserNameOk() (ret CreateOrgRolePayloadGetUserNameRetType, ok bool) {
	return getCreateOrgRolePayloadGetUserNameAttributeTypeOk(o.UserName)
}

// HasUserName returns a boolean if a field has been set.
func (o *CreateOrgRolePayload) HasUserName() bool {
	_, ok := o.GetUserNameOk()
	return ok
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *CreateOrgRolePayload) SetUserName(v CreateOrgRolePayloadGetUserNameRetType) {
	setCreateOrgRolePayloadGetUserNameAttributeType(&o.UserName, v)
}

func (o CreateOrgRolePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateOrgRolePayloadGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	if val, ok := getCreateOrgRolePayloadGetUserGuidAttributeTypeOk(o.UserGuid); ok {
		toSerialize["UserGuid"] = val
	}
	if val, ok := getCreateOrgRolePayloadGetUserNameAttributeTypeOk(o.UserName); ok {
		toSerialize["UserName"] = val
	}
	return toSerialize, nil
}

type NullableCreateOrgRolePayload struct {
	value *CreateOrgRolePayload
	isSet bool
}

func (v NullableCreateOrgRolePayload) Get() *CreateOrgRolePayload {
	return v.value
}

func (v *NullableCreateOrgRolePayload) Set(val *CreateOrgRolePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrgRolePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrgRolePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrgRolePayload(val *CreateOrgRolePayload) *NullableCreateOrgRolePayload {
	return &NullableCreateOrgRolePayload{value: val, isSet: true}
}

func (v NullableCreateOrgRolePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrgRolePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
