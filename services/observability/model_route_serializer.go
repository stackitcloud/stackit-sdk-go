/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the RouteSerializer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteSerializer{}

/*
	types and functions for continue
*/

// isBoolean
type RouteSerializergetContinueAttributeType = *bool
type RouteSerializergetContinueArgType = bool
type RouteSerializergetContinueRetType = bool

func getRouteSerializergetContinueAttributeTypeOk(arg RouteSerializergetContinueAttributeType) (ret RouteSerializergetContinueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializergetContinueAttributeType(arg *RouteSerializergetContinueAttributeType, val RouteSerializergetContinueRetType) {
	*arg = &val
}

/*
	types and functions for groupBy
*/

// isArray
type RouteSerializerGetGroupByAttributeType = *[]string
type RouteSerializerGetGroupByArgType = []string
type RouteSerializerGetGroupByRetType = []string

func getRouteSerializerGetGroupByAttributeTypeOk(arg RouteSerializerGetGroupByAttributeType) (ret RouteSerializerGetGroupByRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetGroupByAttributeType(arg *RouteSerializerGetGroupByAttributeType, val RouteSerializerGetGroupByRetType) {
	*arg = &val
}

/*
	types and functions for groupInterval
*/

// isNotNullableString
type RouteSerializerGetGroupIntervalAttributeType = *string

func getRouteSerializerGetGroupIntervalAttributeTypeOk(arg RouteSerializerGetGroupIntervalAttributeType) (ret RouteSerializerGetGroupIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetGroupIntervalAttributeType(arg *RouteSerializerGetGroupIntervalAttributeType, val RouteSerializerGetGroupIntervalRetType) {
	*arg = &val
}

type RouteSerializerGetGroupIntervalArgType = string
type RouteSerializerGetGroupIntervalRetType = string

/*
	types and functions for groupWait
*/

// isNotNullableString
type RouteSerializerGetGroupWaitAttributeType = *string

func getRouteSerializerGetGroupWaitAttributeTypeOk(arg RouteSerializerGetGroupWaitAttributeType) (ret RouteSerializerGetGroupWaitRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetGroupWaitAttributeType(arg *RouteSerializerGetGroupWaitAttributeType, val RouteSerializerGetGroupWaitRetType) {
	*arg = &val
}

type RouteSerializerGetGroupWaitArgType = string
type RouteSerializerGetGroupWaitRetType = string

/*
	types and functions for match
*/

// isContainer
type RouteSerializerGetMatchAttributeType = *map[string]string
type RouteSerializerGetMatchArgType = map[string]string
type RouteSerializerGetMatchRetType = map[string]string

func getRouteSerializerGetMatchAttributeTypeOk(arg RouteSerializerGetMatchAttributeType) (ret RouteSerializerGetMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetMatchAttributeType(arg *RouteSerializerGetMatchAttributeType, val RouteSerializerGetMatchRetType) {
	*arg = &val
}

/*
	types and functions for matchRe
*/

// isContainer
type RouteSerializerGetMatchReAttributeType = *map[string]string
type RouteSerializerGetMatchReArgType = map[string]string
type RouteSerializerGetMatchReRetType = map[string]string

func getRouteSerializerGetMatchReAttributeTypeOk(arg RouteSerializerGetMatchReAttributeType) (ret RouteSerializerGetMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetMatchReAttributeType(arg *RouteSerializerGetMatchReAttributeType, val RouteSerializerGetMatchReRetType) {
	*arg = &val
}

/*
	types and functions for matchers
*/

// isArray
type RouteSerializerGetMatchersAttributeType = *[]string
type RouteSerializerGetMatchersArgType = []string
type RouteSerializerGetMatchersRetType = []string

func getRouteSerializerGetMatchersAttributeTypeOk(arg RouteSerializerGetMatchersAttributeType) (ret RouteSerializerGetMatchersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetMatchersAttributeType(arg *RouteSerializerGetMatchersAttributeType, val RouteSerializerGetMatchersRetType) {
	*arg = &val
}

/*
	types and functions for receiver
*/

// isNotNullableString
type RouteSerializerGetReceiverAttributeType = *string

func getRouteSerializerGetReceiverAttributeTypeOk(arg RouteSerializerGetReceiverAttributeType) (ret RouteSerializerGetReceiverRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetReceiverAttributeType(arg *RouteSerializerGetReceiverAttributeType, val RouteSerializerGetReceiverRetType) {
	*arg = &val
}

type RouteSerializerGetReceiverArgType = string
type RouteSerializerGetReceiverRetType = string

/*
	types and functions for repeatInterval
*/

// isNotNullableString
type RouteSerializerGetRepeatIntervalAttributeType = *string

func getRouteSerializerGetRepeatIntervalAttributeTypeOk(arg RouteSerializerGetRepeatIntervalAttributeType) (ret RouteSerializerGetRepeatIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetRepeatIntervalAttributeType(arg *RouteSerializerGetRepeatIntervalAttributeType, val RouteSerializerGetRepeatIntervalRetType) {
	*arg = &val
}

type RouteSerializerGetRepeatIntervalArgType = string
type RouteSerializerGetRepeatIntervalRetType = string

/*
	types and functions for routes
*/

// isArray
type RouteSerializerGetRoutesAttributeType = *[]map[string]string
type RouteSerializerGetRoutesArgType = []map[string]string
type RouteSerializerGetRoutesRetType = []map[string]string

func getRouteSerializerGetRoutesAttributeTypeOk(arg RouteSerializerGetRoutesAttributeType) (ret RouteSerializerGetRoutesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteSerializerGetRoutesAttributeType(arg *RouteSerializerGetRoutesAttributeType, val RouteSerializerGetRoutesRetType) {
	*arg = &val
}

// RouteSerializer struct for RouteSerializer
type RouteSerializer struct {
	Continue      RouteSerializergetContinueAttributeType      `json:"continue,omitempty"`
	GroupBy       RouteSerializerGetGroupByAttributeType       `json:"groupBy,omitempty"`
	GroupInterval RouteSerializerGetGroupIntervalAttributeType `json:"groupInterval,omitempty"`
	GroupWait     RouteSerializerGetGroupWaitAttributeType     `json:"groupWait,omitempty"`
	Match         RouteSerializerGetMatchAttributeType         `json:"match,omitempty"`
	MatchRe       RouteSerializerGetMatchReAttributeType       `json:"matchRe,omitempty"`
	Matchers      RouteSerializerGetMatchersAttributeType      `json:"matchers,omitempty"`
	// REQUIRED
	Receiver       RouteSerializerGetReceiverAttributeType       `json:"receiver"`
	RepeatInterval RouteSerializerGetRepeatIntervalAttributeType `json:"repeatInterval,omitempty"`
	Routes         RouteSerializerGetRoutesAttributeType         `json:"routes,omitempty"`
}

type _RouteSerializer RouteSerializer

// NewRouteSerializer instantiates a new RouteSerializer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteSerializer(receiver RouteSerializerGetReceiverArgType) *RouteSerializer {
	this := RouteSerializer{}
	setRouteSerializerGetReceiverAttributeType(&this.Receiver, receiver)
	return &this
}

// NewRouteSerializerWithDefaults instantiates a new RouteSerializer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteSerializerWithDefaults() *RouteSerializer {
	this := RouteSerializer{}
	var continue_ bool = false
	this.Continue = &continue_
	var groupInterval string = "5m"
	this.GroupInterval = &groupInterval
	var groupWait string = "30s"
	this.GroupWait = &groupWait
	var repeatInterval string = "4h"
	this.RepeatInterval = &repeatInterval
	return &this
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *RouteSerializer) GetContinue() (res RouteSerializergetContinueRetType) {
	res, _ = o.GetContinueOk()
	return
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetContinueOk() (ret RouteSerializergetContinueRetType, ok bool) {
	return getRouteSerializergetContinueAttributeTypeOk(o.Continue)
}

// HasContinue returns a boolean if a field has been set.
func (o *RouteSerializer) HasContinue() bool {
	_, ok := o.GetContinueOk()
	return ok
}

// SetContinue gets a reference to the given bool and assigns it to the Continue field.
func (o *RouteSerializer) SetContinue(v RouteSerializergetContinueRetType) {
	setRouteSerializergetContinueAttributeType(&o.Continue, v)
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *RouteSerializer) GetGroupBy() (res RouteSerializerGetGroupByRetType) {
	res, _ = o.GetGroupByOk()
	return
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetGroupByOk() (ret RouteSerializerGetGroupByRetType, ok bool) {
	return getRouteSerializerGetGroupByAttributeTypeOk(o.GroupBy)
}

// HasGroupBy returns a boolean if a field has been set.
func (o *RouteSerializer) HasGroupBy() bool {
	_, ok := o.GetGroupByOk()
	return ok
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *RouteSerializer) SetGroupBy(v RouteSerializerGetGroupByRetType) {
	setRouteSerializerGetGroupByAttributeType(&o.GroupBy, v)
}

// GetGroupInterval returns the GroupInterval field value if set, zero value otherwise.
func (o *RouteSerializer) GetGroupInterval() (res RouteSerializerGetGroupIntervalRetType) {
	res, _ = o.GetGroupIntervalOk()
	return
}

// GetGroupIntervalOk returns a tuple with the GroupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetGroupIntervalOk() (ret RouteSerializerGetGroupIntervalRetType, ok bool) {
	return getRouteSerializerGetGroupIntervalAttributeTypeOk(o.GroupInterval)
}

// HasGroupInterval returns a boolean if a field has been set.
func (o *RouteSerializer) HasGroupInterval() bool {
	_, ok := o.GetGroupIntervalOk()
	return ok
}

// SetGroupInterval gets a reference to the given string and assigns it to the GroupInterval field.
func (o *RouteSerializer) SetGroupInterval(v RouteSerializerGetGroupIntervalRetType) {
	setRouteSerializerGetGroupIntervalAttributeType(&o.GroupInterval, v)
}

// GetGroupWait returns the GroupWait field value if set, zero value otherwise.
func (o *RouteSerializer) GetGroupWait() (res RouteSerializerGetGroupWaitRetType) {
	res, _ = o.GetGroupWaitOk()
	return
}

// GetGroupWaitOk returns a tuple with the GroupWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetGroupWaitOk() (ret RouteSerializerGetGroupWaitRetType, ok bool) {
	return getRouteSerializerGetGroupWaitAttributeTypeOk(o.GroupWait)
}

// HasGroupWait returns a boolean if a field has been set.
func (o *RouteSerializer) HasGroupWait() bool {
	_, ok := o.GetGroupWaitOk()
	return ok
}

// SetGroupWait gets a reference to the given string and assigns it to the GroupWait field.
func (o *RouteSerializer) SetGroupWait(v RouteSerializerGetGroupWaitRetType) {
	setRouteSerializerGetGroupWaitAttributeType(&o.GroupWait, v)
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *RouteSerializer) GetMatch() (res RouteSerializerGetMatchRetType) {
	res, _ = o.GetMatchOk()
	return
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetMatchOk() (ret RouteSerializerGetMatchRetType, ok bool) {
	return getRouteSerializerGetMatchAttributeTypeOk(o.Match)
}

// HasMatch returns a boolean if a field has been set.
func (o *RouteSerializer) HasMatch() bool {
	_, ok := o.GetMatchOk()
	return ok
}

// SetMatch gets a reference to the given map[string]string and assigns it to the Match field.
func (o *RouteSerializer) SetMatch(v RouteSerializerGetMatchRetType) {
	setRouteSerializerGetMatchAttributeType(&o.Match, v)
}

// GetMatchRe returns the MatchRe field value if set, zero value otherwise.
func (o *RouteSerializer) GetMatchRe() (res RouteSerializerGetMatchReRetType) {
	res, _ = o.GetMatchReOk()
	return
}

// GetMatchReOk returns a tuple with the MatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetMatchReOk() (ret RouteSerializerGetMatchReRetType, ok bool) {
	return getRouteSerializerGetMatchReAttributeTypeOk(o.MatchRe)
}

// HasMatchRe returns a boolean if a field has been set.
func (o *RouteSerializer) HasMatchRe() bool {
	_, ok := o.GetMatchReOk()
	return ok
}

// SetMatchRe gets a reference to the given map[string]string and assigns it to the MatchRe field.
func (o *RouteSerializer) SetMatchRe(v RouteSerializerGetMatchReRetType) {
	setRouteSerializerGetMatchReAttributeType(&o.MatchRe, v)
}

// GetMatchers returns the Matchers field value if set, zero value otherwise.
func (o *RouteSerializer) GetMatchers() (res RouteSerializerGetMatchersRetType) {
	res, _ = o.GetMatchersOk()
	return
}

// GetMatchersOk returns a tuple with the Matchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetMatchersOk() (ret RouteSerializerGetMatchersRetType, ok bool) {
	return getRouteSerializerGetMatchersAttributeTypeOk(o.Matchers)
}

// HasMatchers returns a boolean if a field has been set.
func (o *RouteSerializer) HasMatchers() bool {
	_, ok := o.GetMatchersOk()
	return ok
}

// SetMatchers gets a reference to the given []string and assigns it to the Matchers field.
func (o *RouteSerializer) SetMatchers(v RouteSerializerGetMatchersRetType) {
	setRouteSerializerGetMatchersAttributeType(&o.Matchers, v)
}

// GetReceiver returns the Receiver field value
func (o *RouteSerializer) GetReceiver() (ret RouteSerializerGetReceiverRetType) {
	ret, _ = o.GetReceiverOk()
	return ret
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetReceiverOk() (ret RouteSerializerGetReceiverRetType, ok bool) {
	return getRouteSerializerGetReceiverAttributeTypeOk(o.Receiver)
}

// SetReceiver sets field value
func (o *RouteSerializer) SetReceiver(v RouteSerializerGetReceiverRetType) {
	setRouteSerializerGetReceiverAttributeType(&o.Receiver, v)
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *RouteSerializer) GetRepeatInterval() (res RouteSerializerGetRepeatIntervalRetType) {
	res, _ = o.GetRepeatIntervalOk()
	return
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetRepeatIntervalOk() (ret RouteSerializerGetRepeatIntervalRetType, ok bool) {
	return getRouteSerializerGetRepeatIntervalAttributeTypeOk(o.RepeatInterval)
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *RouteSerializer) HasRepeatInterval() bool {
	_, ok := o.GetRepeatIntervalOk()
	return ok
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *RouteSerializer) SetRepeatInterval(v RouteSerializerGetRepeatIntervalRetType) {
	setRouteSerializerGetRepeatIntervalAttributeType(&o.RepeatInterval, v)
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *RouteSerializer) GetRoutes() (res RouteSerializerGetRoutesRetType) {
	res, _ = o.GetRoutesOk()
	return
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer) GetRoutesOk() (ret RouteSerializerGetRoutesRetType, ok bool) {
	return getRouteSerializerGetRoutesAttributeTypeOk(o.Routes)
}

// HasRoutes returns a boolean if a field has been set.
func (o *RouteSerializer) HasRoutes() bool {
	_, ok := o.GetRoutesOk()
	return ok
}

// SetRoutes gets a reference to the given []map[string]string and assigns it to the Routes field.
func (o *RouteSerializer) SetRoutes(v RouteSerializerGetRoutesRetType) {
	setRouteSerializerGetRoutesAttributeType(&o.Routes, v)
}

func (o RouteSerializer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getRouteSerializergetContinueAttributeTypeOk(o.Continue); ok {
		toSerialize["Continue"] = val
	}
	if val, ok := getRouteSerializerGetGroupByAttributeTypeOk(o.GroupBy); ok {
		toSerialize["GroupBy"] = val
	}
	if val, ok := getRouteSerializerGetGroupIntervalAttributeTypeOk(o.GroupInterval); ok {
		toSerialize["GroupInterval"] = val
	}
	if val, ok := getRouteSerializerGetGroupWaitAttributeTypeOk(o.GroupWait); ok {
		toSerialize["GroupWait"] = val
	}
	if val, ok := getRouteSerializerGetMatchAttributeTypeOk(o.Match); ok {
		toSerialize["Match"] = val
	}
	if val, ok := getRouteSerializerGetMatchReAttributeTypeOk(o.MatchRe); ok {
		toSerialize["MatchRe"] = val
	}
	if val, ok := getRouteSerializerGetMatchersAttributeTypeOk(o.Matchers); ok {
		toSerialize["Matchers"] = val
	}
	if val, ok := getRouteSerializerGetReceiverAttributeTypeOk(o.Receiver); ok {
		toSerialize["Receiver"] = val
	}
	if val, ok := getRouteSerializerGetRepeatIntervalAttributeTypeOk(o.RepeatInterval); ok {
		toSerialize["RepeatInterval"] = val
	}
	if val, ok := getRouteSerializerGetRoutesAttributeTypeOk(o.Routes); ok {
		toSerialize["Routes"] = val
	}
	return toSerialize, nil
}

type NullableRouteSerializer struct {
	value *RouteSerializer
	isSet bool
}

func (v NullableRouteSerializer) Get() *RouteSerializer {
	return v.value
}

func (v *NullableRouteSerializer) Set(val *RouteSerializer) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteSerializer) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteSerializer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteSerializer(val *RouteSerializer) *NullableRouteSerializer {
	return &NullableRouteSerializer{value: val, isSet: true}
}

func (v NullableRouteSerializer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteSerializer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
