/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the Alert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alert{}

// Alert struct for Alert
type Alert struct {
	Global       *Global         `json:"global,omitempty"`
	InhibitRules *[]InhibitRules `json:"inhibitRules,omitempty"`
	// REQUIRED
	Receivers *[]Receivers `json:"receivers"`
	// REQUIRED
	Route *Route `json:"route"`
}

type _Alert Alert

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert(receivers *[]Receivers, route *Route) *Alert {
	this := Alert{}
	this.Receivers = receivers
	this.Route = route
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *Alert) GetGlobal() *Global {
	if o == nil || IsNil(o.Global) {
		var ret *Global
		return ret
	}
	return o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetGlobalOk() (*Global, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *Alert) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given Global and assigns it to the Global field.
func (o *Alert) SetGlobal(v *Global) {
	o.Global = v
}

// GetInhibitRules returns the InhibitRules field value if set, zero value otherwise.
func (o *Alert) GetInhibitRules() *[]InhibitRules {
	if o == nil || IsNil(o.InhibitRules) {
		var ret *[]InhibitRules
		return ret
	}
	return o.InhibitRules
}

// GetInhibitRulesOk returns a tuple with the InhibitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetInhibitRulesOk() (*[]InhibitRules, bool) {
	if o == nil || IsNil(o.InhibitRules) {
		return nil, false
	}
	return o.InhibitRules, true
}

// HasInhibitRules returns a boolean if a field has been set.
func (o *Alert) HasInhibitRules() bool {
	if o != nil && !IsNil(o.InhibitRules) {
		return true
	}

	return false
}

// SetInhibitRules gets a reference to the given []InhibitRules and assigns it to the InhibitRules field.
func (o *Alert) SetInhibitRules(v *[]InhibitRules) {
	o.InhibitRules = v
}

// GetReceivers returns the Receivers field value
func (o *Alert) GetReceivers() *[]Receivers {
	if o == nil || IsNil(o.Receivers) {
		var ret *[]Receivers
		return ret
	}

	return o.Receivers
}

// GetReceiversOk returns a tuple with the Receivers field value
// and a boolean to check if the value has been set.
func (o *Alert) GetReceiversOk() (*[]Receivers, bool) {
	if o == nil {
		return nil, false
	}
	return o.Receivers, true
}

// SetReceivers sets field value
func (o *Alert) SetReceivers(v *[]Receivers) {
	o.Receivers = v
}

// GetRoute returns the Route field value
func (o *Alert) GetRoute() *Route {
	if o == nil || IsNil(o.Route) {
		var ret *Route
		return ret
	}

	return o.Route
}

// GetRouteOk returns a tuple with the Route field value
// and a boolean to check if the value has been set.
func (o *Alert) GetRouteOk() (*Route, bool) {
	if o == nil {
		return nil, false
	}
	return o.Route, true
}

// SetRoute sets field value
func (o *Alert) SetRoute(v *Route) {
	o.Route = v
}

func (o Alert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.InhibitRules) {
		toSerialize["inhibitRules"] = o.InhibitRules
	}
	toSerialize["receivers"] = o.Receivers
	toSerialize["route"] = o.Route
	return toSerialize, nil
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
