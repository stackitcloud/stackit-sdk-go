/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
	"fmt"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

/*
	types and functions for cluster
*/

// isNotNullableString
type InstanceGetClusterAttributeType = *string

func getInstanceGetClusterAttributeTypeOk(arg InstanceGetClusterAttributeType) (ret InstanceGetClusterRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetClusterAttributeType(arg *InstanceGetClusterAttributeType, val InstanceGetClusterRetType) {
	*arg = &val
}

type InstanceGetClusterArgType = string
type InstanceGetClusterRetType = string

/*
	types and functions for grafanaPublicReadAccess
*/

// isBoolean
type InstancegetGrafanaPublicReadAccessAttributeType = *bool
type InstancegetGrafanaPublicReadAccessArgType = bool
type InstancegetGrafanaPublicReadAccessRetType = bool

func getInstancegetGrafanaPublicReadAccessAttributeTypeOk(arg InstancegetGrafanaPublicReadAccessAttributeType) (ret InstancegetGrafanaPublicReadAccessRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstancegetGrafanaPublicReadAccessAttributeType(arg *InstancegetGrafanaPublicReadAccessAttributeType, val InstancegetGrafanaPublicReadAccessRetType) {
	*arg = &val
}

/*
	types and functions for grafanaUseStackitSso
*/

// isBoolean
type InstancegetGrafanaUseStackitSsoAttributeType = *bool
type InstancegetGrafanaUseStackitSsoArgType = bool
type InstancegetGrafanaUseStackitSsoRetType = bool

func getInstancegetGrafanaUseStackitSsoAttributeTypeOk(arg InstancegetGrafanaUseStackitSsoAttributeType) (ret InstancegetGrafanaUseStackitSsoRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstancegetGrafanaUseStackitSsoAttributeType(arg *InstancegetGrafanaUseStackitSsoAttributeType, val InstancegetGrafanaUseStackitSsoRetType) {
	*arg = &val
}

/*
	types and functions for instance
*/

// isNotNullableString
type InstanceGetInstanceAttributeType = *string

func getInstanceGetInstanceAttributeTypeOk(arg InstanceGetInstanceAttributeType) (ret InstanceGetInstanceRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetInstanceAttributeType(arg *InstanceGetInstanceAttributeType, val InstanceGetInstanceRetType) {
	*arg = &val
}

type InstanceGetInstanceArgType = string
type InstanceGetInstanceRetType = string

/*
	types and functions for metricsRetentionTime1h
*/

// isInteger
type InstanceGetMetricsRetentionTime1hAttributeType = *int64
type InstanceGetMetricsRetentionTime1hArgType = int64
type InstanceGetMetricsRetentionTime1hRetType = int64

func getInstanceGetMetricsRetentionTime1hAttributeTypeOk(arg InstanceGetMetricsRetentionTime1hAttributeType) (ret InstanceGetMetricsRetentionTime1hRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetMetricsRetentionTime1hAttributeType(arg *InstanceGetMetricsRetentionTime1hAttributeType, val InstanceGetMetricsRetentionTime1hRetType) {
	*arg = &val
}

/*
	types and functions for metricsRetentionTime5m
*/

// isInteger
type InstanceGetMetricsRetentionTime5mAttributeType = *int64
type InstanceGetMetricsRetentionTime5mArgType = int64
type InstanceGetMetricsRetentionTime5mRetType = int64

func getInstanceGetMetricsRetentionTime5mAttributeTypeOk(arg InstanceGetMetricsRetentionTime5mAttributeType) (ret InstanceGetMetricsRetentionTime5mRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetMetricsRetentionTime5mAttributeType(arg *InstanceGetMetricsRetentionTime5mAttributeType, val InstanceGetMetricsRetentionTime5mRetType) {
	*arg = &val
}

/*
	types and functions for metricsRetentionTimeRaw
*/

// isInteger
type InstanceGetMetricsRetentionTimeRawAttributeType = *int64
type InstanceGetMetricsRetentionTimeRawArgType = int64
type InstanceGetMetricsRetentionTimeRawRetType = int64

func getInstanceGetMetricsRetentionTimeRawAttributeTypeOk(arg InstanceGetMetricsRetentionTimeRawAttributeType) (ret InstanceGetMetricsRetentionTimeRawRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetMetricsRetentionTimeRawAttributeType(arg *InstanceGetMetricsRetentionTimeRawAttributeType, val InstanceGetMetricsRetentionTimeRawRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type InstanceGetNameAttributeType = *string

func getInstanceGetNameAttributeTypeOk(arg InstanceGetNameAttributeType) (ret InstanceGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetNameAttributeType(arg *InstanceGetNameAttributeType, val InstanceGetNameRetType) {
	*arg = &val
}

type InstanceGetNameArgType = string
type InstanceGetNameRetType = string

/*
	types and functions for plan
*/

// isModel
type InstanceGetPlanAttributeType = *PlanModel
type InstanceGetPlanArgType = PlanModel
type InstanceGetPlanRetType = PlanModel

func getInstanceGetPlanAttributeTypeOk(arg InstanceGetPlanAttributeType) (ret InstanceGetPlanRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetPlanAttributeType(arg *InstanceGetPlanAttributeType, val InstanceGetPlanRetType) {
	*arg = &val
}

/*
	types and functions for state
*/

// isEnum

// InstanceState the model 'Instance'
type InstanceState string

// List of State
const (
	INSTANCESTATE_CREATION_STARTED                                                   InstanceState = "Component creation started"
	INSTANCESTATE_CREATION_FAILED                                                    InstanceState = "Component creation failed"
	INSTANCESTATE_CREATION_SUCCEEDED__NOW_NEED_TO_CHECK_READINESS                    InstanceState = "Component creation succeeded. Now need to check readiness"
	INSTANCESTATE_CREATION_SUCCEEDED                                                 InstanceState = "Component creation succeeded"
	INSTANCESTATE_DELETION_STARTED                                                   InstanceState = "Component deletion started"
	INSTANCESTATE_DELETION_FAILED                                                    InstanceState = "Component deletion failed"
	INSTANCESTATE_DELETION_SUCCEEDED                                                 InstanceState = "Component deletion succeeded"
	INSTANCESTATE_DELETION_OF_ROUTINE_SUCCEEDED__NOW_NEED_TO_CHECK_IF_RESOURCES_GONE InstanceState = "Component deletion of routine succeeded. Now need to check if resources gone"
	INSTANCESTATE_DELETION_BUCKETS_SUCCEEDED                                         InstanceState = "Component deletion buckets succeeded"
	INSTANCESTATE_UPDATE_FAILED                                                      InstanceState = "Component update failed"
	INSTANCESTATE_UPDATE_STARTED                                                     InstanceState = "Component update started"
	INSTANCESTATE_UPDATE_CREATION_SUCCEEDED                                          InstanceState = "Component update creation succeeded"
	INSTANCESTATE_UPDATE_DOWNGRADE_DELETION_RESOURCES_SUCCEEDED                      InstanceState = "Component update downgrade deletion resources succeeded"
)

// All allowed values of Instance enum
var AllowedInstanceStateEnumValues = []InstanceState{
	"Component creation started",
	"Component creation failed",
	"Component creation succeeded. Now need to check readiness",
	"Component creation succeeded",
	"Component deletion started",
	"Component deletion failed",
	"Component deletion succeeded",
	"Component deletion of routine succeeded. Now need to check if resources gone",
	"Component deletion buckets succeeded",
	"Component update failed",
	"Component update started",
	"Component update creation succeeded",
	"Component update downgrade deletion resources succeeded",
}

func (v *InstanceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InstanceState(value)
	for _, existing := range AllowedInstanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Instance", value)
}

// NewInstanceStateFromValue returns a pointer to a valid InstanceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceStateFromValue(v string) (*InstanceState, error) {
	ev := InstanceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceState: valid values are %v", v, AllowedInstanceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceState) IsValid() bool {
	for _, existing := range AllowedInstanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v InstanceState) Ptr() *InstanceState {
	return &v
}

type NullableInstanceState struct {
	value *InstanceState
	isSet bool
}

func (v NullableInstanceState) Get() *InstanceState {
	return v.value
}

func (v *NullableInstanceState) Set(val *InstanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceState(val *InstanceState) *NullableInstanceState {
	return &NullableInstanceState{value: val, isSet: true}
}

func (v NullableInstanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type InstanceGetStateAttributeType = *InstanceState
type InstanceGetStateArgType = InstanceState
type InstanceGetStateRetType = InstanceState

func getInstanceGetStateAttributeTypeOk(arg InstanceGetStateAttributeType) (ret InstanceGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetStateAttributeType(arg *InstanceGetStateAttributeType, val InstanceGetStateRetType) {
	*arg = &val
}

// Instance struct for Instance
type Instance struct {
	// REQUIRED
	Cluster InstanceGetClusterAttributeType `json:"cluster"`
	// REQUIRED
	GrafanaPublicReadAccess InstancegetGrafanaPublicReadAccessAttributeType `json:"grafanaPublicReadAccess"`
	// REQUIRED
	GrafanaUseStackitSso InstancegetGrafanaUseStackitSsoAttributeType `json:"grafanaUseStackitSso"`
	// REQUIRED
	Instance InstanceGetInstanceAttributeType `json:"instance"`
	// REQUIRED
	MetricsRetentionTime1h InstanceGetMetricsRetentionTime1hAttributeType `json:"metricsRetentionTime1h"`
	// REQUIRED
	MetricsRetentionTime5m InstanceGetMetricsRetentionTime5mAttributeType `json:"metricsRetentionTime5m"`
	// REQUIRED
	MetricsRetentionTimeRaw InstanceGetMetricsRetentionTimeRawAttributeType `json:"metricsRetentionTimeRaw"`
	Name                    InstanceGetNameAttributeType                    `json:"name,omitempty"`
	// REQUIRED
	Plan  InstanceGetPlanAttributeType  `json:"plan"`
	State InstanceGetStateAttributeType `json:"state,omitempty"`
}

type _Instance Instance

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance(cluster InstanceGetClusterArgType, grafanaPublicReadAccess InstancegetGrafanaPublicReadAccessArgType, grafanaUseStackitSso InstancegetGrafanaUseStackitSsoArgType, instance InstanceGetInstanceArgType, metricsRetentionTime1h InstanceGetMetricsRetentionTime1hArgType, metricsRetentionTime5m InstanceGetMetricsRetentionTime5mArgType, metricsRetentionTimeRaw InstanceGetMetricsRetentionTimeRawArgType, plan InstanceGetPlanArgType) *Instance {
	this := Instance{}
	setInstanceGetClusterAttributeType(&this.Cluster, cluster)
	setInstancegetGrafanaPublicReadAccessAttributeType(&this.GrafanaPublicReadAccess, grafanaPublicReadAccess)
	setInstancegetGrafanaUseStackitSsoAttributeType(&this.GrafanaUseStackitSso, grafanaUseStackitSso)
	setInstanceGetInstanceAttributeType(&this.Instance, instance)
	setInstanceGetMetricsRetentionTime1hAttributeType(&this.MetricsRetentionTime1h, metricsRetentionTime1h)
	setInstanceGetMetricsRetentionTime5mAttributeType(&this.MetricsRetentionTime5m, metricsRetentionTime5m)
	setInstanceGetMetricsRetentionTimeRawAttributeType(&this.MetricsRetentionTimeRaw, metricsRetentionTimeRaw)
	setInstanceGetPlanAttributeType(&this.Plan, plan)
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *Instance) GetCluster() (ret InstanceGetClusterRetType) {
	ret, _ = o.GetClusterOk()
	return ret
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *Instance) GetClusterOk() (ret InstanceGetClusterRetType, ok bool) {
	return getInstanceGetClusterAttributeTypeOk(o.Cluster)
}

// SetCluster sets field value
func (o *Instance) SetCluster(v InstanceGetClusterRetType) {
	setInstanceGetClusterAttributeType(&o.Cluster, v)
}

// GetGrafanaPublicReadAccess returns the GrafanaPublicReadAccess field value
func (o *Instance) GetGrafanaPublicReadAccess() (ret InstancegetGrafanaPublicReadAccessRetType) {
	ret, _ = o.GetGrafanaPublicReadAccessOk()
	return ret
}

// GetGrafanaPublicReadAccessOk returns a tuple with the GrafanaPublicReadAccess field value
// and a boolean to check if the value has been set.
func (o *Instance) GetGrafanaPublicReadAccessOk() (ret InstancegetGrafanaPublicReadAccessRetType, ok bool) {
	return getInstancegetGrafanaPublicReadAccessAttributeTypeOk(o.GrafanaPublicReadAccess)
}

// SetGrafanaPublicReadAccess sets field value
func (o *Instance) SetGrafanaPublicReadAccess(v InstancegetGrafanaPublicReadAccessRetType) {
	setInstancegetGrafanaPublicReadAccessAttributeType(&o.GrafanaPublicReadAccess, v)
}

// GetGrafanaUseStackitSso returns the GrafanaUseStackitSso field value
func (o *Instance) GetGrafanaUseStackitSso() (ret InstancegetGrafanaUseStackitSsoRetType) {
	ret, _ = o.GetGrafanaUseStackitSsoOk()
	return ret
}

// GetGrafanaUseStackitSsoOk returns a tuple with the GrafanaUseStackitSso field value
// and a boolean to check if the value has been set.
func (o *Instance) GetGrafanaUseStackitSsoOk() (ret InstancegetGrafanaUseStackitSsoRetType, ok bool) {
	return getInstancegetGrafanaUseStackitSsoAttributeTypeOk(o.GrafanaUseStackitSso)
}

// SetGrafanaUseStackitSso sets field value
func (o *Instance) SetGrafanaUseStackitSso(v InstancegetGrafanaUseStackitSsoRetType) {
	setInstancegetGrafanaUseStackitSsoAttributeType(&o.GrafanaUseStackitSso, v)
}

// GetInstance returns the Instance field value
func (o *Instance) GetInstance() (ret InstanceGetInstanceRetType) {
	ret, _ = o.GetInstanceOk()
	return ret
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *Instance) GetInstanceOk() (ret InstanceGetInstanceRetType, ok bool) {
	return getInstanceGetInstanceAttributeTypeOk(o.Instance)
}

// SetInstance sets field value
func (o *Instance) SetInstance(v InstanceGetInstanceRetType) {
	setInstanceGetInstanceAttributeType(&o.Instance, v)
}

// GetMetricsRetentionTime1h returns the MetricsRetentionTime1h field value
func (o *Instance) GetMetricsRetentionTime1h() (ret InstanceGetMetricsRetentionTime1hRetType) {
	ret, _ = o.GetMetricsRetentionTime1hOk()
	return ret
}

// GetMetricsRetentionTime1hOk returns a tuple with the MetricsRetentionTime1h field value
// and a boolean to check if the value has been set.
func (o *Instance) GetMetricsRetentionTime1hOk() (ret InstanceGetMetricsRetentionTime1hRetType, ok bool) {
	return getInstanceGetMetricsRetentionTime1hAttributeTypeOk(o.MetricsRetentionTime1h)
}

// SetMetricsRetentionTime1h sets field value
func (o *Instance) SetMetricsRetentionTime1h(v InstanceGetMetricsRetentionTime1hRetType) {
	setInstanceGetMetricsRetentionTime1hAttributeType(&o.MetricsRetentionTime1h, v)
}

// GetMetricsRetentionTime5m returns the MetricsRetentionTime5m field value
func (o *Instance) GetMetricsRetentionTime5m() (ret InstanceGetMetricsRetentionTime5mRetType) {
	ret, _ = o.GetMetricsRetentionTime5mOk()
	return ret
}

// GetMetricsRetentionTime5mOk returns a tuple with the MetricsRetentionTime5m field value
// and a boolean to check if the value has been set.
func (o *Instance) GetMetricsRetentionTime5mOk() (ret InstanceGetMetricsRetentionTime5mRetType, ok bool) {
	return getInstanceGetMetricsRetentionTime5mAttributeTypeOk(o.MetricsRetentionTime5m)
}

// SetMetricsRetentionTime5m sets field value
func (o *Instance) SetMetricsRetentionTime5m(v InstanceGetMetricsRetentionTime5mRetType) {
	setInstanceGetMetricsRetentionTime5mAttributeType(&o.MetricsRetentionTime5m, v)
}

// GetMetricsRetentionTimeRaw returns the MetricsRetentionTimeRaw field value
func (o *Instance) GetMetricsRetentionTimeRaw() (ret InstanceGetMetricsRetentionTimeRawRetType) {
	ret, _ = o.GetMetricsRetentionTimeRawOk()
	return ret
}

// GetMetricsRetentionTimeRawOk returns a tuple with the MetricsRetentionTimeRaw field value
// and a boolean to check if the value has been set.
func (o *Instance) GetMetricsRetentionTimeRawOk() (ret InstanceGetMetricsRetentionTimeRawRetType, ok bool) {
	return getInstanceGetMetricsRetentionTimeRawAttributeTypeOk(o.MetricsRetentionTimeRaw)
}

// SetMetricsRetentionTimeRaw sets field value
func (o *Instance) SetMetricsRetentionTimeRaw(v InstanceGetMetricsRetentionTimeRawRetType) {
	setInstanceGetMetricsRetentionTimeRawAttributeType(&o.MetricsRetentionTimeRaw, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Instance) GetName() (res InstanceGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetNameOk() (ret InstanceGetNameRetType, ok bool) {
	return getInstanceGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *Instance) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Instance) SetName(v InstanceGetNameRetType) {
	setInstanceGetNameAttributeType(&o.Name, v)
}

// GetPlan returns the Plan field value
func (o *Instance) GetPlan() (ret InstanceGetPlanRetType) {
	ret, _ = o.GetPlanOk()
	return ret
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *Instance) GetPlanOk() (ret InstanceGetPlanRetType, ok bool) {
	return getInstanceGetPlanAttributeTypeOk(o.Plan)
}

// SetPlan sets field value
func (o *Instance) SetPlan(v InstanceGetPlanRetType) {
	setInstanceGetPlanAttributeType(&o.Plan, v)
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Instance) GetState() (res InstanceGetStateRetType) {
	res, _ = o.GetStateOk()
	return
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetStateOk() (ret InstanceGetStateRetType, ok bool) {
	return getInstanceGetStateAttributeTypeOk(o.State)
}

// HasState returns a boolean if a field has been set.
func (o *Instance) HasState() bool {
	_, ok := o.GetStateOk()
	return ok
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Instance) SetState(v InstanceGetStateRetType) {
	setInstanceGetStateAttributeType(&o.State, v)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceGetClusterAttributeTypeOk(o.Cluster); ok {
		toSerialize["Cluster"] = val
	}
	if val, ok := getInstancegetGrafanaPublicReadAccessAttributeTypeOk(o.GrafanaPublicReadAccess); ok {
		toSerialize["GrafanaPublicReadAccess"] = val
	}
	if val, ok := getInstancegetGrafanaUseStackitSsoAttributeTypeOk(o.GrafanaUseStackitSso); ok {
		toSerialize["GrafanaUseStackitSso"] = val
	}
	if val, ok := getInstanceGetInstanceAttributeTypeOk(o.Instance); ok {
		toSerialize["Instance"] = val
	}
	if val, ok := getInstanceGetMetricsRetentionTime1hAttributeTypeOk(o.MetricsRetentionTime1h); ok {
		toSerialize["MetricsRetentionTime1h"] = val
	}
	if val, ok := getInstanceGetMetricsRetentionTime5mAttributeTypeOk(o.MetricsRetentionTime5m); ok {
		toSerialize["MetricsRetentionTime5m"] = val
	}
	if val, ok := getInstanceGetMetricsRetentionTimeRawAttributeTypeOk(o.MetricsRetentionTimeRaw); ok {
		toSerialize["MetricsRetentionTimeRaw"] = val
	}
	if val, ok := getInstanceGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getInstanceGetPlanAttributeTypeOk(o.Plan); ok {
		toSerialize["Plan"] = val
	}
	if val, ok := getInstanceGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	return toSerialize, nil
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
