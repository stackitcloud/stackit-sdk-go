/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the InhibitRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InhibitRules{}

/*
	types and functions for equal
*/

// isArray
type InhibitRulesGetEqualAttributeType = *[]string
type InhibitRulesGetEqualArgType = []string
type InhibitRulesGetEqualRetType = []string

func getInhibitRulesGetEqualAttributeTypeOk(arg InhibitRulesGetEqualAttributeType) (ret InhibitRulesGetEqualRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetEqualAttributeType(arg *InhibitRulesGetEqualAttributeType, val InhibitRulesGetEqualRetType) {
	*arg = &val
}

/*
	types and functions for sourceMatch
*/

// isContainer
type InhibitRulesGetSourceMatchAttributeType = *map[string]string
type InhibitRulesGetSourceMatchArgType = map[string]string
type InhibitRulesGetSourceMatchRetType = map[string]string

func getInhibitRulesGetSourceMatchAttributeTypeOk(arg InhibitRulesGetSourceMatchAttributeType) (ret InhibitRulesGetSourceMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetSourceMatchAttributeType(arg *InhibitRulesGetSourceMatchAttributeType, val InhibitRulesGetSourceMatchRetType) {
	*arg = &val
}

/*
	types and functions for sourceMatchRe
*/

// isContainer
type InhibitRulesGetSourceMatchReAttributeType = *map[string]string
type InhibitRulesGetSourceMatchReArgType = map[string]string
type InhibitRulesGetSourceMatchReRetType = map[string]string

func getInhibitRulesGetSourceMatchReAttributeTypeOk(arg InhibitRulesGetSourceMatchReAttributeType) (ret InhibitRulesGetSourceMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetSourceMatchReAttributeType(arg *InhibitRulesGetSourceMatchReAttributeType, val InhibitRulesGetSourceMatchReRetType) {
	*arg = &val
}

/*
	types and functions for sourceMatchers
*/

// isArray
type InhibitRulesGetSourceMatchersAttributeType = *[]string
type InhibitRulesGetSourceMatchersArgType = []string
type InhibitRulesGetSourceMatchersRetType = []string

func getInhibitRulesGetSourceMatchersAttributeTypeOk(arg InhibitRulesGetSourceMatchersAttributeType) (ret InhibitRulesGetSourceMatchersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetSourceMatchersAttributeType(arg *InhibitRulesGetSourceMatchersAttributeType, val InhibitRulesGetSourceMatchersRetType) {
	*arg = &val
}

/*
	types and functions for targetMatch
*/

// isContainer
type InhibitRulesGetTargetMatchAttributeType = *map[string]string
type InhibitRulesGetTargetMatchArgType = map[string]string
type InhibitRulesGetTargetMatchRetType = map[string]string

func getInhibitRulesGetTargetMatchAttributeTypeOk(arg InhibitRulesGetTargetMatchAttributeType) (ret InhibitRulesGetTargetMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetTargetMatchAttributeType(arg *InhibitRulesGetTargetMatchAttributeType, val InhibitRulesGetTargetMatchRetType) {
	*arg = &val
}

/*
	types and functions for targetMatchRe
*/

// isContainer
type InhibitRulesGetTargetMatchReAttributeType = *map[string]string
type InhibitRulesGetTargetMatchReArgType = map[string]string
type InhibitRulesGetTargetMatchReRetType = map[string]string

func getInhibitRulesGetTargetMatchReAttributeTypeOk(arg InhibitRulesGetTargetMatchReAttributeType) (ret InhibitRulesGetTargetMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetTargetMatchReAttributeType(arg *InhibitRulesGetTargetMatchReAttributeType, val InhibitRulesGetTargetMatchReRetType) {
	*arg = &val
}

/*
	types and functions for targetMatchers
*/

// isArray
type InhibitRulesGetTargetMatchersAttributeType = *[]string
type InhibitRulesGetTargetMatchersArgType = []string
type InhibitRulesGetTargetMatchersRetType = []string

func getInhibitRulesGetTargetMatchersAttributeTypeOk(arg InhibitRulesGetTargetMatchersAttributeType) (ret InhibitRulesGetTargetMatchersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInhibitRulesGetTargetMatchersAttributeType(arg *InhibitRulesGetTargetMatchersAttributeType, val InhibitRulesGetTargetMatchersRetType) {
	*arg = &val
}

// InhibitRules struct for InhibitRules
type InhibitRules struct {
	Equal          InhibitRulesGetEqualAttributeType          `json:"equal,omitempty"`
	SourceMatch    InhibitRulesGetSourceMatchAttributeType    `json:"sourceMatch,omitempty"`
	SourceMatchRe  InhibitRulesGetSourceMatchReAttributeType  `json:"sourceMatchRe,omitempty"`
	SourceMatchers InhibitRulesGetSourceMatchersAttributeType `json:"sourceMatchers,omitempty"`
	TargetMatch    InhibitRulesGetTargetMatchAttributeType    `json:"targetMatch,omitempty"`
	TargetMatchRe  InhibitRulesGetTargetMatchReAttributeType  `json:"targetMatchRe,omitempty"`
	TargetMatchers InhibitRulesGetTargetMatchersAttributeType `json:"targetMatchers,omitempty"`
}

// NewInhibitRules instantiates a new InhibitRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInhibitRules() *InhibitRules {
	this := InhibitRules{}
	return &this
}

// NewInhibitRulesWithDefaults instantiates a new InhibitRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInhibitRulesWithDefaults() *InhibitRules {
	this := InhibitRules{}
	return &this
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *InhibitRules) GetEqual() (res InhibitRulesGetEqualRetType) {
	res, _ = o.GetEqualOk()
	return
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetEqualOk() (ret InhibitRulesGetEqualRetType, ok bool) {
	return getInhibitRulesGetEqualAttributeTypeOk(o.Equal)
}

// HasEqual returns a boolean if a field has been set.
func (o *InhibitRules) HasEqual() bool {
	_, ok := o.GetEqualOk()
	return ok
}

// SetEqual gets a reference to the given []string and assigns it to the Equal field.
func (o *InhibitRules) SetEqual(v InhibitRulesGetEqualRetType) {
	setInhibitRulesGetEqualAttributeType(&o.Equal, v)
}

// GetSourceMatch returns the SourceMatch field value if set, zero value otherwise.
func (o *InhibitRules) GetSourceMatch() (res InhibitRulesGetSourceMatchRetType) {
	res, _ = o.GetSourceMatchOk()
	return
}

// GetSourceMatchOk returns a tuple with the SourceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetSourceMatchOk() (ret InhibitRulesGetSourceMatchRetType, ok bool) {
	return getInhibitRulesGetSourceMatchAttributeTypeOk(o.SourceMatch)
}

// HasSourceMatch returns a boolean if a field has been set.
func (o *InhibitRules) HasSourceMatch() bool {
	_, ok := o.GetSourceMatchOk()
	return ok
}

// SetSourceMatch gets a reference to the given map[string]string and assigns it to the SourceMatch field.
func (o *InhibitRules) SetSourceMatch(v InhibitRulesGetSourceMatchRetType) {
	setInhibitRulesGetSourceMatchAttributeType(&o.SourceMatch, v)
}

// GetSourceMatchRe returns the SourceMatchRe field value if set, zero value otherwise.
func (o *InhibitRules) GetSourceMatchRe() (res InhibitRulesGetSourceMatchReRetType) {
	res, _ = o.GetSourceMatchReOk()
	return
}

// GetSourceMatchReOk returns a tuple with the SourceMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetSourceMatchReOk() (ret InhibitRulesGetSourceMatchReRetType, ok bool) {
	return getInhibitRulesGetSourceMatchReAttributeTypeOk(o.SourceMatchRe)
}

// HasSourceMatchRe returns a boolean if a field has been set.
func (o *InhibitRules) HasSourceMatchRe() bool {
	_, ok := o.GetSourceMatchReOk()
	return ok
}

// SetSourceMatchRe gets a reference to the given map[string]string and assigns it to the SourceMatchRe field.
func (o *InhibitRules) SetSourceMatchRe(v InhibitRulesGetSourceMatchReRetType) {
	setInhibitRulesGetSourceMatchReAttributeType(&o.SourceMatchRe, v)
}

// GetSourceMatchers returns the SourceMatchers field value if set, zero value otherwise.
func (o *InhibitRules) GetSourceMatchers() (res InhibitRulesGetSourceMatchersRetType) {
	res, _ = o.GetSourceMatchersOk()
	return
}

// GetSourceMatchersOk returns a tuple with the SourceMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetSourceMatchersOk() (ret InhibitRulesGetSourceMatchersRetType, ok bool) {
	return getInhibitRulesGetSourceMatchersAttributeTypeOk(o.SourceMatchers)
}

// HasSourceMatchers returns a boolean if a field has been set.
func (o *InhibitRules) HasSourceMatchers() bool {
	_, ok := o.GetSourceMatchersOk()
	return ok
}

// SetSourceMatchers gets a reference to the given []string and assigns it to the SourceMatchers field.
func (o *InhibitRules) SetSourceMatchers(v InhibitRulesGetSourceMatchersRetType) {
	setInhibitRulesGetSourceMatchersAttributeType(&o.SourceMatchers, v)
}

// GetTargetMatch returns the TargetMatch field value if set, zero value otherwise.
func (o *InhibitRules) GetTargetMatch() (res InhibitRulesGetTargetMatchRetType) {
	res, _ = o.GetTargetMatchOk()
	return
}

// GetTargetMatchOk returns a tuple with the TargetMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetTargetMatchOk() (ret InhibitRulesGetTargetMatchRetType, ok bool) {
	return getInhibitRulesGetTargetMatchAttributeTypeOk(o.TargetMatch)
}

// HasTargetMatch returns a boolean if a field has been set.
func (o *InhibitRules) HasTargetMatch() bool {
	_, ok := o.GetTargetMatchOk()
	return ok
}

// SetTargetMatch gets a reference to the given map[string]string and assigns it to the TargetMatch field.
func (o *InhibitRules) SetTargetMatch(v InhibitRulesGetTargetMatchRetType) {
	setInhibitRulesGetTargetMatchAttributeType(&o.TargetMatch, v)
}

// GetTargetMatchRe returns the TargetMatchRe field value if set, zero value otherwise.
func (o *InhibitRules) GetTargetMatchRe() (res InhibitRulesGetTargetMatchReRetType) {
	res, _ = o.GetTargetMatchReOk()
	return
}

// GetTargetMatchReOk returns a tuple with the TargetMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetTargetMatchReOk() (ret InhibitRulesGetTargetMatchReRetType, ok bool) {
	return getInhibitRulesGetTargetMatchReAttributeTypeOk(o.TargetMatchRe)
}

// HasTargetMatchRe returns a boolean if a field has been set.
func (o *InhibitRules) HasTargetMatchRe() bool {
	_, ok := o.GetTargetMatchReOk()
	return ok
}

// SetTargetMatchRe gets a reference to the given map[string]string and assigns it to the TargetMatchRe field.
func (o *InhibitRules) SetTargetMatchRe(v InhibitRulesGetTargetMatchReRetType) {
	setInhibitRulesGetTargetMatchReAttributeType(&o.TargetMatchRe, v)
}

// GetTargetMatchers returns the TargetMatchers field value if set, zero value otherwise.
func (o *InhibitRules) GetTargetMatchers() (res InhibitRulesGetTargetMatchersRetType) {
	res, _ = o.GetTargetMatchersOk()
	return
}

// GetTargetMatchersOk returns a tuple with the TargetMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetTargetMatchersOk() (ret InhibitRulesGetTargetMatchersRetType, ok bool) {
	return getInhibitRulesGetTargetMatchersAttributeTypeOk(o.TargetMatchers)
}

// HasTargetMatchers returns a boolean if a field has been set.
func (o *InhibitRules) HasTargetMatchers() bool {
	_, ok := o.GetTargetMatchersOk()
	return ok
}

// SetTargetMatchers gets a reference to the given []string and assigns it to the TargetMatchers field.
func (o *InhibitRules) SetTargetMatchers(v InhibitRulesGetTargetMatchersRetType) {
	setInhibitRulesGetTargetMatchersAttributeType(&o.TargetMatchers, v)
}

func (o InhibitRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInhibitRulesGetEqualAttributeTypeOk(o.Equal); ok {
		toSerialize["Equal"] = val
	}
	if val, ok := getInhibitRulesGetSourceMatchAttributeTypeOk(o.SourceMatch); ok {
		toSerialize["SourceMatch"] = val
	}
	if val, ok := getInhibitRulesGetSourceMatchReAttributeTypeOk(o.SourceMatchRe); ok {
		toSerialize["SourceMatchRe"] = val
	}
	if val, ok := getInhibitRulesGetSourceMatchersAttributeTypeOk(o.SourceMatchers); ok {
		toSerialize["SourceMatchers"] = val
	}
	if val, ok := getInhibitRulesGetTargetMatchAttributeTypeOk(o.TargetMatch); ok {
		toSerialize["TargetMatch"] = val
	}
	if val, ok := getInhibitRulesGetTargetMatchReAttributeTypeOk(o.TargetMatchRe); ok {
		toSerialize["TargetMatchRe"] = val
	}
	if val, ok := getInhibitRulesGetTargetMatchersAttributeTypeOk(o.TargetMatchers); ok {
		toSerialize["TargetMatchers"] = val
	}
	return toSerialize, nil
}

type NullableInhibitRules struct {
	value *InhibitRules
	isSet bool
}

func (v NullableInhibitRules) Get() *InhibitRules {
	return v.value
}

func (v *NullableInhibitRules) Set(val *InhibitRules) {
	v.value = val
	v.isSet = true
}

func (v NullableInhibitRules) IsSet() bool {
	return v.isSet
}

func (v *NullableInhibitRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInhibitRules(val *InhibitRules) *NullableInhibitRules {
	return &NullableInhibitRules{value: val, isSet: true}
}

func (v NullableInhibitRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInhibitRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
