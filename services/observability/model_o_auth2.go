/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the OAuth2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuth2{}

// OAuth2 struct for OAuth2
type OAuth2 struct {
	// REQUIRED
	ClientId *string `json:"clientId"`
	// REQUIRED
	ClientSecret *string    `json:"clientSecret"`
	Scopes       *[]string  `json:"scopes,omitempty"`
	TlsConfig    *TLSConfig `json:"tlsConfig,omitempty"`
	// REQUIRED
	TokenUrl *string `json:"tokenUrl"`
}

type _OAuth2 OAuth2

// NewOAuth2 instantiates a new OAuth2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2(clientId *string, clientSecret *string, tokenUrl *string) *OAuth2 {
	this := OAuth2{}
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	this.TokenUrl = tokenUrl
	return &this
}

// NewOAuth2WithDefaults instantiates a new OAuth2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2WithDefaults() *OAuth2 {
	this := OAuth2{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *OAuth2) GetClientId() *string {
	if o == nil || IsNil(o.ClientId) {
		var ret *string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *OAuth2) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientId, true
}

// SetClientId sets field value
func (o *OAuth2) SetClientId(v *string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *OAuth2) GetClientSecret() *string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret *string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *OAuth2) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *OAuth2) SetClientSecret(v *string) {
	o.ClientSecret = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *OAuth2) GetScopes() *[]string {
	if o == nil || IsNil(o.Scopes) {
		var ret *[]string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2) GetScopesOk() (*[]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *OAuth2) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *OAuth2) SetScopes(v *[]string) {
	o.Scopes = v
}

// GetTlsConfig returns the TlsConfig field value if set, zero value otherwise.
func (o *OAuth2) GetTlsConfig() *TLSConfig {
	if o == nil || IsNil(o.TlsConfig) {
		var ret *TLSConfig
		return ret
	}
	return o.TlsConfig
}

// GetTlsConfigOk returns a tuple with the TlsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2) GetTlsConfigOk() (*TLSConfig, bool) {
	if o == nil || IsNil(o.TlsConfig) {
		return nil, false
	}
	return o.TlsConfig, true
}

// HasTlsConfig returns a boolean if a field has been set.
func (o *OAuth2) HasTlsConfig() bool {
	if o != nil && !IsNil(o.TlsConfig) {
		return true
	}

	return false
}

// SetTlsConfig gets a reference to the given TLSConfig and assigns it to the TlsConfig field.
func (o *OAuth2) SetTlsConfig(v *TLSConfig) {
	o.TlsConfig = v
}

// GetTokenUrl returns the TokenUrl field value
func (o *OAuth2) GetTokenUrl() *string {
	if o == nil || IsNil(o.TokenUrl) {
		var ret *string
		return ret
	}

	return o.TokenUrl
}

// GetTokenUrlOk returns a tuple with the TokenUrl field value
// and a boolean to check if the value has been set.
func (o *OAuth2) GetTokenUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenUrl, true
}

// SetTokenUrl sets field value
func (o *OAuth2) SetTokenUrl(v *string) {
	o.TokenUrl = v
}

func (o OAuth2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientId"] = o.ClientId
	toSerialize["clientSecret"] = o.ClientSecret
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.TlsConfig) {
		toSerialize["tlsConfig"] = o.TlsConfig
	}
	toSerialize["tokenUrl"] = o.TokenUrl
	return toSerialize, nil
}

type NullableOAuth2 struct {
	value *OAuth2
	isSet bool
}

func (v NullableOAuth2) Get() *OAuth2 {
	return v.value
}

func (v *NullableOAuth2) Set(val *OAuth2) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2(val *OAuth2) *NullableOAuth2 {
	return &NullableOAuth2{value: val, isSet: true}
}

func (v NullableOAuth2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
