/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the Receiver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Receiver{}

/*
	types and functions for data
*/

// isModel
type ReceiverGetDataAttributeType = *Receivers
type ReceiverGetDataArgType = Receivers
type ReceiverGetDataRetType = Receivers

func getReceiverGetDataAttributeTypeOk(arg ReceiverGetDataAttributeType) (ret ReceiverGetDataRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setReceiverGetDataAttributeType(arg *ReceiverGetDataAttributeType, val ReceiverGetDataRetType) {
	*arg = &val
}

/*
	types and functions for message
*/

// isNotNullableString
type ReceiverGetMessageAttributeType = *string

func getReceiverGetMessageAttributeTypeOk(arg ReceiverGetMessageAttributeType) (ret ReceiverGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setReceiverGetMessageAttributeType(arg *ReceiverGetMessageAttributeType, val ReceiverGetMessageRetType) {
	*arg = &val
}

type ReceiverGetMessageArgType = string
type ReceiverGetMessageRetType = string

// Receiver struct for Receiver
type Receiver struct {
	// REQUIRED
	Data ReceiverGetDataAttributeType `json:"data"`
	// REQUIRED
	Message ReceiverGetMessageAttributeType `json:"message"`
}

type _Receiver Receiver

// NewReceiver instantiates a new Receiver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiver(data ReceiverGetDataArgType, message ReceiverGetMessageArgType) *Receiver {
	this := Receiver{}
	setReceiverGetDataAttributeType(&this.Data, data)
	setReceiverGetMessageAttributeType(&this.Message, message)
	return &this
}

// NewReceiverWithDefaults instantiates a new Receiver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiverWithDefaults() *Receiver {
	this := Receiver{}
	return &this
}

// GetData returns the Data field value
func (o *Receiver) GetData() (ret ReceiverGetDataRetType) {
	ret, _ = o.GetDataOk()
	return ret
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Receiver) GetDataOk() (ret ReceiverGetDataRetType, ok bool) {
	return getReceiverGetDataAttributeTypeOk(o.Data)
}

// SetData sets field value
func (o *Receiver) SetData(v ReceiverGetDataRetType) {
	setReceiverGetDataAttributeType(&o.Data, v)
}

// GetMessage returns the Message field value
func (o *Receiver) GetMessage() (ret ReceiverGetMessageRetType) {
	ret, _ = o.GetMessageOk()
	return ret
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Receiver) GetMessageOk() (ret ReceiverGetMessageRetType, ok bool) {
	return getReceiverGetMessageAttributeTypeOk(o.Message)
}

// SetMessage sets field value
func (o *Receiver) SetMessage(v ReceiverGetMessageRetType) {
	setReceiverGetMessageAttributeType(&o.Message, v)
}

func (o Receiver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getReceiverGetDataAttributeTypeOk(o.Data); ok {
		toSerialize["Data"] = val
	}
	if val, ok := getReceiverGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	return toSerialize, nil
}

type NullableReceiver struct {
	value *Receiver
	isSet bool
}

func (v NullableReceiver) Get() *Receiver {
	return v.value
}

func (v *NullableReceiver) Set(val *Receiver) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiver) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiver(val *Receiver) *NullableReceiver {
	return &NullableReceiver{value: val, isSet: true}
}

func (v NullableReceiver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
