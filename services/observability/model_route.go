/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

/*
	types and functions for continue
*/

// isBoolean
type RoutegetContinueAttributeType = *bool
type RoutegetContinueArgType = bool
type RoutegetContinueRetType = bool

func getRoutegetContinueAttributeTypeOk(arg RoutegetContinueAttributeType) (ret RoutegetContinueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRoutegetContinueAttributeType(arg *RoutegetContinueAttributeType, val RoutegetContinueRetType) {
	*arg = &val
}

/*
	types and functions for groupBy
*/

// isArray
type RouteGetGroupByAttributeType = *[]string
type RouteGetGroupByArgType = []string
type RouteGetGroupByRetType = []string

func getRouteGetGroupByAttributeTypeOk(arg RouteGetGroupByAttributeType) (ret RouteGetGroupByRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetGroupByAttributeType(arg *RouteGetGroupByAttributeType, val RouteGetGroupByRetType) {
	*arg = &val
}

/*
	types and functions for groupInterval
*/

// isNotNullableString
type RouteGetGroupIntervalAttributeType = *string

func getRouteGetGroupIntervalAttributeTypeOk(arg RouteGetGroupIntervalAttributeType) (ret RouteGetGroupIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetGroupIntervalAttributeType(arg *RouteGetGroupIntervalAttributeType, val RouteGetGroupIntervalRetType) {
	*arg = &val
}

type RouteGetGroupIntervalArgType = string
type RouteGetGroupIntervalRetType = string

/*
	types and functions for groupWait
*/

// isNotNullableString
type RouteGetGroupWaitAttributeType = *string

func getRouteGetGroupWaitAttributeTypeOk(arg RouteGetGroupWaitAttributeType) (ret RouteGetGroupWaitRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetGroupWaitAttributeType(arg *RouteGetGroupWaitAttributeType, val RouteGetGroupWaitRetType) {
	*arg = &val
}

type RouteGetGroupWaitArgType = string
type RouteGetGroupWaitRetType = string

/*
	types and functions for match
*/

// isContainer
type RouteGetMatchAttributeType = *map[string]string
type RouteGetMatchArgType = map[string]string
type RouteGetMatchRetType = map[string]string

func getRouteGetMatchAttributeTypeOk(arg RouteGetMatchAttributeType) (ret RouteGetMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetMatchAttributeType(arg *RouteGetMatchAttributeType, val RouteGetMatchRetType) {
	*arg = &val
}

/*
	types and functions for matchRe
*/

// isContainer
type RouteGetMatchReAttributeType = *map[string]string
type RouteGetMatchReArgType = map[string]string
type RouteGetMatchReRetType = map[string]string

func getRouteGetMatchReAttributeTypeOk(arg RouteGetMatchReAttributeType) (ret RouteGetMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetMatchReAttributeType(arg *RouteGetMatchReAttributeType, val RouteGetMatchReRetType) {
	*arg = &val
}

/*
	types and functions for matchers
*/

// isArray
type RouteGetMatchersAttributeType = *[]string
type RouteGetMatchersArgType = []string
type RouteGetMatchersRetType = []string

func getRouteGetMatchersAttributeTypeOk(arg RouteGetMatchersAttributeType) (ret RouteGetMatchersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetMatchersAttributeType(arg *RouteGetMatchersAttributeType, val RouteGetMatchersRetType) {
	*arg = &val
}

/*
	types and functions for receiver
*/

// isNotNullableString
type RouteGetReceiverAttributeType = *string

func getRouteGetReceiverAttributeTypeOk(arg RouteGetReceiverAttributeType) (ret RouteGetReceiverRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetReceiverAttributeType(arg *RouteGetReceiverAttributeType, val RouteGetReceiverRetType) {
	*arg = &val
}

type RouteGetReceiverArgType = string
type RouteGetReceiverRetType = string

/*
	types and functions for repeatInterval
*/

// isNotNullableString
type RouteGetRepeatIntervalAttributeType = *string

func getRouteGetRepeatIntervalAttributeTypeOk(arg RouteGetRepeatIntervalAttributeType) (ret RouteGetRepeatIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetRepeatIntervalAttributeType(arg *RouteGetRepeatIntervalAttributeType, val RouteGetRepeatIntervalRetType) {
	*arg = &val
}

type RouteGetRepeatIntervalArgType = string
type RouteGetRepeatIntervalRetType = string

/*
	types and functions for routes
*/

// isArray
type RouteGetRoutesAttributeType = *[]RouteSerializer
type RouteGetRoutesArgType = []RouteSerializer
type RouteGetRoutesRetType = []RouteSerializer

func getRouteGetRoutesAttributeTypeOk(arg RouteGetRoutesAttributeType) (ret RouteGetRoutesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRouteGetRoutesAttributeType(arg *RouteGetRoutesAttributeType, val RouteGetRoutesRetType) {
	*arg = &val
}

// Route struct for Route
type Route struct {
	Continue      RoutegetContinueAttributeType      `json:"continue,omitempty"`
	GroupBy       RouteGetGroupByAttributeType       `json:"groupBy,omitempty"`
	GroupInterval RouteGetGroupIntervalAttributeType `json:"groupInterval,omitempty"`
	GroupWait     RouteGetGroupWaitAttributeType     `json:"groupWait,omitempty"`
	Match         RouteGetMatchAttributeType         `json:"match,omitempty"`
	MatchRe       RouteGetMatchReAttributeType       `json:"matchRe,omitempty"`
	Matchers      RouteGetMatchersAttributeType      `json:"matchers,omitempty"`
	// REQUIRED
	Receiver       RouteGetReceiverAttributeType       `json:"receiver" required:"true"`
	RepeatInterval RouteGetRepeatIntervalAttributeType `json:"repeatInterval,omitempty"`
	Routes         RouteGetRoutesAttributeType         `json:"routes,omitempty"`
}

type _Route Route

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute(receiver RouteGetReceiverArgType) *Route {
	this := Route{}
	setRouteGetReceiverAttributeType(&this.Receiver, receiver)
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	var continue_ bool = false
	this.Continue = &continue_
	var groupInterval string = "5m"
	this.GroupInterval = &groupInterval
	var groupWait string = "30s"
	this.GroupWait = &groupWait
	var repeatInterval string = "4h"
	this.RepeatInterval = &repeatInterval
	return &this
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *Route) GetContinue() (res RoutegetContinueRetType) {
	res, _ = o.GetContinueOk()
	return
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetContinueOk() (ret RoutegetContinueRetType, ok bool) {
	return getRoutegetContinueAttributeTypeOk(o.Continue)
}

// HasContinue returns a boolean if a field has been set.
func (o *Route) HasContinue() bool {
	_, ok := o.GetContinueOk()
	return ok
}

// SetContinue gets a reference to the given bool and assigns it to the Continue field.
func (o *Route) SetContinue(v RoutegetContinueRetType) {
	setRoutegetContinueAttributeType(&o.Continue, v)
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *Route) GetGroupBy() (res RouteGetGroupByRetType) {
	res, _ = o.GetGroupByOk()
	return
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetGroupByOk() (ret RouteGetGroupByRetType, ok bool) {
	return getRouteGetGroupByAttributeTypeOk(o.GroupBy)
}

// HasGroupBy returns a boolean if a field has been set.
func (o *Route) HasGroupBy() bool {
	_, ok := o.GetGroupByOk()
	return ok
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *Route) SetGroupBy(v RouteGetGroupByRetType) {
	setRouteGetGroupByAttributeType(&o.GroupBy, v)
}

// GetGroupInterval returns the GroupInterval field value if set, zero value otherwise.
func (o *Route) GetGroupInterval() (res RouteGetGroupIntervalRetType) {
	res, _ = o.GetGroupIntervalOk()
	return
}

// GetGroupIntervalOk returns a tuple with the GroupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetGroupIntervalOk() (ret RouteGetGroupIntervalRetType, ok bool) {
	return getRouteGetGroupIntervalAttributeTypeOk(o.GroupInterval)
}

// HasGroupInterval returns a boolean if a field has been set.
func (o *Route) HasGroupInterval() bool {
	_, ok := o.GetGroupIntervalOk()
	return ok
}

// SetGroupInterval gets a reference to the given string and assigns it to the GroupInterval field.
func (o *Route) SetGroupInterval(v RouteGetGroupIntervalRetType) {
	setRouteGetGroupIntervalAttributeType(&o.GroupInterval, v)
}

// GetGroupWait returns the GroupWait field value if set, zero value otherwise.
func (o *Route) GetGroupWait() (res RouteGetGroupWaitRetType) {
	res, _ = o.GetGroupWaitOk()
	return
}

// GetGroupWaitOk returns a tuple with the GroupWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetGroupWaitOk() (ret RouteGetGroupWaitRetType, ok bool) {
	return getRouteGetGroupWaitAttributeTypeOk(o.GroupWait)
}

// HasGroupWait returns a boolean if a field has been set.
func (o *Route) HasGroupWait() bool {
	_, ok := o.GetGroupWaitOk()
	return ok
}

// SetGroupWait gets a reference to the given string and assigns it to the GroupWait field.
func (o *Route) SetGroupWait(v RouteGetGroupWaitRetType) {
	setRouteGetGroupWaitAttributeType(&o.GroupWait, v)
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *Route) GetMatch() (res RouteGetMatchRetType) {
	res, _ = o.GetMatchOk()
	return
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMatchOk() (ret RouteGetMatchRetType, ok bool) {
	return getRouteGetMatchAttributeTypeOk(o.Match)
}

// HasMatch returns a boolean if a field has been set.
func (o *Route) HasMatch() bool {
	_, ok := o.GetMatchOk()
	return ok
}

// SetMatch gets a reference to the given map[string]string and assigns it to the Match field.
func (o *Route) SetMatch(v RouteGetMatchRetType) {
	setRouteGetMatchAttributeType(&o.Match, v)
}

// GetMatchRe returns the MatchRe field value if set, zero value otherwise.
func (o *Route) GetMatchRe() (res RouteGetMatchReRetType) {
	res, _ = o.GetMatchReOk()
	return
}

// GetMatchReOk returns a tuple with the MatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMatchReOk() (ret RouteGetMatchReRetType, ok bool) {
	return getRouteGetMatchReAttributeTypeOk(o.MatchRe)
}

// HasMatchRe returns a boolean if a field has been set.
func (o *Route) HasMatchRe() bool {
	_, ok := o.GetMatchReOk()
	return ok
}

// SetMatchRe gets a reference to the given map[string]string and assigns it to the MatchRe field.
func (o *Route) SetMatchRe(v RouteGetMatchReRetType) {
	setRouteGetMatchReAttributeType(&o.MatchRe, v)
}

// GetMatchers returns the Matchers field value if set, zero value otherwise.
func (o *Route) GetMatchers() (res RouteGetMatchersRetType) {
	res, _ = o.GetMatchersOk()
	return
}

// GetMatchersOk returns a tuple with the Matchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMatchersOk() (ret RouteGetMatchersRetType, ok bool) {
	return getRouteGetMatchersAttributeTypeOk(o.Matchers)
}

// HasMatchers returns a boolean if a field has been set.
func (o *Route) HasMatchers() bool {
	_, ok := o.GetMatchersOk()
	return ok
}

// SetMatchers gets a reference to the given []string and assigns it to the Matchers field.
func (o *Route) SetMatchers(v RouteGetMatchersRetType) {
	setRouteGetMatchersAttributeType(&o.Matchers, v)
}

// GetReceiver returns the Receiver field value
func (o *Route) GetReceiver() (ret RouteGetReceiverRetType) {
	ret, _ = o.GetReceiverOk()
	return ret
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *Route) GetReceiverOk() (ret RouteGetReceiverRetType, ok bool) {
	return getRouteGetReceiverAttributeTypeOk(o.Receiver)
}

// SetReceiver sets field value
func (o *Route) SetReceiver(v RouteGetReceiverRetType) {
	setRouteGetReceiverAttributeType(&o.Receiver, v)
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *Route) GetRepeatInterval() (res RouteGetRepeatIntervalRetType) {
	res, _ = o.GetRepeatIntervalOk()
	return
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetRepeatIntervalOk() (ret RouteGetRepeatIntervalRetType, ok bool) {
	return getRouteGetRepeatIntervalAttributeTypeOk(o.RepeatInterval)
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *Route) HasRepeatInterval() bool {
	_, ok := o.GetRepeatIntervalOk()
	return ok
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *Route) SetRepeatInterval(v RouteGetRepeatIntervalRetType) {
	setRouteGetRepeatIntervalAttributeType(&o.RepeatInterval, v)
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *Route) GetRoutes() (res RouteGetRoutesRetType) {
	res, _ = o.GetRoutesOk()
	return
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetRoutesOk() (ret RouteGetRoutesRetType, ok bool) {
	return getRouteGetRoutesAttributeTypeOk(o.Routes)
}

// HasRoutes returns a boolean if a field has been set.
func (o *Route) HasRoutes() bool {
	_, ok := o.GetRoutesOk()
	return ok
}

// SetRoutes gets a reference to the given []RouteSerializer and assigns it to the Routes field.
func (o *Route) SetRoutes(v RouteGetRoutesRetType) {
	setRouteGetRoutesAttributeType(&o.Routes, v)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getRoutegetContinueAttributeTypeOk(o.Continue); ok {
		toSerialize["Continue"] = val
	}
	if val, ok := getRouteGetGroupByAttributeTypeOk(o.GroupBy); ok {
		toSerialize["GroupBy"] = val
	}
	if val, ok := getRouteGetGroupIntervalAttributeTypeOk(o.GroupInterval); ok {
		toSerialize["GroupInterval"] = val
	}
	if val, ok := getRouteGetGroupWaitAttributeTypeOk(o.GroupWait); ok {
		toSerialize["GroupWait"] = val
	}
	if val, ok := getRouteGetMatchAttributeTypeOk(o.Match); ok {
		toSerialize["Match"] = val
	}
	if val, ok := getRouteGetMatchReAttributeTypeOk(o.MatchRe); ok {
		toSerialize["MatchRe"] = val
	}
	if val, ok := getRouteGetMatchersAttributeTypeOk(o.Matchers); ok {
		toSerialize["Matchers"] = val
	}
	if val, ok := getRouteGetReceiverAttributeTypeOk(o.Receiver); ok {
		toSerialize["Receiver"] = val
	}
	if val, ok := getRouteGetRepeatIntervalAttributeTypeOk(o.RepeatInterval); ok {
		toSerialize["RepeatInterval"] = val
	}
	if val, ok := getRouteGetRoutesAttributeTypeOk(o.Routes); ok {
		toSerialize["Routes"] = val
	}
	return toSerialize, nil
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
