/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the UpdateAlertConfigRoutePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAlertConfigRoutePayload{}

/*
	types and functions for continue
*/

// isBoolean
type UpdateAlertConfigRoutePayloadgetContinueAttributeType = *bool
type UpdateAlertConfigRoutePayloadgetContinueArgType = bool
type UpdateAlertConfigRoutePayloadgetContinueRetType = bool

func getUpdateAlertConfigRoutePayloadgetContinueAttributeTypeOk(arg UpdateAlertConfigRoutePayloadgetContinueAttributeType) (ret UpdateAlertConfigRoutePayloadgetContinueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadgetContinueAttributeType(arg *UpdateAlertConfigRoutePayloadgetContinueAttributeType, val UpdateAlertConfigRoutePayloadgetContinueRetType) {
	*arg = &val
}

/*
	types and functions for groupBy
*/

// isArray
type UpdateAlertConfigRoutePayloadGetGroupByAttributeType = *[]string
type UpdateAlertConfigRoutePayloadGetGroupByArgType = []string
type UpdateAlertConfigRoutePayloadGetGroupByRetType = []string

func getUpdateAlertConfigRoutePayloadGetGroupByAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetGroupByAttributeType) (ret UpdateAlertConfigRoutePayloadGetGroupByRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetGroupByAttributeType(arg *UpdateAlertConfigRoutePayloadGetGroupByAttributeType, val UpdateAlertConfigRoutePayloadGetGroupByRetType) {
	*arg = &val
}

/*
	types and functions for groupInterval
*/

// isNotNullableString
type UpdateAlertConfigRoutePayloadGetGroupIntervalAttributeType = *string

func getUpdateAlertConfigRoutePayloadGetGroupIntervalAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetGroupIntervalAttributeType) (ret UpdateAlertConfigRoutePayloadGetGroupIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetGroupIntervalAttributeType(arg *UpdateAlertConfigRoutePayloadGetGroupIntervalAttributeType, val UpdateAlertConfigRoutePayloadGetGroupIntervalRetType) {
	*arg = &val
}

type UpdateAlertConfigRoutePayloadGetGroupIntervalArgType = string
type UpdateAlertConfigRoutePayloadGetGroupIntervalRetType = string

/*
	types and functions for groupWait
*/

// isNotNullableString
type UpdateAlertConfigRoutePayloadGetGroupWaitAttributeType = *string

func getUpdateAlertConfigRoutePayloadGetGroupWaitAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetGroupWaitAttributeType) (ret UpdateAlertConfigRoutePayloadGetGroupWaitRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetGroupWaitAttributeType(arg *UpdateAlertConfigRoutePayloadGetGroupWaitAttributeType, val UpdateAlertConfigRoutePayloadGetGroupWaitRetType) {
	*arg = &val
}

type UpdateAlertConfigRoutePayloadGetGroupWaitArgType = string
type UpdateAlertConfigRoutePayloadGetGroupWaitRetType = string

/*
	types and functions for match
*/

// isFreeform
type UpdateAlertConfigRoutePayloadGetMatchAttributeType = *map[string]interface{}
type UpdateAlertConfigRoutePayloadGetMatchArgType = map[string]interface{}
type UpdateAlertConfigRoutePayloadGetMatchRetType = map[string]interface{}

func getUpdateAlertConfigRoutePayloadGetMatchAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetMatchAttributeType) (ret UpdateAlertConfigRoutePayloadGetMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetMatchAttributeType(arg *UpdateAlertConfigRoutePayloadGetMatchAttributeType, val UpdateAlertConfigRoutePayloadGetMatchRetType) {
	*arg = &val
}

/*
	types and functions for matchRe
*/

// isFreeform
type UpdateAlertConfigRoutePayloadGetMatchReAttributeType = *map[string]interface{}
type UpdateAlertConfigRoutePayloadGetMatchReArgType = map[string]interface{}
type UpdateAlertConfigRoutePayloadGetMatchReRetType = map[string]interface{}

func getUpdateAlertConfigRoutePayloadGetMatchReAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetMatchReAttributeType) (ret UpdateAlertConfigRoutePayloadGetMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetMatchReAttributeType(arg *UpdateAlertConfigRoutePayloadGetMatchReAttributeType, val UpdateAlertConfigRoutePayloadGetMatchReRetType) {
	*arg = &val
}

/*
	types and functions for matchers
*/

// isArray
type UpdateAlertConfigRoutePayloadGetMatchersAttributeType = *[]string
type UpdateAlertConfigRoutePayloadGetMatchersArgType = []string
type UpdateAlertConfigRoutePayloadGetMatchersRetType = []string

func getUpdateAlertConfigRoutePayloadGetMatchersAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetMatchersAttributeType) (ret UpdateAlertConfigRoutePayloadGetMatchersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetMatchersAttributeType(arg *UpdateAlertConfigRoutePayloadGetMatchersAttributeType, val UpdateAlertConfigRoutePayloadGetMatchersRetType) {
	*arg = &val
}

/*
	types and functions for receiver
*/

// isNotNullableString
type UpdateAlertConfigRoutePayloadGetReceiverAttributeType = *string

func getUpdateAlertConfigRoutePayloadGetReceiverAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetReceiverAttributeType) (ret UpdateAlertConfigRoutePayloadGetReceiverRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetReceiverAttributeType(arg *UpdateAlertConfigRoutePayloadGetReceiverAttributeType, val UpdateAlertConfigRoutePayloadGetReceiverRetType) {
	*arg = &val
}

type UpdateAlertConfigRoutePayloadGetReceiverArgType = string
type UpdateAlertConfigRoutePayloadGetReceiverRetType = string

/*
	types and functions for repeatInterval
*/

// isNotNullableString
type UpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeType = *string

func getUpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeType) (ret UpdateAlertConfigRoutePayloadGetRepeatIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeType(arg *UpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeType, val UpdateAlertConfigRoutePayloadGetRepeatIntervalRetType) {
	*arg = &val
}

type UpdateAlertConfigRoutePayloadGetRepeatIntervalArgType = string
type UpdateAlertConfigRoutePayloadGetRepeatIntervalRetType = string

/*
	types and functions for routes
*/

// isArray
type UpdateAlertConfigRoutePayloadGetRoutesAttributeType = *[]CreateAlertConfigRoutePayloadRoutesInner
type UpdateAlertConfigRoutePayloadGetRoutesArgType = []CreateAlertConfigRoutePayloadRoutesInner
type UpdateAlertConfigRoutePayloadGetRoutesRetType = []CreateAlertConfigRoutePayloadRoutesInner

func getUpdateAlertConfigRoutePayloadGetRoutesAttributeTypeOk(arg UpdateAlertConfigRoutePayloadGetRoutesAttributeType) (ret UpdateAlertConfigRoutePayloadGetRoutesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigRoutePayloadGetRoutesAttributeType(arg *UpdateAlertConfigRoutePayloadGetRoutesAttributeType, val UpdateAlertConfigRoutePayloadGetRoutesRetType) {
	*arg = &val
}

// UpdateAlertConfigRoutePayload The root node of the routing tree.
type UpdateAlertConfigRoutePayload struct {
	// Whether an alert should continue matching subsequent sibling nodes.
	Continue UpdateAlertConfigRoutePayloadgetContinueAttributeType `json:"continue,omitempty"`
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBy UpdateAlertConfigRoutePayloadGetGroupByAttributeType `json:"groupBy,omitempty"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.) `Additional Validators:` * must be a valid time format
	GroupInterval UpdateAlertConfigRoutePayloadGetGroupIntervalAttributeType `json:"groupInterval,omitempty"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.) `Additional Validators:` * must be a valid time format
	GroupWait UpdateAlertConfigRoutePayloadGetGroupWaitAttributeType `json:"groupWait,omitempty"`
	//  Deprecated: map of key:value. A set of equality matchers an alert has to fulfill to match the node.  `Additional Validators:` * should not contain more than 5 keys * each key and value should not be longer than 200 characters * key and values should only include the characters: a-zA-Z0-9_./@&?:-
	Match UpdateAlertConfigRoutePayloadGetMatchAttributeType `json:"match,omitempty"`
	//  Deprecated: map of key:value. A set of regex-matchers an alert has to fulfill to match the node.  `Additional Validators:` * should not contain more than 5 keys * each key and value should not be longer than 200 characters
	MatchRe UpdateAlertConfigRoutePayloadGetMatchReAttributeType `json:"matchRe,omitempty"`
	// A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens: * A valid Prometheus label name. * One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors. * A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace. `Additional Validators:` * should not contain more than 5 keys * each key and value should not be longer than 200 characters
	Matchers UpdateAlertConfigRoutePayloadGetMatchersAttributeType `json:"matchers,omitempty"`
	// Receiver that should be one item of receivers `Additional Validators:` * must be a in name of receivers
	// REQUIRED
	Receiver UpdateAlertConfigRoutePayloadGetReceiverAttributeType `json:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more). `Additional Validators:` * must be a valid time format
	RepeatInterval UpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeType `json:"repeatInterval,omitempty"`
	// Zero or more child routes.
	Routes UpdateAlertConfigRoutePayloadGetRoutesAttributeType `json:"routes,omitempty"`
}

type _UpdateAlertConfigRoutePayload UpdateAlertConfigRoutePayload

// NewUpdateAlertConfigRoutePayload instantiates a new UpdateAlertConfigRoutePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAlertConfigRoutePayload(receiver UpdateAlertConfigRoutePayloadGetReceiverArgType) *UpdateAlertConfigRoutePayload {
	this := UpdateAlertConfigRoutePayload{}
	setUpdateAlertConfigRoutePayloadGetReceiverAttributeType(&this.Receiver, receiver)
	return &this
}

// NewUpdateAlertConfigRoutePayloadWithDefaults instantiates a new UpdateAlertConfigRoutePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAlertConfigRoutePayloadWithDefaults() *UpdateAlertConfigRoutePayload {
	this := UpdateAlertConfigRoutePayload{}
	var continue_ bool = false
	this.Continue = &continue_
	var groupInterval string = "5m"
	this.GroupInterval = &groupInterval
	var groupWait string = "30s"
	this.GroupWait = &groupWait
	var repeatInterval string = "4h"
	this.RepeatInterval = &repeatInterval
	return &this
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetContinue() (res UpdateAlertConfigRoutePayloadgetContinueRetType) {
	res, _ = o.GetContinueOk()
	return
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetContinueOk() (ret UpdateAlertConfigRoutePayloadgetContinueRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadgetContinueAttributeTypeOk(o.Continue)
}

// HasContinue returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasContinue() bool {
	_, ok := o.GetContinueOk()
	return ok
}

// SetContinue gets a reference to the given bool and assigns it to the Continue field.
func (o *UpdateAlertConfigRoutePayload) SetContinue(v UpdateAlertConfigRoutePayloadgetContinueRetType) {
	setUpdateAlertConfigRoutePayloadgetContinueAttributeType(&o.Continue, v)
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetGroupBy() (res UpdateAlertConfigRoutePayloadGetGroupByRetType) {
	res, _ = o.GetGroupByOk()
	return
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetGroupByOk() (ret UpdateAlertConfigRoutePayloadGetGroupByRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetGroupByAttributeTypeOk(o.GroupBy)
}

// HasGroupBy returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasGroupBy() bool {
	_, ok := o.GetGroupByOk()
	return ok
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *UpdateAlertConfigRoutePayload) SetGroupBy(v UpdateAlertConfigRoutePayloadGetGroupByRetType) {
	setUpdateAlertConfigRoutePayloadGetGroupByAttributeType(&o.GroupBy, v)
}

// GetGroupInterval returns the GroupInterval field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetGroupInterval() (res UpdateAlertConfigRoutePayloadGetGroupIntervalRetType) {
	res, _ = o.GetGroupIntervalOk()
	return
}

// GetGroupIntervalOk returns a tuple with the GroupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetGroupIntervalOk() (ret UpdateAlertConfigRoutePayloadGetGroupIntervalRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetGroupIntervalAttributeTypeOk(o.GroupInterval)
}

// HasGroupInterval returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasGroupInterval() bool {
	_, ok := o.GetGroupIntervalOk()
	return ok
}

// SetGroupInterval gets a reference to the given string and assigns it to the GroupInterval field.
func (o *UpdateAlertConfigRoutePayload) SetGroupInterval(v UpdateAlertConfigRoutePayloadGetGroupIntervalRetType) {
	setUpdateAlertConfigRoutePayloadGetGroupIntervalAttributeType(&o.GroupInterval, v)
}

// GetGroupWait returns the GroupWait field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetGroupWait() (res UpdateAlertConfigRoutePayloadGetGroupWaitRetType) {
	res, _ = o.GetGroupWaitOk()
	return
}

// GetGroupWaitOk returns a tuple with the GroupWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetGroupWaitOk() (ret UpdateAlertConfigRoutePayloadGetGroupWaitRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetGroupWaitAttributeTypeOk(o.GroupWait)
}

// HasGroupWait returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasGroupWait() bool {
	_, ok := o.GetGroupWaitOk()
	return ok
}

// SetGroupWait gets a reference to the given string and assigns it to the GroupWait field.
func (o *UpdateAlertConfigRoutePayload) SetGroupWait(v UpdateAlertConfigRoutePayloadGetGroupWaitRetType) {
	setUpdateAlertConfigRoutePayloadGetGroupWaitAttributeType(&o.GroupWait, v)
}

// GetMatch returns the Match field value if set, zero value otherwise.
// Deprecated
func (o *UpdateAlertConfigRoutePayload) GetMatch() (res UpdateAlertConfigRoutePayloadGetMatchRetType) {
	res, _ = o.GetMatchOk()
	return
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateAlertConfigRoutePayload) GetMatchOk() (ret UpdateAlertConfigRoutePayloadGetMatchRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetMatchAttributeTypeOk(o.Match)
}

// HasMatch returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasMatch() bool {
	_, ok := o.GetMatchOk()
	return ok
}

// SetMatch gets a reference to the given map[string]interface{} and assigns it to the Match field.
// Deprecated
func (o *UpdateAlertConfigRoutePayload) SetMatch(v UpdateAlertConfigRoutePayloadGetMatchRetType) {
	setUpdateAlertConfigRoutePayloadGetMatchAttributeType(&o.Match, v)
}

// GetMatchRe returns the MatchRe field value if set, zero value otherwise.
// Deprecated
func (o *UpdateAlertConfigRoutePayload) GetMatchRe() (res UpdateAlertConfigRoutePayloadGetMatchReRetType) {
	res, _ = o.GetMatchReOk()
	return
}

// GetMatchReOk returns a tuple with the MatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateAlertConfigRoutePayload) GetMatchReOk() (ret UpdateAlertConfigRoutePayloadGetMatchReRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetMatchReAttributeTypeOk(o.MatchRe)
}

// HasMatchRe returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasMatchRe() bool {
	_, ok := o.GetMatchReOk()
	return ok
}

// SetMatchRe gets a reference to the given map[string]interface{} and assigns it to the MatchRe field.
// Deprecated
func (o *UpdateAlertConfigRoutePayload) SetMatchRe(v UpdateAlertConfigRoutePayloadGetMatchReRetType) {
	setUpdateAlertConfigRoutePayloadGetMatchReAttributeType(&o.MatchRe, v)
}

// GetMatchers returns the Matchers field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetMatchers() (res UpdateAlertConfigRoutePayloadGetMatchersRetType) {
	res, _ = o.GetMatchersOk()
	return
}

// GetMatchersOk returns a tuple with the Matchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetMatchersOk() (ret UpdateAlertConfigRoutePayloadGetMatchersRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetMatchersAttributeTypeOk(o.Matchers)
}

// HasMatchers returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasMatchers() bool {
	_, ok := o.GetMatchersOk()
	return ok
}

// SetMatchers gets a reference to the given []string and assigns it to the Matchers field.
func (o *UpdateAlertConfigRoutePayload) SetMatchers(v UpdateAlertConfigRoutePayloadGetMatchersRetType) {
	setUpdateAlertConfigRoutePayloadGetMatchersAttributeType(&o.Matchers, v)
}

// GetReceiver returns the Receiver field value
func (o *UpdateAlertConfigRoutePayload) GetReceiver() (ret UpdateAlertConfigRoutePayloadGetReceiverRetType) {
	ret, _ = o.GetReceiverOk()
	return ret
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetReceiverOk() (ret UpdateAlertConfigRoutePayloadGetReceiverRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetReceiverAttributeTypeOk(o.Receiver)
}

// SetReceiver sets field value
func (o *UpdateAlertConfigRoutePayload) SetReceiver(v UpdateAlertConfigRoutePayloadGetReceiverRetType) {
	setUpdateAlertConfigRoutePayloadGetReceiverAttributeType(&o.Receiver, v)
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetRepeatInterval() (res UpdateAlertConfigRoutePayloadGetRepeatIntervalRetType) {
	res, _ = o.GetRepeatIntervalOk()
	return
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetRepeatIntervalOk() (ret UpdateAlertConfigRoutePayloadGetRepeatIntervalRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeTypeOk(o.RepeatInterval)
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasRepeatInterval() bool {
	_, ok := o.GetRepeatIntervalOk()
	return ok
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *UpdateAlertConfigRoutePayload) SetRepeatInterval(v UpdateAlertConfigRoutePayloadGetRepeatIntervalRetType) {
	setUpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeType(&o.RepeatInterval, v)
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *UpdateAlertConfigRoutePayload) GetRoutes() (res UpdateAlertConfigRoutePayloadGetRoutesRetType) {
	res, _ = o.GetRoutesOk()
	return
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigRoutePayload) GetRoutesOk() (ret UpdateAlertConfigRoutePayloadGetRoutesRetType, ok bool) {
	return getUpdateAlertConfigRoutePayloadGetRoutesAttributeTypeOk(o.Routes)
}

// HasRoutes returns a boolean if a field has been set.
func (o *UpdateAlertConfigRoutePayload) HasRoutes() bool {
	_, ok := o.GetRoutesOk()
	return ok
}

// SetRoutes gets a reference to the given []CreateAlertConfigRoutePayloadRoutesInner and assigns it to the Routes field.
func (o *UpdateAlertConfigRoutePayload) SetRoutes(v UpdateAlertConfigRoutePayloadGetRoutesRetType) {
	setUpdateAlertConfigRoutePayloadGetRoutesAttributeType(&o.Routes, v)
}

func (o UpdateAlertConfigRoutePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUpdateAlertConfigRoutePayloadgetContinueAttributeTypeOk(o.Continue); ok {
		toSerialize["Continue"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetGroupByAttributeTypeOk(o.GroupBy); ok {
		toSerialize["GroupBy"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetGroupIntervalAttributeTypeOk(o.GroupInterval); ok {
		toSerialize["GroupInterval"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetGroupWaitAttributeTypeOk(o.GroupWait); ok {
		toSerialize["GroupWait"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetMatchAttributeTypeOk(o.Match); ok {
		toSerialize["Match"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetMatchReAttributeTypeOk(o.MatchRe); ok {
		toSerialize["MatchRe"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetMatchersAttributeTypeOk(o.Matchers); ok {
		toSerialize["Matchers"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetReceiverAttributeTypeOk(o.Receiver); ok {
		toSerialize["Receiver"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetRepeatIntervalAttributeTypeOk(o.RepeatInterval); ok {
		toSerialize["RepeatInterval"] = val
	}
	if val, ok := getUpdateAlertConfigRoutePayloadGetRoutesAttributeTypeOk(o.Routes); ok {
		toSerialize["Routes"] = val
	}
	return toSerialize, nil
}

type NullableUpdateAlertConfigRoutePayload struct {
	value *UpdateAlertConfigRoutePayload
	isSet bool
}

func (v NullableUpdateAlertConfigRoutePayload) Get() *UpdateAlertConfigRoutePayload {
	return v.value
}

func (v *NullableUpdateAlertConfigRoutePayload) Set(val *UpdateAlertConfigRoutePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAlertConfigRoutePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAlertConfigRoutePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAlertConfigRoutePayload(val *UpdateAlertConfigRoutePayload) *NullableUpdateAlertConfigRoutePayload {
	return &NullableUpdateAlertConfigRoutePayload{value: val, isSet: true}
}

func (v NullableUpdateAlertConfigRoutePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAlertConfigRoutePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
