/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

/*
	types and functions for errors
*/

// isArray
type ErrorGetErrorsAttributeType = *[]map[string]string
type ErrorGetErrorsArgType = []map[string]string
type ErrorGetErrorsRetType = []map[string]string

func getErrorGetErrorsAttributeTypeOk(arg ErrorGetErrorsAttributeType) (ret ErrorGetErrorsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetErrorsAttributeType(arg *ErrorGetErrorsAttributeType, val ErrorGetErrorsRetType) {
	*arg = &val
}

/*
	types and functions for message
*/

// isNotNullableString
type ErrorGetMessageAttributeType = *string

func getErrorGetMessageAttributeTypeOk(arg ErrorGetMessageAttributeType) (ret ErrorGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetMessageAttributeType(arg *ErrorGetMessageAttributeType, val ErrorGetMessageRetType) {
	*arg = &val
}

type ErrorGetMessageArgType = string
type ErrorGetMessageRetType = string

// Error struct for Error
type Error struct {
	Errors ErrorGetErrorsAttributeType `json:"errors,omitempty"`
	// REQUIRED
	Message ErrorGetMessageAttributeType `json:"message"`
}

type _Error Error

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(message ErrorGetMessageArgType) *Error {
	this := Error{}
	setErrorGetMessageAttributeType(&this.Message, message)
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Error) GetErrors() (res ErrorGetErrorsRetType) {
	res, _ = o.GetErrorsOk()
	return
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetErrorsOk() (ret ErrorGetErrorsRetType, ok bool) {
	return getErrorGetErrorsAttributeTypeOk(o.Errors)
}

// HasErrors returns a boolean if a field has been set.
func (o *Error) HasErrors() bool {
	_, ok := o.GetErrorsOk()
	return ok
}

// SetErrors gets a reference to the given []map[string]string and assigns it to the Errors field.
func (o *Error) SetErrors(v ErrorGetErrorsRetType) {
	setErrorGetErrorsAttributeType(&o.Errors, v)
}

// GetMessage returns the Message field value
func (o *Error) GetMessage() (ret ErrorGetMessageRetType) {
	ret, _ = o.GetMessageOk()
	return ret
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (ret ErrorGetMessageRetType, ok bool) {
	return getErrorGetMessageAttributeTypeOk(o.Message)
}

// SetMessage sets field value
func (o *Error) SetMessage(v ErrorGetMessageRetType) {
	setErrorGetMessageAttributeType(&o.Message, v)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getErrorGetErrorsAttributeTypeOk(o.Errors); ok {
		toSerialize["Errors"] = val
	}
	if val, ok := getErrorGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	return toSerialize, nil
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
