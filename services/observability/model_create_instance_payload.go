/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateInstancePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInstancePayload{}

/*
	types and functions for name
*/

// isNotNullableString
type CreateInstancePayloadGetNameAttributeType = *string

func getCreateInstancePayloadGetNameAttributeTypeOk(arg CreateInstancePayloadGetNameAttributeType) (ret CreateInstancePayloadGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateInstancePayloadGetNameAttributeType(arg *CreateInstancePayloadGetNameAttributeType, val CreateInstancePayloadGetNameRetType) {
	*arg = &val
}

type CreateInstancePayloadGetNameArgType = string
type CreateInstancePayloadGetNameRetType = string

/*
	types and functions for parameter
*/

// isFreeform
type CreateInstancePayloadGetParameterAttributeType = *map[string]interface{}
type CreateInstancePayloadGetParameterArgType = map[string]interface{}
type CreateInstancePayloadGetParameterRetType = map[string]interface{}

func getCreateInstancePayloadGetParameterAttributeTypeOk(arg CreateInstancePayloadGetParameterAttributeType) (ret CreateInstancePayloadGetParameterRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateInstancePayloadGetParameterAttributeType(arg *CreateInstancePayloadGetParameterAttributeType, val CreateInstancePayloadGetParameterRetType) {
	*arg = &val
}

/*
	types and functions for planId
*/

// isNotNullableString
type CreateInstancePayloadGetPlanIdAttributeType = *string

func getCreateInstancePayloadGetPlanIdAttributeTypeOk(arg CreateInstancePayloadGetPlanIdAttributeType) (ret CreateInstancePayloadGetPlanIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateInstancePayloadGetPlanIdAttributeType(arg *CreateInstancePayloadGetPlanIdAttributeType, val CreateInstancePayloadGetPlanIdRetType) {
	*arg = &val
}

type CreateInstancePayloadGetPlanIdArgType = string
type CreateInstancePayloadGetPlanIdRetType = string

// CreateInstancePayload Create update instance body.
type CreateInstancePayload struct {
	// Name of the service
	Name CreateInstancePayloadGetNameAttributeType `json:"name,omitempty"`
	// additional parameters
	Parameter CreateInstancePayloadGetParameterAttributeType `json:"parameter,omitempty"`
	// uuid of the plan to create/update
	// REQUIRED
	PlanId CreateInstancePayloadGetPlanIdAttributeType `json:"planId"`
}

type _CreateInstancePayload CreateInstancePayload

// NewCreateInstancePayload instantiates a new CreateInstancePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInstancePayload(planId CreateInstancePayloadGetPlanIdArgType) *CreateInstancePayload {
	this := CreateInstancePayload{}
	setCreateInstancePayloadGetPlanIdAttributeType(&this.PlanId, planId)
	return &this
}

// NewCreateInstancePayloadWithDefaults instantiates a new CreateInstancePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInstancePayloadWithDefaults() *CreateInstancePayload {
	this := CreateInstancePayload{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateInstancePayload) GetName() (res CreateInstancePayloadGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancePayload) GetNameOk() (ret CreateInstancePayloadGetNameRetType, ok bool) {
	return getCreateInstancePayloadGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *CreateInstancePayload) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateInstancePayload) SetName(v CreateInstancePayloadGetNameRetType) {
	setCreateInstancePayloadGetNameAttributeType(&o.Name, v)
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *CreateInstancePayload) GetParameter() (res CreateInstancePayloadGetParameterRetType) {
	res, _ = o.GetParameterOk()
	return
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancePayload) GetParameterOk() (ret CreateInstancePayloadGetParameterRetType, ok bool) {
	return getCreateInstancePayloadGetParameterAttributeTypeOk(o.Parameter)
}

// HasParameter returns a boolean if a field has been set.
func (o *CreateInstancePayload) HasParameter() bool {
	_, ok := o.GetParameterOk()
	return ok
}

// SetParameter gets a reference to the given map[string]interface{} and assigns it to the Parameter field.
func (o *CreateInstancePayload) SetParameter(v CreateInstancePayloadGetParameterRetType) {
	setCreateInstancePayloadGetParameterAttributeType(&o.Parameter, v)
}

// GetPlanId returns the PlanId field value
func (o *CreateInstancePayload) GetPlanId() (ret CreateInstancePayloadGetPlanIdRetType) {
	ret, _ = o.GetPlanIdOk()
	return ret
}

// GetPlanIdOk returns a tuple with the PlanId field value
// and a boolean to check if the value has been set.
func (o *CreateInstancePayload) GetPlanIdOk() (ret CreateInstancePayloadGetPlanIdRetType, ok bool) {
	return getCreateInstancePayloadGetPlanIdAttributeTypeOk(o.PlanId)
}

// SetPlanId sets field value
func (o *CreateInstancePayload) SetPlanId(v CreateInstancePayloadGetPlanIdRetType) {
	setCreateInstancePayloadGetPlanIdAttributeType(&o.PlanId, v)
}

func (o CreateInstancePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInstancePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateInstancePayloadGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getCreateInstancePayloadGetParameterAttributeTypeOk(o.Parameter); ok {
		toSerialize["Parameter"] = val
	}
	if val, ok := getCreateInstancePayloadGetPlanIdAttributeTypeOk(o.PlanId); ok {
		toSerialize["PlanId"] = val
	}
	return toSerialize, nil
}

func (o *CreateInstancePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"planId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInstancePayload := _CreateInstancePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateInstancePayload)

	if err != nil {
		return err
	}

	*o = CreateInstancePayload(varCreateInstancePayload)

	return err
}

type NullableCreateInstancePayload struct {
	value *CreateInstancePayload
	isSet bool
}

func (v NullableCreateInstancePayload) Get() *CreateInstancePayload {
	return v.value
}

func (v *NullableCreateInstancePayload) Set(val *CreateInstancePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInstancePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInstancePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInstancePayload(val *CreateInstancePayload) *NullableCreateInstancePayload {
	return &NullableCreateInstancePayload{value: val, isSet: true}
}

func (v NullableCreateInstancePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInstancePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
