/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the BasicAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicAuth{}

/*
	types and functions for password
*/

// isNotNullableString
type BasicAuthGetPasswordAttributeType = *string

func getBasicAuthGetPasswordAttributeTypeOk(arg BasicAuthGetPasswordAttributeType) (ret BasicAuthGetPasswordRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBasicAuthGetPasswordAttributeType(arg *BasicAuthGetPasswordAttributeType, val BasicAuthGetPasswordRetType) {
	*arg = &val
}

type BasicAuthGetPasswordArgType = string
type BasicAuthGetPasswordRetType = string

/*
	types and functions for username
*/

// isNotNullableString
type BasicAuthGetUsernameAttributeType = *string

func getBasicAuthGetUsernameAttributeTypeOk(arg BasicAuthGetUsernameAttributeType) (ret BasicAuthGetUsernameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBasicAuthGetUsernameAttributeType(arg *BasicAuthGetUsernameAttributeType, val BasicAuthGetUsernameRetType) {
	*arg = &val
}

type BasicAuthGetUsernameArgType = string
type BasicAuthGetUsernameRetType = string

// BasicAuth struct for BasicAuth
type BasicAuth struct {
	// REQUIRED
	Password BasicAuthGetPasswordAttributeType `json:"password"`
	// REQUIRED
	Username BasicAuthGetUsernameAttributeType `json:"username"`
}

type _BasicAuth BasicAuth

// NewBasicAuth instantiates a new BasicAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicAuth(password BasicAuthGetPasswordArgType, username BasicAuthGetUsernameArgType) *BasicAuth {
	this := BasicAuth{}
	setBasicAuthGetPasswordAttributeType(&this.Password, password)
	setBasicAuthGetUsernameAttributeType(&this.Username, username)
	return &this
}

// NewBasicAuthWithDefaults instantiates a new BasicAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicAuthWithDefaults() *BasicAuth {
	this := BasicAuth{}
	return &this
}

// GetPassword returns the Password field value
func (o *BasicAuth) GetPassword() (ret BasicAuthGetPasswordRetType) {
	ret, _ = o.GetPasswordOk()
	return ret
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *BasicAuth) GetPasswordOk() (ret BasicAuthGetPasswordRetType, ok bool) {
	return getBasicAuthGetPasswordAttributeTypeOk(o.Password)
}

// SetPassword sets field value
func (o *BasicAuth) SetPassword(v BasicAuthGetPasswordRetType) {
	setBasicAuthGetPasswordAttributeType(&o.Password, v)
}

// GetUsername returns the Username field value
func (o *BasicAuth) GetUsername() (ret BasicAuthGetUsernameRetType) {
	ret, _ = o.GetUsernameOk()
	return ret
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *BasicAuth) GetUsernameOk() (ret BasicAuthGetUsernameRetType, ok bool) {
	return getBasicAuthGetUsernameAttributeTypeOk(o.Username)
}

// SetUsername sets field value
func (o *BasicAuth) SetUsername(v BasicAuthGetUsernameRetType) {
	setBasicAuthGetUsernameAttributeType(&o.Username, v)
}

func (o BasicAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getBasicAuthGetPasswordAttributeTypeOk(o.Password); ok {
		toSerialize["Password"] = val
	}
	if val, ok := getBasicAuthGetUsernameAttributeTypeOk(o.Username); ok {
		toSerialize["Username"] = val
	}
	return toSerialize, nil
}

type NullableBasicAuth struct {
	value *BasicAuth
	isSet bool
}

func (v NullableBasicAuth) Get() *BasicAuth {
	return v.value
}

func (v *NullableBasicAuth) Set(val *BasicAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicAuth(val *BasicAuth) *NullableBasicAuth {
	return &NullableBasicAuth{value: val, isSet: true}
}

func (v NullableBasicAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
