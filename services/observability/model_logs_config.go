/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the LogsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsConfig{}

/*
	types and functions for retention
*/

// isNotNullableString
type LogsConfigGetRetentionAttributeType = *string

func getLogsConfigGetRetentionAttributeTypeOk(arg LogsConfigGetRetentionAttributeType) (ret LogsConfigGetRetentionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setLogsConfigGetRetentionAttributeType(arg *LogsConfigGetRetentionAttributeType, val LogsConfigGetRetentionRetType) {
	*arg = &val
}

type LogsConfigGetRetentionArgType = string
type LogsConfigGetRetentionRetType = string

// LogsConfig struct for LogsConfig
type LogsConfig struct {
	// REQUIRED
	Retention LogsConfigGetRetentionAttributeType `json:"retention" required:"true"`
}

type _LogsConfig LogsConfig

// NewLogsConfig instantiates a new LogsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsConfig(retention LogsConfigGetRetentionArgType) *LogsConfig {
	this := LogsConfig{}
	setLogsConfigGetRetentionAttributeType(&this.Retention, retention)
	return &this
}

// NewLogsConfigWithDefaults instantiates a new LogsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsConfigWithDefaults() *LogsConfig {
	this := LogsConfig{}
	return &this
}

// GetRetention returns the Retention field value
func (o *LogsConfig) GetRetention() (ret LogsConfigGetRetentionRetType) {
	ret, _ = o.GetRetentionOk()
	return ret
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *LogsConfig) GetRetentionOk() (ret LogsConfigGetRetentionRetType, ok bool) {
	return getLogsConfigGetRetentionAttributeTypeOk(o.Retention)
}

// SetRetention sets field value
func (o *LogsConfig) SetRetention(v LogsConfigGetRetentionRetType) {
	setLogsConfigGetRetentionAttributeType(&o.Retention, v)
}

func (o LogsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getLogsConfigGetRetentionAttributeTypeOk(o.Retention); ok {
		toSerialize["Retention"] = val
	}
	return toSerialize, nil
}

type NullableLogsConfig struct {
	value *LogsConfig
	isSet bool
}

func (v NullableLogsConfig) Get() *LogsConfig {
	return v.value
}

func (v *NullableLogsConfig) Set(val *LogsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsConfig(val *LogsConfig) *NullableLogsConfig {
	return &NullableLogsConfig{value: val, isSet: true}
}

func (v NullableLogsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
