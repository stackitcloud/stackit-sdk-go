/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the AlertRuleRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRuleRecord{}

/*
	types and functions for alert
*/

// isNotNullableString
type AlertRuleRecordGetAlertAttributeType = *string

func getAlertRuleRecordGetAlertAttributeTypeOk(arg AlertRuleRecordGetAlertAttributeType) (ret AlertRuleRecordGetAlertRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAlertRuleRecordGetAlertAttributeType(arg *AlertRuleRecordGetAlertAttributeType, val AlertRuleRecordGetAlertRetType) {
	*arg = &val
}

type AlertRuleRecordGetAlertArgType = string
type AlertRuleRecordGetAlertRetType = string

/*
	types and functions for annotations
*/

// isContainer
type AlertRuleRecordGetAnnotationsAttributeType = *map[string]string
type AlertRuleRecordGetAnnotationsArgType = map[string]string
type AlertRuleRecordGetAnnotationsRetType = map[string]string

func getAlertRuleRecordGetAnnotationsAttributeTypeOk(arg AlertRuleRecordGetAnnotationsAttributeType) (ret AlertRuleRecordGetAnnotationsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAlertRuleRecordGetAnnotationsAttributeType(arg *AlertRuleRecordGetAnnotationsAttributeType, val AlertRuleRecordGetAnnotationsRetType) {
	*arg = &val
}

/*
	types and functions for expr
*/

// isNotNullableString
type AlertRuleRecordGetExprAttributeType = *string

func getAlertRuleRecordGetExprAttributeTypeOk(arg AlertRuleRecordGetExprAttributeType) (ret AlertRuleRecordGetExprRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAlertRuleRecordGetExprAttributeType(arg *AlertRuleRecordGetExprAttributeType, val AlertRuleRecordGetExprRetType) {
	*arg = &val
}

type AlertRuleRecordGetExprArgType = string
type AlertRuleRecordGetExprRetType = string

/*
	types and functions for for
*/

// isNotNullableString
type AlertRuleRecordGetForAttributeType = *string

func getAlertRuleRecordGetForAttributeTypeOk(arg AlertRuleRecordGetForAttributeType) (ret AlertRuleRecordGetForRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAlertRuleRecordGetForAttributeType(arg *AlertRuleRecordGetForAttributeType, val AlertRuleRecordGetForRetType) {
	*arg = &val
}

type AlertRuleRecordGetForArgType = string
type AlertRuleRecordGetForRetType = string

/*
	types and functions for labels
*/

// isContainer
type AlertRuleRecordGetLabelsAttributeType = *map[string]string
type AlertRuleRecordGetLabelsArgType = map[string]string
type AlertRuleRecordGetLabelsRetType = map[string]string

func getAlertRuleRecordGetLabelsAttributeTypeOk(arg AlertRuleRecordGetLabelsAttributeType) (ret AlertRuleRecordGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAlertRuleRecordGetLabelsAttributeType(arg *AlertRuleRecordGetLabelsAttributeType, val AlertRuleRecordGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for record
*/

// isNotNullableString
type AlertRuleRecordGetRecordAttributeType = *string

func getAlertRuleRecordGetRecordAttributeTypeOk(arg AlertRuleRecordGetRecordAttributeType) (ret AlertRuleRecordGetRecordRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAlertRuleRecordGetRecordAttributeType(arg *AlertRuleRecordGetRecordAttributeType, val AlertRuleRecordGetRecordRetType) {
	*arg = &val
}

type AlertRuleRecordGetRecordArgType = string
type AlertRuleRecordGetRecordRetType = string

// AlertRuleRecord struct for AlertRuleRecord
type AlertRuleRecord struct {
	Alert       AlertRuleRecordGetAlertAttributeType       `json:"alert,omitempty"`
	Annotations AlertRuleRecordGetAnnotationsAttributeType `json:"annotations,omitempty"`
	// REQUIRED
	Expr   AlertRuleRecordGetExprAttributeType   `json:"expr"`
	For    AlertRuleRecordGetForAttributeType    `json:"for,omitempty"`
	Labels AlertRuleRecordGetLabelsAttributeType `json:"labels,omitempty"`
	Record AlertRuleRecordGetRecordAttributeType `json:"record,omitempty"`
}

type _AlertRuleRecord AlertRuleRecord

// NewAlertRuleRecord instantiates a new AlertRuleRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRuleRecord(expr AlertRuleRecordGetExprArgType) *AlertRuleRecord {
	this := AlertRuleRecord{}
	setAlertRuleRecordGetExprAttributeType(&this.Expr, expr)
	return &this
}

// NewAlertRuleRecordWithDefaults instantiates a new AlertRuleRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRuleRecordWithDefaults() *AlertRuleRecord {
	this := AlertRuleRecord{}
	return &this
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *AlertRuleRecord) GetAlert() (res AlertRuleRecordGetAlertRetType) {
	res, _ = o.GetAlertOk()
	return
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecord) GetAlertOk() (ret AlertRuleRecordGetAlertRetType, ok bool) {
	return getAlertRuleRecordGetAlertAttributeTypeOk(o.Alert)
}

// HasAlert returns a boolean if a field has been set.
func (o *AlertRuleRecord) HasAlert() bool {
	_, ok := o.GetAlertOk()
	return ok
}

// SetAlert gets a reference to the given string and assigns it to the Alert field.
func (o *AlertRuleRecord) SetAlert(v AlertRuleRecordGetAlertRetType) {
	setAlertRuleRecordGetAlertAttributeType(&o.Alert, v)
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *AlertRuleRecord) GetAnnotations() (res AlertRuleRecordGetAnnotationsRetType) {
	res, _ = o.GetAnnotationsOk()
	return
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecord) GetAnnotationsOk() (ret AlertRuleRecordGetAnnotationsRetType, ok bool) {
	return getAlertRuleRecordGetAnnotationsAttributeTypeOk(o.Annotations)
}

// HasAnnotations returns a boolean if a field has been set.
func (o *AlertRuleRecord) HasAnnotations() bool {
	_, ok := o.GetAnnotationsOk()
	return ok
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *AlertRuleRecord) SetAnnotations(v AlertRuleRecordGetAnnotationsRetType) {
	setAlertRuleRecordGetAnnotationsAttributeType(&o.Annotations, v)
}

// GetExpr returns the Expr field value
func (o *AlertRuleRecord) GetExpr() (ret AlertRuleRecordGetExprRetType) {
	ret, _ = o.GetExprOk()
	return ret
}

// GetExprOk returns a tuple with the Expr field value
// and a boolean to check if the value has been set.
func (o *AlertRuleRecord) GetExprOk() (ret AlertRuleRecordGetExprRetType, ok bool) {
	return getAlertRuleRecordGetExprAttributeTypeOk(o.Expr)
}

// SetExpr sets field value
func (o *AlertRuleRecord) SetExpr(v AlertRuleRecordGetExprRetType) {
	setAlertRuleRecordGetExprAttributeType(&o.Expr, v)
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *AlertRuleRecord) GetFor() (res AlertRuleRecordGetForRetType) {
	res, _ = o.GetForOk()
	return
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecord) GetForOk() (ret AlertRuleRecordGetForRetType, ok bool) {
	return getAlertRuleRecordGetForAttributeTypeOk(o.For)
}

// HasFor returns a boolean if a field has been set.
func (o *AlertRuleRecord) HasFor() bool {
	_, ok := o.GetForOk()
	return ok
}

// SetFor gets a reference to the given string and assigns it to the For field.
func (o *AlertRuleRecord) SetFor(v AlertRuleRecordGetForRetType) {
	setAlertRuleRecordGetForAttributeType(&o.For, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AlertRuleRecord) GetLabels() (res AlertRuleRecordGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecord) GetLabelsOk() (ret AlertRuleRecordGetLabelsRetType, ok bool) {
	return getAlertRuleRecordGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *AlertRuleRecord) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *AlertRuleRecord) SetLabels(v AlertRuleRecordGetLabelsRetType) {
	setAlertRuleRecordGetLabelsAttributeType(&o.Labels, v)
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *AlertRuleRecord) GetRecord() (res AlertRuleRecordGetRecordRetType) {
	res, _ = o.GetRecordOk()
	return
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecord) GetRecordOk() (ret AlertRuleRecordGetRecordRetType, ok bool) {
	return getAlertRuleRecordGetRecordAttributeTypeOk(o.Record)
}

// HasRecord returns a boolean if a field has been set.
func (o *AlertRuleRecord) HasRecord() bool {
	_, ok := o.GetRecordOk()
	return ok
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *AlertRuleRecord) SetRecord(v AlertRuleRecordGetRecordRetType) {
	setAlertRuleRecordGetRecordAttributeType(&o.Record, v)
}

func (o AlertRuleRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAlertRuleRecordGetAlertAttributeTypeOk(o.Alert); ok {
		toSerialize["Alert"] = val
	}
	if val, ok := getAlertRuleRecordGetAnnotationsAttributeTypeOk(o.Annotations); ok {
		toSerialize["Annotations"] = val
	}
	if val, ok := getAlertRuleRecordGetExprAttributeTypeOk(o.Expr); ok {
		toSerialize["Expr"] = val
	}
	if val, ok := getAlertRuleRecordGetForAttributeTypeOk(o.For); ok {
		toSerialize["For"] = val
	}
	if val, ok := getAlertRuleRecordGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getAlertRuleRecordGetRecordAttributeTypeOk(o.Record); ok {
		toSerialize["Record"] = val
	}
	return toSerialize, nil
}

type NullableAlertRuleRecord struct {
	value *AlertRuleRecord
	isSet bool
}

func (v NullableAlertRuleRecord) Get() *AlertRuleRecord {
	return v.value
}

func (v *NullableAlertRuleRecord) Set(val *AlertRuleRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleRecord(val *AlertRuleRecord) *NullableAlertRuleRecord {
	return &NullableAlertRuleRecord{value: val, isSet: true}
}

func (v NullableAlertRuleRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
