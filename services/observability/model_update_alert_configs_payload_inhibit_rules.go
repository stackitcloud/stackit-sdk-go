/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the UpdateAlertConfigsPayloadInhibitRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAlertConfigsPayloadInhibitRules{}

// UpdateAlertConfigsPayloadInhibitRules A list of inhibition rules.
type UpdateAlertConfigsPayloadInhibitRules struct {
	// Labels that must have an equal value in the source and target alert for the inhibition to take effect. `Additional Validators:` * should only include the characters: a-zA-Z0-9_./@&?:-
	Equal *[]string `json:"equal,omitempty"`
	// map of key:value. Matchers for which one or more alerts have to exist for the inhibition to take effect. `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters * each key and value should only include the characters: a-zA-Z0-9_./@&?:-
	SourceMatch *map[string]interface{} `json:"sourceMatch,omitempty"`
	// map of key:value. Regex match `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters
	SourceMatchRe *map[string]interface{} `json:"sourceMatchRe,omitempty"`
	// map of key:value. Matchers that have to be fulfilled in the alerts to be muted. `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters * each key and value should only include the characters: a-zA-Z0-9_./@&?:-
	TargetMatch *map[string]interface{} `json:"targetMatch,omitempty"`
	// map of key:value. Matchers that have to be fulfilled in the alerts to be muted. Regex. `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters
	TargetMatchRe *map[string]interface{} `json:"targetMatchRe,omitempty"`
}

// NewUpdateAlertConfigsPayloadInhibitRules instantiates a new UpdateAlertConfigsPayloadInhibitRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAlertConfigsPayloadInhibitRules() *UpdateAlertConfigsPayloadInhibitRules {
	this := UpdateAlertConfigsPayloadInhibitRules{}
	return &this
}

// NewUpdateAlertConfigsPayloadInhibitRulesWithDefaults instantiates a new UpdateAlertConfigsPayloadInhibitRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAlertConfigsPayloadInhibitRulesWithDefaults() *UpdateAlertConfigsPayloadInhibitRules {
	this := UpdateAlertConfigsPayloadInhibitRules{}
	return &this
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetEqual() *[]string {
	if o == nil || IsNil(o.Equal) {
		var ret *[]string
		return ret
	}
	return o.Equal
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetEqualOk() (*[]string, bool) {
	if o == nil || IsNil(o.Equal) {
		return nil, false
	}
	return o.Equal, true
}

// HasEqual returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasEqual() bool {
	if o != nil && !IsNil(o.Equal) {
		return true
	}

	return false
}

// SetEqual gets a reference to the given []string and assigns it to the Equal field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetEqual(v *[]string) {
	o.Equal = v
}

// GetSourceMatch returns the SourceMatch field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatch() *map[string]interface{} {
	if o == nil || IsNil(o.SourceMatch) {
		var ret *map[string]interface{}
		return ret
	}
	return o.SourceMatch
}

// GetSourceMatchOk returns a tuple with the SourceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatchOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.SourceMatch) {
		return &map[string]interface{}{}, false
	}
	return o.SourceMatch, true
}

// HasSourceMatch returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasSourceMatch() bool {
	if o != nil && !IsNil(o.SourceMatch) {
		return true
	}

	return false
}

// SetSourceMatch gets a reference to the given map[string]interface{} and assigns it to the SourceMatch field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetSourceMatch(v *map[string]interface{}) {
	o.SourceMatch = v
}

// GetSourceMatchRe returns the SourceMatchRe field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatchRe() *map[string]interface{} {
	if o == nil || IsNil(o.SourceMatchRe) {
		var ret *map[string]interface{}
		return ret
	}
	return o.SourceMatchRe
}

// GetSourceMatchReOk returns a tuple with the SourceMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatchReOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.SourceMatchRe) {
		return &map[string]interface{}{}, false
	}
	return o.SourceMatchRe, true
}

// HasSourceMatchRe returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasSourceMatchRe() bool {
	if o != nil && !IsNil(o.SourceMatchRe) {
		return true
	}

	return false
}

// SetSourceMatchRe gets a reference to the given map[string]interface{} and assigns it to the SourceMatchRe field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetSourceMatchRe(v *map[string]interface{}) {
	o.SourceMatchRe = v
}

// GetTargetMatch returns the TargetMatch field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatch() *map[string]interface{} {
	if o == nil || IsNil(o.TargetMatch) {
		var ret *map[string]interface{}
		return ret
	}
	return o.TargetMatch
}

// GetTargetMatchOk returns a tuple with the TargetMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatchOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.TargetMatch) {
		return &map[string]interface{}{}, false
	}
	return o.TargetMatch, true
}

// HasTargetMatch returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasTargetMatch() bool {
	if o != nil && !IsNil(o.TargetMatch) {
		return true
	}

	return false
}

// SetTargetMatch gets a reference to the given map[string]interface{} and assigns it to the TargetMatch field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetTargetMatch(v *map[string]interface{}) {
	o.TargetMatch = v
}

// GetTargetMatchRe returns the TargetMatchRe field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatchRe() *map[string]interface{} {
	if o == nil || IsNil(o.TargetMatchRe) {
		var ret *map[string]interface{}
		return ret
	}
	return o.TargetMatchRe
}

// GetTargetMatchReOk returns a tuple with the TargetMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatchReOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.TargetMatchRe) {
		return &map[string]interface{}{}, false
	}
	return o.TargetMatchRe, true
}

// HasTargetMatchRe returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasTargetMatchRe() bool {
	if o != nil && !IsNil(o.TargetMatchRe) {
		return true
	}

	return false
}

// SetTargetMatchRe gets a reference to the given map[string]interface{} and assigns it to the TargetMatchRe field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetTargetMatchRe(v *map[string]interface{}) {
	o.TargetMatchRe = v
}

func (o UpdateAlertConfigsPayloadInhibitRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Equal) {
		toSerialize["equal"] = o.Equal
	}
	if !IsNil(o.SourceMatch) {
		toSerialize["sourceMatch"] = o.SourceMatch
	}
	if !IsNil(o.SourceMatchRe) {
		toSerialize["sourceMatchRe"] = o.SourceMatchRe
	}
	if !IsNil(o.TargetMatch) {
		toSerialize["targetMatch"] = o.TargetMatch
	}
	if !IsNil(o.TargetMatchRe) {
		toSerialize["targetMatchRe"] = o.TargetMatchRe
	}
	return toSerialize, nil
}

type NullableUpdateAlertConfigsPayloadInhibitRules struct {
	value *UpdateAlertConfigsPayloadInhibitRules
	isSet bool
}

func (v NullableUpdateAlertConfigsPayloadInhibitRules) Get() *UpdateAlertConfigsPayloadInhibitRules {
	return v.value
}

func (v *NullableUpdateAlertConfigsPayloadInhibitRules) Set(val *UpdateAlertConfigsPayloadInhibitRules) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAlertConfigsPayloadInhibitRules) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAlertConfigsPayloadInhibitRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAlertConfigsPayloadInhibitRules(val *UpdateAlertConfigsPayloadInhibitRules) *NullableUpdateAlertConfigsPayloadInhibitRules {
	return &NullableUpdateAlertConfigsPayloadInhibitRules{value: val, isSet: true}
}

func (v NullableUpdateAlertConfigsPayloadInhibitRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAlertConfigsPayloadInhibitRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
