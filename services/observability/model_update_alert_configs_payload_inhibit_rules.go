/*
STACKIT Observability API

API endpoints for Observability on STACKIT

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package observability

import (
	"encoding/json"
)

// checks if the UpdateAlertConfigsPayloadInhibitRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAlertConfigsPayloadInhibitRules{}

/*
	types and functions for equal
*/

// isArray
type UpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeType = *[]string
type UpdateAlertConfigsPayloadInhibitRulesGetEqualArgType = []string
type UpdateAlertConfigsPayloadInhibitRulesGetEqualRetType = []string

func getUpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeTypeOk(arg UpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeType) (ret UpdateAlertConfigsPayloadInhibitRulesGetEqualRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeType(arg *UpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeType, val UpdateAlertConfigsPayloadInhibitRulesGetEqualRetType) {
	*arg = &val
}

/*
	types and functions for sourceMatch
*/

// isFreeform
type UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeType = *map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchArgType = map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchRetType = map[string]interface{}

func getUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeTypeOk(arg UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeType) (ret UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeType(arg *UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeType, val UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchRetType) {
	*arg = &val
}

/*
	types and functions for sourceMatchRe
*/

// isFreeform
type UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeType = *map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReArgType = map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReRetType = map[string]interface{}

func getUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeTypeOk(arg UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeType) (ret UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeType(arg *UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeType, val UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReRetType) {
	*arg = &val
}

/*
	types and functions for targetMatch
*/

// isFreeform
type UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeType = *map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchArgType = map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchRetType = map[string]interface{}

func getUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeTypeOk(arg UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeType) (ret UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeType(arg *UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeType, val UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchRetType) {
	*arg = &val
}

/*
	types and functions for targetMatchRe
*/

// isFreeform
type UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeType = *map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReArgType = map[string]interface{}
type UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReRetType = map[string]interface{}

func getUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeTypeOk(arg UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeType) (ret UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeType(arg *UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeType, val UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReRetType) {
	*arg = &val
}

// UpdateAlertConfigsPayloadInhibitRules A list of inhibition rules.
type UpdateAlertConfigsPayloadInhibitRules struct {
	// Labels that must have an equal value in the source and target alert for the inhibition to take effect. `Additional Validators:` * should only include the characters: a-zA-Z0-9_./@&?:-
	Equal UpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeType `json:"equal,omitempty"`
	// map of key:value. Matchers for which one or more alerts have to exist for the inhibition to take effect. `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters * each key and value should only include the characters: a-zA-Z0-9_./@&?:-
	SourceMatch UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeType `json:"sourceMatch,omitempty"`
	// map of key:value. Regex match `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters
	SourceMatchRe UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeType `json:"sourceMatchRe,omitempty"`
	// map of key:value. Matchers that have to be fulfilled in the alerts to be muted. `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters * each key and value should only include the characters: a-zA-Z0-9_./@&?:-
	TargetMatch UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeType `json:"targetMatch,omitempty"`
	// map of key:value. Matchers that have to be fulfilled in the alerts to be muted. Regex. `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters
	TargetMatchRe UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeType `json:"targetMatchRe,omitempty"`
}

// NewUpdateAlertConfigsPayloadInhibitRules instantiates a new UpdateAlertConfigsPayloadInhibitRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAlertConfigsPayloadInhibitRules() *UpdateAlertConfigsPayloadInhibitRules {
	this := UpdateAlertConfigsPayloadInhibitRules{}
	return &this
}

// NewUpdateAlertConfigsPayloadInhibitRulesWithDefaults instantiates a new UpdateAlertConfigsPayloadInhibitRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAlertConfigsPayloadInhibitRulesWithDefaults() *UpdateAlertConfigsPayloadInhibitRules {
	this := UpdateAlertConfigsPayloadInhibitRules{}
	return &this
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetEqual() (res UpdateAlertConfigsPayloadInhibitRulesGetEqualRetType) {
	res, _ = o.GetEqualOk()
	return
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetEqualOk() (ret UpdateAlertConfigsPayloadInhibitRulesGetEqualRetType, ok bool) {
	return getUpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeTypeOk(o.Equal)
}

// HasEqual returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasEqual() bool {
	_, ok := o.GetEqualOk()
	return ok
}

// SetEqual gets a reference to the given []string and assigns it to the Equal field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetEqual(v UpdateAlertConfigsPayloadInhibitRulesGetEqualRetType) {
	setUpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeType(&o.Equal, v)
}

// GetSourceMatch returns the SourceMatch field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatch() (res UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchRetType) {
	res, _ = o.GetSourceMatchOk()
	return
}

// GetSourceMatchOk returns a tuple with the SourceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatchOk() (ret UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchRetType, ok bool) {
	return getUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeTypeOk(o.SourceMatch)
}

// HasSourceMatch returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasSourceMatch() bool {
	_, ok := o.GetSourceMatchOk()
	return ok
}

// SetSourceMatch gets a reference to the given map[string]interface{} and assigns it to the SourceMatch field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetSourceMatch(v UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchRetType) {
	setUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeType(&o.SourceMatch, v)
}

// GetSourceMatchRe returns the SourceMatchRe field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatchRe() (res UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReRetType) {
	res, _ = o.GetSourceMatchReOk()
	return
}

// GetSourceMatchReOk returns a tuple with the SourceMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetSourceMatchReOk() (ret UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReRetType, ok bool) {
	return getUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeTypeOk(o.SourceMatchRe)
}

// HasSourceMatchRe returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasSourceMatchRe() bool {
	_, ok := o.GetSourceMatchReOk()
	return ok
}

// SetSourceMatchRe gets a reference to the given map[string]interface{} and assigns it to the SourceMatchRe field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetSourceMatchRe(v UpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReRetType) {
	setUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeType(&o.SourceMatchRe, v)
}

// GetTargetMatch returns the TargetMatch field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatch() (res UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchRetType) {
	res, _ = o.GetTargetMatchOk()
	return
}

// GetTargetMatchOk returns a tuple with the TargetMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatchOk() (ret UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchRetType, ok bool) {
	return getUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeTypeOk(o.TargetMatch)
}

// HasTargetMatch returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasTargetMatch() bool {
	_, ok := o.GetTargetMatchOk()
	return ok
}

// SetTargetMatch gets a reference to the given map[string]interface{} and assigns it to the TargetMatch field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetTargetMatch(v UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchRetType) {
	setUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeType(&o.TargetMatch, v)
}

// GetTargetMatchRe returns the TargetMatchRe field value if set, zero value otherwise.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatchRe() (res UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReRetType) {
	res, _ = o.GetTargetMatchReOk()
	return
}

// GetTargetMatchReOk returns a tuple with the TargetMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) GetTargetMatchReOk() (ret UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReRetType, ok bool) {
	return getUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeTypeOk(o.TargetMatchRe)
}

// HasTargetMatchRe returns a boolean if a field has been set.
func (o *UpdateAlertConfigsPayloadInhibitRules) HasTargetMatchRe() bool {
	_, ok := o.GetTargetMatchReOk()
	return ok
}

// SetTargetMatchRe gets a reference to the given map[string]interface{} and assigns it to the TargetMatchRe field.
func (o *UpdateAlertConfigsPayloadInhibitRules) SetTargetMatchRe(v UpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReRetType) {
	setUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeType(&o.TargetMatchRe, v)
}

func (o UpdateAlertConfigsPayloadInhibitRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUpdateAlertConfigsPayloadInhibitRulesGetEqualAttributeTypeOk(o.Equal); ok {
		toSerialize["Equal"] = val
	}
	if val, ok := getUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchAttributeTypeOk(o.SourceMatch); ok {
		toSerialize["SourceMatch"] = val
	}
	if val, ok := getUpdateAlertConfigsPayloadInhibitRulesGetSourceMatchReAttributeTypeOk(o.SourceMatchRe); ok {
		toSerialize["SourceMatchRe"] = val
	}
	if val, ok := getUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchAttributeTypeOk(o.TargetMatch); ok {
		toSerialize["TargetMatch"] = val
	}
	if val, ok := getUpdateAlertConfigsPayloadInhibitRulesGetTargetMatchReAttributeTypeOk(o.TargetMatchRe); ok {
		toSerialize["TargetMatchRe"] = val
	}
	return toSerialize, nil
}

type NullableUpdateAlertConfigsPayloadInhibitRules struct {
	value *UpdateAlertConfigsPayloadInhibitRules
	isSet bool
}

func (v NullableUpdateAlertConfigsPayloadInhibitRules) Get() *UpdateAlertConfigsPayloadInhibitRules {
	return v.value
}

func (v *NullableUpdateAlertConfigsPayloadInhibitRules) Set(val *UpdateAlertConfigsPayloadInhibitRules) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAlertConfigsPayloadInhibitRules) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAlertConfigsPayloadInhibitRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAlertConfigsPayloadInhibitRules(val *UpdateAlertConfigsPayloadInhibitRules) *NullableUpdateAlertConfigsPayloadInhibitRules {
	return &NullableUpdateAlertConfigsPayloadInhibitRules{value: val, isSet: true}
}

func (v NullableUpdateAlertConfigsPayloadInhibitRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAlertConfigsPayloadInhibitRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
