/*
STACKIT Git API

STACKIT Git management API.

API version: 1beta.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package git

import (
	"encoding/json"
)

// checks if the ListFlavors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFlavors{}

/*
	types and functions for flavors
*/

// isArray
type ListFlavorsGetFlavorsAttributeType = *[]Flavor
type ListFlavorsGetFlavorsArgType = []Flavor
type ListFlavorsGetFlavorsRetType = []Flavor

func getListFlavorsGetFlavorsAttributeTypeOk(arg ListFlavorsGetFlavorsAttributeType) (ret ListFlavorsGetFlavorsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListFlavorsGetFlavorsAttributeType(arg *ListFlavorsGetFlavorsAttributeType, val ListFlavorsGetFlavorsRetType) {
	*arg = &val
}

// ListFlavors A list of STACKIT Git flavors.
type ListFlavors struct {
	// REQUIRED
	Flavors ListFlavorsGetFlavorsAttributeType `json:"flavors" required:"true"`
}

type _ListFlavors ListFlavors

// NewListFlavors instantiates a new ListFlavors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFlavors(flavors ListFlavorsGetFlavorsArgType) *ListFlavors {
	this := ListFlavors{}
	setListFlavorsGetFlavorsAttributeType(&this.Flavors, flavors)
	return &this
}

// NewListFlavorsWithDefaults instantiates a new ListFlavors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFlavorsWithDefaults() *ListFlavors {
	this := ListFlavors{}
	return &this
}

// GetFlavors returns the Flavors field value
func (o *ListFlavors) GetFlavors() (ret ListFlavorsGetFlavorsRetType) {
	ret, _ = o.GetFlavorsOk()
	return ret
}

// GetFlavorsOk returns a tuple with the Flavors field value
// and a boolean to check if the value has been set.
func (o *ListFlavors) GetFlavorsOk() (ret ListFlavorsGetFlavorsRetType, ok bool) {
	return getListFlavorsGetFlavorsAttributeTypeOk(o.Flavors)
}

// SetFlavors sets field value
func (o *ListFlavors) SetFlavors(v ListFlavorsGetFlavorsRetType) {
	setListFlavorsGetFlavorsAttributeType(&o.Flavors, v)
}

func (o ListFlavors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getListFlavorsGetFlavorsAttributeTypeOk(o.Flavors); ok {
		toSerialize["Flavors"] = val
	}
	return toSerialize, nil
}

type NullableListFlavors struct {
	value *ListFlavors
	isSet bool
}

func (v NullableListFlavors) Get() *ListFlavors {
	return v.value
}

func (v *NullableListFlavors) Set(val *ListFlavors) {
	v.value = val
	v.isSet = true
}

func (v NullableListFlavors) IsSet() bool {
	return v.isSet
}

func (v *NullableListFlavors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFlavors(val *ListFlavors) *NullableListFlavors {
	return &NullableListFlavors{value: val, isSet: true}
}

func (v NullableListFlavors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFlavors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
