/*
Audit Log API

API Endpoints to retrieve recorded actions and resulting changes in the system.  ### Documentation The user documentation with explanations how to use the api can be found  [here](https://docs.stackit.cloud/stackit/en/retrieve-audit-log-per-api-request-134415907.html).  ### Audit Logging Changes on organizations, folders and projects and respective cloud resources are logged and collected in the audit  log.  ### API Constraints The audit log API allows to download messages from the last 90 days. The maximum duration that can be queried at  once is 24 hours. Requests are rate limited - the current maximum is 1 request per second.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// checks if the Initiator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Initiator{}

/*
	types and functions for email
*/

// isNotNullableString
type InitiatorGetEmailAttributeType = *string

func getInitiatorGetEmailAttributeTypeOk(arg InitiatorGetEmailAttributeType) (ret InitiatorGetEmailRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInitiatorGetEmailAttributeType(arg *InitiatorGetEmailAttributeType, val InitiatorGetEmailRetType) {
	*arg = &val
}

type InitiatorGetEmailArgType = string
type InitiatorGetEmailRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type InitiatorGetIdAttributeType = *string

func getInitiatorGetIdAttributeTypeOk(arg InitiatorGetIdAttributeType) (ret InitiatorGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInitiatorGetIdAttributeType(arg *InitiatorGetIdAttributeType, val InitiatorGetIdRetType) {
	*arg = &val
}

type InitiatorGetIdArgType = string
type InitiatorGetIdRetType = string

// Initiator Information about who made the request.
type Initiator struct {
	// E-Mail of the user or service account who triggered the request
	Email InitiatorGetEmailAttributeType `json:"email,omitempty"`
	// Unique identifier of the user
	// REQUIRED
	Id InitiatorGetIdAttributeType `json:"id" required:"true"`
}

type _Initiator Initiator

// NewInitiator instantiates a new Initiator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiator(id InitiatorGetIdArgType) *Initiator {
	this := Initiator{}
	setInitiatorGetIdAttributeType(&this.Id, id)
	return &this
}

// NewInitiatorWithDefaults instantiates a new Initiator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiatorWithDefaults() *Initiator {
	this := Initiator{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Initiator) GetEmail() (res InitiatorGetEmailRetType) {
	res, _ = o.GetEmailOk()
	return
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Initiator) GetEmailOk() (ret InitiatorGetEmailRetType, ok bool) {
	return getInitiatorGetEmailAttributeTypeOk(o.Email)
}

// HasEmail returns a boolean if a field has been set.
func (o *Initiator) HasEmail() bool {
	_, ok := o.GetEmailOk()
	return ok
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Initiator) SetEmail(v InitiatorGetEmailRetType) {
	setInitiatorGetEmailAttributeType(&o.Email, v)
}

// GetId returns the Id field value
func (o *Initiator) GetId() (ret InitiatorGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Initiator) GetIdOk() (ret InitiatorGetIdRetType, ok bool) {
	return getInitiatorGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Initiator) SetId(v InitiatorGetIdRetType) {
	setInitiatorGetIdAttributeType(&o.Id, v)
}

func (o Initiator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInitiatorGetEmailAttributeTypeOk(o.Email); ok {
		toSerialize["Email"] = val
	}
	if val, ok := getInitiatorGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	return toSerialize, nil
}

type NullableInitiator struct {
	value *Initiator
	isSet bool
}

func (v NullableInitiator) Get() *Initiator {
	return v.value
}

func (v *NullableInitiator) Set(val *Initiator) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiator(val *Initiator) *NullableInitiator {
	return &NullableInitiator{value: val, isSet: true}
}

func (v NullableInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
