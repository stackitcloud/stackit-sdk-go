/*
Audit Log API

API Endpoints to retrieve recorded actions and resulting changes in the system.  ### Documentation The user documentation with explanations how to use the api can be found  [here](https://docs.stackit.cloud/stackit/en/retrieve-audit-log-per-api-request-134415907.html).  ### Audit Logging Changes on organizations, folders and projects and respective cloud resources are logged and collected in the audit  log.  ### API Constraints The audit log API allows to download messages from the last 90 days. The maximum duration that can be queried at  once is 24 hours. Requests are rate limited - the current maximum is 60 requests per minute.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// checks if the GatewayErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayErrorResponse{}

/*
	types and functions for message
*/

// isNotNullableString
type GatewayErrorResponseGetMessageAttributeType = *string

func getGatewayErrorResponseGetMessageAttributeTypeOk(arg GatewayErrorResponseGetMessageAttributeType) (ret GatewayErrorResponseGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setGatewayErrorResponseGetMessageAttributeType(arg *GatewayErrorResponseGetMessageAttributeType, val GatewayErrorResponseGetMessageRetType) {
	*arg = &val
}

type GatewayErrorResponseGetMessageArgType = string
type GatewayErrorResponseGetMessageRetType = string

/*
	types and functions for status
*/

// isNumber
type GatewayErrorResponseGetStatusAttributeType = *float64
type GatewayErrorResponseGetStatusArgType = float64
type GatewayErrorResponseGetStatusRetType = float64

func getGatewayErrorResponseGetStatusAttributeTypeOk(arg GatewayErrorResponseGetStatusAttributeType) (ret GatewayErrorResponseGetStatusRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setGatewayErrorResponseGetStatusAttributeType(arg *GatewayErrorResponseGetStatusAttributeType, val GatewayErrorResponseGetStatusRetType) {
	*arg = &val
}

// GatewayErrorResponse struct for GatewayErrorResponse
type GatewayErrorResponse struct {
	// Description of the error.
	Message GatewayErrorResponseGetMessageAttributeType `json:"message,omitempty"`
	// Http status code.
	Status GatewayErrorResponseGetStatusAttributeType `json:"status,omitempty"`
}

// NewGatewayErrorResponse instantiates a new GatewayErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayErrorResponse() *GatewayErrorResponse {
	this := GatewayErrorResponse{}
	return &this
}

// NewGatewayErrorResponseWithDefaults instantiates a new GatewayErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayErrorResponseWithDefaults() *GatewayErrorResponse {
	this := GatewayErrorResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GatewayErrorResponse) GetMessage() (res GatewayErrorResponseGetMessageRetType) {
	res, _ = o.GetMessageOk()
	return
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayErrorResponse) GetMessageOk() (ret GatewayErrorResponseGetMessageRetType, ok bool) {
	return getGatewayErrorResponseGetMessageAttributeTypeOk(o.Message)
}

// HasMessage returns a boolean if a field has been set.
func (o *GatewayErrorResponse) HasMessage() bool {
	_, ok := o.GetMessageOk()
	return ok
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GatewayErrorResponse) SetMessage(v GatewayErrorResponseGetMessageRetType) {
	setGatewayErrorResponseGetMessageAttributeType(&o.Message, v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GatewayErrorResponse) GetStatus() (res GatewayErrorResponseGetStatusRetType) {
	res, _ = o.GetStatusOk()
	return
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayErrorResponse) GetStatusOk() (ret GatewayErrorResponseGetStatusRetType, ok bool) {
	return getGatewayErrorResponseGetStatusAttributeTypeOk(o.Status)
}

// HasStatus returns a boolean if a field has been set.
func (o *GatewayErrorResponse) HasStatus() bool {
	_, ok := o.GetStatusOk()
	return ok
}

// SetStatus gets a reference to the given float64 and assigns it to the Status field.
func (o *GatewayErrorResponse) SetStatus(v GatewayErrorResponseGetStatusRetType) {
	setGatewayErrorResponseGetStatusAttributeType(&o.Status, v)
}

func (o GatewayErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getGatewayErrorResponseGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	if val, ok := getGatewayErrorResponseGetStatusAttributeTypeOk(o.Status); ok {
		toSerialize["Status"] = val
	}
	return toSerialize, nil
}

type NullableGatewayErrorResponse struct {
	value *GatewayErrorResponse
	isSet bool
}

func (v NullableGatewayErrorResponse) Get() *GatewayErrorResponse {
	return v.value
}

func (v *NullableGatewayErrorResponse) Set(val *GatewayErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayErrorResponse(val *GatewayErrorResponse) *NullableGatewayErrorResponse {
	return &NullableGatewayErrorResponse{value: val, isSet: true}
}

func (v NullableGatewayErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
