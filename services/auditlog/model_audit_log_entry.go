/*
Audit Log API

API Endpoints to retrieve recorded actions and resulting changes in the system.  ### Audit Logging Changes on organizations, folders and projects and respective cloud resources are logged and collected in the audit  log.  ### API Constraints The audit log API allows to download messages from the last 90 days. The maximum duration that can be queried at  once is 24 hours. Requests are rate limited - the current maximum is 1 request per second.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AuditLogEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogEntry{}

/*
	types and functions for context
*/

// isModel
type AuditLogEntryGetContextAttributeType = *Context
type AuditLogEntryGetContextArgType = Context
type AuditLogEntryGetContextRetType = Context

func getAuditLogEntryGetContextAttributeTypeOk(arg AuditLogEntryGetContextAttributeType) (ret AuditLogEntryGetContextRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetContextAttributeType(arg *AuditLogEntryGetContextAttributeType, val AuditLogEntryGetContextRetType) {
	*arg = &val
}

/*
	types and functions for correlationId
*/

// isNotNullableString
type AuditLogEntryGetCorrelationIdAttributeType = *string

func getAuditLogEntryGetCorrelationIdAttributeTypeOk(arg AuditLogEntryGetCorrelationIdAttributeType) (ret AuditLogEntryGetCorrelationIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetCorrelationIdAttributeType(arg *AuditLogEntryGetCorrelationIdAttributeType, val AuditLogEntryGetCorrelationIdRetType) {
	*arg = &val
}

type AuditLogEntryGetCorrelationIdArgType = string
type AuditLogEntryGetCorrelationIdRetType = string

/*
	types and functions for details
*/

// isFreeform
type AuditLogEntryGetDetailsAttributeType = *map[string]interface{}
type AuditLogEntryGetDetailsArgType = map[string]interface{}
type AuditLogEntryGetDetailsRetType = map[string]interface{}

func getAuditLogEntryGetDetailsAttributeTypeOk(arg AuditLogEntryGetDetailsAttributeType) (ret AuditLogEntryGetDetailsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetDetailsAttributeType(arg *AuditLogEntryGetDetailsAttributeType, val AuditLogEntryGetDetailsRetType) {
	*arg = &val
}

/*
	types and functions for eventName
*/

// isNotNullableString
type AuditLogEntryGetEventNameAttributeType = *string

func getAuditLogEntryGetEventNameAttributeTypeOk(arg AuditLogEntryGetEventNameAttributeType) (ret AuditLogEntryGetEventNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetEventNameAttributeType(arg *AuditLogEntryGetEventNameAttributeType, val AuditLogEntryGetEventNameRetType) {
	*arg = &val
}

type AuditLogEntryGetEventNameArgType = string
type AuditLogEntryGetEventNameRetType = string

/*
	types and functions for eventSource
*/

// isNotNullableString
type AuditLogEntryGetEventSourceAttributeType = *string

func getAuditLogEntryGetEventSourceAttributeTypeOk(arg AuditLogEntryGetEventSourceAttributeType) (ret AuditLogEntryGetEventSourceRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetEventSourceAttributeType(arg *AuditLogEntryGetEventSourceAttributeType, val AuditLogEntryGetEventSourceRetType) {
	*arg = &val
}

type AuditLogEntryGetEventSourceArgType = string
type AuditLogEntryGetEventSourceRetType = string

/*
	types and functions for eventTimeStamp
*/

// isDateTime
type AuditLogEntryGetEventTimeStampAttributeType = *time.Time
type AuditLogEntryGetEventTimeStampArgType = time.Time
type AuditLogEntryGetEventTimeStampRetType = time.Time

func getAuditLogEntryGetEventTimeStampAttributeTypeOk(arg AuditLogEntryGetEventTimeStampAttributeType) (ret AuditLogEntryGetEventTimeStampRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetEventTimeStampAttributeType(arg *AuditLogEntryGetEventTimeStampAttributeType, val AuditLogEntryGetEventTimeStampRetType) {
	*arg = &val
}

/*
	types and functions for eventType
*/

// isEnum

// AuditLogEntryEventType Type that can be assigned to the event. For example, an event \"Organization created\" can be assigned to the type ADMIN_EVENT
// value type for enums
type AuditLogEntryEventType string

// List of EventType
const (
	AUDITLOGENTRYEVENT_TYPE_ADMIN_ACTIVITY AuditLogEntryEventType = "ADMIN_ACTIVITY"
	AUDITLOGENTRYEVENT_TYPE_SYSTEM_EVENT   AuditLogEntryEventType = "SYSTEM_EVENT"
	AUDITLOGENTRYEVENT_TYPE_POLICY_DENIED  AuditLogEntryEventType = "POLICY_DENIED"
)

// All allowed values of AuditLogEntry enum
var AllowedAuditLogEntryEventTypeEnumValues = []AuditLogEntryEventType{
	"ADMIN_ACTIVITY",
	"SYSTEM_EVENT",
	"POLICY_DENIED",
}

func (v *AuditLogEntryEventType) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson AuditLogEntryEventType
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := AuditLogEntryEventType(value)
	for _, existing := range AllowedAuditLogEntryEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditLogEntry", value)
}

// NewAuditLogEntryEventTypeFromValue returns a pointer to a valid AuditLogEntryEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditLogEntryEventTypeFromValue(v AuditLogEntryEventType) (*AuditLogEntryEventType, error) {
	ev := AuditLogEntryEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditLogEntryEventType: valid values are %v", v, AllowedAuditLogEntryEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditLogEntryEventType) IsValid() bool {
	for _, existing := range AllowedAuditLogEntryEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventTypeEventType value
func (v AuditLogEntryEventType) Ptr() *AuditLogEntryEventType {
	return &v
}

type NullableAuditLogEntryEventType struct {
	value *AuditLogEntryEventType
	isSet bool
}

func (v NullableAuditLogEntryEventType) Get() *AuditLogEntryEventType {
	return v.value
}

func (v *NullableAuditLogEntryEventType) Set(val *AuditLogEntryEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEntryEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEntryEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEntryEventType(val *AuditLogEntryEventType) *NullableAuditLogEntryEventType {
	return &NullableAuditLogEntryEventType{value: val, isSet: true}
}

func (v NullableAuditLogEntryEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEntryEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type AuditLogEntryGetEventTypeAttributeType = *AuditLogEntryEventType
type AuditLogEntryGetEventTypeArgType = AuditLogEntryEventType
type AuditLogEntryGetEventTypeRetType = AuditLogEntryEventType

func getAuditLogEntryGetEventTypeAttributeTypeOk(arg AuditLogEntryGetEventTypeAttributeType) (ret AuditLogEntryGetEventTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetEventTypeAttributeType(arg *AuditLogEntryGetEventTypeAttributeType, val AuditLogEntryGetEventTypeRetType) {
	*arg = &val
}

/*
	types and functions for eventVersion
*/

// isNotNullableString
type AuditLogEntryGetEventVersionAttributeType = *string

func getAuditLogEntryGetEventVersionAttributeTypeOk(arg AuditLogEntryGetEventVersionAttributeType) (ret AuditLogEntryGetEventVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetEventVersionAttributeType(arg *AuditLogEntryGetEventVersionAttributeType, val AuditLogEntryGetEventVersionRetType) {
	*arg = &val
}

type AuditLogEntryGetEventVersionArgType = string
type AuditLogEntryGetEventVersionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type AuditLogEntryGetIdAttributeType = *string

func getAuditLogEntryGetIdAttributeTypeOk(arg AuditLogEntryGetIdAttributeType) (ret AuditLogEntryGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetIdAttributeType(arg *AuditLogEntryGetIdAttributeType, val AuditLogEntryGetIdRetType) {
	*arg = &val
}

type AuditLogEntryGetIdArgType = string
type AuditLogEntryGetIdRetType = string

/*
	types and functions for initiator
*/

// isModel
type AuditLogEntryGetInitiatorAttributeType = *Initiator
type AuditLogEntryGetInitiatorArgType = Initiator
type AuditLogEntryGetInitiatorRetType = Initiator

func getAuditLogEntryGetInitiatorAttributeTypeOk(arg AuditLogEntryGetInitiatorAttributeType) (ret AuditLogEntryGetInitiatorRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetInitiatorAttributeType(arg *AuditLogEntryGetInitiatorAttributeType, val AuditLogEntryGetInitiatorRetType) {
	*arg = &val
}

/*
	types and functions for receivedTimeStamp
*/

// isDateTime
type AuditLogEntryGetReceivedTimeStampAttributeType = *time.Time
type AuditLogEntryGetReceivedTimeStampArgType = time.Time
type AuditLogEntryGetReceivedTimeStampRetType = time.Time

func getAuditLogEntryGetReceivedTimeStampAttributeTypeOk(arg AuditLogEntryGetReceivedTimeStampAttributeType) (ret AuditLogEntryGetReceivedTimeStampRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetReceivedTimeStampAttributeType(arg *AuditLogEntryGetReceivedTimeStampAttributeType, val AuditLogEntryGetReceivedTimeStampRetType) {
	*arg = &val
}

/*
	types and functions for region
*/

// isNotNullableString
type AuditLogEntryGetRegionAttributeType = *string

func getAuditLogEntryGetRegionAttributeTypeOk(arg AuditLogEntryGetRegionAttributeType) (ret AuditLogEntryGetRegionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetRegionAttributeType(arg *AuditLogEntryGetRegionAttributeType, val AuditLogEntryGetRegionRetType) {
	*arg = &val
}

type AuditLogEntryGetRegionArgType = string
type AuditLogEntryGetRegionRetType = string

/*
	types and functions for request
*/

// isModel
type AuditLogEntryGetRequestAttributeType = *Request
type AuditLogEntryGetRequestArgType = Request
type AuditLogEntryGetRequestRetType = Request

func getAuditLogEntryGetRequestAttributeTypeOk(arg AuditLogEntryGetRequestAttributeType) (ret AuditLogEntryGetRequestRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetRequestAttributeType(arg *AuditLogEntryGetRequestAttributeType, val AuditLogEntryGetRequestRetType) {
	*arg = &val
}

/*
	types and functions for resourceId
*/

// isNotNullableString
type AuditLogEntryGetResourceIdAttributeType = *string

func getAuditLogEntryGetResourceIdAttributeTypeOk(arg AuditLogEntryGetResourceIdAttributeType) (ret AuditLogEntryGetResourceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetResourceIdAttributeType(arg *AuditLogEntryGetResourceIdAttributeType, val AuditLogEntryGetResourceIdRetType) {
	*arg = &val
}

type AuditLogEntryGetResourceIdArgType = string
type AuditLogEntryGetResourceIdRetType = string

/*
	types and functions for resourceName
*/

// isNotNullableString
type AuditLogEntryGetResourceNameAttributeType = *string

func getAuditLogEntryGetResourceNameAttributeTypeOk(arg AuditLogEntryGetResourceNameAttributeType) (ret AuditLogEntryGetResourceNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetResourceNameAttributeType(arg *AuditLogEntryGetResourceNameAttributeType, val AuditLogEntryGetResourceNameRetType) {
	*arg = &val
}

type AuditLogEntryGetResourceNameArgType = string
type AuditLogEntryGetResourceNameRetType = string

/*
	types and functions for result
*/

// isFreeform
type AuditLogEntryGetResultAttributeType = *map[string]interface{}
type AuditLogEntryGetResultArgType = map[string]interface{}
type AuditLogEntryGetResultRetType = map[string]interface{}

func getAuditLogEntryGetResultAttributeTypeOk(arg AuditLogEntryGetResultAttributeType) (ret AuditLogEntryGetResultRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetResultAttributeType(arg *AuditLogEntryGetResultAttributeType, val AuditLogEntryGetResultRetType) {
	*arg = &val
}

/*
	types and functions for serviceAccountDelegationInfo
*/

// isModel
type AuditLogEntryGetServiceAccountDelegationInfoAttributeType = *ServiceAccountDelegationInfo
type AuditLogEntryGetServiceAccountDelegationInfoArgType = ServiceAccountDelegationInfo
type AuditLogEntryGetServiceAccountDelegationInfoRetType = ServiceAccountDelegationInfo

func getAuditLogEntryGetServiceAccountDelegationInfoAttributeTypeOk(arg AuditLogEntryGetServiceAccountDelegationInfoAttributeType) (ret AuditLogEntryGetServiceAccountDelegationInfoRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetServiceAccountDelegationInfoAttributeType(arg *AuditLogEntryGetServiceAccountDelegationInfoAttributeType, val AuditLogEntryGetServiceAccountDelegationInfoRetType) {
	*arg = &val
}

/*
	types and functions for severity
*/

// isEnum

// AuditLogEntrySeverity The severity of this request.
// value type for enums
type AuditLogEntrySeverity string

// List of Severity
const (
	AUDITLOGENTRYSEVERITY_INFO  AuditLogEntrySeverity = "INFO"
	AUDITLOGENTRYSEVERITY_ERROR AuditLogEntrySeverity = "ERROR"
)

// All allowed values of AuditLogEntry enum
var AllowedAuditLogEntrySeverityEnumValues = []AuditLogEntrySeverity{
	"INFO",
	"ERROR",
}

func (v *AuditLogEntrySeverity) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson AuditLogEntrySeverity
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := AuditLogEntrySeverity(value)
	for _, existing := range AllowedAuditLogEntrySeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditLogEntry", value)
}

// NewAuditLogEntrySeverityFromValue returns a pointer to a valid AuditLogEntrySeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditLogEntrySeverityFromValue(v AuditLogEntrySeverity) (*AuditLogEntrySeverity, error) {
	ev := AuditLogEntrySeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditLogEntrySeverity: valid values are %v", v, AllowedAuditLogEntrySeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditLogEntrySeverity) IsValid() bool {
	for _, existing := range AllowedAuditLogEntrySeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SeveritySeverity value
func (v AuditLogEntrySeverity) Ptr() *AuditLogEntrySeverity {
	return &v
}

type NullableAuditLogEntrySeverity struct {
	value *AuditLogEntrySeverity
	isSet bool
}

func (v NullableAuditLogEntrySeverity) Get() *AuditLogEntrySeverity {
	return v.value
}

func (v *NullableAuditLogEntrySeverity) Set(val *AuditLogEntrySeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEntrySeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEntrySeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEntrySeverity(val *AuditLogEntrySeverity) *NullableAuditLogEntrySeverity {
	return &NullableAuditLogEntrySeverity{value: val, isSet: true}
}

func (v NullableAuditLogEntrySeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEntrySeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type AuditLogEntryGetSeverityAttributeType = *AuditLogEntrySeverity
type AuditLogEntryGetSeverityArgType = AuditLogEntrySeverity
type AuditLogEntryGetSeverityRetType = AuditLogEntrySeverity

func getAuditLogEntryGetSeverityAttributeTypeOk(arg AuditLogEntryGetSeverityAttributeType) (ret AuditLogEntryGetSeverityRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetSeverityAttributeType(arg *AuditLogEntryGetSeverityAttributeType, val AuditLogEntryGetSeverityRetType) {
	*arg = &val
}

/*
	types and functions for sourceIpAddress
*/

// isNotNullableString
type AuditLogEntryGetSourceIpAddressAttributeType = *string

func getAuditLogEntryGetSourceIpAddressAttributeTypeOk(arg AuditLogEntryGetSourceIpAddressAttributeType) (ret AuditLogEntryGetSourceIpAddressRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetSourceIpAddressAttributeType(arg *AuditLogEntryGetSourceIpAddressAttributeType, val AuditLogEntryGetSourceIpAddressRetType) {
	*arg = &val
}

type AuditLogEntryGetSourceIpAddressArgType = string
type AuditLogEntryGetSourceIpAddressRetType = string

/*
	types and functions for userAgent
*/

// isNotNullableString
type AuditLogEntryGetUserAgentAttributeType = *string

func getAuditLogEntryGetUserAgentAttributeTypeOk(arg AuditLogEntryGetUserAgentAttributeType) (ret AuditLogEntryGetUserAgentRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetUserAgentAttributeType(arg *AuditLogEntryGetUserAgentAttributeType, val AuditLogEntryGetUserAgentRetType) {
	*arg = &val
}

type AuditLogEntryGetUserAgentArgType = string
type AuditLogEntryGetUserAgentRetType = string

/*
	types and functions for visibility
*/

// isEnum

// AuditLogEntryVisibility PUBLIC for entries that are intended for end users, while PRIVATE entries can only be viewed with system privileges.
// value type for enums
type AuditLogEntryVisibility string

// List of Visibility
const (
	AUDITLOGENTRYVISIBILITY_PUBLIC  AuditLogEntryVisibility = "PUBLIC"
	AUDITLOGENTRYVISIBILITY_PRIVATE AuditLogEntryVisibility = "PRIVATE"
)

// All allowed values of AuditLogEntry enum
var AllowedAuditLogEntryVisibilityEnumValues = []AuditLogEntryVisibility{
	"PUBLIC",
	"PRIVATE",
}

func (v *AuditLogEntryVisibility) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson AuditLogEntryVisibility
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := AuditLogEntryVisibility(value)
	for _, existing := range AllowedAuditLogEntryVisibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditLogEntry", value)
}

// NewAuditLogEntryVisibilityFromValue returns a pointer to a valid AuditLogEntryVisibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditLogEntryVisibilityFromValue(v AuditLogEntryVisibility) (*AuditLogEntryVisibility, error) {
	ev := AuditLogEntryVisibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditLogEntryVisibility: valid values are %v", v, AllowedAuditLogEntryVisibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditLogEntryVisibility) IsValid() bool {
	for _, existing := range AllowedAuditLogEntryVisibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VisibilityVisibility value
func (v AuditLogEntryVisibility) Ptr() *AuditLogEntryVisibility {
	return &v
}

type NullableAuditLogEntryVisibility struct {
	value *AuditLogEntryVisibility
	isSet bool
}

func (v NullableAuditLogEntryVisibility) Get() *AuditLogEntryVisibility {
	return v.value
}

func (v *NullableAuditLogEntryVisibility) Set(val *AuditLogEntryVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEntryVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEntryVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEntryVisibility(val *AuditLogEntryVisibility) *NullableAuditLogEntryVisibility {
	return &NullableAuditLogEntryVisibility{value: val, isSet: true}
}

func (v NullableAuditLogEntryVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEntryVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type AuditLogEntryGetVisibilityAttributeType = *AuditLogEntryVisibility
type AuditLogEntryGetVisibilityArgType = AuditLogEntryVisibility
type AuditLogEntryGetVisibilityRetType = AuditLogEntryVisibility

func getAuditLogEntryGetVisibilityAttributeTypeOk(arg AuditLogEntryGetVisibilityAttributeType) (ret AuditLogEntryGetVisibilityRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAuditLogEntryGetVisibilityAttributeType(arg *AuditLogEntryGetVisibilityAttributeType, val AuditLogEntryGetVisibilityRetType) {
	*arg = &val
}

// AuditLogEntry struct for AuditLogEntry
type AuditLogEntry struct {
	Context AuditLogEntryGetContextAttributeType `json:"context,omitempty"`
	// Unique ID which identifies the request from the sender point of view.
	CorrelationId AuditLogEntryGetCorrelationIdAttributeType `json:"correlationId,omitempty"`
	// Additional information about the event that is not part of the request or response. May contain arbitrary data.
	Details AuditLogEntryGetDetailsAttributeType `json:"details,omitempty"`
	// Name of the operation this event represents.
	// REQUIRED
	EventName AuditLogEntryGetEventNameAttributeType `json:"eventName"`
	// The service in which the causing event was handled.
	// REQUIRED
	EventSource AuditLogEntryGetEventSourceAttributeType `json:"eventSource"`
	// Timestamp at which the event was triggered.
	// REQUIRED
	EventTimeStamp AuditLogEntryGetEventTimeStampAttributeType `json:"eventTimeStamp"`
	// Type that can be assigned to the event. For example, an event \"Organization created\" can be assigned to the type ADMIN_EVENT
	// REQUIRED
	EventType AuditLogEntryGetEventTypeAttributeType `json:"eventType"`
	// Version of the log event format.
	// REQUIRED
	EventVersion AuditLogEntryGetEventVersionAttributeType `json:"eventVersion"`
	// Unique ID generated by the audit log.
	// REQUIRED
	Id AuditLogEntryGetIdAttributeType `json:"id"`
	// REQUIRED
	Initiator AuditLogEntryGetInitiatorAttributeType `json:"initiator"`
	// Timestamp at which the event was received by the audit log.
	// REQUIRED
	ReceivedTimeStamp AuditLogEntryGetReceivedTimeStampAttributeType `json:"receivedTimeStamp"`
	// Region from which the event has been emitted.
	// REQUIRED
	Region AuditLogEntryGetRegionAttributeType `json:"region"`
	// REQUIRED
	Request AuditLogEntryGetRequestAttributeType `json:"request"`
	// Unique id of the resource that is target of the operation
	ResourceId AuditLogEntryGetResourceIdAttributeType `json:"resourceId,omitempty"`
	// Name of the resource that is target of the operation
	ResourceName AuditLogEntryGetResourceNameAttributeType `json:"resourceName,omitempty"`
	// Object representing the change resulting from this event. May be omitted if no change has been applied. May contain arbitrary data.
	Result                       AuditLogEntryGetResultAttributeType                       `json:"result,omitempty"`
	ServiceAccountDelegationInfo AuditLogEntryGetServiceAccountDelegationInfoAttributeType `json:"serviceAccountDelegationInfo,omitempty"`
	// The severity of this request.
	// REQUIRED
	Severity AuditLogEntryGetSeverityAttributeType `json:"severity"`
	// IP address that the request was made from
	// REQUIRED
	SourceIpAddress AuditLogEntryGetSourceIpAddressAttributeType `json:"sourceIpAddress"`
	// Agent through which the request was made from (e.g. Portal, CLI, SDK, ...)
	// REQUIRED
	UserAgent AuditLogEntryGetUserAgentAttributeType `json:"userAgent"`
	// PUBLIC for entries that are intended for end users, while PRIVATE entries can only be viewed with system privileges.
	// REQUIRED
	Visibility AuditLogEntryGetVisibilityAttributeType `json:"visibility"`
}

type _AuditLogEntry AuditLogEntry

// NewAuditLogEntry instantiates a new AuditLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogEntry(eventName AuditLogEntryGetEventNameArgType, eventSource AuditLogEntryGetEventSourceArgType, eventTimeStamp AuditLogEntryGetEventTimeStampArgType, eventType AuditLogEntryGetEventTypeArgType, eventVersion AuditLogEntryGetEventVersionArgType, id AuditLogEntryGetIdArgType, initiator AuditLogEntryGetInitiatorArgType, receivedTimeStamp AuditLogEntryGetReceivedTimeStampArgType, region AuditLogEntryGetRegionArgType, request AuditLogEntryGetRequestArgType, severity AuditLogEntryGetSeverityArgType, sourceIpAddress AuditLogEntryGetSourceIpAddressArgType, userAgent AuditLogEntryGetUserAgentArgType, visibility AuditLogEntryGetVisibilityArgType) *AuditLogEntry {
	this := AuditLogEntry{}
	setAuditLogEntryGetEventNameAttributeType(&this.EventName, eventName)
	setAuditLogEntryGetEventSourceAttributeType(&this.EventSource, eventSource)
	setAuditLogEntryGetEventTimeStampAttributeType(&this.EventTimeStamp, eventTimeStamp)
	setAuditLogEntryGetEventTypeAttributeType(&this.EventType, eventType)
	setAuditLogEntryGetEventVersionAttributeType(&this.EventVersion, eventVersion)
	setAuditLogEntryGetIdAttributeType(&this.Id, id)
	setAuditLogEntryGetInitiatorAttributeType(&this.Initiator, initiator)
	setAuditLogEntryGetReceivedTimeStampAttributeType(&this.ReceivedTimeStamp, receivedTimeStamp)
	setAuditLogEntryGetRegionAttributeType(&this.Region, region)
	setAuditLogEntryGetRequestAttributeType(&this.Request, request)
	setAuditLogEntryGetSeverityAttributeType(&this.Severity, severity)
	setAuditLogEntryGetSourceIpAddressAttributeType(&this.SourceIpAddress, sourceIpAddress)
	setAuditLogEntryGetUserAgentAttributeType(&this.UserAgent, userAgent)
	setAuditLogEntryGetVisibilityAttributeType(&this.Visibility, visibility)
	return &this
}

// NewAuditLogEntryWithDefaults instantiates a new AuditLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogEntryWithDefaults() *AuditLogEntry {
	this := AuditLogEntry{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *AuditLogEntry) GetContext() (res AuditLogEntryGetContextRetType) {
	res, _ = o.GetContextOk()
	return
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetContextOk() (ret AuditLogEntryGetContextRetType, ok bool) {
	return getAuditLogEntryGetContextAttributeTypeOk(o.Context)
}

// HasContext returns a boolean if a field has been set.
func (o *AuditLogEntry) HasContext() bool {
	_, ok := o.GetContextOk()
	return ok
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *AuditLogEntry) SetContext(v AuditLogEntryGetContextRetType) {
	setAuditLogEntryGetContextAttributeType(&o.Context, v)
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *AuditLogEntry) GetCorrelationId() (res AuditLogEntryGetCorrelationIdRetType) {
	res, _ = o.GetCorrelationIdOk()
	return
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetCorrelationIdOk() (ret AuditLogEntryGetCorrelationIdRetType, ok bool) {
	return getAuditLogEntryGetCorrelationIdAttributeTypeOk(o.CorrelationId)
}

// HasCorrelationId returns a boolean if a field has been set.
func (o *AuditLogEntry) HasCorrelationId() bool {
	_, ok := o.GetCorrelationIdOk()
	return ok
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *AuditLogEntry) SetCorrelationId(v AuditLogEntryGetCorrelationIdRetType) {
	setAuditLogEntryGetCorrelationIdAttributeType(&o.CorrelationId, v)
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *AuditLogEntry) GetDetails() (res AuditLogEntryGetDetailsRetType) {
	res, _ = o.GetDetailsOk()
	return
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetDetailsOk() (ret AuditLogEntryGetDetailsRetType, ok bool) {
	return getAuditLogEntryGetDetailsAttributeTypeOk(o.Details)
}

// HasDetails returns a boolean if a field has been set.
func (o *AuditLogEntry) HasDetails() bool {
	_, ok := o.GetDetailsOk()
	return ok
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *AuditLogEntry) SetDetails(v AuditLogEntryGetDetailsRetType) {
	setAuditLogEntryGetDetailsAttributeType(&o.Details, v)
}

// GetEventName returns the EventName field value
func (o *AuditLogEntry) GetEventName() (ret AuditLogEntryGetEventNameRetType) {
	ret, _ = o.GetEventNameOk()
	return ret
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetEventNameOk() (ret AuditLogEntryGetEventNameRetType, ok bool) {
	return getAuditLogEntryGetEventNameAttributeTypeOk(o.EventName)
}

// SetEventName sets field value
func (o *AuditLogEntry) SetEventName(v AuditLogEntryGetEventNameRetType) {
	setAuditLogEntryGetEventNameAttributeType(&o.EventName, v)
}

// GetEventSource returns the EventSource field value
func (o *AuditLogEntry) GetEventSource() (ret AuditLogEntryGetEventSourceRetType) {
	ret, _ = o.GetEventSourceOk()
	return ret
}

// GetEventSourceOk returns a tuple with the EventSource field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetEventSourceOk() (ret AuditLogEntryGetEventSourceRetType, ok bool) {
	return getAuditLogEntryGetEventSourceAttributeTypeOk(o.EventSource)
}

// SetEventSource sets field value
func (o *AuditLogEntry) SetEventSource(v AuditLogEntryGetEventSourceRetType) {
	setAuditLogEntryGetEventSourceAttributeType(&o.EventSource, v)
}

// GetEventTimeStamp returns the EventTimeStamp field value
func (o *AuditLogEntry) GetEventTimeStamp() (ret AuditLogEntryGetEventTimeStampRetType) {
	ret, _ = o.GetEventTimeStampOk()
	return ret
}

// GetEventTimeStampOk returns a tuple with the EventTimeStamp field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetEventTimeStampOk() (ret AuditLogEntryGetEventTimeStampRetType, ok bool) {
	return getAuditLogEntryGetEventTimeStampAttributeTypeOk(o.EventTimeStamp)
}

// SetEventTimeStamp sets field value
func (o *AuditLogEntry) SetEventTimeStamp(v AuditLogEntryGetEventTimeStampRetType) {
	setAuditLogEntryGetEventTimeStampAttributeType(&o.EventTimeStamp, v)
}

// GetEventType returns the EventType field value
func (o *AuditLogEntry) GetEventType() (ret AuditLogEntryGetEventTypeRetType) {
	ret, _ = o.GetEventTypeOk()
	return ret
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetEventTypeOk() (ret AuditLogEntryGetEventTypeRetType, ok bool) {
	return getAuditLogEntryGetEventTypeAttributeTypeOk(o.EventType)
}

// SetEventType sets field value
func (o *AuditLogEntry) SetEventType(v AuditLogEntryGetEventTypeRetType) {
	setAuditLogEntryGetEventTypeAttributeType(&o.EventType, v)
}

// GetEventVersion returns the EventVersion field value
func (o *AuditLogEntry) GetEventVersion() (ret AuditLogEntryGetEventVersionRetType) {
	ret, _ = o.GetEventVersionOk()
	return ret
}

// GetEventVersionOk returns a tuple with the EventVersion field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetEventVersionOk() (ret AuditLogEntryGetEventVersionRetType, ok bool) {
	return getAuditLogEntryGetEventVersionAttributeTypeOk(o.EventVersion)
}

// SetEventVersion sets field value
func (o *AuditLogEntry) SetEventVersion(v AuditLogEntryGetEventVersionRetType) {
	setAuditLogEntryGetEventVersionAttributeType(&o.EventVersion, v)
}

// GetId returns the Id field value
func (o *AuditLogEntry) GetId() (ret AuditLogEntryGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetIdOk() (ret AuditLogEntryGetIdRetType, ok bool) {
	return getAuditLogEntryGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *AuditLogEntry) SetId(v AuditLogEntryGetIdRetType) {
	setAuditLogEntryGetIdAttributeType(&o.Id, v)
}

// GetInitiator returns the Initiator field value
func (o *AuditLogEntry) GetInitiator() (ret AuditLogEntryGetInitiatorRetType) {
	ret, _ = o.GetInitiatorOk()
	return ret
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetInitiatorOk() (ret AuditLogEntryGetInitiatorRetType, ok bool) {
	return getAuditLogEntryGetInitiatorAttributeTypeOk(o.Initiator)
}

// SetInitiator sets field value
func (o *AuditLogEntry) SetInitiator(v AuditLogEntryGetInitiatorRetType) {
	setAuditLogEntryGetInitiatorAttributeType(&o.Initiator, v)
}

// GetReceivedTimeStamp returns the ReceivedTimeStamp field value
func (o *AuditLogEntry) GetReceivedTimeStamp() (ret AuditLogEntryGetReceivedTimeStampRetType) {
	ret, _ = o.GetReceivedTimeStampOk()
	return ret
}

// GetReceivedTimeStampOk returns a tuple with the ReceivedTimeStamp field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetReceivedTimeStampOk() (ret AuditLogEntryGetReceivedTimeStampRetType, ok bool) {
	return getAuditLogEntryGetReceivedTimeStampAttributeTypeOk(o.ReceivedTimeStamp)
}

// SetReceivedTimeStamp sets field value
func (o *AuditLogEntry) SetReceivedTimeStamp(v AuditLogEntryGetReceivedTimeStampRetType) {
	setAuditLogEntryGetReceivedTimeStampAttributeType(&o.ReceivedTimeStamp, v)
}

// GetRegion returns the Region field value
func (o *AuditLogEntry) GetRegion() (ret AuditLogEntryGetRegionRetType) {
	ret, _ = o.GetRegionOk()
	return ret
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetRegionOk() (ret AuditLogEntryGetRegionRetType, ok bool) {
	return getAuditLogEntryGetRegionAttributeTypeOk(o.Region)
}

// SetRegion sets field value
func (o *AuditLogEntry) SetRegion(v AuditLogEntryGetRegionRetType) {
	setAuditLogEntryGetRegionAttributeType(&o.Region, v)
}

// GetRequest returns the Request field value
func (o *AuditLogEntry) GetRequest() (ret AuditLogEntryGetRequestRetType) {
	ret, _ = o.GetRequestOk()
	return ret
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetRequestOk() (ret AuditLogEntryGetRequestRetType, ok bool) {
	return getAuditLogEntryGetRequestAttributeTypeOk(o.Request)
}

// SetRequest sets field value
func (o *AuditLogEntry) SetRequest(v AuditLogEntryGetRequestRetType) {
	setAuditLogEntryGetRequestAttributeType(&o.Request, v)
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *AuditLogEntry) GetResourceId() (res AuditLogEntryGetResourceIdRetType) {
	res, _ = o.GetResourceIdOk()
	return
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetResourceIdOk() (ret AuditLogEntryGetResourceIdRetType, ok bool) {
	return getAuditLogEntryGetResourceIdAttributeTypeOk(o.ResourceId)
}

// HasResourceId returns a boolean if a field has been set.
func (o *AuditLogEntry) HasResourceId() bool {
	_, ok := o.GetResourceIdOk()
	return ok
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *AuditLogEntry) SetResourceId(v AuditLogEntryGetResourceIdRetType) {
	setAuditLogEntryGetResourceIdAttributeType(&o.ResourceId, v)
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *AuditLogEntry) GetResourceName() (res AuditLogEntryGetResourceNameRetType) {
	res, _ = o.GetResourceNameOk()
	return
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetResourceNameOk() (ret AuditLogEntryGetResourceNameRetType, ok bool) {
	return getAuditLogEntryGetResourceNameAttributeTypeOk(o.ResourceName)
}

// HasResourceName returns a boolean if a field has been set.
func (o *AuditLogEntry) HasResourceName() bool {
	_, ok := o.GetResourceNameOk()
	return ok
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *AuditLogEntry) SetResourceName(v AuditLogEntryGetResourceNameRetType) {
	setAuditLogEntryGetResourceNameAttributeType(&o.ResourceName, v)
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *AuditLogEntry) GetResult() (res AuditLogEntryGetResultRetType) {
	res, _ = o.GetResultOk()
	return
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetResultOk() (ret AuditLogEntryGetResultRetType, ok bool) {
	return getAuditLogEntryGetResultAttributeTypeOk(o.Result)
}

// HasResult returns a boolean if a field has been set.
func (o *AuditLogEntry) HasResult() bool {
	_, ok := o.GetResultOk()
	return ok
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *AuditLogEntry) SetResult(v AuditLogEntryGetResultRetType) {
	setAuditLogEntryGetResultAttributeType(&o.Result, v)
}

// GetServiceAccountDelegationInfo returns the ServiceAccountDelegationInfo field value if set, zero value otherwise.
func (o *AuditLogEntry) GetServiceAccountDelegationInfo() (res AuditLogEntryGetServiceAccountDelegationInfoRetType) {
	res, _ = o.GetServiceAccountDelegationInfoOk()
	return
}

// GetServiceAccountDelegationInfoOk returns a tuple with the ServiceAccountDelegationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetServiceAccountDelegationInfoOk() (ret AuditLogEntryGetServiceAccountDelegationInfoRetType, ok bool) {
	return getAuditLogEntryGetServiceAccountDelegationInfoAttributeTypeOk(o.ServiceAccountDelegationInfo)
}

// HasServiceAccountDelegationInfo returns a boolean if a field has been set.
func (o *AuditLogEntry) HasServiceAccountDelegationInfo() bool {
	_, ok := o.GetServiceAccountDelegationInfoOk()
	return ok
}

// SetServiceAccountDelegationInfo gets a reference to the given ServiceAccountDelegationInfo and assigns it to the ServiceAccountDelegationInfo field.
func (o *AuditLogEntry) SetServiceAccountDelegationInfo(v AuditLogEntryGetServiceAccountDelegationInfoRetType) {
	setAuditLogEntryGetServiceAccountDelegationInfoAttributeType(&o.ServiceAccountDelegationInfo, v)
}

// GetSeverity returns the Severity field value
func (o *AuditLogEntry) GetSeverity() (ret AuditLogEntryGetSeverityRetType) {
	ret, _ = o.GetSeverityOk()
	return ret
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetSeverityOk() (ret AuditLogEntryGetSeverityRetType, ok bool) {
	return getAuditLogEntryGetSeverityAttributeTypeOk(o.Severity)
}

// SetSeverity sets field value
func (o *AuditLogEntry) SetSeverity(v AuditLogEntryGetSeverityRetType) {
	setAuditLogEntryGetSeverityAttributeType(&o.Severity, v)
}

// GetSourceIpAddress returns the SourceIpAddress field value
func (o *AuditLogEntry) GetSourceIpAddress() (ret AuditLogEntryGetSourceIpAddressRetType) {
	ret, _ = o.GetSourceIpAddressOk()
	return ret
}

// GetSourceIpAddressOk returns a tuple with the SourceIpAddress field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetSourceIpAddressOk() (ret AuditLogEntryGetSourceIpAddressRetType, ok bool) {
	return getAuditLogEntryGetSourceIpAddressAttributeTypeOk(o.SourceIpAddress)
}

// SetSourceIpAddress sets field value
func (o *AuditLogEntry) SetSourceIpAddress(v AuditLogEntryGetSourceIpAddressRetType) {
	setAuditLogEntryGetSourceIpAddressAttributeType(&o.SourceIpAddress, v)
}

// GetUserAgent returns the UserAgent field value
func (o *AuditLogEntry) GetUserAgent() (ret AuditLogEntryGetUserAgentRetType) {
	ret, _ = o.GetUserAgentOk()
	return ret
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetUserAgentOk() (ret AuditLogEntryGetUserAgentRetType, ok bool) {
	return getAuditLogEntryGetUserAgentAttributeTypeOk(o.UserAgent)
}

// SetUserAgent sets field value
func (o *AuditLogEntry) SetUserAgent(v AuditLogEntryGetUserAgentRetType) {
	setAuditLogEntryGetUserAgentAttributeType(&o.UserAgent, v)
}

// GetVisibility returns the Visibility field value
func (o *AuditLogEntry) GetVisibility() (ret AuditLogEntryGetVisibilityRetType) {
	ret, _ = o.GetVisibilityOk()
	return ret
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *AuditLogEntry) GetVisibilityOk() (ret AuditLogEntryGetVisibilityRetType, ok bool) {
	return getAuditLogEntryGetVisibilityAttributeTypeOk(o.Visibility)
}

// SetVisibility sets field value
func (o *AuditLogEntry) SetVisibility(v AuditLogEntryGetVisibilityRetType) {
	setAuditLogEntryGetVisibilityAttributeType(&o.Visibility, v)
}

func (o AuditLogEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAuditLogEntryGetContextAttributeTypeOk(o.Context); ok {
		toSerialize["Context"] = val
	}
	if val, ok := getAuditLogEntryGetCorrelationIdAttributeTypeOk(o.CorrelationId); ok {
		toSerialize["CorrelationId"] = val
	}
	if val, ok := getAuditLogEntryGetDetailsAttributeTypeOk(o.Details); ok {
		toSerialize["Details"] = val
	}
	if val, ok := getAuditLogEntryGetEventNameAttributeTypeOk(o.EventName); ok {
		toSerialize["EventName"] = val
	}
	if val, ok := getAuditLogEntryGetEventSourceAttributeTypeOk(o.EventSource); ok {
		toSerialize["EventSource"] = val
	}
	if val, ok := getAuditLogEntryGetEventTimeStampAttributeTypeOk(o.EventTimeStamp); ok {
		toSerialize["EventTimeStamp"] = val
	}
	if val, ok := getAuditLogEntryGetEventTypeAttributeTypeOk(o.EventType); ok {
		toSerialize["EventType"] = val
	}
	if val, ok := getAuditLogEntryGetEventVersionAttributeTypeOk(o.EventVersion); ok {
		toSerialize["EventVersion"] = val
	}
	if val, ok := getAuditLogEntryGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getAuditLogEntryGetInitiatorAttributeTypeOk(o.Initiator); ok {
		toSerialize["Initiator"] = val
	}
	if val, ok := getAuditLogEntryGetReceivedTimeStampAttributeTypeOk(o.ReceivedTimeStamp); ok {
		toSerialize["ReceivedTimeStamp"] = val
	}
	if val, ok := getAuditLogEntryGetRegionAttributeTypeOk(o.Region); ok {
		toSerialize["Region"] = val
	}
	if val, ok := getAuditLogEntryGetRequestAttributeTypeOk(o.Request); ok {
		toSerialize["Request"] = val
	}
	if val, ok := getAuditLogEntryGetResourceIdAttributeTypeOk(o.ResourceId); ok {
		toSerialize["ResourceId"] = val
	}
	if val, ok := getAuditLogEntryGetResourceNameAttributeTypeOk(o.ResourceName); ok {
		toSerialize["ResourceName"] = val
	}
	if val, ok := getAuditLogEntryGetResultAttributeTypeOk(o.Result); ok {
		toSerialize["Result"] = val
	}
	if val, ok := getAuditLogEntryGetServiceAccountDelegationInfoAttributeTypeOk(o.ServiceAccountDelegationInfo); ok {
		toSerialize["ServiceAccountDelegationInfo"] = val
	}
	if val, ok := getAuditLogEntryGetSeverityAttributeTypeOk(o.Severity); ok {
		toSerialize["Severity"] = val
	}
	if val, ok := getAuditLogEntryGetSourceIpAddressAttributeTypeOk(o.SourceIpAddress); ok {
		toSerialize["SourceIpAddress"] = val
	}
	if val, ok := getAuditLogEntryGetUserAgentAttributeTypeOk(o.UserAgent); ok {
		toSerialize["UserAgent"] = val
	}
	if val, ok := getAuditLogEntryGetVisibilityAttributeTypeOk(o.Visibility); ok {
		toSerialize["Visibility"] = val
	}
	return toSerialize, nil
}

type NullableAuditLogEntry struct {
	value *AuditLogEntry
	isSet bool
}

func (v NullableAuditLogEntry) Get() *AuditLogEntry {
	return v.value
}

func (v *NullableAuditLogEntry) Set(val *AuditLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEntry(val *AuditLogEntry) *NullableAuditLogEntry {
	return &NullableAuditLogEntry{value: val, isSet: true}
}

func (v NullableAuditLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
