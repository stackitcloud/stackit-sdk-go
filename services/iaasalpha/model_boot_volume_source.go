/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
	"fmt"
)

// BootVolumeSource - struct for BootVolumeSource
type BootVolumeSource struct {
	VolumeSourceImage  *VolumeSourceImage
	VolumeSourceVolume *VolumeSourceVolume
}

// VolumeSourceImageAsBootVolumeSource is a convenience function that returns VolumeSourceImage wrapped in BootVolumeSource
func VolumeSourceImageAsBootVolumeSource(v *VolumeSourceImage) BootVolumeSource {
	return BootVolumeSource{
		VolumeSourceImage: v,
	}
}

// VolumeSourceVolumeAsBootVolumeSource is a convenience function that returns VolumeSourceVolume wrapped in BootVolumeSource
func VolumeSourceVolumeAsBootVolumeSource(v *VolumeSourceVolume) BootVolumeSource {
	return BootVolumeSource{
		VolumeSourceVolume: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BootVolumeSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VolumeSourceImage
	err = newStrictDecoder(data).Decode(&dst.VolumeSourceImage)
	if err == nil {
		jsonVolumeSourceImage, _ := json.Marshal(dst.VolumeSourceImage)
		if string(jsonVolumeSourceImage) == "{}" { // empty struct
			dst.VolumeSourceImage = nil
		} else {
			match++
		}
	} else {
		dst.VolumeSourceImage = nil
	}

	// try to unmarshal data into VolumeSourceVolume
	err = newStrictDecoder(data).Decode(&dst.VolumeSourceVolume)
	if err == nil {
		jsonVolumeSourceVolume, _ := json.Marshal(dst.VolumeSourceVolume)
		if string(jsonVolumeSourceVolume) == "{}" { // empty struct
			dst.VolumeSourceVolume = nil
		} else {
			match++
		}
	} else {
		dst.VolumeSourceVolume = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VolumeSourceImage = nil
		dst.VolumeSourceVolume = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BootVolumeSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BootVolumeSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BootVolumeSource) MarshalJSON() ([]byte, error) {
	if src.VolumeSourceImage != nil {
		return json.Marshal(&src.VolumeSourceImage)
	}

	if src.VolumeSourceVolume != nil {
		return json.Marshal(&src.VolumeSourceVolume)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BootVolumeSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.VolumeSourceImage != nil {
		return obj.VolumeSourceImage
	}

	if obj.VolumeSourceVolume != nil {
		return obj.VolumeSourceVolume
	}

	// all schemas are nil
	return nil
}

type NullableBootVolumeSource struct {
	value *BootVolumeSource
	isSet bool
}

func (v NullableBootVolumeSource) Get() *BootVolumeSource {
	return v.value
}

func (v *NullableBootVolumeSource) Set(val *BootVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableBootVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableBootVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBootVolumeSource(val *BootVolumeSource) *NullableBootVolumeSource {
	return &NullableBootVolumeSource{value: val, isSet: true}
}

func (v NullableBootVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBootVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
