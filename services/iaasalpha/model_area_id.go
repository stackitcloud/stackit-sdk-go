/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
	"fmt"
)

// AreaId - The identifier (ID) of an area.
type AreaId struct {
	StaticAreaID *StaticAreaID
	String       *string
}

// StaticAreaIDAsAreaId is a convenience function that returns StaticAreaID wrapped in AreaId
func StaticAreaIDAsAreaId(v *StaticAreaID) AreaId {
	return AreaId{
		StaticAreaID: v,
	}
}

// stringAsAreaId is a convenience function that returns string wrapped in AreaId
func StringAsAreaId(v *string) AreaId {
	return AreaId{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AreaId) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StaticAreaID
	err = newStrictDecoder(data).Decode(&dst.StaticAreaID)
	if err == nil {
		jsonStaticAreaID, _ := json.Marshal(dst.StaticAreaID)
		if string(jsonStaticAreaID) == "{}" { // empty struct
			dst.StaticAreaID = nil
		} else {
			match++
		}
	} else {
		dst.StaticAreaID = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StaticAreaID = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AreaId)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AreaId)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AreaId) MarshalJSON() ([]byte, error) {
	if src.StaticAreaID != nil {
		return json.Marshal(&src.StaticAreaID)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AreaId) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.StaticAreaID != nil {
		return obj.StaticAreaID
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableAreaId struct {
	value *AreaId
	isSet bool
}

func (v NullableAreaId) Get() *AreaId {
	return v.value
}

func (v *NullableAreaId) Set(val *AreaId) {
	v.value = val
	v.isSet = true
}

func (v NullableAreaId) IsSet() bool {
	return v.isSet
}

func (v *NullableAreaId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAreaId(val *AreaId) *NullableAreaId {
	return &NullableAreaId{value: val, isSet: true}
}

func (v NullableAreaId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAreaId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
