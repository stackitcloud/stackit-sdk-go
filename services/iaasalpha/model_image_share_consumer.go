/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
	"time"
)

// checks if the ImageShareConsumer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageShareConsumer{}

// ImageShareConsumer The details of an Image share consumer.
type ImageShareConsumer struct {
	// Universally Unique Identifier (UUID).
	ConsumerProjectId *string `json:"consumerProjectId,omitempty"`
	// Date-time when resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Universally Unique Identifier (UUID).
	ImageId *string `json:"imageId,omitempty"`
	// Date-time when resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewImageShareConsumer instantiates a new ImageShareConsumer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageShareConsumer() *ImageShareConsumer {
	this := ImageShareConsumer{}
	return &this
}

// NewImageShareConsumerWithDefaults instantiates a new ImageShareConsumer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageShareConsumerWithDefaults() *ImageShareConsumer {
	this := ImageShareConsumer{}
	return &this
}

// GetConsumerProjectId returns the ConsumerProjectId field value if set, zero value otherwise.
func (o *ImageShareConsumer) GetConsumerProjectId() *string {
	if o == nil || IsNil(o.ConsumerProjectId) {
		var ret *string
		return ret
	}
	return o.ConsumerProjectId
}

// GetConsumerProjectIdOk returns a tuple with the ConsumerProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageShareConsumer) GetConsumerProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConsumerProjectId) {
		return nil, false
	}
	return o.ConsumerProjectId, true
}

// HasConsumerProjectId returns a boolean if a field has been set.
func (o *ImageShareConsumer) HasConsumerProjectId() bool {
	if o != nil && !IsNil(o.ConsumerProjectId) {
		return true
	}

	return false
}

// SetConsumerProjectId gets a reference to the given string and assigns it to the ConsumerProjectId field.
func (o *ImageShareConsumer) SetConsumerProjectId(v *string) {
	o.ConsumerProjectId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ImageShareConsumer) GetCreatedAt() *time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret *time.Time
		return ret
	}
	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageShareConsumer) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ImageShareConsumer) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ImageShareConsumer) SetCreatedAt(v *time.Time) {
	o.CreatedAt = v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ImageShareConsumer) GetImageId() *string {
	if o == nil || IsNil(o.ImageId) {
		var ret *string
		return ret
	}
	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageShareConsumer) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ImageShareConsumer) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *ImageShareConsumer) SetImageId(v *string) {
	o.ImageId = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ImageShareConsumer) GetUpdatedAt() *time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret *time.Time
		return ret
	}
	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageShareConsumer) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ImageShareConsumer) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ImageShareConsumer) SetUpdatedAt(v *time.Time) {
	o.UpdatedAt = v
}

func (o ImageShareConsumer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumerProjectId) {
		toSerialize["consumerProjectId"] = o.ConsumerProjectId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableImageShareConsumer struct {
	value *ImageShareConsumer
	isSet bool
}

func (v NullableImageShareConsumer) Get() *ImageShareConsumer {
	return v.value
}

func (v *NullableImageShareConsumer) Set(val *ImageShareConsumer) {
	v.value = val
	v.isSet = true
}

func (v NullableImageShareConsumer) IsSet() bool {
	return v.isSet
}

func (v *NullableImageShareConsumer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageShareConsumer(val *ImageShareConsumer) *NullableImageShareConsumer {
	return &NullableImageShareConsumer{value: val, isSet: true}
}

func (v NullableImageShareConsumer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageShareConsumer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
