/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 2alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
	"fmt"
)

// RouteNexthop - struct for RouteNexthop
type RouteNexthop struct {
	NexthopBlackhole *NexthopBlackhole
	NexthopIPv4      *NexthopIPv4
	NexthopIPv6      *NexthopIPv6
	NexthopInternet  *NexthopInternet
}

// NexthopBlackholeAsRouteNexthop is a convenience function that returns NexthopBlackhole wrapped in RouteNexthop
func NexthopBlackholeAsRouteNexthop(v *NexthopBlackhole) RouteNexthop {
	return RouteNexthop{
		NexthopBlackhole: v,
	}
}

// NexthopIPv4AsRouteNexthop is a convenience function that returns NexthopIPv4 wrapped in RouteNexthop
func NexthopIPv4AsRouteNexthop(v *NexthopIPv4) RouteNexthop {
	return RouteNexthop{
		NexthopIPv4: v,
	}
}

// NexthopIPv6AsRouteNexthop is a convenience function that returns NexthopIPv6 wrapped in RouteNexthop
func NexthopIPv6AsRouteNexthop(v *NexthopIPv6) RouteNexthop {
	return RouteNexthop{
		NexthopIPv6: v,
	}
}

// NexthopInternetAsRouteNexthop is a convenience function that returns NexthopInternet wrapped in RouteNexthop
func NexthopInternetAsRouteNexthop(v *NexthopInternet) RouteNexthop {
	return RouteNexthop{
		NexthopInternet: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RouteNexthop) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NexthopBlackhole
	err = newStrictDecoder(data).Decode(&dst.NexthopBlackhole)
	if err == nil {
		jsonNexthopBlackhole, _ := json.Marshal(dst.NexthopBlackhole)
		if string(jsonNexthopBlackhole) == "{}" { // empty struct
			dst.NexthopBlackhole = nil
		} else {
			match++
		}
	} else {
		dst.NexthopBlackhole = nil
	}

	// try to unmarshal data into NexthopIPv4
	err = newStrictDecoder(data).Decode(&dst.NexthopIPv4)
	if err == nil {
		jsonNexthopIPv4, _ := json.Marshal(dst.NexthopIPv4)
		if string(jsonNexthopIPv4) == "{}" { // empty struct
			dst.NexthopIPv4 = nil
		} else {
			match++
		}
	} else {
		dst.NexthopIPv4 = nil
	}

	// try to unmarshal data into NexthopIPv6
	err = newStrictDecoder(data).Decode(&dst.NexthopIPv6)
	if err == nil {
		jsonNexthopIPv6, _ := json.Marshal(dst.NexthopIPv6)
		if string(jsonNexthopIPv6) == "{}" { // empty struct
			dst.NexthopIPv6 = nil
		} else {
			match++
		}
	} else {
		dst.NexthopIPv6 = nil
	}

	// try to unmarshal data into NexthopInternet
	err = newStrictDecoder(data).Decode(&dst.NexthopInternet)
	if err == nil {
		jsonNexthopInternet, _ := json.Marshal(dst.NexthopInternet)
		if string(jsonNexthopInternet) == "{}" { // empty struct
			dst.NexthopInternet = nil
		} else {
			match++
		}
	} else {
		dst.NexthopInternet = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NexthopBlackhole = nil
		dst.NexthopIPv4 = nil
		dst.NexthopIPv6 = nil
		dst.NexthopInternet = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RouteNexthop)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RouteNexthop)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RouteNexthop) MarshalJSON() ([]byte, error) {
	if src.NexthopBlackhole != nil {
		return json.Marshal(&src.NexthopBlackhole)
	}

	if src.NexthopIPv4 != nil {
		return json.Marshal(&src.NexthopIPv4)
	}

	if src.NexthopIPv6 != nil {
		return json.Marshal(&src.NexthopIPv6)
	}

	if src.NexthopInternet != nil {
		return json.Marshal(&src.NexthopInternet)
	}

	return []byte("{}"), nil // no data in oneOf schemas => empty JSON object
}

// Get the actual instance
func (obj *RouteNexthop) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NexthopBlackhole != nil {
		return obj.NexthopBlackhole
	}

	if obj.NexthopIPv4 != nil {
		return obj.NexthopIPv4
	}

	if obj.NexthopIPv6 != nil {
		return obj.NexthopIPv6
	}

	if obj.NexthopInternet != nil {
		return obj.NexthopInternet
	}

	// all schemas are nil
	return nil
}

type NullableRouteNexthop struct {
	value *RouteNexthop
	isSet bool
}

func (v NullableRouteNexthop) Get() *RouteNexthop {
	return v.value
}

func (v *NullableRouteNexthop) Set(val *RouteNexthop) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteNexthop) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteNexthop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteNexthop(val *RouteNexthop) *NullableRouteNexthop {
	return &NullableRouteNexthop{value: val, isSet: true}
}

func (v NullableRouteNexthop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteNexthop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
