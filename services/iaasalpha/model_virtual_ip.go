/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
)

// checks if the VirtualIp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualIp{}

// VirtualIp Object that represents a virtual IP.
type VirtualIp struct {
	// Universally Unique Identifier (UUID).
	Id *string `json:"id,omitempty"`
	// Object that represents an IP address.
	Ip *string `json:"ip,omitempty"`
	// Object that represents the labels of an object. Regex for keys: `^[a-z]((-|_|[a-z0-9])){0,62}$`. Regex for values: `^(-|_|[a-z0-9]){0,63}$`.
	Labels *map[string]interface{} `json:"labels,omitempty"`
	// A list of UUIDs.
	Members *[]string `json:"members,omitempty"`
	// The name for a General Object. Matches Names and also UUIDs.
	Name *string `json:"name,omitempty"`
	// Universally Unique Identifier (UUID).
	Network *string `json:"network,omitempty"`
	// The state of a resource object. Possible values: `CREATING`, `CREATED`, `DELETING`, `DELETED`, `FAILED`, `UPDATED`, `UPDATING`.
	Status *string `json:"status,omitempty"`
}

// NewVirtualIp instantiates a new VirtualIp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualIp() *VirtualIp {
	this := VirtualIp{}
	return &this
}

// NewVirtualIpWithDefaults instantiates a new VirtualIp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualIpWithDefaults() *VirtualIp {
	this := VirtualIp{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualIp) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualIp) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualIp) SetId(v *string) {
	o.Id = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *VirtualIp) GetIp() *string {
	if o == nil || IsNil(o.Ip) {
		var ret *string
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *VirtualIp) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *VirtualIp) SetIp(v *string) {
	o.Ip = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *VirtualIp) GetLabels() *map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *VirtualIp) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *VirtualIp) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *VirtualIp) GetMembers() *[]string {
	if o == nil || IsNil(o.Members) {
		var ret *[]string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetMembersOk() (*[]string, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *VirtualIp) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *VirtualIp) SetMembers(v *[]string) {
	o.Members = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualIp) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualIp) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualIp) SetName(v *string) {
	o.Name = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *VirtualIp) GetNetwork() *string {
	if o == nil || IsNil(o.Network) {
		var ret *string
		return ret
	}
	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *VirtualIp) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *VirtualIp) SetNetwork(v *string) {
	o.Network = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualIp) GetStatus() *string {
	if o == nil || IsNil(o.Status) {
		var ret *string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualIp) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualIp) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VirtualIp) SetStatus(v *string) {
	o.Status = v
}

func (o VirtualIp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableVirtualIp struct {
	value *VirtualIp
	isSet bool
}

func (v NullableVirtualIp) Get() *VirtualIp {
	return v.value
}

func (v *NullableVirtualIp) Set(val *VirtualIp) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualIp) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualIp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualIp(val *VirtualIp) *NullableVirtualIp {
	return &NullableVirtualIp{value: val, isSet: true}
}

func (v NullableVirtualIp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualIp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
