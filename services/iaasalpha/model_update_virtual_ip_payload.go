/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
)

// checks if the UpdateVirtualIPPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVirtualIPPayload{}

// UpdateVirtualIPPayload Object that represents a virtual IP update request body.
type UpdateVirtualIPPayload struct {
	// Object that represents the labels of an object.
	Labels *map[string]interface{} `json:"labels,omitempty"`
	// A list of UUIDs.
	Members *[]string `json:"members,omitempty"`
	// The name for a General Object. Matches Names and also UUIDs.
	Name *string `json:"name,omitempty"`
}

// NewUpdateVirtualIPPayload instantiates a new UpdateVirtualIPPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVirtualIPPayload() *UpdateVirtualIPPayload {
	this := UpdateVirtualIPPayload{}
	return &this
}

// NewUpdateVirtualIPPayloadWithDefaults instantiates a new UpdateVirtualIPPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVirtualIPPayloadWithDefaults() *UpdateVirtualIPPayload {
	this := UpdateVirtualIPPayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateVirtualIPPayload) GetLabels() *map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualIPPayload) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateVirtualIPPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *UpdateVirtualIPPayload) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetMembers returns the Members field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateVirtualIPPayload) GetMembers() *[]string {
	if o == nil || IsNil(o.Members) {
		var ret *[]string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateVirtualIPPayload) GetMembersOk() (*[]string, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *UpdateVirtualIPPayload) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *UpdateVirtualIPPayload) SetMembers(v *[]string) {
	o.Members = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateVirtualIPPayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualIPPayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateVirtualIPPayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateVirtualIPPayload) SetName(v *string) {
	o.Name = v
}

func (o UpdateVirtualIPPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableUpdateVirtualIPPayload struct {
	value *UpdateVirtualIPPayload
	isSet bool
}

func (v NullableUpdateVirtualIPPayload) Get() *UpdateVirtualIPPayload {
	return v.value
}

func (v *NullableUpdateVirtualIPPayload) Set(val *UpdateVirtualIPPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVirtualIPPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVirtualIPPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVirtualIPPayload(val *UpdateVirtualIPPayload) *NullableUpdateVirtualIPPayload {
	return &NullableUpdateVirtualIPPayload{value: val, isSet: true}
}

func (v NullableUpdateVirtualIPPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVirtualIPPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
