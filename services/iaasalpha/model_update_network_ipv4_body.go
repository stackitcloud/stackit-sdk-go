/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"encoding/json"
)

// checks if the UpdateNetworkIPv4Body type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkIPv4Body{}

// UpdateNetworkIPv4Body The config object for a IPv4 network update.
type UpdateNetworkIPv4Body struct {
	// The gateway of a network. If not specified the first IP of the network will be assigned as the gateway. If 'null' is sent, then the network doesn't have a gateway.
	Gateway *NullableString `json:"gateway,omitempty"`
	// A list containing DNS Servers/Nameservers for IPv4.
	Nameservers *[]string `json:"nameservers,omitempty"`
}

// NewUpdateNetworkIPv4Body instantiates a new UpdateNetworkIPv4Body object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkIPv4Body() *UpdateNetworkIPv4Body {
	this := UpdateNetworkIPv4Body{}
	return &this
}

// NewUpdateNetworkIPv4BodyWithDefaults instantiates a new UpdateNetworkIPv4Body object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkIPv4BodyWithDefaults() *UpdateNetworkIPv4Body {
	this := UpdateNetworkIPv4Body{}
	return &this
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateNetworkIPv4Body) GetGateway() *string {
	if o == nil || IsNil(o.Gateway) || IsNil(o.Gateway.Get()) {
		var ret *string
		return ret
	}
	return o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateNetworkIPv4Body) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *UpdateNetworkIPv4Body) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *UpdateNetworkIPv4Body) SetGateway(v *string) {
	if IsNil(o.Gateway) {
		o.Gateway = new(NullableString)
	}
	o.Gateway.Set(v)
}

// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *UpdateNetworkIPv4Body) SetGatewayNil() {
	if IsNil(o.Gateway) {
		o.Gateway = new(NullableString)
	}
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *UpdateNetworkIPv4Body) UnsetGateway() {
	if IsNil(o.Gateway) {
		o.Gateway = new(NullableString)
	}
	o.Gateway.Unset()
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *UpdateNetworkIPv4Body) GetNameservers() *[]string {
	if o == nil || IsNil(o.Nameservers) {
		var ret *[]string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkIPv4Body) GetNameserversOk() (*[]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *UpdateNetworkIPv4Body) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *UpdateNetworkIPv4Body) SetNameservers(v *[]string) {
	o.Nameservers = v
}

func (o UpdateNetworkIPv4Body) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	return toSerialize, nil
}

type NullableUpdateNetworkIPv4Body struct {
	value *UpdateNetworkIPv4Body
	isSet bool
}

func (v NullableUpdateNetworkIPv4Body) Get() *UpdateNetworkIPv4Body {
	return v.value
}

func (v *NullableUpdateNetworkIPv4Body) Set(val *UpdateNetworkIPv4Body) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkIPv4Body) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkIPv4Body) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkIPv4Body(val *UpdateNetworkIPv4Body) *NullableUpdateNetworkIPv4Body {
	return &NullableUpdateNetworkIPv4Body{value: val, isSet: true}
}

func (v NullableUpdateNetworkIPv4Body) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkIPv4Body) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
