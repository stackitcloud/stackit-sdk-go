/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddMemberToVirtualIPPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddMemberToVirtualIPPayload{}

/*
	types and functions for member
*/

// isNotNullableString
type AddMemberToVirtualIPPayloadGetMemberAttributeType = *string

func getAddMemberToVirtualIPPayloadGetMemberAttributeTypeOk(arg AddMemberToVirtualIPPayloadGetMemberAttributeType) (ret AddMemberToVirtualIPPayloadGetMemberRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAddMemberToVirtualIPPayloadGetMemberAttributeType(arg *AddMemberToVirtualIPPayloadGetMemberAttributeType, val AddMemberToVirtualIPPayloadGetMemberRetType) {
	*arg = &val
}

type AddMemberToVirtualIPPayloadGetMemberArgType = string
type AddMemberToVirtualIPPayloadGetMemberRetType = string

// AddMemberToVirtualIPPayload Object that represents a virtual IP member.
type AddMemberToVirtualIPPayload struct {
	// Universally Unique Identifier (UUID).
	// REQUIRED
	Member AddMemberToVirtualIPPayloadGetMemberAttributeType `json:"member" validate:"regexp=^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"`
}

type _AddMemberToVirtualIPPayload AddMemberToVirtualIPPayload

// NewAddMemberToVirtualIPPayload instantiates a new AddMemberToVirtualIPPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddMemberToVirtualIPPayload(member AddMemberToVirtualIPPayloadGetMemberArgType) *AddMemberToVirtualIPPayload {
	this := AddMemberToVirtualIPPayload{}
	setAddMemberToVirtualIPPayloadGetMemberAttributeType(&this.Member, member)
	return &this
}

// NewAddMemberToVirtualIPPayloadWithDefaults instantiates a new AddMemberToVirtualIPPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddMemberToVirtualIPPayloadWithDefaults() *AddMemberToVirtualIPPayload {
	this := AddMemberToVirtualIPPayload{}
	return &this
}

// GetMember returns the Member field value
func (o *AddMemberToVirtualIPPayload) GetMember() (ret AddMemberToVirtualIPPayloadGetMemberRetType) {
	ret, _ = o.GetMemberOk()
	return ret
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *AddMemberToVirtualIPPayload) GetMemberOk() (ret AddMemberToVirtualIPPayloadGetMemberRetType, ok bool) {
	return getAddMemberToVirtualIPPayloadGetMemberAttributeTypeOk(o.Member)
}

// SetMember sets field value
func (o *AddMemberToVirtualIPPayload) SetMember(v AddMemberToVirtualIPPayloadGetMemberRetType) {
	setAddMemberToVirtualIPPayloadGetMemberAttributeType(&o.Member, v)
}

func (o AddMemberToVirtualIPPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddMemberToVirtualIPPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAddMemberToVirtualIPPayloadGetMemberAttributeTypeOk(o.Member); ok {
		toSerialize["Member"] = val
	}
	return toSerialize, nil
}

func (o *AddMemberToVirtualIPPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddMemberToVirtualIPPayload := _AddMemberToVirtualIPPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddMemberToVirtualIPPayload)

	if err != nil {
		return err
	}

	*o = AddMemberToVirtualIPPayload(varAddMemberToVirtualIPPayload)

	return err
}

type NullableAddMemberToVirtualIPPayload struct {
	value *AddMemberToVirtualIPPayload
	isSet bool
}

func (v NullableAddMemberToVirtualIPPayload) Get() *AddMemberToVirtualIPPayload {
	return v.value
}

func (v *NullableAddMemberToVirtualIPPayload) Set(val *AddMemberToVirtualIPPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAddMemberToVirtualIPPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAddMemberToVirtualIPPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddMemberToVirtualIPPayload(val *AddMemberToVirtualIPPayload) *NullableAddMemberToVirtualIPPayload {
	return &NullableAddMemberToVirtualIPPayload{value: val, isSet: true}
}

func (v NullableAddMemberToVirtualIPPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddMemberToVirtualIPPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
