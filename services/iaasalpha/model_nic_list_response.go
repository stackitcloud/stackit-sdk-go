/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaasalpha

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NICListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NICListResponse{}

/*
	types and functions for items
*/

// isArray
type NICListResponseGetItemsAttributeType = *[]NIC
type NICListResponseGetItemsArgType = []NIC
type NICListResponseGetItemsRetType = []NIC

func getNICListResponseGetItemsAttributeTypeOk(arg NICListResponseGetItemsAttributeType) (ret NICListResponseGetItemsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNICListResponseGetItemsAttributeType(arg *NICListResponseGetItemsAttributeType, val NICListResponseGetItemsRetType) {
	*arg = &val
}

// NICListResponse NIC list response.
type NICListResponse struct {
	// A list of network interfaces.
	// REQUIRED
	Items NICListResponseGetItemsAttributeType `json:"items"`
}

type _NICListResponse NICListResponse

// NewNICListResponse instantiates a new NICListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNICListResponse(items NICListResponseGetItemsArgType) *NICListResponse {
	this := NICListResponse{}
	setNICListResponseGetItemsAttributeType(&this.Items, items)
	return &this
}

// NewNICListResponseWithDefaults instantiates a new NICListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNICListResponseWithDefaults() *NICListResponse {
	this := NICListResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *NICListResponse) GetItems() (ret NICListResponseGetItemsRetType) {
	ret, _ = o.GetItemsOk()
	return ret
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *NICListResponse) GetItemsOk() (ret NICListResponseGetItemsRetType, ok bool) {
	return getNICListResponseGetItemsAttributeTypeOk(o.Items)
}

// SetItems sets field value
func (o *NICListResponse) SetItems(v NICListResponseGetItemsRetType) {
	setNICListResponseGetItemsAttributeType(&o.Items, v)
}

func (o NICListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NICListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getNICListResponseGetItemsAttributeTypeOk(o.Items); ok {
		toSerialize["Items"] = val
	}
	return toSerialize, nil
}

func (o *NICListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNICListResponse := _NICListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNICListResponse)

	if err != nil {
		return err
	}

	*o = NICListResponse(varNICListResponse)

	return err
}

type NullableNICListResponse struct {
	value *NICListResponse
	isSet bool
}

func (v NullableNICListResponse) Get() *NICListResponse {
	return v.value
}

func (v *NullableNICListResponse) Set(val *NICListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNICListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNICListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNICListResponse(val *NICListResponse) *NullableNICListResponse {
	return &NullableNICListResponse{value: val, isSet: true}
}

func (v NullableNICListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNICListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
