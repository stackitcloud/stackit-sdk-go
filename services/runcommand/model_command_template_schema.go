/*
STACKIT Run Commands Service API

API endpoints for the STACKIT Run Commands Service API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package runcommand

import (
	"encoding/json"
)

// checks if the CommandTemplateSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandTemplateSchema{}

// CommandTemplateSchema struct for CommandTemplateSchema
type CommandTemplateSchema struct {
	Description     *string           `json:"description,omitempty"`
	Name            *string           `json:"name,omitempty"`
	OsType          *[]string         `json:"osType,omitempty"`
	ParameterSchema *ParametersSchema `json:"parameterSchema,omitempty"`
	Title           *string           `json:"title,omitempty"`
}

// NewCommandTemplateSchema instantiates a new CommandTemplateSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandTemplateSchema() *CommandTemplateSchema {
	this := CommandTemplateSchema{}
	return &this
}

// NewCommandTemplateSchemaWithDefaults instantiates a new CommandTemplateSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandTemplateSchemaWithDefaults() *CommandTemplateSchema {
	this := CommandTemplateSchema{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CommandTemplateSchema) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandTemplateSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CommandTemplateSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CommandTemplateSchema) SetDescription(v *string) {
	o.Description = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CommandTemplateSchema) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandTemplateSchema) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CommandTemplateSchema) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CommandTemplateSchema) SetName(v *string) {
	o.Name = v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *CommandTemplateSchema) GetOsType() *[]string {
	if o == nil || IsNil(o.OsType) {
		var ret *[]string
		return ret
	}
	return o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandTemplateSchema) GetOsTypeOk() (*[]string, bool) {
	if o == nil || IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *CommandTemplateSchema) HasOsType() bool {
	if o != nil && !IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given []string and assigns it to the OsType field.
func (o *CommandTemplateSchema) SetOsType(v *[]string) {
	o.OsType = v
}

// GetParameterSchema returns the ParameterSchema field value if set, zero value otherwise.
func (o *CommandTemplateSchema) GetParameterSchema() *ParametersSchema {
	if o == nil || IsNil(o.ParameterSchema) {
		var ret *ParametersSchema
		return ret
	}
	return o.ParameterSchema
}

// GetParameterSchemaOk returns a tuple with the ParameterSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandTemplateSchema) GetParameterSchemaOk() (*ParametersSchema, bool) {
	if o == nil || IsNil(o.ParameterSchema) {
		return nil, false
	}
	return o.ParameterSchema, true
}

// HasParameterSchema returns a boolean if a field has been set.
func (o *CommandTemplateSchema) HasParameterSchema() bool {
	if o != nil && !IsNil(o.ParameterSchema) {
		return true
	}

	return false
}

// SetParameterSchema gets a reference to the given ParametersSchema and assigns it to the ParameterSchema field.
func (o *CommandTemplateSchema) SetParameterSchema(v *ParametersSchema) {
	o.ParameterSchema = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CommandTemplateSchema) GetTitle() *string {
	if o == nil || IsNil(o.Title) {
		var ret *string
		return ret
	}
	return o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandTemplateSchema) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CommandTemplateSchema) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CommandTemplateSchema) SetTitle(v *string) {
	o.Title = v
}

func (o CommandTemplateSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OsType) {
		toSerialize["osType"] = o.OsType
	}
	if !IsNil(o.ParameterSchema) {
		toSerialize["parameterSchema"] = o.ParameterSchema
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableCommandTemplateSchema struct {
	value *CommandTemplateSchema
	isSet bool
}

func (v NullableCommandTemplateSchema) Get() *CommandTemplateSchema {
	return v.value
}

func (v *NullableCommandTemplateSchema) Set(val *CommandTemplateSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandTemplateSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandTemplateSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandTemplateSchema(val *CommandTemplateSchema) *NullableCommandTemplateSchema {
	return &NullableCommandTemplateSchema{value: val, isSet: true}
}

func (v NullableCommandTemplateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandTemplateSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
