/*
STACKIT Run Commands Service API

API endpoints for the STACKIT Run Commands Service API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package runcommand

import (
	"encoding/json"
)

// checks if the Commands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Commands{}

// Commands struct for Commands
type Commands struct {
	CommandTemplateName  *string `json:"commandTemplateName,omitempty"`
	CommandTemplateTitle *string `json:"commandTemplateTitle,omitempty"`
	FinishedAt           *string `json:"finishedAt,omitempty"`
	// Can be cast to int32 without loss of precision.
	Id        *int64  `json:"id,omitempty"`
	StartedAt *string `json:"startedAt,omitempty"`
	Status    *string `json:"status,omitempty"`
}

// NewCommands instantiates a new Commands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommands() *Commands {
	this := Commands{}
	return &this
}

// NewCommandsWithDefaults instantiates a new Commands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandsWithDefaults() *Commands {
	this := Commands{}
	return &this
}

// GetCommandTemplateName returns the CommandTemplateName field value if set, zero value otherwise.
func (o *Commands) GetCommandTemplateName() *string {
	if o == nil || IsNil(o.CommandTemplateName) {
		var ret *string
		return ret
	}
	return o.CommandTemplateName
}

// GetCommandTemplateNameOk returns a tuple with the CommandTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commands) GetCommandTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommandTemplateName) {
		return nil, false
	}
	return o.CommandTemplateName, true
}

// HasCommandTemplateName returns a boolean if a field has been set.
func (o *Commands) HasCommandTemplateName() bool {
	if o != nil && !IsNil(o.CommandTemplateName) {
		return true
	}

	return false
}

// SetCommandTemplateName gets a reference to the given string and assigns it to the CommandTemplateName field.
func (o *Commands) SetCommandTemplateName(v *string) {
	o.CommandTemplateName = v
}

// GetCommandTemplateTitle returns the CommandTemplateTitle field value if set, zero value otherwise.
func (o *Commands) GetCommandTemplateTitle() *string {
	if o == nil || IsNil(o.CommandTemplateTitle) {
		var ret *string
		return ret
	}
	return o.CommandTemplateTitle
}

// GetCommandTemplateTitleOk returns a tuple with the CommandTemplateTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commands) GetCommandTemplateTitleOk() (*string, bool) {
	if o == nil || IsNil(o.CommandTemplateTitle) {
		return nil, false
	}
	return o.CommandTemplateTitle, true
}

// HasCommandTemplateTitle returns a boolean if a field has been set.
func (o *Commands) HasCommandTemplateTitle() bool {
	if o != nil && !IsNil(o.CommandTemplateTitle) {
		return true
	}

	return false
}

// SetCommandTemplateTitle gets a reference to the given string and assigns it to the CommandTemplateTitle field.
func (o *Commands) SetCommandTemplateTitle(v *string) {
	o.CommandTemplateTitle = v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *Commands) GetFinishedAt() *string {
	if o == nil || IsNil(o.FinishedAt) {
		var ret *string
		return ret
	}
	return o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commands) GetFinishedAtOk() (*string, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *Commands) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given string and assigns it to the FinishedAt field.
func (o *Commands) SetFinishedAt(v *string) {
	o.FinishedAt = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Commands) GetId() *int64 {
	if o == nil || IsNil(o.Id) {
		var ret *int64
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commands) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Commands) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Commands) SetId(v *int64) {
	o.Id = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *Commands) GetStartedAt() *string {
	if o == nil || IsNil(o.StartedAt) {
		var ret *string
		return ret
	}
	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commands) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *Commands) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *Commands) SetStartedAt(v *string) {
	o.StartedAt = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Commands) GetStatus() *string {
	if o == nil || IsNil(o.Status) {
		var ret *string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commands) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Commands) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Commands) SetStatus(v *string) {
	o.Status = v
}

func (o Commands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommandTemplateName) {
		toSerialize["commandTemplateName"] = o.CommandTemplateName
	}
	if !IsNil(o.CommandTemplateTitle) {
		toSerialize["commandTemplateTitle"] = o.CommandTemplateTitle
	}
	if !IsNil(o.FinishedAt) {
		toSerialize["finishedAt"] = o.FinishedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCommands struct {
	value *Commands
	isSet bool
}

func (v NullableCommands) Get() *Commands {
	return v.value
}

func (v *NullableCommands) Set(val *Commands) {
	v.value = val
	v.isSet = true
}

func (v NullableCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommands(val *Commands) *NullableCommands {
	return &NullableCommands{value: val, isSet: true}
}

func (v NullableCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
