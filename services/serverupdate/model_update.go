/*
STACKIT Server Update Management API

API endpoints for Server Update Operations on STACKIT Servers.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverupdate

import (
	"encoding/json"
)

// checks if the Update type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Update{}

// Update struct for Update
type Update struct {
	EndDate    *string `json:"endDate,omitempty"`
	FailReason *string `json:"failReason,omitempty"`
	// Can be cast to int32 without loss of precision.
	FailedUpdates *int64 `json:"failedUpdates,omitempty"`
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	Id *int64 `json:"id"`
	// Can be cast to int32 without loss of precision.
	InstalledUpdates *int64 `json:"installedUpdates,omitempty"`
	// REQUIRED
	StartDate *string `json:"startDate"`
	// REQUIRED
	Status *string `json:"status"`
}

type _Update Update

// NewUpdate instantiates a new Update object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdate(id *int64, startDate *string, status *string) *Update {
	this := Update{}
	this.Id = id
	this.StartDate = startDate
	this.Status = status
	return &this
}

// NewUpdateWithDefaults instantiates a new Update object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWithDefaults() *Update {
	this := Update{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Update) GetEndDate() *string {
	if o == nil || IsNil(o.EndDate) {
		var ret *string
		return ret
	}
	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Update) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Update) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Update) SetEndDate(v *string) {
	o.EndDate = v
}

// GetFailReason returns the FailReason field value if set, zero value otherwise.
func (o *Update) GetFailReason() *string {
	if o == nil || IsNil(o.FailReason) {
		var ret *string
		return ret
	}
	return o.FailReason
}

// GetFailReasonOk returns a tuple with the FailReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Update) GetFailReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailReason) {
		return nil, false
	}
	return o.FailReason, true
}

// HasFailReason returns a boolean if a field has been set.
func (o *Update) HasFailReason() bool {
	if o != nil && !IsNil(o.FailReason) {
		return true
	}

	return false
}

// SetFailReason gets a reference to the given string and assigns it to the FailReason field.
func (o *Update) SetFailReason(v *string) {
	o.FailReason = v
}

// GetFailedUpdates returns the FailedUpdates field value if set, zero value otherwise.
func (o *Update) GetFailedUpdates() *int64 {
	if o == nil || IsNil(o.FailedUpdates) {
		var ret *int64
		return ret
	}
	return o.FailedUpdates
}

// GetFailedUpdatesOk returns a tuple with the FailedUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Update) GetFailedUpdatesOk() (*int64, bool) {
	if o == nil || IsNil(o.FailedUpdates) {
		return nil, false
	}
	return o.FailedUpdates, true
}

// HasFailedUpdates returns a boolean if a field has been set.
func (o *Update) HasFailedUpdates() bool {
	if o != nil && !IsNil(o.FailedUpdates) {
		return true
	}

	return false
}

// SetFailedUpdates gets a reference to the given int64 and assigns it to the FailedUpdates field.
func (o *Update) SetFailedUpdates(v *int64) {
	o.FailedUpdates = v
}

// GetId returns the Id field value
func (o *Update) GetId() *int64 {
	if o == nil || IsNil(o.Id) {
		var ret *int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Update) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *Update) SetId(v *int64) {
	o.Id = v
}

// GetInstalledUpdates returns the InstalledUpdates field value if set, zero value otherwise.
func (o *Update) GetInstalledUpdates() *int64 {
	if o == nil || IsNil(o.InstalledUpdates) {
		var ret *int64
		return ret
	}
	return o.InstalledUpdates
}

// GetInstalledUpdatesOk returns a tuple with the InstalledUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Update) GetInstalledUpdatesOk() (*int64, bool) {
	if o == nil || IsNil(o.InstalledUpdates) {
		return nil, false
	}
	return o.InstalledUpdates, true
}

// HasInstalledUpdates returns a boolean if a field has been set.
func (o *Update) HasInstalledUpdates() bool {
	if o != nil && !IsNil(o.InstalledUpdates) {
		return true
	}

	return false
}

// SetInstalledUpdates gets a reference to the given int64 and assigns it to the InstalledUpdates field.
func (o *Update) SetInstalledUpdates(v *int64) {
	o.InstalledUpdates = v
}

// GetStartDate returns the StartDate field value
func (o *Update) GetStartDate() *string {
	if o == nil || IsNil(o.StartDate) {
		var ret *string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *Update) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate, true
}

// SetStartDate sets field value
func (o *Update) SetStartDate(v *string) {
	o.StartDate = v
}

// GetStatus returns the Status field value
func (o *Update) GetStatus() *string {
	if o == nil || IsNil(o.Status) {
		var ret *string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Update) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *Update) SetStatus(v *string) {
	o.Status = v
}

func (o Update) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.FailReason) {
		toSerialize["failReason"] = o.FailReason
	}
	if !IsNil(o.FailedUpdates) {
		toSerialize["failedUpdates"] = o.FailedUpdates
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.InstalledUpdates) {
		toSerialize["installedUpdates"] = o.InstalledUpdates
	}
	toSerialize["startDate"] = o.StartDate
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableUpdate struct {
	value *Update
	isSet bool
}

func (v NullableUpdate) Get() *Update {
	return v.value
}

func (v *NullableUpdate) Set(val *Update) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdate(val *Update) *NullableUpdate {
	return &NullableUpdate{value: val, isSet: true}
}

func (v NullableUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
