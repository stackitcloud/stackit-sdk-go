/*
STACKIT Server Update Management API

API endpoints for Server Update Operations on STACKIT Servers.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverupdate

import (
	"encoding/json"
)

// checks if the UpdatePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePolicy{}

// UpdatePolicy struct for UpdatePolicy
type UpdatePolicy struct {
	Default           *bool   `json:"default,omitempty"`
	Description       *string `json:"description,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
	Id                *string `json:"id,omitempty"`
	MaintenanceWindow *int64  `json:"maintenanceWindow,omitempty"`
	Name              *string `json:"name,omitempty"`
	Rrule             *string `json:"rrule,omitempty"`
}

// NewUpdatePolicy instantiates a new UpdatePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePolicy() *UpdatePolicy {
	this := UpdatePolicy{}
	return &this
}

// NewUpdatePolicyWithDefaults instantiates a new UpdatePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePolicyWithDefaults() *UpdatePolicy {
	this := UpdatePolicy{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *UpdatePolicy) GetDefault() *bool {
	if o == nil || IsNil(o.Default) {
		var ret *bool
		return ret
	}
	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *UpdatePolicy) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *UpdatePolicy) SetDefault(v *bool) {
	o.Default = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdatePolicy) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdatePolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdatePolicy) SetDescription(v *string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdatePolicy) GetEnabled() *bool {
	if o == nil || IsNil(o.Enabled) {
		var ret *bool
		return ret
	}
	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdatePolicy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdatePolicy) SetEnabled(v *bool) {
	o.Enabled = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdatePolicy) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdatePolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdatePolicy) SetId(v *string) {
	o.Id = v
}

// GetMaintenanceWindow returns the MaintenanceWindow field value if set, zero value otherwise.
func (o *UpdatePolicy) GetMaintenanceWindow() *int64 {
	if o == nil || IsNil(o.MaintenanceWindow) {
		var ret *int64
		return ret
	}
	return o.MaintenanceWindow
}

// GetMaintenanceWindowOk returns a tuple with the MaintenanceWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetMaintenanceWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.MaintenanceWindow) {
		return nil, false
	}
	return o.MaintenanceWindow, true
}

// HasMaintenanceWindow returns a boolean if a field has been set.
func (o *UpdatePolicy) HasMaintenanceWindow() bool {
	if o != nil && !IsNil(o.MaintenanceWindow) {
		return true
	}

	return false
}

// SetMaintenanceWindow gets a reference to the given int64 and assigns it to the MaintenanceWindow field.
func (o *UpdatePolicy) SetMaintenanceWindow(v *int64) {
	o.MaintenanceWindow = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatePolicy) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatePolicy) SetName(v *string) {
	o.Name = v
}

// GetRrule returns the Rrule field value if set, zero value otherwise.
func (o *UpdatePolicy) GetRrule() *string {
	if o == nil || IsNil(o.Rrule) {
		var ret *string
		return ret
	}
	return o.Rrule
}

// GetRruleOk returns a tuple with the Rrule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePolicy) GetRruleOk() (*string, bool) {
	if o == nil || IsNil(o.Rrule) {
		return nil, false
	}
	return o.Rrule, true
}

// HasRrule returns a boolean if a field has been set.
func (o *UpdatePolicy) HasRrule() bool {
	if o != nil && !IsNil(o.Rrule) {
		return true
	}

	return false
}

// SetRrule gets a reference to the given string and assigns it to the Rrule field.
func (o *UpdatePolicy) SetRrule(v *string) {
	o.Rrule = v
}

func (o UpdatePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaintenanceWindow) {
		toSerialize["maintenanceWindow"] = o.MaintenanceWindow
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Rrule) {
		toSerialize["rrule"] = o.Rrule
	}
	return toSerialize, nil
}

type NullableUpdatePolicy struct {
	value *UpdatePolicy
	isSet bool
}

func (v NullableUpdatePolicy) Get() *UpdatePolicy {
	return v.value
}

func (v *NullableUpdatePolicy) Set(val *UpdatePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePolicy(val *UpdatePolicy) *NullableUpdatePolicy {
	return &NullableUpdatePolicy{value: val, isSet: true}
}

func (v NullableUpdatePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
