/*
STACKIT Model Serving API

This API provides endpoints for the model serving api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modelserving

import (
	"encoding/json"
)

// checks if the SKU type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SKU{}

/*
	types and functions for description
*/

// isNotNullableString
type SKUGetDescriptionAttributeType = *string

func getSKUGetDescriptionAttributeTypeOk(arg SKUGetDescriptionAttributeType) (ret SKUGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSKUGetDescriptionAttributeType(arg *SKUGetDescriptionAttributeType, val SKUGetDescriptionRetType) {
	*arg = &val
}

type SKUGetDescriptionArgType = string
type SKUGetDescriptionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type SKUGetIdAttributeType = *string

func getSKUGetIdAttributeTypeOk(arg SKUGetIdAttributeType) (ret SKUGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSKUGetIdAttributeType(arg *SKUGetIdAttributeType, val SKUGetIdRetType) {
	*arg = &val
}

type SKUGetIdArgType = string
type SKUGetIdRetType = string

/*
	types and functions for type
*/

// isNotNullableString
type SKUGetTypeAttributeType = *string

func getSKUGetTypeAttributeTypeOk(arg SKUGetTypeAttributeType) (ret SKUGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSKUGetTypeAttributeType(arg *SKUGetTypeAttributeType, val SKUGetTypeRetType) {
	*arg = &val
}

type SKUGetTypeArgType = string
type SKUGetTypeRetType = string

// SKU struct for SKU
type SKU struct {
	Description SKUGetDescriptionAttributeType `json:"description,omitempty"`
	// REQUIRED
	Id   SKUGetIdAttributeType   `json:"id"`
	Type SKUGetTypeAttributeType `json:"type,omitempty"`
}

type _SKU SKU

// NewSKU instantiates a new SKU object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSKU(id SKUGetIdArgType) *SKU {
	this := SKU{}
	setSKUGetIdAttributeType(&this.Id, id)
	return &this
}

// NewSKUWithDefaults instantiates a new SKU object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSKUWithDefaults() *SKU {
	this := SKU{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SKU) GetDescription() (res SKUGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SKU) GetDescriptionOk() (ret SKUGetDescriptionRetType, ok bool) {
	return getSKUGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *SKU) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SKU) SetDescription(v SKUGetDescriptionRetType) {
	setSKUGetDescriptionAttributeType(&o.Description, v)
}

// GetId returns the Id field value
func (o *SKU) GetId() (ret SKUGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SKU) GetIdOk() (ret SKUGetIdRetType, ok bool) {
	return getSKUGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *SKU) SetId(v SKUGetIdRetType) {
	setSKUGetIdAttributeType(&o.Id, v)
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SKU) GetType() (res SKUGetTypeRetType) {
	res, _ = o.GetTypeOk()
	return
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SKU) GetTypeOk() (ret SKUGetTypeRetType, ok bool) {
	return getSKUGetTypeAttributeTypeOk(o.Type)
}

// HasType returns a boolean if a field has been set.
func (o *SKU) HasType() bool {
	_, ok := o.GetTypeOk()
	return ok
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SKU) SetType(v SKUGetTypeRetType) {
	setSKUGetTypeAttributeType(&o.Type, v)
}

func (o SKU) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getSKUGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getSKUGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getSKUGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableSKU struct {
	value *SKU
	isSet bool
}

func (v NullableSKU) Get() *SKU {
	return v.value
}

func (v *NullableSKU) Set(val *SKU) {
	v.value = val
	v.isSet = true
}

func (v NullableSKU) IsSet() bool {
	return v.isSet
}

func (v *NullableSKU) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSKU(val *SKU) *NullableSKU {
	return &NullableSKU{value: val, isSet: true}
}

func (v NullableSKU) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSKU) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
