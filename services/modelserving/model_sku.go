/*
STACKIT Model Serving API

This API provides endpoints for the model serving api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modelserving

import (
	"encoding/json"
)

// checks if the SKU type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SKU{}

// SKU struct for SKU
type SKU struct {
	Description *string `json:"description,omitempty"`
	// REQUIRED
	Id   *string `json:"id"`
	Type *string `json:"type,omitempty"`
}

type _SKU SKU

// NewSKU instantiates a new SKU object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSKU(id *string) *SKU {
	this := SKU{}
	this.Id = id
	return &this
}

// NewSKUWithDefaults instantiates a new SKU object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSKUWithDefaults() *SKU {
	this := SKU{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SKU) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SKU) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SKU) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SKU) SetDescription(v *string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *SKU) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SKU) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *SKU) SetId(v *string) {
	o.Id = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SKU) GetType() *string {
	if o == nil || IsNil(o.Type) {
		var ret *string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SKU) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SKU) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SKU) SetType(v *string) {
	o.Type = v
}

func (o SKU) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSKU struct {
	value *SKU
	isSet bool
}

func (v NullableSKU) Get() *SKU {
	return v.value
}

func (v *NullableSKU) Set(val *SKU) {
	v.value = val
	v.isSet = true
}

func (v NullableSKU) IsSet() bool {
	return v.isSet
}

func (v *NullableSKU) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSKU(val *SKU) *NullableSKU {
	return &NullableSKU{value: val, isSet: true}
}

func (v NullableSKU) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSKU) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
