/*
STACKIT Model Serving API

This API provides endpoints for the model serving api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modelserving

import (
	"encoding/json"
)

// checks if the Model type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Model{}

// Model struct for Model
type Model struct {
	// REQUIRED
	Category *string `json:"category"`
	// REQUIRED
	Description *string `json:"description"`
	// REQUIRED
	DisplayedName *string `json:"displayedName"`
	// generated uuid to identify a model
	// REQUIRED
	Id *string `json:"id"`
	// huggingface name
	// REQUIRED
	Name *string `json:"name"`
	// REQUIRED
	Region *string `json:"region"`
	// REQUIRED
	Skus *[]SKU    `json:"skus"`
	Tags *[]string `json:"tags,omitempty"`
	// REQUIRED
	Type *string `json:"type"`
	// url of the model
	// REQUIRED
	Url *string `json:"url"`
}

type _Model Model

// NewModel instantiates a new Model object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel(category *string, description *string, displayedName *string, id *string, name *string, region *string, skus *[]SKU, type_ *string, url *string) *Model {
	this := Model{}
	this.Category = category
	this.Description = description
	this.DisplayedName = displayedName
	this.Id = id
	this.Name = name
	this.Region = region
	this.Skus = skus
	this.Type = type_
	this.Url = url
	return &this
}

// NewModelWithDefaults instantiates a new Model object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelWithDefaults() *Model {
	this := Model{}
	return &this
}

// GetCategory returns the Category field value
func (o *Model) GetCategory() *string {
	if o == nil || IsNil(o.Category) {
		var ret *string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Model) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *Model) SetCategory(v *string) {
	o.Category = v
}

// GetDescription returns the Description field value
func (o *Model) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Model) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description, true
}

// SetDescription sets field value
func (o *Model) SetDescription(v *string) {
	o.Description = v
}

// GetDisplayedName returns the DisplayedName field value
func (o *Model) GetDisplayedName() *string {
	if o == nil || IsNil(o.DisplayedName) {
		var ret *string
		return ret
	}

	return o.DisplayedName
}

// GetDisplayedNameOk returns a tuple with the DisplayedName field value
// and a boolean to check if the value has been set.
func (o *Model) GetDisplayedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayedName, true
}

// SetDisplayedName sets field value
func (o *Model) SetDisplayedName(v *string) {
	o.DisplayedName = v
}

// GetId returns the Id field value
func (o *Model) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Model) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *Model) SetId(v *string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Model) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Model) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Model) SetName(v *string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *Model) GetRegion() *string {
	if o == nil || IsNil(o.Region) {
		var ret *string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *Model) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region, true
}

// SetRegion sets field value
func (o *Model) SetRegion(v *string) {
	o.Region = v
}

// GetSkus returns the Skus field value
func (o *Model) GetSkus() *[]SKU {
	if o == nil || IsNil(o.Skus) {
		var ret *[]SKU
		return ret
	}

	return o.Skus
}

// GetSkusOk returns a tuple with the Skus field value
// and a boolean to check if the value has been set.
func (o *Model) GetSkusOk() (*[]SKU, bool) {
	if o == nil {
		return nil, false
	}
	return o.Skus, true
}

// SetSkus sets field value
func (o *Model) SetSkus(v *[]SKU) {
	o.Skus = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Model) GetTags() *[]string {
	if o == nil || IsNil(o.Tags) {
		var ret *[]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetTagsOk() (*[]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Model) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Model) SetTags(v *[]string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *Model) GetType() *string {
	if o == nil || IsNil(o.Type) {
		var ret *string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Model) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Model) SetType(v *string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *Model) GetUrl() *string {
	if o == nil || IsNil(o.Url) {
		var ret *string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Model) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url, true
}

// SetUrl sets field value
func (o *Model) SetUrl(v *string) {
	o.Url = v
}

func (o Model) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["description"] = o.Description
	toSerialize["displayedName"] = o.DisplayedName
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	toSerialize["skus"] = o.Skus
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableModel struct {
	value *Model
	isSet bool
}

func (v NullableModel) Get() *Model {
	return v.value
}

func (v *NullableModel) Set(val *Model) {
	v.value = val
	v.isSet = true
}

func (v NullableModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel(val *Model) *NullableModel {
	return &NullableModel{value: val, isSet: true}
}

func (v NullableModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
