/*
STACKIT Model Serving API

This API provides endpoints for the model serving api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modelserving

import (
	"encoding/json"
	"fmt"
)

// checks if the Model type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Model{}

/*
	types and functions for category
*/

// isEnum

// ModelCategory the model 'Model'
type ModelCategory string

// List of Category
const (
	MODELCATEGORY_STANDARD ModelCategory = "standard"
	MODELCATEGORY_PLUS     ModelCategory = "plus"
	MODELCATEGORY_PREMIUM  ModelCategory = "premium"
)

// All allowed values of Model enum
var AllowedModelCategoryEnumValues = []ModelCategory{
	"standard",
	"plus",
	"premium",
}

func (v *ModelCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ModelCategory(value)
	for _, existing := range AllowedModelCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Model", value)
}

// NewModelCategoryFromValue returns a pointer to a valid ModelCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelCategoryFromValue(v string) (*ModelCategory, error) {
	ev := ModelCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelCategory: valid values are %v", v, AllowedModelCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelCategory) IsValid() bool {
	for _, existing := range AllowedModelCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoryCategory value
func (v ModelCategory) Ptr() *ModelCategory {
	return &v
}

type NullableModelCategory struct {
	value *ModelCategory
	isSet bool
}

func (v NullableModelCategory) Get() *ModelCategory {
	return v.value
}

func (v *NullableModelCategory) Set(val *ModelCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCategory(val *ModelCategory) *NullableModelCategory {
	return &NullableModelCategory{value: val, isSet: true}
}

func (v NullableModelCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ModelGetCategoryAttributeType = *ModelCategory
type ModelGetCategoryArgType = ModelCategory
type ModelGetCategoryRetType = ModelCategory

func getModelGetCategoryAttributeTypeOk(arg ModelGetCategoryAttributeType) (ret ModelGetCategoryRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetCategoryAttributeType(arg *ModelGetCategoryAttributeType, val ModelGetCategoryRetType) {
	*arg = &val
}

/*
	types and functions for description
*/

// isNotNullableString
type ModelGetDescriptionAttributeType = *string

func getModelGetDescriptionAttributeTypeOk(arg ModelGetDescriptionAttributeType) (ret ModelGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetDescriptionAttributeType(arg *ModelGetDescriptionAttributeType, val ModelGetDescriptionRetType) {
	*arg = &val
}

type ModelGetDescriptionArgType = string
type ModelGetDescriptionRetType = string

/*
	types and functions for displayedName
*/

// isNotNullableString
type ModelGetDisplayedNameAttributeType = *string

func getModelGetDisplayedNameAttributeTypeOk(arg ModelGetDisplayedNameAttributeType) (ret ModelGetDisplayedNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetDisplayedNameAttributeType(arg *ModelGetDisplayedNameAttributeType, val ModelGetDisplayedNameRetType) {
	*arg = &val
}

type ModelGetDisplayedNameArgType = string
type ModelGetDisplayedNameRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type ModelGetIdAttributeType = *string

func getModelGetIdAttributeTypeOk(arg ModelGetIdAttributeType) (ret ModelGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetIdAttributeType(arg *ModelGetIdAttributeType, val ModelGetIdRetType) {
	*arg = &val
}

type ModelGetIdArgType = string
type ModelGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type ModelGetNameAttributeType = *string

func getModelGetNameAttributeTypeOk(arg ModelGetNameAttributeType) (ret ModelGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetNameAttributeType(arg *ModelGetNameAttributeType, val ModelGetNameRetType) {
	*arg = &val
}

type ModelGetNameArgType = string
type ModelGetNameRetType = string

/*
	types and functions for region
*/

// isNotNullableString
type ModelGetRegionAttributeType = *string

func getModelGetRegionAttributeTypeOk(arg ModelGetRegionAttributeType) (ret ModelGetRegionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetRegionAttributeType(arg *ModelGetRegionAttributeType, val ModelGetRegionRetType) {
	*arg = &val
}

type ModelGetRegionArgType = string
type ModelGetRegionRetType = string

/*
	types and functions for skus
*/

// isArray
type ModelGetSkusAttributeType = *[]SKU
type ModelGetSkusArgType = []SKU
type ModelGetSkusRetType = []SKU

func getModelGetSkusAttributeTypeOk(arg ModelGetSkusAttributeType) (ret ModelGetSkusRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetSkusAttributeType(arg *ModelGetSkusAttributeType, val ModelGetSkusRetType) {
	*arg = &val
}

/*
	types and functions for tags
*/

// isArray
type ModelGetTagsAttributeType = *[]string
type ModelGetTagsArgType = []string
type ModelGetTagsRetType = []string

func getModelGetTagsAttributeTypeOk(arg ModelGetTagsAttributeType) (ret ModelGetTagsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetTagsAttributeType(arg *ModelGetTagsAttributeType, val ModelGetTagsRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isEnum

// ModelTypes the model 'Model'
type ModelTypes string

// List of Type
const (
	MODELTYPE_CHAT      ModelTypes = "chat"
	MODELTYPE_EMBEDDING ModelTypes = "embedding"
)

// All allowed values of Model enum
var AllowedModelTypesEnumValues = []ModelTypes{
	"chat",
	"embedding",
}

func (v *ModelTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ModelTypes(value)
	for _, existing := range AllowedModelTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Model", value)
}

// NewModelTypesFromValue returns a pointer to a valid ModelTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTypesFromValue(v string) (*ModelTypes, error) {
	ev := ModelTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelTypes: valid values are %v", v, AllowedModelTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelTypes) IsValid() bool {
	for _, existing := range AllowedModelTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v ModelTypes) Ptr() *ModelTypes {
	return &v
}

type NullableModelTypes struct {
	value *ModelTypes
	isSet bool
}

func (v NullableModelTypes) Get() *ModelTypes {
	return v.value
}

func (v *NullableModelTypes) Set(val *ModelTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTypes(val *ModelTypes) *NullableModelTypes {
	return &NullableModelTypes{value: val, isSet: true}
}

func (v NullableModelTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ModelGetTypeAttributeType = *ModelTypes
type ModelGetTypeArgType = ModelTypes
type ModelGetTypeRetType = ModelTypes

func getModelGetTypeAttributeTypeOk(arg ModelGetTypeAttributeType) (ret ModelGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetTypeAttributeType(arg *ModelGetTypeAttributeType, val ModelGetTypeRetType) {
	*arg = &val
}

/*
	types and functions for url
*/

// isNotNullableString
type ModelGetUrlAttributeType = *string

func getModelGetUrlAttributeTypeOk(arg ModelGetUrlAttributeType) (ret ModelGetUrlRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setModelGetUrlAttributeType(arg *ModelGetUrlAttributeType, val ModelGetUrlRetType) {
	*arg = &val
}

type ModelGetUrlArgType = string
type ModelGetUrlRetType = string

// Model struct for Model
type Model struct {
	// REQUIRED
	Category ModelGetCategoryAttributeType `json:"category"`
	// REQUIRED
	Description ModelGetDescriptionAttributeType `json:"description"`
	// REQUIRED
	DisplayedName ModelGetDisplayedNameAttributeType `json:"displayedName"`
	// generated uuid to identify a model
	// REQUIRED
	Id ModelGetIdAttributeType `json:"id"`
	// huggingface name
	// REQUIRED
	Name ModelGetNameAttributeType `json:"name"`
	// REQUIRED
	Region ModelGetRegionAttributeType `json:"region"`
	// REQUIRED
	Skus ModelGetSkusAttributeType `json:"skus"`
	Tags ModelGetTagsAttributeType `json:"tags,omitempty"`
	// REQUIRED
	Type ModelGetTypeAttributeType `json:"type"`
	// url of the model
	// REQUIRED
	Url ModelGetUrlAttributeType `json:"url"`
}

type _Model Model

// NewModel instantiates a new Model object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel(category ModelGetCategoryArgType, description ModelGetDescriptionArgType, displayedName ModelGetDisplayedNameArgType, id ModelGetIdArgType, name ModelGetNameArgType, region ModelGetRegionArgType, skus ModelGetSkusArgType, types ModelGetTypeArgType, url ModelGetUrlArgType) *Model {
	this := Model{}
	setModelGetCategoryAttributeType(&this.Category, category)
	setModelGetDescriptionAttributeType(&this.Description, description)
	setModelGetDisplayedNameAttributeType(&this.DisplayedName, displayedName)
	setModelGetIdAttributeType(&this.Id, id)
	setModelGetNameAttributeType(&this.Name, name)
	setModelGetRegionAttributeType(&this.Region, region)
	setModelGetSkusAttributeType(&this.Skus, skus)
	setModelGetTypeAttributeType(&this.Type, types)
	setModelGetUrlAttributeType(&this.Url, url)
	return &this
}

// NewModelWithDefaults instantiates a new Model object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelWithDefaults() *Model {
	this := Model{}
	return &this
}

// GetCategory returns the Category field value
func (o *Model) GetCategory() (ret ModelGetCategoryRetType) {
	ret, _ = o.GetCategoryOk()
	return ret
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Model) GetCategoryOk() (ret ModelGetCategoryRetType, ok bool) {
	return getModelGetCategoryAttributeTypeOk(o.Category)
}

// SetCategory sets field value
func (o *Model) SetCategory(v ModelGetCategoryRetType) {
	setModelGetCategoryAttributeType(&o.Category, v)
}

// GetDescription returns the Description field value
func (o *Model) GetDescription() (ret ModelGetDescriptionRetType) {
	ret, _ = o.GetDescriptionOk()
	return ret
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Model) GetDescriptionOk() (ret ModelGetDescriptionRetType, ok bool) {
	return getModelGetDescriptionAttributeTypeOk(o.Description)
}

// SetDescription sets field value
func (o *Model) SetDescription(v ModelGetDescriptionRetType) {
	setModelGetDescriptionAttributeType(&o.Description, v)
}

// GetDisplayedName returns the DisplayedName field value
func (o *Model) GetDisplayedName() (ret ModelGetDisplayedNameRetType) {
	ret, _ = o.GetDisplayedNameOk()
	return ret
}

// GetDisplayedNameOk returns a tuple with the DisplayedName field value
// and a boolean to check if the value has been set.
func (o *Model) GetDisplayedNameOk() (ret ModelGetDisplayedNameRetType, ok bool) {
	return getModelGetDisplayedNameAttributeTypeOk(o.DisplayedName)
}

// SetDisplayedName sets field value
func (o *Model) SetDisplayedName(v ModelGetDisplayedNameRetType) {
	setModelGetDisplayedNameAttributeType(&o.DisplayedName, v)
}

// GetId returns the Id field value
func (o *Model) GetId() (ret ModelGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Model) GetIdOk() (ret ModelGetIdRetType, ok bool) {
	return getModelGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Model) SetId(v ModelGetIdRetType) {
	setModelGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value
func (o *Model) GetName() (ret ModelGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Model) GetNameOk() (ret ModelGetNameRetType, ok bool) {
	return getModelGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Model) SetName(v ModelGetNameRetType) {
	setModelGetNameAttributeType(&o.Name, v)
}

// GetRegion returns the Region field value
func (o *Model) GetRegion() (ret ModelGetRegionRetType) {
	ret, _ = o.GetRegionOk()
	return ret
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *Model) GetRegionOk() (ret ModelGetRegionRetType, ok bool) {
	return getModelGetRegionAttributeTypeOk(o.Region)
}

// SetRegion sets field value
func (o *Model) SetRegion(v ModelGetRegionRetType) {
	setModelGetRegionAttributeType(&o.Region, v)
}

// GetSkus returns the Skus field value
func (o *Model) GetSkus() (ret ModelGetSkusRetType) {
	ret, _ = o.GetSkusOk()
	return ret
}

// GetSkusOk returns a tuple with the Skus field value
// and a boolean to check if the value has been set.
func (o *Model) GetSkusOk() (ret ModelGetSkusRetType, ok bool) {
	return getModelGetSkusAttributeTypeOk(o.Skus)
}

// SetSkus sets field value
func (o *Model) SetSkus(v ModelGetSkusRetType) {
	setModelGetSkusAttributeType(&o.Skus, v)
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Model) GetTags() (res ModelGetTagsRetType) {
	res, _ = o.GetTagsOk()
	return
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetTagsOk() (ret ModelGetTagsRetType, ok bool) {
	return getModelGetTagsAttributeTypeOk(o.Tags)
}

// HasTags returns a boolean if a field has been set.
func (o *Model) HasTags() bool {
	_, ok := o.GetTagsOk()
	return ok
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Model) SetTags(v ModelGetTagsRetType) {
	setModelGetTagsAttributeType(&o.Tags, v)
}

// GetType returns the Type field value
func (o *Model) GetType() (ret ModelGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Model) GetTypeOk() (ret ModelGetTypeRetType, ok bool) {
	return getModelGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *Model) SetType(v ModelGetTypeRetType) {
	setModelGetTypeAttributeType(&o.Type, v)
}

// GetUrl returns the Url field value
func (o *Model) GetUrl() (ret ModelGetUrlRetType) {
	ret, _ = o.GetUrlOk()
	return ret
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Model) GetUrlOk() (ret ModelGetUrlRetType, ok bool) {
	return getModelGetUrlAttributeTypeOk(o.Url)
}

// SetUrl sets field value
func (o *Model) SetUrl(v ModelGetUrlRetType) {
	setModelGetUrlAttributeType(&o.Url, v)
}

func (o Model) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getModelGetCategoryAttributeTypeOk(o.Category); ok {
		toSerialize["Category"] = val
	}
	if val, ok := getModelGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getModelGetDisplayedNameAttributeTypeOk(o.DisplayedName); ok {
		toSerialize["DisplayedName"] = val
	}
	if val, ok := getModelGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getModelGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getModelGetRegionAttributeTypeOk(o.Region); ok {
		toSerialize["Region"] = val
	}
	if val, ok := getModelGetSkusAttributeTypeOk(o.Skus); ok {
		toSerialize["Skus"] = val
	}
	if val, ok := getModelGetTagsAttributeTypeOk(o.Tags); ok {
		toSerialize["Tags"] = val
	}
	if val, ok := getModelGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	if val, ok := getModelGetUrlAttributeTypeOk(o.Url); ok {
		toSerialize["Url"] = val
	}
	return toSerialize, nil
}

type NullableModel struct {
	value *Model
	isSet bool
}

func (v NullableModel) Get() *Model {
	return v.value
}

func (v *NullableModel) Set(val *Model) {
	v.value = val
	v.isSet = true
}

func (v NullableModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel(val *Model) *NullableModel {
	return &NullableModel{value: val, isSet: true}
}

func (v NullableModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
