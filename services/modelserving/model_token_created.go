/*
STACKIT Model Serving API

This API provides endpoints for the model serving api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modelserving

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TokenCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenCreated{}

/*
	types and functions for content
*/

// isNotNullableString
type TokenCreatedGetContentAttributeType = *string

func getTokenCreatedGetContentAttributeTypeOk(arg TokenCreatedGetContentAttributeType) (ret TokenCreatedGetContentRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetContentAttributeType(arg *TokenCreatedGetContentAttributeType, val TokenCreatedGetContentRetType) {
	*arg = &val
}

type TokenCreatedGetContentArgType = string
type TokenCreatedGetContentRetType = string

/*
	types and functions for description
*/

// isNotNullableString
type TokenCreatedGetDescriptionAttributeType = *string

func getTokenCreatedGetDescriptionAttributeTypeOk(arg TokenCreatedGetDescriptionAttributeType) (ret TokenCreatedGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetDescriptionAttributeType(arg *TokenCreatedGetDescriptionAttributeType, val TokenCreatedGetDescriptionRetType) {
	*arg = &val
}

type TokenCreatedGetDescriptionArgType = string
type TokenCreatedGetDescriptionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type TokenCreatedGetIdAttributeType = *string

func getTokenCreatedGetIdAttributeTypeOk(arg TokenCreatedGetIdAttributeType) (ret TokenCreatedGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetIdAttributeType(arg *TokenCreatedGetIdAttributeType, val TokenCreatedGetIdRetType) {
	*arg = &val
}

type TokenCreatedGetIdArgType = string
type TokenCreatedGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type TokenCreatedGetNameAttributeType = *string

func getTokenCreatedGetNameAttributeTypeOk(arg TokenCreatedGetNameAttributeType) (ret TokenCreatedGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetNameAttributeType(arg *TokenCreatedGetNameAttributeType, val TokenCreatedGetNameRetType) {
	*arg = &val
}

type TokenCreatedGetNameArgType = string
type TokenCreatedGetNameRetType = string

/*
	types and functions for region
*/

// isNotNullableString
type TokenCreatedGetRegionAttributeType = *string

func getTokenCreatedGetRegionAttributeTypeOk(arg TokenCreatedGetRegionAttributeType) (ret TokenCreatedGetRegionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetRegionAttributeType(arg *TokenCreatedGetRegionAttributeType, val TokenCreatedGetRegionRetType) {
	*arg = &val
}

type TokenCreatedGetRegionArgType = string
type TokenCreatedGetRegionRetType = string

/*
	types and functions for state
*/

// isEnum

// TokenCreatedState the model 'TokenCreated'
type TokenCreatedState string

// List of State
const (
	TOKENCREATEDSTATE_CREATING TokenCreatedState = "creating"
	TOKENCREATEDSTATE_ACTIVE   TokenCreatedState = "active"
	TOKENCREATEDSTATE_DELETING TokenCreatedState = "deleting"
)

// All allowed values of TokenCreated enum
var AllowedTokenCreatedStateEnumValues = []TokenCreatedState{
	"creating",
	"active",
	"deleting",
}

func (v *TokenCreatedState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := TokenCreatedState(value)
	for _, existing := range AllowedTokenCreatedStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenCreated", value)
}

// NewTokenCreatedStateFromValue returns a pointer to a valid TokenCreatedState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenCreatedStateFromValue(v string) (*TokenCreatedState, error) {
	ev := TokenCreatedState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenCreatedState: valid values are %v", v, AllowedTokenCreatedStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenCreatedState) IsValid() bool {
	for _, existing := range AllowedTokenCreatedStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v TokenCreatedState) Ptr() *TokenCreatedState {
	return &v
}

type NullableTokenCreatedState struct {
	value *TokenCreatedState
	isSet bool
}

func (v NullableTokenCreatedState) Get() *TokenCreatedState {
	return v.value
}

func (v *NullableTokenCreatedState) Set(val *TokenCreatedState) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenCreatedState) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenCreatedState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenCreatedState(val *TokenCreatedState) *NullableTokenCreatedState {
	return &NullableTokenCreatedState{value: val, isSet: true}
}

func (v NullableTokenCreatedState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenCreatedState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type TokenCreatedGetStateAttributeType = *TokenCreatedState
type TokenCreatedGetStateArgType = TokenCreatedState
type TokenCreatedGetStateRetType = TokenCreatedState

func getTokenCreatedGetStateAttributeTypeOk(arg TokenCreatedGetStateAttributeType) (ret TokenCreatedGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetStateAttributeType(arg *TokenCreatedGetStateAttributeType, val TokenCreatedGetStateRetType) {
	*arg = &val
}

/*
	types and functions for validUntil
*/

// isDateTime
type TokenCreatedGetValidUntilAttributeType = *time.Time
type TokenCreatedGetValidUntilArgType = time.Time
type TokenCreatedGetValidUntilRetType = time.Time

func getTokenCreatedGetValidUntilAttributeTypeOk(arg TokenCreatedGetValidUntilAttributeType) (ret TokenCreatedGetValidUntilRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenCreatedGetValidUntilAttributeType(arg *TokenCreatedGetValidUntilAttributeType, val TokenCreatedGetValidUntilRetType) {
	*arg = &val
}

// TokenCreated struct for TokenCreated
type TokenCreated struct {
	// REQUIRED
	Content     TokenCreatedGetContentAttributeType     `json:"content"`
	Description TokenCreatedGetDescriptionAttributeType `json:"description,omitempty"`
	// REQUIRED
	Id TokenCreatedGetIdAttributeType `json:"id"`
	// REQUIRED
	Name TokenCreatedGetNameAttributeType `json:"name"`
	// REQUIRED
	Region TokenCreatedGetRegionAttributeType `json:"region"`
	// REQUIRED
	State TokenCreatedGetStateAttributeType `json:"state"`
	// REQUIRED
	ValidUntil TokenCreatedGetValidUntilAttributeType `json:"validUntil"`
}

type _TokenCreated TokenCreated

// NewTokenCreated instantiates a new TokenCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenCreated(content TokenCreatedGetContentArgType, id TokenCreatedGetIdArgType, name TokenCreatedGetNameArgType, region TokenCreatedGetRegionArgType, state TokenCreatedGetStateArgType, validUntil TokenCreatedGetValidUntilArgType) *TokenCreated {
	this := TokenCreated{}
	setTokenCreatedGetContentAttributeType(&this.Content, content)
	setTokenCreatedGetIdAttributeType(&this.Id, id)
	setTokenCreatedGetNameAttributeType(&this.Name, name)
	setTokenCreatedGetRegionAttributeType(&this.Region, region)
	setTokenCreatedGetStateAttributeType(&this.State, state)
	setTokenCreatedGetValidUntilAttributeType(&this.ValidUntil, validUntil)
	return &this
}

// NewTokenCreatedWithDefaults instantiates a new TokenCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenCreatedWithDefaults() *TokenCreated {
	this := TokenCreated{}
	return &this
}

// GetContent returns the Content field value
func (o *TokenCreated) GetContent() (ret TokenCreatedGetContentRetType) {
	ret, _ = o.GetContentOk()
	return ret
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetContentOk() (ret TokenCreatedGetContentRetType, ok bool) {
	return getTokenCreatedGetContentAttributeTypeOk(o.Content)
}

// SetContent sets field value
func (o *TokenCreated) SetContent(v TokenCreatedGetContentRetType) {
	setTokenCreatedGetContentAttributeType(&o.Content, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TokenCreated) GetDescription() (res TokenCreatedGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetDescriptionOk() (ret TokenCreatedGetDescriptionRetType, ok bool) {
	return getTokenCreatedGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *TokenCreated) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TokenCreated) SetDescription(v TokenCreatedGetDescriptionRetType) {
	setTokenCreatedGetDescriptionAttributeType(&o.Description, v)
}

// GetId returns the Id field value
func (o *TokenCreated) GetId() (ret TokenCreatedGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetIdOk() (ret TokenCreatedGetIdRetType, ok bool) {
	return getTokenCreatedGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *TokenCreated) SetId(v TokenCreatedGetIdRetType) {
	setTokenCreatedGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value
func (o *TokenCreated) GetName() (ret TokenCreatedGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetNameOk() (ret TokenCreatedGetNameRetType, ok bool) {
	return getTokenCreatedGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *TokenCreated) SetName(v TokenCreatedGetNameRetType) {
	setTokenCreatedGetNameAttributeType(&o.Name, v)
}

// GetRegion returns the Region field value
func (o *TokenCreated) GetRegion() (ret TokenCreatedGetRegionRetType) {
	ret, _ = o.GetRegionOk()
	return ret
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetRegionOk() (ret TokenCreatedGetRegionRetType, ok bool) {
	return getTokenCreatedGetRegionAttributeTypeOk(o.Region)
}

// SetRegion sets field value
func (o *TokenCreated) SetRegion(v TokenCreatedGetRegionRetType) {
	setTokenCreatedGetRegionAttributeType(&o.Region, v)
}

// GetState returns the State field value
func (o *TokenCreated) GetState() (ret TokenCreatedGetStateRetType) {
	ret, _ = o.GetStateOk()
	return ret
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetStateOk() (ret TokenCreatedGetStateRetType, ok bool) {
	return getTokenCreatedGetStateAttributeTypeOk(o.State)
}

// SetState sets field value
func (o *TokenCreated) SetState(v TokenCreatedGetStateRetType) {
	setTokenCreatedGetStateAttributeType(&o.State, v)
}

// GetValidUntil returns the ValidUntil field value
func (o *TokenCreated) GetValidUntil() (ret TokenCreatedGetValidUntilRetType) {
	ret, _ = o.GetValidUntilOk()
	return ret
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *TokenCreated) GetValidUntilOk() (ret TokenCreatedGetValidUntilRetType, ok bool) {
	return getTokenCreatedGetValidUntilAttributeTypeOk(o.ValidUntil)
}

// SetValidUntil sets field value
func (o *TokenCreated) SetValidUntil(v TokenCreatedGetValidUntilRetType) {
	setTokenCreatedGetValidUntilAttributeType(&o.ValidUntil, v)
}

func (o TokenCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getTokenCreatedGetContentAttributeTypeOk(o.Content); ok {
		toSerialize["Content"] = val
	}
	if val, ok := getTokenCreatedGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getTokenCreatedGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getTokenCreatedGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getTokenCreatedGetRegionAttributeTypeOk(o.Region); ok {
		toSerialize["Region"] = val
	}
	if val, ok := getTokenCreatedGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getTokenCreatedGetValidUntilAttributeTypeOk(o.ValidUntil); ok {
		toSerialize["ValidUntil"] = val
	}
	return toSerialize, nil
}

type NullableTokenCreated struct {
	value *TokenCreated
	isSet bool
}

func (v NullableTokenCreated) Get() *TokenCreated {
	return v.value
}

func (v *NullableTokenCreated) Set(val *TokenCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenCreated(val *TokenCreated) *NullableTokenCreated {
	return &NullableTokenCreated{value: val, isSet: true}
}

func (v NullableTokenCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
