/*
STACKIT Model Serving API

This API provides endpoints for the model serving api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modelserving

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Token{}

/*
	types and functions for description
*/

// isNotNullableString
type TokenGetDescriptionAttributeType = *string

func getTokenGetDescriptionAttributeTypeOk(arg TokenGetDescriptionAttributeType) (ret TokenGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenGetDescriptionAttributeType(arg *TokenGetDescriptionAttributeType, val TokenGetDescriptionRetType) {
	*arg = &val
}

type TokenGetDescriptionArgType = string
type TokenGetDescriptionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type TokenGetIdAttributeType = *string

func getTokenGetIdAttributeTypeOk(arg TokenGetIdAttributeType) (ret TokenGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenGetIdAttributeType(arg *TokenGetIdAttributeType, val TokenGetIdRetType) {
	*arg = &val
}

type TokenGetIdArgType = string
type TokenGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type TokenGetNameAttributeType = *string

func getTokenGetNameAttributeTypeOk(arg TokenGetNameAttributeType) (ret TokenGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenGetNameAttributeType(arg *TokenGetNameAttributeType, val TokenGetNameRetType) {
	*arg = &val
}

type TokenGetNameArgType = string
type TokenGetNameRetType = string

/*
	types and functions for region
*/

// isNotNullableString
type TokenGetRegionAttributeType = *string

func getTokenGetRegionAttributeTypeOk(arg TokenGetRegionAttributeType) (ret TokenGetRegionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenGetRegionAttributeType(arg *TokenGetRegionAttributeType, val TokenGetRegionRetType) {
	*arg = &val
}

type TokenGetRegionArgType = string
type TokenGetRegionRetType = string

/*
	types and functions for state
*/

// isEnum

// TokenState the model 'Token'
type TokenState string

// List of State
const (
	TOKENSTATE_CREATING TokenState = "creating"
	TOKENSTATE_ACTIVE   TokenState = "active"
	TOKENSTATE_DELETING TokenState = "deleting"
	TOKENSTATE_INACTIVE TokenState = "inactive"
)

// All allowed values of Token enum
var AllowedTokenStateEnumValues = []TokenState{
	"creating",
	"active",
	"deleting",
	"inactive",
}

func (v *TokenState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := TokenState(value)
	for _, existing := range AllowedTokenStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Token", value)
}

// NewTokenStateFromValue returns a pointer to a valid TokenState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenStateFromValue(v string) (*TokenState, error) {
	ev := TokenState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenState: valid values are %v", v, AllowedTokenStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenState) IsValid() bool {
	for _, existing := range AllowedTokenStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v TokenState) Ptr() *TokenState {
	return &v
}

type NullableTokenState struct {
	value *TokenState
	isSet bool
}

func (v NullableTokenState) Get() *TokenState {
	return v.value
}

func (v *NullableTokenState) Set(val *TokenState) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenState) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenState(val *TokenState) *NullableTokenState {
	return &NullableTokenState{value: val, isSet: true}
}

func (v NullableTokenState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type TokenGetStateAttributeType = *TokenState
type TokenGetStateArgType = TokenState
type TokenGetStateRetType = TokenState

func getTokenGetStateAttributeTypeOk(arg TokenGetStateAttributeType) (ret TokenGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenGetStateAttributeType(arg *TokenGetStateAttributeType, val TokenGetStateRetType) {
	*arg = &val
}

/*
	types and functions for validUntil
*/

// isDateTime
type TokenGetValidUntilAttributeType = *time.Time
type TokenGetValidUntilArgType = time.Time
type TokenGetValidUntilRetType = time.Time

func getTokenGetValidUntilAttributeTypeOk(arg TokenGetValidUntilAttributeType) (ret TokenGetValidUntilRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTokenGetValidUntilAttributeType(arg *TokenGetValidUntilAttributeType, val TokenGetValidUntilRetType) {
	*arg = &val
}

// Token struct for Token
type Token struct {
	Description TokenGetDescriptionAttributeType `json:"description,omitempty"`
	// REQUIRED
	Id TokenGetIdAttributeType `json:"id"`
	// REQUIRED
	Name TokenGetNameAttributeType `json:"name"`
	// REQUIRED
	Region TokenGetRegionAttributeType `json:"region"`
	// REQUIRED
	State TokenGetStateAttributeType `json:"state"`
	// REQUIRED
	ValidUntil TokenGetValidUntilAttributeType `json:"validUntil"`
}

type _Token Token

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken(id TokenGetIdArgType, name TokenGetNameArgType, region TokenGetRegionArgType, state TokenGetStateArgType, validUntil TokenGetValidUntilArgType) *Token {
	this := Token{}
	setTokenGetIdAttributeType(&this.Id, id)
	setTokenGetNameAttributeType(&this.Name, name)
	setTokenGetRegionAttributeType(&this.Region, region)
	setTokenGetStateAttributeType(&this.State, state)
	setTokenGetValidUntilAttributeType(&this.ValidUntil, validUntil)
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Token) GetDescription() (res TokenGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetDescriptionOk() (ret TokenGetDescriptionRetType, ok bool) {
	return getTokenGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *Token) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Token) SetDescription(v TokenGetDescriptionRetType) {
	setTokenGetDescriptionAttributeType(&o.Description, v)
}

// GetId returns the Id field value
func (o *Token) GetId() (ret TokenGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Token) GetIdOk() (ret TokenGetIdRetType, ok bool) {
	return getTokenGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Token) SetId(v TokenGetIdRetType) {
	setTokenGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value
func (o *Token) GetName() (ret TokenGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Token) GetNameOk() (ret TokenGetNameRetType, ok bool) {
	return getTokenGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Token) SetName(v TokenGetNameRetType) {
	setTokenGetNameAttributeType(&o.Name, v)
}

// GetRegion returns the Region field value
func (o *Token) GetRegion() (ret TokenGetRegionRetType) {
	ret, _ = o.GetRegionOk()
	return ret
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *Token) GetRegionOk() (ret TokenGetRegionRetType, ok bool) {
	return getTokenGetRegionAttributeTypeOk(o.Region)
}

// SetRegion sets field value
func (o *Token) SetRegion(v TokenGetRegionRetType) {
	setTokenGetRegionAttributeType(&o.Region, v)
}

// GetState returns the State field value
func (o *Token) GetState() (ret TokenGetStateRetType) {
	ret, _ = o.GetStateOk()
	return ret
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Token) GetStateOk() (ret TokenGetStateRetType, ok bool) {
	return getTokenGetStateAttributeTypeOk(o.State)
}

// SetState sets field value
func (o *Token) SetState(v TokenGetStateRetType) {
	setTokenGetStateAttributeType(&o.State, v)
}

// GetValidUntil returns the ValidUntil field value
func (o *Token) GetValidUntil() (ret TokenGetValidUntilRetType) {
	ret, _ = o.GetValidUntilOk()
	return ret
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *Token) GetValidUntilOk() (ret TokenGetValidUntilRetType, ok bool) {
	return getTokenGetValidUntilAttributeTypeOk(o.ValidUntil)
}

// SetValidUntil sets field value
func (o *Token) SetValidUntil(v TokenGetValidUntilRetType) {
	setTokenGetValidUntilAttributeType(&o.ValidUntil, v)
}

func (o Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getTokenGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getTokenGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getTokenGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getTokenGetRegionAttributeTypeOk(o.Region); ok {
		toSerialize["Region"] = val
	}
	if val, ok := getTokenGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getTokenGetValidUntilAttributeTypeOk(o.ValidUntil); ok {
		toSerialize["ValidUntil"] = val
	}
	return toSerialize, nil
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
