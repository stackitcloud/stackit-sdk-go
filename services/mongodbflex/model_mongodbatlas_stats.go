/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the MongodbatlasStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongodbatlasStats{}

// MongodbatlasStats struct for MongodbatlasStats
type MongodbatlasStats struct {
	// Duration in milliseconds of the query.
	Ms *float64 `json:"ms,omitempty"`
	// Number of results returned by the query.
	NReturned *int64 `json:"nReturned,omitempty"`
	// Number of documents read by the query.
	NScanned *int64 `json:"nScanned,omitempty"`
	// Query timestamp, in seconds since epoch.
	Ts *int64 `json:"ts,omitempty"`
}

// NewMongodbatlasStats instantiates a new MongodbatlasStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongodbatlasStats() *MongodbatlasStats {
	this := MongodbatlasStats{}
	return &this
}

// NewMongodbatlasStatsWithDefaults instantiates a new MongodbatlasStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongodbatlasStatsWithDefaults() *MongodbatlasStats {
	this := MongodbatlasStats{}
	return &this
}

// GetMs returns the Ms field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetMs() *float64 {
	if o == nil || IsNil(o.Ms) {
		var ret *float64
		return ret
	}
	return o.Ms
}

// GetMsOk returns a tuple with the Ms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetMsOk() (*float64, bool) {
	if o == nil || IsNil(o.Ms) {
		return nil, false
	}
	return o.Ms, true
}

// HasMs returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasMs() bool {
	if o != nil && !IsNil(o.Ms) {
		return true
	}

	return false
}

// SetMs gets a reference to the given float64 and assigns it to the Ms field.
func (o *MongodbatlasStats) SetMs(v *float64) {
	o.Ms = v
}

// GetNReturned returns the NReturned field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetNReturned() *int64 {
	if o == nil || IsNil(o.NReturned) {
		var ret *int64
		return ret
	}
	return o.NReturned
}

// GetNReturnedOk returns a tuple with the NReturned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetNReturnedOk() (*int64, bool) {
	if o == nil || IsNil(o.NReturned) {
		return nil, false
	}
	return o.NReturned, true
}

// HasNReturned returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasNReturned() bool {
	if o != nil && !IsNil(o.NReturned) {
		return true
	}

	return false
}

// SetNReturned gets a reference to the given int64 and assigns it to the NReturned field.
func (o *MongodbatlasStats) SetNReturned(v *int64) {
	o.NReturned = v
}

// GetNScanned returns the NScanned field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetNScanned() *int64 {
	if o == nil || IsNil(o.NScanned) {
		var ret *int64
		return ret
	}
	return o.NScanned
}

// GetNScannedOk returns a tuple with the NScanned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetNScannedOk() (*int64, bool) {
	if o == nil || IsNil(o.NScanned) {
		return nil, false
	}
	return o.NScanned, true
}

// HasNScanned returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasNScanned() bool {
	if o != nil && !IsNil(o.NScanned) {
		return true
	}

	return false
}

// SetNScanned gets a reference to the given int64 and assigns it to the NScanned field.
func (o *MongodbatlasStats) SetNScanned(v *int64) {
	o.NScanned = v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetTs() *int64 {
	if o == nil || IsNil(o.Ts) {
		var ret *int64
		return ret
	}
	return o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetTsOk() (*int64, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given int64 and assigns it to the Ts field.
func (o *MongodbatlasStats) SetTs(v *int64) {
	o.Ts = v
}

func (o MongodbatlasStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ms) {
		toSerialize["ms"] = o.Ms
	}
	if !IsNil(o.NReturned) {
		toSerialize["nReturned"] = o.NReturned
	}
	if !IsNil(o.NScanned) {
		toSerialize["nScanned"] = o.NScanned
	}
	if !IsNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	return toSerialize, nil
}

type NullableMongodbatlasStats struct {
	value *MongodbatlasStats
	isSet bool
}

func (v NullableMongodbatlasStats) Get() *MongodbatlasStats {
	return v.value
}

func (v *NullableMongodbatlasStats) Set(val *MongodbatlasStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMongodbatlasStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMongodbatlasStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongodbatlasStats(val *MongodbatlasStats) *NullableMongodbatlasStats {
	return &NullableMongodbatlasStats{value: val, isSet: true}
}

func (v NullableMongodbatlasStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongodbatlasStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
