/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the MongodbatlasStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongodbatlasStats{}

/*
	types and functions for ms
*/

// isNumber
type MongodbatlasStatsGetMsAttributeType = *float64
type MongodbatlasStatsGetMsArgType = float64
type MongodbatlasStatsGetMsRetType = float64

func getMongodbatlasStatsGetMsAttributeTypeOk(arg MongodbatlasStatsGetMsAttributeType) (ret MongodbatlasStatsGetMsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasStatsGetMsAttributeType(arg *MongodbatlasStatsGetMsAttributeType, val MongodbatlasStatsGetMsRetType) {
	*arg = &val
}

/*
	types and functions for nReturned
*/

// isInteger
type MongodbatlasStatsGetNReturnedAttributeType = *int64
type MongodbatlasStatsGetNReturnedArgType = int64
type MongodbatlasStatsGetNReturnedRetType = int64

func getMongodbatlasStatsGetNReturnedAttributeTypeOk(arg MongodbatlasStatsGetNReturnedAttributeType) (ret MongodbatlasStatsGetNReturnedRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasStatsGetNReturnedAttributeType(arg *MongodbatlasStatsGetNReturnedAttributeType, val MongodbatlasStatsGetNReturnedRetType) {
	*arg = &val
}

/*
	types and functions for nScanned
*/

// isInteger
type MongodbatlasStatsGetNScannedAttributeType = *int64
type MongodbatlasStatsGetNScannedArgType = int64
type MongodbatlasStatsGetNScannedRetType = int64

func getMongodbatlasStatsGetNScannedAttributeTypeOk(arg MongodbatlasStatsGetNScannedAttributeType) (ret MongodbatlasStatsGetNScannedRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasStatsGetNScannedAttributeType(arg *MongodbatlasStatsGetNScannedAttributeType, val MongodbatlasStatsGetNScannedRetType) {
	*arg = &val
}

/*
	types and functions for ts
*/

// isInteger
type MongodbatlasStatsGetTsAttributeType = *int64
type MongodbatlasStatsGetTsArgType = int64
type MongodbatlasStatsGetTsRetType = int64

func getMongodbatlasStatsGetTsAttributeTypeOk(arg MongodbatlasStatsGetTsAttributeType) (ret MongodbatlasStatsGetTsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasStatsGetTsAttributeType(arg *MongodbatlasStatsGetTsAttributeType, val MongodbatlasStatsGetTsRetType) {
	*arg = &val
}

// MongodbatlasStats struct for MongodbatlasStats
type MongodbatlasStats struct {
	// Duration in milliseconds of the query.
	Ms MongodbatlasStatsGetMsAttributeType `json:"ms,omitempty"`
	// Number of results returned by the query.
	NReturned MongodbatlasStatsGetNReturnedAttributeType `json:"nReturned,omitempty"`
	// Number of documents read by the query.
	NScanned MongodbatlasStatsGetNScannedAttributeType `json:"nScanned,omitempty"`
	// Query timestamp, in seconds since epoch.
	Ts MongodbatlasStatsGetTsAttributeType `json:"ts,omitempty"`
}

// NewMongodbatlasStats instantiates a new MongodbatlasStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongodbatlasStats() *MongodbatlasStats {
	this := MongodbatlasStats{}
	return &this
}

// NewMongodbatlasStatsWithDefaults instantiates a new MongodbatlasStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongodbatlasStatsWithDefaults() *MongodbatlasStats {
	this := MongodbatlasStats{}
	return &this
}

// GetMs returns the Ms field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetMs() (res MongodbatlasStatsGetMsRetType) {
	res, _ = o.GetMsOk()
	return
}

// GetMsOk returns a tuple with the Ms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetMsOk() (ret MongodbatlasStatsGetMsRetType, ok bool) {
	return getMongodbatlasStatsGetMsAttributeTypeOk(o.Ms)
}

// HasMs returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasMs() bool {
	_, ok := o.GetMsOk()
	return ok
}

// SetMs gets a reference to the given float64 and assigns it to the Ms field.
func (o *MongodbatlasStats) SetMs(v MongodbatlasStatsGetMsRetType) {
	setMongodbatlasStatsGetMsAttributeType(&o.Ms, v)
}

// GetNReturned returns the NReturned field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetNReturned() (res MongodbatlasStatsGetNReturnedRetType) {
	res, _ = o.GetNReturnedOk()
	return
}

// GetNReturnedOk returns a tuple with the NReturned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetNReturnedOk() (ret MongodbatlasStatsGetNReturnedRetType, ok bool) {
	return getMongodbatlasStatsGetNReturnedAttributeTypeOk(o.NReturned)
}

// HasNReturned returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasNReturned() bool {
	_, ok := o.GetNReturnedOk()
	return ok
}

// SetNReturned gets a reference to the given int64 and assigns it to the NReturned field.
func (o *MongodbatlasStats) SetNReturned(v MongodbatlasStatsGetNReturnedRetType) {
	setMongodbatlasStatsGetNReturnedAttributeType(&o.NReturned, v)
}

// GetNScanned returns the NScanned field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetNScanned() (res MongodbatlasStatsGetNScannedRetType) {
	res, _ = o.GetNScannedOk()
	return
}

// GetNScannedOk returns a tuple with the NScanned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetNScannedOk() (ret MongodbatlasStatsGetNScannedRetType, ok bool) {
	return getMongodbatlasStatsGetNScannedAttributeTypeOk(o.NScanned)
}

// HasNScanned returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasNScanned() bool {
	_, ok := o.GetNScannedOk()
	return ok
}

// SetNScanned gets a reference to the given int64 and assigns it to the NScanned field.
func (o *MongodbatlasStats) SetNScanned(v MongodbatlasStatsGetNScannedRetType) {
	setMongodbatlasStatsGetNScannedAttributeType(&o.NScanned, v)
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *MongodbatlasStats) GetTs() (res MongodbatlasStatsGetTsRetType) {
	res, _ = o.GetTsOk()
	return
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasStats) GetTsOk() (ret MongodbatlasStatsGetTsRetType, ok bool) {
	return getMongodbatlasStatsGetTsAttributeTypeOk(o.Ts)
}

// HasTs returns a boolean if a field has been set.
func (o *MongodbatlasStats) HasTs() bool {
	_, ok := o.GetTsOk()
	return ok
}

// SetTs gets a reference to the given int64 and assigns it to the Ts field.
func (o *MongodbatlasStats) SetTs(v MongodbatlasStatsGetTsRetType) {
	setMongodbatlasStatsGetTsAttributeType(&o.Ts, v)
}

func (o MongodbatlasStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMongodbatlasStatsGetMsAttributeTypeOk(o.Ms); ok {
		toSerialize["Ms"] = val
	}
	if val, ok := getMongodbatlasStatsGetNReturnedAttributeTypeOk(o.NReturned); ok {
		toSerialize["NReturned"] = val
	}
	if val, ok := getMongodbatlasStatsGetNScannedAttributeTypeOk(o.NScanned); ok {
		toSerialize["NScanned"] = val
	}
	if val, ok := getMongodbatlasStatsGetTsAttributeTypeOk(o.Ts); ok {
		toSerialize["Ts"] = val
	}
	return toSerialize, nil
}

type NullableMongodbatlasStats struct {
	value *MongodbatlasStats
	isSet bool
}

func (v NullableMongodbatlasStats) Get() *MongodbatlasStats {
	return v.value
}

func (v *NullableMongodbatlasStats) Set(val *MongodbatlasStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMongodbatlasStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMongodbatlasStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongodbatlasStats(val *MongodbatlasStats) *NullableMongodbatlasStats {
	return &NullableMongodbatlasStats{value: val, isSet: true}
}

func (v NullableMongodbatlasStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongodbatlasStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
