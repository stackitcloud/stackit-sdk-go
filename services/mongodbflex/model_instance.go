/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
	"fmt"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

/*
	types and functions for acl
*/

// isModel
type InstanceGetAclAttributeType = *ACL
type InstanceGetAclArgType = ACL
type InstanceGetAclRetType = ACL

func getInstanceGetAclAttributeTypeOk(arg InstanceGetAclAttributeType) (ret InstanceGetAclRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetAclAttributeType(arg *InstanceGetAclAttributeType, val InstanceGetAclRetType) {
	*arg = &val
}

/*
	types and functions for backupSchedule
*/

// isNotNullableString
type InstanceGetBackupScheduleAttributeType = *string

func getInstanceGetBackupScheduleAttributeTypeOk(arg InstanceGetBackupScheduleAttributeType) (ret InstanceGetBackupScheduleRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetBackupScheduleAttributeType(arg *InstanceGetBackupScheduleAttributeType, val InstanceGetBackupScheduleRetType) {
	*arg = &val
}

type InstanceGetBackupScheduleArgType = string
type InstanceGetBackupScheduleRetType = string

/*
	types and functions for flavor
*/

// isModel
type InstanceGetFlavorAttributeType = *Flavor
type InstanceGetFlavorArgType = Flavor
type InstanceGetFlavorRetType = Flavor

func getInstanceGetFlavorAttributeTypeOk(arg InstanceGetFlavorAttributeType) (ret InstanceGetFlavorRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetFlavorAttributeType(arg *InstanceGetFlavorAttributeType, val InstanceGetFlavorRetType) {
	*arg = &val
}

/*
	types and functions for id
*/

// isNotNullableString
type InstanceGetIdAttributeType = *string

func getInstanceGetIdAttributeTypeOk(arg InstanceGetIdAttributeType) (ret InstanceGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetIdAttributeType(arg *InstanceGetIdAttributeType, val InstanceGetIdRetType) {
	*arg = &val
}

type InstanceGetIdArgType = string
type InstanceGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type InstanceGetNameAttributeType = *string

func getInstanceGetNameAttributeTypeOk(arg InstanceGetNameAttributeType) (ret InstanceGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetNameAttributeType(arg *InstanceGetNameAttributeType, val InstanceGetNameRetType) {
	*arg = &val
}

type InstanceGetNameArgType = string
type InstanceGetNameRetType = string

/*
	types and functions for options
*/

// isContainer
type InstanceGetOptionsAttributeType = *map[string]string
type InstanceGetOptionsArgType = map[string]string
type InstanceGetOptionsRetType = map[string]string

func getInstanceGetOptionsAttributeTypeOk(arg InstanceGetOptionsAttributeType) (ret InstanceGetOptionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetOptionsAttributeType(arg *InstanceGetOptionsAttributeType, val InstanceGetOptionsRetType) {
	*arg = &val
}

/*
	types and functions for replicas
*/

// isInteger
type InstanceGetReplicasAttributeType = *int64
type InstanceGetReplicasArgType = int64
type InstanceGetReplicasRetType = int64

func getInstanceGetReplicasAttributeTypeOk(arg InstanceGetReplicasAttributeType) (ret InstanceGetReplicasRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetReplicasAttributeType(arg *InstanceGetReplicasAttributeType, val InstanceGetReplicasRetType) {
	*arg = &val
}

/*
	types and functions for status
*/

// isEnum

// InstanceStatus The current status of the instance.
type InstanceStatus string

// List of Status
const (
	INSTANCESTATUS_READY      InstanceStatus = "READY"
	INSTANCESTATUS_PENDING    InstanceStatus = "PENDING"
	INSTANCESTATUS_PROCESSING InstanceStatus = "PROCESSING"
	INSTANCESTATUS_FAILED     InstanceStatus = "FAILED"
	INSTANCESTATUS_UNKNOWN    InstanceStatus = "UNKNOWN"
)

// All allowed values of Instance enum
var AllowedInstanceStatusEnumValues = []InstanceStatus{
	"READY",
	"PENDING",
	"PROCESSING",
	"FAILED",
	"UNKNOWN",
}

func (v *InstanceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InstanceStatus(value)
	for _, existing := range AllowedInstanceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Instance", value)
}

// NewInstanceStatusFromValue returns a pointer to a valid InstanceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceStatusFromValue(v string) (*InstanceStatus, error) {
	ev := InstanceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceStatus: valid values are %v", v, AllowedInstanceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceStatus) IsValid() bool {
	for _, existing := range AllowedInstanceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusStatus value
func (v InstanceStatus) Ptr() *InstanceStatus {
	return &v
}

type NullableInstanceStatus struct {
	value *InstanceStatus
	isSet bool
}

func (v NullableInstanceStatus) Get() *InstanceStatus {
	return v.value
}

func (v *NullableInstanceStatus) Set(val *InstanceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceStatus(val *InstanceStatus) *NullableInstanceStatus {
	return &NullableInstanceStatus{value: val, isSet: true}
}

func (v NullableInstanceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type InstanceGetStatusAttributeType = *InstanceStatus
type InstanceGetStatusArgType = InstanceStatus
type InstanceGetStatusRetType = InstanceStatus

func getInstanceGetStatusAttributeTypeOk(arg InstanceGetStatusAttributeType) (ret InstanceGetStatusRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetStatusAttributeType(arg *InstanceGetStatusAttributeType, val InstanceGetStatusRetType) {
	*arg = &val
}

/*
	types and functions for storage
*/

// isModel
type InstanceGetStorageAttributeType = *Storage
type InstanceGetStorageArgType = Storage
type InstanceGetStorageRetType = Storage

func getInstanceGetStorageAttributeTypeOk(arg InstanceGetStorageAttributeType) (ret InstanceGetStorageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetStorageAttributeType(arg *InstanceGetStorageAttributeType, val InstanceGetStorageRetType) {
	*arg = &val
}

/*
	types and functions for version
*/

// isNotNullableString
type InstanceGetVersionAttributeType = *string

func getInstanceGetVersionAttributeTypeOk(arg InstanceGetVersionAttributeType) (ret InstanceGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceGetVersionAttributeType(arg *InstanceGetVersionAttributeType, val InstanceGetVersionRetType) {
	*arg = &val
}

type InstanceGetVersionArgType = string
type InstanceGetVersionRetType = string

// Instance struct for Instance
type Instance struct {
	Acl            InstanceGetAclAttributeType            `json:"acl,omitempty"`
	BackupSchedule InstanceGetBackupScheduleAttributeType `json:"backupSchedule,omitempty"`
	Flavor         InstanceGetFlavorAttributeType         `json:"flavor,omitempty"`
	Id             InstanceGetIdAttributeType             `json:"id,omitempty"`
	Name           InstanceGetNameAttributeType           `json:"name,omitempty"`
	Options        InstanceGetOptionsAttributeType        `json:"options,omitempty"`
	Replicas       InstanceGetReplicasAttributeType       `json:"replicas,omitempty"`
	// The current status of the instance.
	Status  InstanceGetStatusAttributeType  `json:"status,omitempty"`
	Storage InstanceGetStorageAttributeType `json:"storage,omitempty"`
	Version InstanceGetVersionAttributeType `json:"version,omitempty"`
}

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance() *Instance {
	this := Instance{}
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *Instance) GetAcl() (res InstanceGetAclRetType) {
	res, _ = o.GetAclOk()
	return
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetAclOk() (ret InstanceGetAclRetType, ok bool) {
	return getInstanceGetAclAttributeTypeOk(o.Acl)
}

// HasAcl returns a boolean if a field has been set.
func (o *Instance) HasAcl() bool {
	_, ok := o.GetAclOk()
	return ok
}

// SetAcl gets a reference to the given ACL and assigns it to the Acl field.
func (o *Instance) SetAcl(v InstanceGetAclRetType) {
	setInstanceGetAclAttributeType(&o.Acl, v)
}

// GetBackupSchedule returns the BackupSchedule field value if set, zero value otherwise.
func (o *Instance) GetBackupSchedule() (res InstanceGetBackupScheduleRetType) {
	res, _ = o.GetBackupScheduleOk()
	return
}

// GetBackupScheduleOk returns a tuple with the BackupSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetBackupScheduleOk() (ret InstanceGetBackupScheduleRetType, ok bool) {
	return getInstanceGetBackupScheduleAttributeTypeOk(o.BackupSchedule)
}

// HasBackupSchedule returns a boolean if a field has been set.
func (o *Instance) HasBackupSchedule() bool {
	_, ok := o.GetBackupScheduleOk()
	return ok
}

// SetBackupSchedule gets a reference to the given string and assigns it to the BackupSchedule field.
func (o *Instance) SetBackupSchedule(v InstanceGetBackupScheduleRetType) {
	setInstanceGetBackupScheduleAttributeType(&o.BackupSchedule, v)
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *Instance) GetFlavor() (res InstanceGetFlavorRetType) {
	res, _ = o.GetFlavorOk()
	return
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetFlavorOk() (ret InstanceGetFlavorRetType, ok bool) {
	return getInstanceGetFlavorAttributeTypeOk(o.Flavor)
}

// HasFlavor returns a boolean if a field has been set.
func (o *Instance) HasFlavor() bool {
	_, ok := o.GetFlavorOk()
	return ok
}

// SetFlavor gets a reference to the given Flavor and assigns it to the Flavor field.
func (o *Instance) SetFlavor(v InstanceGetFlavorRetType) {
	setInstanceGetFlavorAttributeType(&o.Flavor, v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Instance) GetId() (res InstanceGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetIdOk() (ret InstanceGetIdRetType, ok bool) {
	return getInstanceGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *Instance) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Instance) SetId(v InstanceGetIdRetType) {
	setInstanceGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Instance) GetName() (res InstanceGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetNameOk() (ret InstanceGetNameRetType, ok bool) {
	return getInstanceGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *Instance) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Instance) SetName(v InstanceGetNameRetType) {
	setInstanceGetNameAttributeType(&o.Name, v)
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Instance) GetOptions() (res InstanceGetOptionsRetType) {
	res, _ = o.GetOptionsOk()
	return
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetOptionsOk() (ret InstanceGetOptionsRetType, ok bool) {
	return getInstanceGetOptionsAttributeTypeOk(o.Options)
}

// HasOptions returns a boolean if a field has been set.
func (o *Instance) HasOptions() bool {
	_, ok := o.GetOptionsOk()
	return ok
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *Instance) SetOptions(v InstanceGetOptionsRetType) {
	setInstanceGetOptionsAttributeType(&o.Options, v)
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *Instance) GetReplicas() (res InstanceGetReplicasRetType) {
	res, _ = o.GetReplicasOk()
	return
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetReplicasOk() (ret InstanceGetReplicasRetType, ok bool) {
	return getInstanceGetReplicasAttributeTypeOk(o.Replicas)
}

// HasReplicas returns a boolean if a field has been set.
func (o *Instance) HasReplicas() bool {
	_, ok := o.GetReplicasOk()
	return ok
}

// SetReplicas gets a reference to the given int64 and assigns it to the Replicas field.
func (o *Instance) SetReplicas(v InstanceGetReplicasRetType) {
	setInstanceGetReplicasAttributeType(&o.Replicas, v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Instance) GetStatus() (res InstanceGetStatusRetType) {
	res, _ = o.GetStatusOk()
	return
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetStatusOk() (ret InstanceGetStatusRetType, ok bool) {
	return getInstanceGetStatusAttributeTypeOk(o.Status)
}

// HasStatus returns a boolean if a field has been set.
func (o *Instance) HasStatus() bool {
	_, ok := o.GetStatusOk()
	return ok
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Instance) SetStatus(v InstanceGetStatusRetType) {
	setInstanceGetStatusAttributeType(&o.Status, v)
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *Instance) GetStorage() (res InstanceGetStorageRetType) {
	res, _ = o.GetStorageOk()
	return
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetStorageOk() (ret InstanceGetStorageRetType, ok bool) {
	return getInstanceGetStorageAttributeTypeOk(o.Storage)
}

// HasStorage returns a boolean if a field has been set.
func (o *Instance) HasStorage() bool {
	_, ok := o.GetStorageOk()
	return ok
}

// SetStorage gets a reference to the given Storage and assigns it to the Storage field.
func (o *Instance) SetStorage(v InstanceGetStorageRetType) {
	setInstanceGetStorageAttributeType(&o.Storage, v)
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Instance) GetVersion() (res InstanceGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetVersionOk() (ret InstanceGetVersionRetType, ok bool) {
	return getInstanceGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *Instance) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Instance) SetVersion(v InstanceGetVersionRetType) {
	setInstanceGetVersionAttributeType(&o.Version, v)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceGetAclAttributeTypeOk(o.Acl); ok {
		toSerialize["Acl"] = val
	}
	if val, ok := getInstanceGetBackupScheduleAttributeTypeOk(o.BackupSchedule); ok {
		toSerialize["BackupSchedule"] = val
	}
	if val, ok := getInstanceGetFlavorAttributeTypeOk(o.Flavor); ok {
		toSerialize["Flavor"] = val
	}
	if val, ok := getInstanceGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getInstanceGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getInstanceGetOptionsAttributeTypeOk(o.Options); ok {
		toSerialize["Options"] = val
	}
	if val, ok := getInstanceGetReplicasAttributeTypeOk(o.Replicas); ok {
		toSerialize["Replicas"] = val
	}
	if val, ok := getInstanceGetStatusAttributeTypeOk(o.Status); ok {
		toSerialize["Status"] = val
	}
	if val, ok := getInstanceGetStorageAttributeTypeOk(o.Storage); ok {
		toSerialize["Storage"] = val
	}
	if val, ok := getInstanceGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
