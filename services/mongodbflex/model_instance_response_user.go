/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the InstanceResponseUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceResponseUser{}

/*
	types and functions for database
*/

// isNotNullableString
type InstanceResponseUserGetDatabaseAttributeType = *string

func getInstanceResponseUserGetDatabaseAttributeTypeOk(arg InstanceResponseUserGetDatabaseAttributeType) (ret InstanceResponseUserGetDatabaseRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceResponseUserGetDatabaseAttributeType(arg *InstanceResponseUserGetDatabaseAttributeType, val InstanceResponseUserGetDatabaseRetType) {
	*arg = &val
}

type InstanceResponseUserGetDatabaseArgType = string
type InstanceResponseUserGetDatabaseRetType = string

/*
	types and functions for host
*/

// isNotNullableString
type InstanceResponseUserGetHostAttributeType = *string

func getInstanceResponseUserGetHostAttributeTypeOk(arg InstanceResponseUserGetHostAttributeType) (ret InstanceResponseUserGetHostRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceResponseUserGetHostAttributeType(arg *InstanceResponseUserGetHostAttributeType, val InstanceResponseUserGetHostRetType) {
	*arg = &val
}

type InstanceResponseUserGetHostArgType = string
type InstanceResponseUserGetHostRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type InstanceResponseUserGetIdAttributeType = *string

func getInstanceResponseUserGetIdAttributeTypeOk(arg InstanceResponseUserGetIdAttributeType) (ret InstanceResponseUserGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceResponseUserGetIdAttributeType(arg *InstanceResponseUserGetIdAttributeType, val InstanceResponseUserGetIdRetType) {
	*arg = &val
}

type InstanceResponseUserGetIdArgType = string
type InstanceResponseUserGetIdRetType = string

/*
	types and functions for port
*/

// isLong
type InstanceResponseUserGetPortAttributeType = *int64
type InstanceResponseUserGetPortArgType = int64
type InstanceResponseUserGetPortRetType = int64

func getInstanceResponseUserGetPortAttributeTypeOk(arg InstanceResponseUserGetPortAttributeType) (ret InstanceResponseUserGetPortRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceResponseUserGetPortAttributeType(arg *InstanceResponseUserGetPortAttributeType, val InstanceResponseUserGetPortRetType) {
	*arg = &val
}

/*
	types and functions for roles
*/

// isArray
type InstanceResponseUserGetRolesAttributeType = *[]string
type InstanceResponseUserGetRolesArgType = []string
type InstanceResponseUserGetRolesRetType = []string

func getInstanceResponseUserGetRolesAttributeTypeOk(arg InstanceResponseUserGetRolesAttributeType) (ret InstanceResponseUserGetRolesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceResponseUserGetRolesAttributeType(arg *InstanceResponseUserGetRolesAttributeType, val InstanceResponseUserGetRolesRetType) {
	*arg = &val
}

/*
	types and functions for username
*/

// isNotNullableString
type InstanceResponseUserGetUsernameAttributeType = *string

func getInstanceResponseUserGetUsernameAttributeTypeOk(arg InstanceResponseUserGetUsernameAttributeType) (ret InstanceResponseUserGetUsernameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceResponseUserGetUsernameAttributeType(arg *InstanceResponseUserGetUsernameAttributeType, val InstanceResponseUserGetUsernameRetType) {
	*arg = &val
}

type InstanceResponseUserGetUsernameArgType = string
type InstanceResponseUserGetUsernameRetType = string

// InstanceResponseUser struct for InstanceResponseUser
type InstanceResponseUser struct {
	Database InstanceResponseUserGetDatabaseAttributeType `json:"database,omitempty"`
	Host     InstanceResponseUserGetHostAttributeType     `json:"host,omitempty"`
	Id       InstanceResponseUserGetIdAttributeType       `json:"id,omitempty"`
	Port     InstanceResponseUserGetPortAttributeType     `json:"port,omitempty"`
	// The roles defined for a user. The *roles* attribute can contain the following values: 'read', 'readWrite', 'readAnyDatabase', 'readWriteAnyDatabase', 'stackitAdmin'. **The 'readAnyDatabase', 'readWriteAnyDatabase' and 'stackitAdmin' roles will always be created in the admin database.**
	Roles    InstanceResponseUserGetRolesAttributeType    `json:"roles,omitempty"`
	Username InstanceResponseUserGetUsernameAttributeType `json:"username,omitempty"`
}

// NewInstanceResponseUser instantiates a new InstanceResponseUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceResponseUser() *InstanceResponseUser {
	this := InstanceResponseUser{}
	return &this
}

// NewInstanceResponseUserWithDefaults instantiates a new InstanceResponseUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceResponseUserWithDefaults() *InstanceResponseUser {
	this := InstanceResponseUser{}
	return &this
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *InstanceResponseUser) GetDatabase() (res InstanceResponseUserGetDatabaseRetType) {
	res, _ = o.GetDatabaseOk()
	return
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResponseUser) GetDatabaseOk() (ret InstanceResponseUserGetDatabaseRetType, ok bool) {
	return getInstanceResponseUserGetDatabaseAttributeTypeOk(o.Database)
}

// HasDatabase returns a boolean if a field has been set.
func (o *InstanceResponseUser) HasDatabase() bool {
	_, ok := o.GetDatabaseOk()
	return ok
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *InstanceResponseUser) SetDatabase(v InstanceResponseUserGetDatabaseRetType) {
	setInstanceResponseUserGetDatabaseAttributeType(&o.Database, v)
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *InstanceResponseUser) GetHost() (res InstanceResponseUserGetHostRetType) {
	res, _ = o.GetHostOk()
	return
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResponseUser) GetHostOk() (ret InstanceResponseUserGetHostRetType, ok bool) {
	return getInstanceResponseUserGetHostAttributeTypeOk(o.Host)
}

// HasHost returns a boolean if a field has been set.
func (o *InstanceResponseUser) HasHost() bool {
	_, ok := o.GetHostOk()
	return ok
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *InstanceResponseUser) SetHost(v InstanceResponseUserGetHostRetType) {
	setInstanceResponseUserGetHostAttributeType(&o.Host, v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceResponseUser) GetId() (res InstanceResponseUserGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResponseUser) GetIdOk() (ret InstanceResponseUserGetIdRetType, ok bool) {
	return getInstanceResponseUserGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *InstanceResponseUser) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstanceResponseUser) SetId(v InstanceResponseUserGetIdRetType) {
	setInstanceResponseUserGetIdAttributeType(&o.Id, v)
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *InstanceResponseUser) GetPort() (res InstanceResponseUserGetPortRetType) {
	res, _ = o.GetPortOk()
	return
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResponseUser) GetPortOk() (ret InstanceResponseUserGetPortRetType, ok bool) {
	return getInstanceResponseUserGetPortAttributeTypeOk(o.Port)
}

// HasPort returns a boolean if a field has been set.
func (o *InstanceResponseUser) HasPort() bool {
	_, ok := o.GetPortOk()
	return ok
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *InstanceResponseUser) SetPort(v InstanceResponseUserGetPortRetType) {
	setInstanceResponseUserGetPortAttributeType(&o.Port, v)
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *InstanceResponseUser) GetRoles() (res InstanceResponseUserGetRolesRetType) {
	res, _ = o.GetRolesOk()
	return
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResponseUser) GetRolesOk() (ret InstanceResponseUserGetRolesRetType, ok bool) {
	return getInstanceResponseUserGetRolesAttributeTypeOk(o.Roles)
}

// HasRoles returns a boolean if a field has been set.
func (o *InstanceResponseUser) HasRoles() bool {
	_, ok := o.GetRolesOk()
	return ok
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *InstanceResponseUser) SetRoles(v InstanceResponseUserGetRolesRetType) {
	setInstanceResponseUserGetRolesAttributeType(&o.Roles, v)
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *InstanceResponseUser) GetUsername() (res InstanceResponseUserGetUsernameRetType) {
	res, _ = o.GetUsernameOk()
	return
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResponseUser) GetUsernameOk() (ret InstanceResponseUserGetUsernameRetType, ok bool) {
	return getInstanceResponseUserGetUsernameAttributeTypeOk(o.Username)
}

// HasUsername returns a boolean if a field has been set.
func (o *InstanceResponseUser) HasUsername() bool {
	_, ok := o.GetUsernameOk()
	return ok
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *InstanceResponseUser) SetUsername(v InstanceResponseUserGetUsernameRetType) {
	setInstanceResponseUserGetUsernameAttributeType(&o.Username, v)
}

func (o InstanceResponseUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceResponseUserGetDatabaseAttributeTypeOk(o.Database); ok {
		toSerialize["Database"] = val
	}
	if val, ok := getInstanceResponseUserGetHostAttributeTypeOk(o.Host); ok {
		toSerialize["Host"] = val
	}
	if val, ok := getInstanceResponseUserGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getInstanceResponseUserGetPortAttributeTypeOk(o.Port); ok {
		toSerialize["Port"] = val
	}
	if val, ok := getInstanceResponseUserGetRolesAttributeTypeOk(o.Roles); ok {
		toSerialize["Roles"] = val
	}
	if val, ok := getInstanceResponseUserGetUsernameAttributeTypeOk(o.Username); ok {
		toSerialize["Username"] = val
	}
	return toSerialize, nil
}

type NullableInstanceResponseUser struct {
	value *InstanceResponseUser
	isSet bool
}

func (v NullableInstanceResponseUser) Get() *InstanceResponseUser {
	return v.value
}

func (v *NullableInstanceResponseUser) Set(val *InstanceResponseUser) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceResponseUser) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceResponseUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceResponseUser(val *InstanceResponseUser) *NullableInstanceResponseUser {
	return &NullableInstanceResponseUser{value: val, isSet: true}
}

func (v NullableInstanceResponseUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceResponseUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
