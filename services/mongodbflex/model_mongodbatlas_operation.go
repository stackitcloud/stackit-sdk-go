/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the MongodbatlasOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongodbatlasOperation{}

/*
	types and functions for predicates
*/

// isArray
type MongodbatlasOperationGetPredicatesAttributeType = *[]map[string]interface{}
type MongodbatlasOperationGetPredicatesArgType = []map[string]interface{}
type MongodbatlasOperationGetPredicatesRetType = []map[string]interface{}

func getMongodbatlasOperationGetPredicatesAttributeTypeOk(arg MongodbatlasOperationGetPredicatesAttributeType) (ret MongodbatlasOperationGetPredicatesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasOperationGetPredicatesAttributeType(arg *MongodbatlasOperationGetPredicatesAttributeType, val MongodbatlasOperationGetPredicatesRetType) {
	*arg = &val
}

/*
	types and functions for raw
*/

// isNotNullableString
type MongodbatlasOperationGetRawAttributeType = *string

func getMongodbatlasOperationGetRawAttributeTypeOk(arg MongodbatlasOperationGetRawAttributeType) (ret MongodbatlasOperationGetRawRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasOperationGetRawAttributeType(arg *MongodbatlasOperationGetRawAttributeType, val MongodbatlasOperationGetRawRetType) {
	*arg = &val
}

type MongodbatlasOperationGetRawArgType = string
type MongodbatlasOperationGetRawRetType = string

/*
	types and functions for stats
*/

// isModel
type MongodbatlasOperationGetStatsAttributeType = *MongodbatlasOperationStats
type MongodbatlasOperationGetStatsArgType = MongodbatlasOperationStats
type MongodbatlasOperationGetStatsRetType = MongodbatlasOperationStats

func getMongodbatlasOperationGetStatsAttributeTypeOk(arg MongodbatlasOperationGetStatsAttributeType) (ret MongodbatlasOperationGetStatsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMongodbatlasOperationGetStatsAttributeType(arg *MongodbatlasOperationGetStatsAttributeType, val MongodbatlasOperationGetStatsRetType) {
	*arg = &val
}

// MongodbatlasOperation struct for MongodbatlasOperation
type MongodbatlasOperation struct {
	// Documents containing the search criteria used by the query.
	Predicates MongodbatlasOperationGetPredicatesAttributeType `json:"predicates,omitempty"`
	// Raw log line produced by the query.
	Raw   MongodbatlasOperationGetRawAttributeType   `json:"raw,omitempty"`
	Stats MongodbatlasOperationGetStatsAttributeType `json:"stats,omitempty"`
}

// NewMongodbatlasOperation instantiates a new MongodbatlasOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongodbatlasOperation() *MongodbatlasOperation {
	this := MongodbatlasOperation{}
	return &this
}

// NewMongodbatlasOperationWithDefaults instantiates a new MongodbatlasOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongodbatlasOperationWithDefaults() *MongodbatlasOperation {
	this := MongodbatlasOperation{}
	return &this
}

// GetPredicates returns the Predicates field value if set, zero value otherwise.
func (o *MongodbatlasOperation) GetPredicates() (res MongodbatlasOperationGetPredicatesRetType) {
	res, _ = o.GetPredicatesOk()
	return
}

// GetPredicatesOk returns a tuple with the Predicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasOperation) GetPredicatesOk() (ret MongodbatlasOperationGetPredicatesRetType, ok bool) {
	return getMongodbatlasOperationGetPredicatesAttributeTypeOk(o.Predicates)
}

// HasPredicates returns a boolean if a field has been set.
func (o *MongodbatlasOperation) HasPredicates() bool {
	_, ok := o.GetPredicatesOk()
	return ok
}

// SetPredicates gets a reference to the given []map[string]interface{} and assigns it to the Predicates field.
func (o *MongodbatlasOperation) SetPredicates(v MongodbatlasOperationGetPredicatesRetType) {
	setMongodbatlasOperationGetPredicatesAttributeType(&o.Predicates, v)
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *MongodbatlasOperation) GetRaw() (res MongodbatlasOperationGetRawRetType) {
	res, _ = o.GetRawOk()
	return
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasOperation) GetRawOk() (ret MongodbatlasOperationGetRawRetType, ok bool) {
	return getMongodbatlasOperationGetRawAttributeTypeOk(o.Raw)
}

// HasRaw returns a boolean if a field has been set.
func (o *MongodbatlasOperation) HasRaw() bool {
	_, ok := o.GetRawOk()
	return ok
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *MongodbatlasOperation) SetRaw(v MongodbatlasOperationGetRawRetType) {
	setMongodbatlasOperationGetRawAttributeType(&o.Raw, v)
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *MongodbatlasOperation) GetStats() (res MongodbatlasOperationGetStatsRetType) {
	res, _ = o.GetStatsOk()
	return
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasOperation) GetStatsOk() (ret MongodbatlasOperationGetStatsRetType, ok bool) {
	return getMongodbatlasOperationGetStatsAttributeTypeOk(o.Stats)
}

// HasStats returns a boolean if a field has been set.
func (o *MongodbatlasOperation) HasStats() bool {
	_, ok := o.GetStatsOk()
	return ok
}

// SetStats gets a reference to the given MongodbatlasOperationStats and assigns it to the Stats field.
func (o *MongodbatlasOperation) SetStats(v MongodbatlasOperationGetStatsRetType) {
	setMongodbatlasOperationGetStatsAttributeType(&o.Stats, v)
}

func (o MongodbatlasOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMongodbatlasOperationGetPredicatesAttributeTypeOk(o.Predicates); ok {
		toSerialize["Predicates"] = val
	}
	if val, ok := getMongodbatlasOperationGetRawAttributeTypeOk(o.Raw); ok {
		toSerialize["Raw"] = val
	}
	if val, ok := getMongodbatlasOperationGetStatsAttributeTypeOk(o.Stats); ok {
		toSerialize["Stats"] = val
	}
	return toSerialize, nil
}

type NullableMongodbatlasOperation struct {
	value *MongodbatlasOperation
	isSet bool
}

func (v NullableMongodbatlasOperation) Get() *MongodbatlasOperation {
	return v.value
}

func (v *NullableMongodbatlasOperation) Set(val *MongodbatlasOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMongodbatlasOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMongodbatlasOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongodbatlasOperation(val *MongodbatlasOperation) *NullableMongodbatlasOperation {
	return &NullableMongodbatlasOperation{value: val, isSet: true}
}

func (v NullableMongodbatlasOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongodbatlasOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
