/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the MongodbatlasOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongodbatlasOperation{}

// MongodbatlasOperation struct for MongodbatlasOperation
type MongodbatlasOperation struct {
	// Documents containing the search criteria used by the query.
	Predicates *[]map[string]interface{} `json:"predicates,omitempty"`
	// Raw log line produced by the query.
	Raw   *string                     `json:"raw,omitempty"`
	Stats *MongodbatlasOperationStats `json:"stats,omitempty"`
}

// NewMongodbatlasOperation instantiates a new MongodbatlasOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongodbatlasOperation() *MongodbatlasOperation {
	this := MongodbatlasOperation{}
	return &this
}

// NewMongodbatlasOperationWithDefaults instantiates a new MongodbatlasOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongodbatlasOperationWithDefaults() *MongodbatlasOperation {
	this := MongodbatlasOperation{}
	return &this
}

// GetPredicates returns the Predicates field value if set, zero value otherwise.
func (o *MongodbatlasOperation) GetPredicates() *[]map[string]interface{} {
	if o == nil || IsNil(o.Predicates) {
		var ret *[]map[string]interface{}
		return ret
	}
	return o.Predicates
}

// GetPredicatesOk returns a tuple with the Predicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasOperation) GetPredicatesOk() (*[]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Predicates) {
		return nil, false
	}
	return o.Predicates, true
}

// HasPredicates returns a boolean if a field has been set.
func (o *MongodbatlasOperation) HasPredicates() bool {
	if o != nil && !IsNil(o.Predicates) {
		return true
	}

	return false
}

// SetPredicates gets a reference to the given []map[string]interface{} and assigns it to the Predicates field.
func (o *MongodbatlasOperation) SetPredicates(v *[]map[string]interface{}) {
	o.Predicates = v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *MongodbatlasOperation) GetRaw() *string {
	if o == nil || IsNil(o.Raw) {
		var ret *string
		return ret
	}
	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasOperation) GetRawOk() (*string, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *MongodbatlasOperation) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *MongodbatlasOperation) SetRaw(v *string) {
	o.Raw = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *MongodbatlasOperation) GetStats() *MongodbatlasOperationStats {
	if o == nil || IsNil(o.Stats) {
		var ret *MongodbatlasOperationStats
		return ret
	}
	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasOperation) GetStatsOk() (*MongodbatlasOperationStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *MongodbatlasOperation) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given MongodbatlasOperationStats and assigns it to the Stats field.
func (o *MongodbatlasOperation) SetStats(v *MongodbatlasOperationStats) {
	o.Stats = v
}

func (o MongodbatlasOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Predicates) {
		toSerialize["predicates"] = o.Predicates
	}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullableMongodbatlasOperation struct {
	value *MongodbatlasOperation
	isSet bool
}

func (v NullableMongodbatlasOperation) Get() *MongodbatlasOperation {
	return v.value
}

func (v *NullableMongodbatlasOperation) Set(val *MongodbatlasOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMongodbatlasOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMongodbatlasOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongodbatlasOperation(val *MongodbatlasOperation) *NullableMongodbatlasOperation {
	return &NullableMongodbatlasOperation{value: val, isSet: true}
}

func (v NullableMongodbatlasOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongodbatlasOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
