/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the ListUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUser{}

// ListUser struct for ListUser
type ListUser struct {
	Id       *string `json:"id,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewListUser instantiates a new ListUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUser() *ListUser {
	this := ListUser{}
	return &this
}

// NewListUserWithDefaults instantiates a new ListUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUserWithDefaults() *ListUser {
	this := ListUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListUser) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ListUser) SetId(v *string) {
	o.Id = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ListUser) GetUsername() *string {
	if o == nil || IsNil(o.Username) {
		var ret *string
		return ret
	}
	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ListUser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ListUser) SetUsername(v *string) {
	o.Username = v
}

func (o ListUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableListUser struct {
	value *ListUser
	isSet bool
}

func (v NullableListUser) Get() *ListUser {
	return v.value
}

func (v *NullableListUser) Set(val *ListUser) {
	v.value = val
	v.isSet = true
}

func (v NullableListUser) IsSet() bool {
	return v.isSet
}

func (v *NullableListUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUser(val *ListUser) *NullableListUser {
	return &NullableListUser{value: val, isSet: true}
}

func (v NullableListUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
