/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the ListUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUser{}

/*
	types and functions for id
*/

// isNotNullableString
type ListUserGetIdAttributeType = *string

func getListUserGetIdAttributeTypeOk(arg ListUserGetIdAttributeType) (ret ListUserGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListUserGetIdAttributeType(arg *ListUserGetIdAttributeType, val ListUserGetIdRetType) {
	*arg = &val
}

type ListUserGetIdArgType = string
type ListUserGetIdRetType = string

/*
	types and functions for username
*/

// isNotNullableString
type ListUserGetUsernameAttributeType = *string

func getListUserGetUsernameAttributeTypeOk(arg ListUserGetUsernameAttributeType) (ret ListUserGetUsernameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListUserGetUsernameAttributeType(arg *ListUserGetUsernameAttributeType, val ListUserGetUsernameRetType) {
	*arg = &val
}

type ListUserGetUsernameArgType = string
type ListUserGetUsernameRetType = string

// ListUser struct for ListUser
type ListUser struct {
	Id       ListUserGetIdAttributeType       `json:"id,omitempty"`
	Username ListUserGetUsernameAttributeType `json:"username,omitempty"`
}

// NewListUser instantiates a new ListUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUser() *ListUser {
	this := ListUser{}
	return &this
}

// NewListUserWithDefaults instantiates a new ListUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUserWithDefaults() *ListUser {
	this := ListUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListUser) GetId() (res ListUserGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUser) GetIdOk() (ret ListUserGetIdRetType, ok bool) {
	return getListUserGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *ListUser) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ListUser) SetId(v ListUserGetIdRetType) {
	setListUserGetIdAttributeType(&o.Id, v)
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ListUser) GetUsername() (res ListUserGetUsernameRetType) {
	res, _ = o.GetUsernameOk()
	return
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUser) GetUsernameOk() (ret ListUserGetUsernameRetType, ok bool) {
	return getListUserGetUsernameAttributeTypeOk(o.Username)
}

// HasUsername returns a boolean if a field has been set.
func (o *ListUser) HasUsername() bool {
	_, ok := o.GetUsernameOk()
	return ok
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ListUser) SetUsername(v ListUserGetUsernameRetType) {
	setListUserGetUsernameAttributeType(&o.Username, v)
}

func (o ListUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getListUserGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getListUserGetUsernameAttributeTypeOk(o.Username); ok {
		toSerialize["Username"] = val
	}
	return toSerialize, nil
}

type NullableListUser struct {
	value *ListUser
	isSet bool
}

func (v NullableListUser) Get() *ListUser {
	return v.value
}

func (v *NullableListUser) Set(val *ListUser) {
	v.value = val
	v.isSet = true
}

func (v NullableListUser) IsSet() bool {
	return v.isSet
}

func (v *NullableListUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUser(val *ListUser) *NullableListUser {
	return &NullableListUser{value: val, isSet: true}
}

func (v NullableListUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
