/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the ListFlavorsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFlavorsResponse{}

/*
	types and functions for flavors
*/

// isArray
type ListFlavorsResponseGetFlavorsAttributeType = *[]InstanceFlavor
type ListFlavorsResponseGetFlavorsArgType = []InstanceFlavor
type ListFlavorsResponseGetFlavorsRetType = []InstanceFlavor

func getListFlavorsResponseGetFlavorsAttributeTypeOk(arg ListFlavorsResponseGetFlavorsAttributeType) (ret ListFlavorsResponseGetFlavorsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListFlavorsResponseGetFlavorsAttributeType(arg *ListFlavorsResponseGetFlavorsAttributeType, val ListFlavorsResponseGetFlavorsRetType) {
	*arg = &val
}

// ListFlavorsResponse struct for ListFlavorsResponse
type ListFlavorsResponse struct {
	Flavors ListFlavorsResponseGetFlavorsAttributeType `json:"flavors,omitempty"`
}

// NewListFlavorsResponse instantiates a new ListFlavorsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFlavorsResponse() *ListFlavorsResponse {
	this := ListFlavorsResponse{}
	return &this
}

// NewListFlavorsResponseWithDefaults instantiates a new ListFlavorsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFlavorsResponseWithDefaults() *ListFlavorsResponse {
	this := ListFlavorsResponse{}
	return &this
}

// GetFlavors returns the Flavors field value if set, zero value otherwise.
func (o *ListFlavorsResponse) GetFlavors() (res ListFlavorsResponseGetFlavorsRetType) {
	res, _ = o.GetFlavorsOk()
	return
}

// GetFlavorsOk returns a tuple with the Flavors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFlavorsResponse) GetFlavorsOk() (ret ListFlavorsResponseGetFlavorsRetType, ok bool) {
	return getListFlavorsResponseGetFlavorsAttributeTypeOk(o.Flavors)
}

// HasFlavors returns a boolean if a field has been set.
func (o *ListFlavorsResponse) HasFlavors() bool {
	_, ok := o.GetFlavorsOk()
	return ok
}

// SetFlavors gets a reference to the given []InstanceFlavor and assigns it to the Flavors field.
func (o *ListFlavorsResponse) SetFlavors(v ListFlavorsResponseGetFlavorsRetType) {
	setListFlavorsResponseGetFlavorsAttributeType(&o.Flavors, v)
}

func (o ListFlavorsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getListFlavorsResponseGetFlavorsAttributeTypeOk(o.Flavors); ok {
		toSerialize["Flavors"] = val
	}
	return toSerialize, nil
}

type NullableListFlavorsResponse struct {
	value *ListFlavorsResponse
	isSet bool
}

func (v NullableListFlavorsResponse) Get() *ListFlavorsResponse {
	return v.value
}

func (v *NullableListFlavorsResponse) Set(val *ListFlavorsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFlavorsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFlavorsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFlavorsResponse(val *ListFlavorsResponse) *NullableListFlavorsResponse {
	return &NullableListFlavorsResponse{value: val, isSet: true}
}

func (v NullableListFlavorsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFlavorsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
