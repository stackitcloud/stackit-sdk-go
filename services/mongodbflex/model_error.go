/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

/*
	types and functions for code
*/

// isInteger
type ErrorGetCodeAttributeType = *int64
type ErrorGetCodeArgType = int64
type ErrorGetCodeRetType = int64

func getErrorGetCodeAttributeTypeOk(arg ErrorGetCodeAttributeType) (ret ErrorGetCodeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetCodeAttributeType(arg *ErrorGetCodeAttributeType, val ErrorGetCodeRetType) {
	*arg = &val
}

/*
	types and functions for fields
*/

// isContainer
type ErrorGetFieldsAttributeType = *map[string][]string
type ErrorGetFieldsArgType = map[string][]string
type ErrorGetFieldsRetType = map[string][]string

func getErrorGetFieldsAttributeTypeOk(arg ErrorGetFieldsAttributeType) (ret ErrorGetFieldsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetFieldsAttributeType(arg *ErrorGetFieldsAttributeType, val ErrorGetFieldsRetType) {
	*arg = &val
}

/*
	types and functions for message
*/

// isNotNullableString
type ErrorGetMessageAttributeType = *string

func getErrorGetMessageAttributeTypeOk(arg ErrorGetMessageAttributeType) (ret ErrorGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetMessageAttributeType(arg *ErrorGetMessageAttributeType, val ErrorGetMessageRetType) {
	*arg = &val
}

type ErrorGetMessageArgType = string
type ErrorGetMessageRetType = string

/*
	types and functions for type
*/

// isNotNullableString
type ErrorGetTypeAttributeType = *string

func getErrorGetTypeAttributeTypeOk(arg ErrorGetTypeAttributeType) (ret ErrorGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetTypeAttributeType(arg *ErrorGetTypeAttributeType, val ErrorGetTypeRetType) {
	*arg = &val
}

type ErrorGetTypeArgType = string
type ErrorGetTypeRetType = string

// Error struct for Error
type Error struct {
	// Can be cast to int32 without loss of precision.
	Code    ErrorGetCodeAttributeType    `json:"code,omitempty"`
	Fields  ErrorGetFieldsAttributeType  `json:"fields,omitempty"`
	Message ErrorGetMessageAttributeType `json:"message,omitempty"`
	Type    ErrorGetTypeAttributeType    `json:"type,omitempty"`
}

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError() *Error {
	this := Error{}
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Error) GetCode() (res ErrorGetCodeRetType) {
	res, _ = o.GetCodeOk()
	return
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetCodeOk() (ret ErrorGetCodeRetType, ok bool) {
	return getErrorGetCodeAttributeTypeOk(o.Code)
}

// HasCode returns a boolean if a field has been set.
func (o *Error) HasCode() bool {
	_, ok := o.GetCodeOk()
	return ok
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *Error) SetCode(v ErrorGetCodeRetType) {
	setErrorGetCodeAttributeType(&o.Code, v)
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *Error) GetFields() (res ErrorGetFieldsRetType) {
	res, _ = o.GetFieldsOk()
	return
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetFieldsOk() (ret ErrorGetFieldsRetType, ok bool) {
	return getErrorGetFieldsAttributeTypeOk(o.Fields)
}

// HasFields returns a boolean if a field has been set.
func (o *Error) HasFields() bool {
	_, ok := o.GetFieldsOk()
	return ok
}

// SetFields gets a reference to the given map[string][]string and assigns it to the Fields field.
func (o *Error) SetFields(v ErrorGetFieldsRetType) {
	setErrorGetFieldsAttributeType(&o.Fields, v)
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Error) GetMessage() (res ErrorGetMessageRetType) {
	res, _ = o.GetMessageOk()
	return
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (ret ErrorGetMessageRetType, ok bool) {
	return getErrorGetMessageAttributeTypeOk(o.Message)
}

// HasMessage returns a boolean if a field has been set.
func (o *Error) HasMessage() bool {
	_, ok := o.GetMessageOk()
	return ok
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Error) SetMessage(v ErrorGetMessageRetType) {
	setErrorGetMessageAttributeType(&o.Message, v)
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Error) GetType() (res ErrorGetTypeRetType) {
	res, _ = o.GetTypeOk()
	return
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetTypeOk() (ret ErrorGetTypeRetType, ok bool) {
	return getErrorGetTypeAttributeTypeOk(o.Type)
}

// HasType returns a boolean if a field has been set.
func (o *Error) HasType() bool {
	_, ok := o.GetTypeOk()
	return ok
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Error) SetType(v ErrorGetTypeRetType) {
	setErrorGetTypeAttributeType(&o.Type, v)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getErrorGetCodeAttributeTypeOk(o.Code); ok {
		toSerialize["Code"] = val
	}
	if val, ok := getErrorGetFieldsAttributeTypeOk(o.Fields); ok {
		toSerialize["Fields"] = val
	}
	if val, ok := getErrorGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	if val, ok := getErrorGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
