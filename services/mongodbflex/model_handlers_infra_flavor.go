/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the HandlersInfraFlavor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersInfraFlavor{}

/*
	types and functions for categories
*/

// isArray
type HandlersInfraFlavorGetCategoriesAttributeType = *[]string
type HandlersInfraFlavorGetCategoriesArgType = []string
type HandlersInfraFlavorGetCategoriesRetType = []string

func getHandlersInfraFlavorGetCategoriesAttributeTypeOk(arg HandlersInfraFlavorGetCategoriesAttributeType) (ret HandlersInfraFlavorGetCategoriesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHandlersInfraFlavorGetCategoriesAttributeType(arg *HandlersInfraFlavorGetCategoriesAttributeType, val HandlersInfraFlavorGetCategoriesRetType) {
	*arg = &val
}

/*
	types and functions for cpu
*/

// isInteger
type HandlersInfraFlavorGetCpuAttributeType = *int64
type HandlersInfraFlavorGetCpuArgType = int64
type HandlersInfraFlavorGetCpuRetType = int64

func getHandlersInfraFlavorGetCpuAttributeTypeOk(arg HandlersInfraFlavorGetCpuAttributeType) (ret HandlersInfraFlavorGetCpuRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHandlersInfraFlavorGetCpuAttributeType(arg *HandlersInfraFlavorGetCpuAttributeType, val HandlersInfraFlavorGetCpuRetType) {
	*arg = &val
}

/*
	types and functions for description
*/

// isNotNullableString
type HandlersInfraFlavorGetDescriptionAttributeType = *string

func getHandlersInfraFlavorGetDescriptionAttributeTypeOk(arg HandlersInfraFlavorGetDescriptionAttributeType) (ret HandlersInfraFlavorGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHandlersInfraFlavorGetDescriptionAttributeType(arg *HandlersInfraFlavorGetDescriptionAttributeType, val HandlersInfraFlavorGetDescriptionRetType) {
	*arg = &val
}

type HandlersInfraFlavorGetDescriptionArgType = string
type HandlersInfraFlavorGetDescriptionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type HandlersInfraFlavorGetIdAttributeType = *string

func getHandlersInfraFlavorGetIdAttributeTypeOk(arg HandlersInfraFlavorGetIdAttributeType) (ret HandlersInfraFlavorGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHandlersInfraFlavorGetIdAttributeType(arg *HandlersInfraFlavorGetIdAttributeType, val HandlersInfraFlavorGetIdRetType) {
	*arg = &val
}

type HandlersInfraFlavorGetIdArgType = string
type HandlersInfraFlavorGetIdRetType = string

/*
	types and functions for memory
*/

// isInteger
type HandlersInfraFlavorGetMemoryAttributeType = *int64
type HandlersInfraFlavorGetMemoryArgType = int64
type HandlersInfraFlavorGetMemoryRetType = int64

func getHandlersInfraFlavorGetMemoryAttributeTypeOk(arg HandlersInfraFlavorGetMemoryAttributeType) (ret HandlersInfraFlavorGetMemoryRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHandlersInfraFlavorGetMemoryAttributeType(arg *HandlersInfraFlavorGetMemoryAttributeType, val HandlersInfraFlavorGetMemoryRetType) {
	*arg = &val
}

// HandlersInfraFlavor struct for HandlersInfraFlavor
type HandlersInfraFlavor struct {
	Categories  HandlersInfraFlavorGetCategoriesAttributeType  `json:"categories,omitempty"`
	Cpu         HandlersInfraFlavorGetCpuAttributeType         `json:"cpu,omitempty"`
	Description HandlersInfraFlavorGetDescriptionAttributeType `json:"description,omitempty"`
	Id          HandlersInfraFlavorGetIdAttributeType          `json:"id,omitempty"`
	Memory      HandlersInfraFlavorGetMemoryAttributeType      `json:"memory,omitempty"`
}

// NewHandlersInfraFlavor instantiates a new HandlersInfraFlavor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersInfraFlavor() *HandlersInfraFlavor {
	this := HandlersInfraFlavor{}
	return &this
}

// NewHandlersInfraFlavorWithDefaults instantiates a new HandlersInfraFlavor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersInfraFlavorWithDefaults() *HandlersInfraFlavor {
	this := HandlersInfraFlavor{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetCategories() (res HandlersInfraFlavorGetCategoriesRetType) {
	res, _ = o.GetCategoriesOk()
	return
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetCategoriesOk() (ret HandlersInfraFlavorGetCategoriesRetType, ok bool) {
	return getHandlersInfraFlavorGetCategoriesAttributeTypeOk(o.Categories)
}

// HasCategories returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasCategories() bool {
	_, ok := o.GetCategoriesOk()
	return ok
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *HandlersInfraFlavor) SetCategories(v HandlersInfraFlavorGetCategoriesRetType) {
	setHandlersInfraFlavorGetCategoriesAttributeType(&o.Categories, v)
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetCpu() (res HandlersInfraFlavorGetCpuRetType) {
	res, _ = o.GetCpuOk()
	return
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetCpuOk() (ret HandlersInfraFlavorGetCpuRetType, ok bool) {
	return getHandlersInfraFlavorGetCpuAttributeTypeOk(o.Cpu)
}

// HasCpu returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasCpu() bool {
	_, ok := o.GetCpuOk()
	return ok
}

// SetCpu gets a reference to the given int64 and assigns it to the Cpu field.
func (o *HandlersInfraFlavor) SetCpu(v HandlersInfraFlavorGetCpuRetType) {
	setHandlersInfraFlavorGetCpuAttributeType(&o.Cpu, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetDescription() (res HandlersInfraFlavorGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetDescriptionOk() (ret HandlersInfraFlavorGetDescriptionRetType, ok bool) {
	return getHandlersInfraFlavorGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HandlersInfraFlavor) SetDescription(v HandlersInfraFlavorGetDescriptionRetType) {
	setHandlersInfraFlavorGetDescriptionAttributeType(&o.Description, v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetId() (res HandlersInfraFlavorGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetIdOk() (ret HandlersInfraFlavorGetIdRetType, ok bool) {
	return getHandlersInfraFlavorGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HandlersInfraFlavor) SetId(v HandlersInfraFlavorGetIdRetType) {
	setHandlersInfraFlavorGetIdAttributeType(&o.Id, v)
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetMemory() (res HandlersInfraFlavorGetMemoryRetType) {
	res, _ = o.GetMemoryOk()
	return
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetMemoryOk() (ret HandlersInfraFlavorGetMemoryRetType, ok bool) {
	return getHandlersInfraFlavorGetMemoryAttributeTypeOk(o.Memory)
}

// HasMemory returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasMemory() bool {
	_, ok := o.GetMemoryOk()
	return ok
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *HandlersInfraFlavor) SetMemory(v HandlersInfraFlavorGetMemoryRetType) {
	setHandlersInfraFlavorGetMemoryAttributeType(&o.Memory, v)
}

func (o HandlersInfraFlavor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHandlersInfraFlavorGetCategoriesAttributeTypeOk(o.Categories); ok {
		toSerialize["Categories"] = val
	}
	if val, ok := getHandlersInfraFlavorGetCpuAttributeTypeOk(o.Cpu); ok {
		toSerialize["Cpu"] = val
	}
	if val, ok := getHandlersInfraFlavorGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getHandlersInfraFlavorGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getHandlersInfraFlavorGetMemoryAttributeTypeOk(o.Memory); ok {
		toSerialize["Memory"] = val
	}
	return toSerialize, nil
}

type NullableHandlersInfraFlavor struct {
	value *HandlersInfraFlavor
	isSet bool
}

func (v NullableHandlersInfraFlavor) Get() *HandlersInfraFlavor {
	return v.value
}

func (v *NullableHandlersInfraFlavor) Set(val *HandlersInfraFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersInfraFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersInfraFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersInfraFlavor(val *HandlersInfraFlavor) *NullableHandlersInfraFlavor {
	return &NullableHandlersInfraFlavor{value: val, isSet: true}
}

func (v NullableHandlersInfraFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersInfraFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
