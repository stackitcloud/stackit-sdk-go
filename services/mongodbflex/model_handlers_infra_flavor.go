/*
STACKIT MongoDB Service API

This is the documentation for the STACKIT MongoDB Flex Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbflex

import (
	"encoding/json"
)

// checks if the HandlersInfraFlavor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersInfraFlavor{}

// HandlersInfraFlavor struct for HandlersInfraFlavor
type HandlersInfraFlavor struct {
	Categories  *[]string `json:"categories,omitempty"`
	Cpu         *int64    `json:"cpu,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Memory      *int64    `json:"memory,omitempty"`
}

// NewHandlersInfraFlavor instantiates a new HandlersInfraFlavor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersInfraFlavor() *HandlersInfraFlavor {
	this := HandlersInfraFlavor{}
	return &this
}

// NewHandlersInfraFlavorWithDefaults instantiates a new HandlersInfraFlavor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersInfraFlavorWithDefaults() *HandlersInfraFlavor {
	this := HandlersInfraFlavor{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetCategories() *[]string {
	if o == nil || IsNil(o.Categories) {
		var ret *[]string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetCategoriesOk() (*[]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *HandlersInfraFlavor) SetCategories(v *[]string) {
	o.Categories = v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetCpu() *int64 {
	if o == nil || IsNil(o.Cpu) {
		var ret *int64
		return ret
	}
	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetCpuOk() (*int64, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int64 and assigns it to the Cpu field.
func (o *HandlersInfraFlavor) SetCpu(v *int64) {
	o.Cpu = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HandlersInfraFlavor) SetDescription(v *string) {
	o.Description = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HandlersInfraFlavor) SetId(v *string) {
	o.Id = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *HandlersInfraFlavor) GetMemory() *int64 {
	if o == nil || IsNil(o.Memory) {
		var ret *int64
		return ret
	}
	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersInfraFlavor) GetMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *HandlersInfraFlavor) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *HandlersInfraFlavor) SetMemory(v *int64) {
	o.Memory = v
}

func (o HandlersInfraFlavor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	return toSerialize, nil
}

type NullableHandlersInfraFlavor struct {
	value *HandlersInfraFlavor
	isSet bool
}

func (v NullableHandlersInfraFlavor) Get() *HandlersInfraFlavor {
	return v.value
}

func (v *NullableHandlersInfraFlavor) Set(val *HandlersInfraFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersInfraFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersInfraFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersInfraFlavor(val *HandlersInfraFlavor) *NullableHandlersInfraFlavor {
	return &NullableHandlersInfraFlavor{value: val, isSet: true}
}

func (v NullableHandlersInfraFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersInfraFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
