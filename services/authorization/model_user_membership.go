/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorization

import (
	"encoding/json"
)

// checks if the UserMembership type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMembership{}

/*
	types and functions for resourceId
*/

// isNotNullableString
type UserMembershipGetResourceIdAttributeType = *string

func getUserMembershipGetResourceIdAttributeTypeOk(arg UserMembershipGetResourceIdAttributeType) (ret UserMembershipGetResourceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserMembershipGetResourceIdAttributeType(arg *UserMembershipGetResourceIdAttributeType, val UserMembershipGetResourceIdRetType) {
	*arg = &val
}

type UserMembershipGetResourceIdArgType = string
type UserMembershipGetResourceIdRetType = string

/*
	types and functions for resourceType
*/

// isNotNullableString
type UserMembershipGetResourceTypeAttributeType = *string

func getUserMembershipGetResourceTypeAttributeTypeOk(arg UserMembershipGetResourceTypeAttributeType) (ret UserMembershipGetResourceTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserMembershipGetResourceTypeAttributeType(arg *UserMembershipGetResourceTypeAttributeType, val UserMembershipGetResourceTypeRetType) {
	*arg = &val
}

type UserMembershipGetResourceTypeArgType = string
type UserMembershipGetResourceTypeRetType = string

/*
	types and functions for role
*/

// isNotNullableString
type UserMembershipGetRoleAttributeType = *string

func getUserMembershipGetRoleAttributeTypeOk(arg UserMembershipGetRoleAttributeType) (ret UserMembershipGetRoleRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserMembershipGetRoleAttributeType(arg *UserMembershipGetRoleAttributeType, val UserMembershipGetRoleRetType) {
	*arg = &val
}

type UserMembershipGetRoleArgType = string
type UserMembershipGetRoleRetType = string

/*
	types and functions for subject
*/

// isNotNullableString
type UserMembershipGetSubjectAttributeType = *string

func getUserMembershipGetSubjectAttributeTypeOk(arg UserMembershipGetSubjectAttributeType) (ret UserMembershipGetSubjectRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserMembershipGetSubjectAttributeType(arg *UserMembershipGetSubjectAttributeType, val UserMembershipGetSubjectRetType) {
	*arg = &val
}

type UserMembershipGetSubjectArgType = string
type UserMembershipGetSubjectRetType = string

// UserMembership struct for UserMembership
type UserMembership struct {
	// REQUIRED
	ResourceId UserMembershipGetResourceIdAttributeType `json:"resourceId" required:"true"`
	// REQUIRED
	ResourceType UserMembershipGetResourceTypeAttributeType `json:"resourceType" required:"true"`
	// REQUIRED
	Role UserMembershipGetRoleAttributeType `json:"role" required:"true"`
	// REQUIRED
	Subject UserMembershipGetSubjectAttributeType `json:"subject" required:"true"`
}

type _UserMembership UserMembership

// NewUserMembership instantiates a new UserMembership object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMembership(resourceId UserMembershipGetResourceIdArgType, resourceType UserMembershipGetResourceTypeArgType, role UserMembershipGetRoleArgType, subject UserMembershipGetSubjectArgType) *UserMembership {
	this := UserMembership{}
	setUserMembershipGetResourceIdAttributeType(&this.ResourceId, resourceId)
	setUserMembershipGetResourceTypeAttributeType(&this.ResourceType, resourceType)
	setUserMembershipGetRoleAttributeType(&this.Role, role)
	setUserMembershipGetSubjectAttributeType(&this.Subject, subject)
	return &this
}

// NewUserMembershipWithDefaults instantiates a new UserMembership object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMembershipWithDefaults() *UserMembership {
	this := UserMembership{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *UserMembership) GetResourceId() (ret UserMembershipGetResourceIdRetType) {
	ret, _ = o.GetResourceIdOk()
	return ret
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *UserMembership) GetResourceIdOk() (ret UserMembershipGetResourceIdRetType, ok bool) {
	return getUserMembershipGetResourceIdAttributeTypeOk(o.ResourceId)
}

// SetResourceId sets field value
func (o *UserMembership) SetResourceId(v UserMembershipGetResourceIdRetType) {
	setUserMembershipGetResourceIdAttributeType(&o.ResourceId, v)
}

// GetResourceType returns the ResourceType field value
func (o *UserMembership) GetResourceType() (ret UserMembershipGetResourceTypeRetType) {
	ret, _ = o.GetResourceTypeOk()
	return ret
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *UserMembership) GetResourceTypeOk() (ret UserMembershipGetResourceTypeRetType, ok bool) {
	return getUserMembershipGetResourceTypeAttributeTypeOk(o.ResourceType)
}

// SetResourceType sets field value
func (o *UserMembership) SetResourceType(v UserMembershipGetResourceTypeRetType) {
	setUserMembershipGetResourceTypeAttributeType(&o.ResourceType, v)
}

// GetRole returns the Role field value
func (o *UserMembership) GetRole() (ret UserMembershipGetRoleRetType) {
	ret, _ = o.GetRoleOk()
	return ret
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserMembership) GetRoleOk() (ret UserMembershipGetRoleRetType, ok bool) {
	return getUserMembershipGetRoleAttributeTypeOk(o.Role)
}

// SetRole sets field value
func (o *UserMembership) SetRole(v UserMembershipGetRoleRetType) {
	setUserMembershipGetRoleAttributeType(&o.Role, v)
}

// GetSubject returns the Subject field value
func (o *UserMembership) GetSubject() (ret UserMembershipGetSubjectRetType) {
	ret, _ = o.GetSubjectOk()
	return ret
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *UserMembership) GetSubjectOk() (ret UserMembershipGetSubjectRetType, ok bool) {
	return getUserMembershipGetSubjectAttributeTypeOk(o.Subject)
}

// SetSubject sets field value
func (o *UserMembership) SetSubject(v UserMembershipGetSubjectRetType) {
	setUserMembershipGetSubjectAttributeType(&o.Subject, v)
}

func (o UserMembership) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUserMembershipGetResourceIdAttributeTypeOk(o.ResourceId); ok {
		toSerialize["ResourceId"] = val
	}
	if val, ok := getUserMembershipGetResourceTypeAttributeTypeOk(o.ResourceType); ok {
		toSerialize["ResourceType"] = val
	}
	if val, ok := getUserMembershipGetRoleAttributeTypeOk(o.Role); ok {
		toSerialize["Role"] = val
	}
	if val, ok := getUserMembershipGetSubjectAttributeTypeOk(o.Subject); ok {
		toSerialize["Subject"] = val
	}
	return toSerialize, nil
}

type NullableUserMembership struct {
	value *UserMembership
	isSet bool
}

func (v NullableUserMembership) Get() *UserMembership {
	return v.value
}

func (v *NullableUserMembership) Set(val *UserMembership) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMembership) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMembership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMembership(val *UserMembership) *NullableUserMembership {
	return &NullableUserMembership{value: val, isSet: true}
}

func (v NullableUserMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMembership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
