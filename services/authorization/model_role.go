/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorization

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Role type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Role{}

/*
	types and functions for description
*/

// isNotNullableString
type RoleGetDescriptionAttributeType = *string

func getRoleGetDescriptionAttributeTypeOk(arg RoleGetDescriptionAttributeType) (ret RoleGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRoleGetDescriptionAttributeType(arg *RoleGetDescriptionAttributeType, val RoleGetDescriptionRetType) {
	*arg = &val
}

type RoleGetDescriptionArgType = string
type RoleGetDescriptionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type RoleGetIdAttributeType = *string

func getRoleGetIdAttributeTypeOk(arg RoleGetIdAttributeType) (ret RoleGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRoleGetIdAttributeType(arg *RoleGetIdAttributeType, val RoleGetIdRetType) {
	*arg = &val
}

type RoleGetIdArgType = string
type RoleGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type RoleGetNameAttributeType = *string

func getRoleGetNameAttributeTypeOk(arg RoleGetNameAttributeType) (ret RoleGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRoleGetNameAttributeType(arg *RoleGetNameAttributeType, val RoleGetNameRetType) {
	*arg = &val
}

type RoleGetNameArgType = string
type RoleGetNameRetType = string

/*
	types and functions for permissions
*/

// isArray
type RoleGetPermissionsAttributeType = *[]Permission
type RoleGetPermissionsArgType = []Permission
type RoleGetPermissionsRetType = []Permission

func getRoleGetPermissionsAttributeTypeOk(arg RoleGetPermissionsAttributeType) (ret RoleGetPermissionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRoleGetPermissionsAttributeType(arg *RoleGetPermissionsAttributeType, val RoleGetPermissionsRetType) {
	*arg = &val
}

// Role struct for Role
type Role struct {
	// REQUIRED
	Description RoleGetDescriptionAttributeType `json:"description"`
	Id          RoleGetIdAttributeType          `json:"id,omitempty" validate:"regexp=^([a-zA-Z0-9\\/_|\\\\-=+]{1,})$"`
	// REQUIRED
	Name RoleGetNameAttributeType `json:"name" validate:"regexp=^[a-z](?:[-.]?[a-z]){1,63}$"`
	// REQUIRED
	Permissions RoleGetPermissionsAttributeType `json:"permissions"`
}

type _Role Role

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole(description RoleGetDescriptionArgType, name RoleGetNameArgType, permissions RoleGetPermissionsArgType) *Role {
	this := Role{}
	setRoleGetDescriptionAttributeType(&this.Description, description)
	setRoleGetNameAttributeType(&this.Name, name)
	setRoleGetPermissionsAttributeType(&this.Permissions, permissions)
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetDescription returns the Description field value
func (o *Role) GetDescription() (ret RoleGetDescriptionRetType) {
	ret, _ = o.GetDescriptionOk()
	return ret
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Role) GetDescriptionOk() (ret RoleGetDescriptionRetType, ok bool) {
	return getRoleGetDescriptionAttributeTypeOk(o.Description)
}

// SetDescription sets field value
func (o *Role) SetDescription(v RoleGetDescriptionRetType) {
	setRoleGetDescriptionAttributeType(&o.Description, v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Role) GetId() (res RoleGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetIdOk() (ret RoleGetIdRetType, ok bool) {
	return getRoleGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *Role) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Role) SetId(v RoleGetIdRetType) {
	setRoleGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value
func (o *Role) GetName() (ret RoleGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Role) GetNameOk() (ret RoleGetNameRetType, ok bool) {
	return getRoleGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Role) SetName(v RoleGetNameRetType) {
	setRoleGetNameAttributeType(&o.Name, v)
}

// GetPermissions returns the Permissions field value
func (o *Role) GetPermissions() (ret RoleGetPermissionsRetType) {
	ret, _ = o.GetPermissionsOk()
	return ret
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *Role) GetPermissionsOk() (ret RoleGetPermissionsRetType, ok bool) {
	return getRoleGetPermissionsAttributeTypeOk(o.Permissions)
}

// SetPermissions sets field value
func (o *Role) SetPermissions(v RoleGetPermissionsRetType) {
	setRoleGetPermissionsAttributeType(&o.Permissions, v)
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Role) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getRoleGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getRoleGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getRoleGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getRoleGetPermissionsAttributeTypeOk(o.Permissions); ok {
		toSerialize["Permissions"] = val
	}
	return toSerialize, nil
}

func (o *Role) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"name",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRole := _Role{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRole)

	if err != nil {
		return err
	}

	*o = Role(varRole)

	return err
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
