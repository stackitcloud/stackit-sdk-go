/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorization

import (
	"encoding/json"
)

// checks if the ExistingPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExistingPermission{}

/*
	types and functions for description
*/

// isNotNullableString
type ExistingPermissionGetDescriptionAttributeType = *string

func getExistingPermissionGetDescriptionAttributeTypeOk(arg ExistingPermissionGetDescriptionAttributeType) (ret ExistingPermissionGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setExistingPermissionGetDescriptionAttributeType(arg *ExistingPermissionGetDescriptionAttributeType, val ExistingPermissionGetDescriptionRetType) {
	*arg = &val
}

type ExistingPermissionGetDescriptionArgType = string
type ExistingPermissionGetDescriptionRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type ExistingPermissionGetNameAttributeType = *string

func getExistingPermissionGetNameAttributeTypeOk(arg ExistingPermissionGetNameAttributeType) (ret ExistingPermissionGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setExistingPermissionGetNameAttributeType(arg *ExistingPermissionGetNameAttributeType, val ExistingPermissionGetNameRetType) {
	*arg = &val
}

type ExistingPermissionGetNameArgType = string
type ExistingPermissionGetNameRetType = string

// ExistingPermission struct for ExistingPermission
type ExistingPermission struct {
	// REQUIRED
	Description ExistingPermissionGetDescriptionAttributeType `json:"description" required:"true"`
	// REQUIRED
	Name ExistingPermissionGetNameAttributeType `json:"name" required:"true"`
}

type _ExistingPermission ExistingPermission

// NewExistingPermission instantiates a new ExistingPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExistingPermission(description ExistingPermissionGetDescriptionArgType, name ExistingPermissionGetNameArgType) *ExistingPermission {
	this := ExistingPermission{}
	setExistingPermissionGetDescriptionAttributeType(&this.Description, description)
	setExistingPermissionGetNameAttributeType(&this.Name, name)
	return &this
}

// NewExistingPermissionWithDefaults instantiates a new ExistingPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistingPermissionWithDefaults() *ExistingPermission {
	this := ExistingPermission{}
	return &this
}

// GetDescription returns the Description field value
func (o *ExistingPermission) GetDescription() (ret ExistingPermissionGetDescriptionRetType) {
	ret, _ = o.GetDescriptionOk()
	return ret
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ExistingPermission) GetDescriptionOk() (ret ExistingPermissionGetDescriptionRetType, ok bool) {
	return getExistingPermissionGetDescriptionAttributeTypeOk(o.Description)
}

// SetDescription sets field value
func (o *ExistingPermission) SetDescription(v ExistingPermissionGetDescriptionRetType) {
	setExistingPermissionGetDescriptionAttributeType(&o.Description, v)
}

// GetName returns the Name field value
func (o *ExistingPermission) GetName() (ret ExistingPermissionGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExistingPermission) GetNameOk() (ret ExistingPermissionGetNameRetType, ok bool) {
	return getExistingPermissionGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *ExistingPermission) SetName(v ExistingPermissionGetNameRetType) {
	setExistingPermissionGetNameAttributeType(&o.Name, v)
}

func (o ExistingPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getExistingPermissionGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getExistingPermissionGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullableExistingPermission struct {
	value *ExistingPermission
	isSet bool
}

func (v NullableExistingPermission) Get() *ExistingPermission {
	return v.value
}

func (v *NullableExistingPermission) Set(val *ExistingPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableExistingPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableExistingPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExistingPermission(val *ExistingPermission) *NullableExistingPermission {
	return &NullableExistingPermission{value: val, isSet: true}
}

func (v NullableExistingPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExistingPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
