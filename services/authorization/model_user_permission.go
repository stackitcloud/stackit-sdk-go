/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorization

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPermission{}

/*
	types and functions for permissions
*/

// isArray
type UserPermissionGetPermissionsAttributeType = *[]ExistingPermission
type UserPermissionGetPermissionsArgType = []ExistingPermission
type UserPermissionGetPermissionsRetType = []ExistingPermission

func getUserPermissionGetPermissionsAttributeTypeOk(arg UserPermissionGetPermissionsAttributeType) (ret UserPermissionGetPermissionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserPermissionGetPermissionsAttributeType(arg *UserPermissionGetPermissionsAttributeType, val UserPermissionGetPermissionsRetType) {
	*arg = &val
}

/*
	types and functions for resourceId
*/

// isNotNullableString
type UserPermissionGetResourceIdAttributeType = *string

func getUserPermissionGetResourceIdAttributeTypeOk(arg UserPermissionGetResourceIdAttributeType) (ret UserPermissionGetResourceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserPermissionGetResourceIdAttributeType(arg *UserPermissionGetResourceIdAttributeType, val UserPermissionGetResourceIdRetType) {
	*arg = &val
}

type UserPermissionGetResourceIdArgType = string
type UserPermissionGetResourceIdRetType = string

/*
	types and functions for resourceType
*/

// isNotNullableString
type UserPermissionGetResourceTypeAttributeType = *string

func getUserPermissionGetResourceTypeAttributeTypeOk(arg UserPermissionGetResourceTypeAttributeType) (ret UserPermissionGetResourceTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserPermissionGetResourceTypeAttributeType(arg *UserPermissionGetResourceTypeAttributeType, val UserPermissionGetResourceTypeRetType) {
	*arg = &val
}

type UserPermissionGetResourceTypeArgType = string
type UserPermissionGetResourceTypeRetType = string

// UserPermission struct for UserPermission
type UserPermission struct {
	// REQUIRED
	Permissions UserPermissionGetPermissionsAttributeType `json:"permissions"`
	// REQUIRED
	ResourceId UserPermissionGetResourceIdAttributeType `json:"resourceId" validate:"regexp=^([a-zA-Z0-9\\/_|\\\\-=+@.]{1,})$"`
	// REQUIRED
	ResourceType UserPermissionGetResourceTypeAttributeType `json:"resourceType" validate:"regexp=^[a-z](?:-?[a-z]){1,63}$"`
}

type _UserPermission UserPermission

// NewUserPermission instantiates a new UserPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPermission(permissions UserPermissionGetPermissionsArgType, resourceId UserPermissionGetResourceIdArgType, resourceType UserPermissionGetResourceTypeArgType) *UserPermission {
	this := UserPermission{}
	setUserPermissionGetPermissionsAttributeType(&this.Permissions, permissions)
	setUserPermissionGetResourceIdAttributeType(&this.ResourceId, resourceId)
	setUserPermissionGetResourceTypeAttributeType(&this.ResourceType, resourceType)
	return &this
}

// NewUserPermissionWithDefaults instantiates a new UserPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPermissionWithDefaults() *UserPermission {
	this := UserPermission{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *UserPermission) GetPermissions() (ret UserPermissionGetPermissionsRetType) {
	ret, _ = o.GetPermissionsOk()
	return ret
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *UserPermission) GetPermissionsOk() (ret UserPermissionGetPermissionsRetType, ok bool) {
	return getUserPermissionGetPermissionsAttributeTypeOk(o.Permissions)
}

// SetPermissions sets field value
func (o *UserPermission) SetPermissions(v UserPermissionGetPermissionsRetType) {
	setUserPermissionGetPermissionsAttributeType(&o.Permissions, v)
}

// GetResourceId returns the ResourceId field value
func (o *UserPermission) GetResourceId() (ret UserPermissionGetResourceIdRetType) {
	ret, _ = o.GetResourceIdOk()
	return ret
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *UserPermission) GetResourceIdOk() (ret UserPermissionGetResourceIdRetType, ok bool) {
	return getUserPermissionGetResourceIdAttributeTypeOk(o.ResourceId)
}

// SetResourceId sets field value
func (o *UserPermission) SetResourceId(v UserPermissionGetResourceIdRetType) {
	setUserPermissionGetResourceIdAttributeType(&o.ResourceId, v)
}

// GetResourceType returns the ResourceType field value
func (o *UserPermission) GetResourceType() (ret UserPermissionGetResourceTypeRetType) {
	ret, _ = o.GetResourceTypeOk()
	return ret
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *UserPermission) GetResourceTypeOk() (ret UserPermissionGetResourceTypeRetType, ok bool) {
	return getUserPermissionGetResourceTypeAttributeTypeOk(o.ResourceType)
}

// SetResourceType sets field value
func (o *UserPermission) SetResourceType(v UserPermissionGetResourceTypeRetType) {
	setUserPermissionGetResourceTypeAttributeType(&o.ResourceType, v)
}

func (o UserPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUserPermissionGetPermissionsAttributeTypeOk(o.Permissions); ok {
		toSerialize["Permissions"] = val
	}
	if val, ok := getUserPermissionGetResourceIdAttributeTypeOk(o.ResourceId); ok {
		toSerialize["ResourceId"] = val
	}
	if val, ok := getUserPermissionGetResourceTypeAttributeTypeOk(o.ResourceType); ok {
		toSerialize["ResourceType"] = val
	}
	return toSerialize, nil
}

func (o *UserPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
		"resourceId",
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPermission := _UserPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPermission)

	if err != nil {
		return err
	}

	*o = UserPermission(varUserPermission)

	return err
}

type NullableUserPermission struct {
	value *UserPermission
	isSet bool
}

func (v NullableUserPermission) Get() *UserPermission {
	return v.value
}

func (v *NullableUserPermission) Set(val *UserPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPermission(val *UserPermission) *NullableUserPermission {
	return &NullableUserPermission{value: val, isSet: true}
}

func (v NullableUserPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
