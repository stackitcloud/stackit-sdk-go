/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorization

import (
	"encoding/json"
)

// checks if the AssignableSubject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignableSubject{}

/*
	types and functions for displayName
*/

// isNotNullableString
type AssignableSubjectGetDisplayNameAttributeType = *string

func getAssignableSubjectGetDisplayNameAttributeTypeOk(arg AssignableSubjectGetDisplayNameAttributeType) (ret AssignableSubjectGetDisplayNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAssignableSubjectGetDisplayNameAttributeType(arg *AssignableSubjectGetDisplayNameAttributeType, val AssignableSubjectGetDisplayNameRetType) {
	*arg = &val
}

type AssignableSubjectGetDisplayNameArgType = string
type AssignableSubjectGetDisplayNameRetType = string

/*
	types and functions for subject
*/

// isNotNullableString
type AssignableSubjectGetSubjectAttributeType = *string

func getAssignableSubjectGetSubjectAttributeTypeOk(arg AssignableSubjectGetSubjectAttributeType) (ret AssignableSubjectGetSubjectRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAssignableSubjectGetSubjectAttributeType(arg *AssignableSubjectGetSubjectAttributeType, val AssignableSubjectGetSubjectRetType) {
	*arg = &val
}

type AssignableSubjectGetSubjectArgType = string
type AssignableSubjectGetSubjectRetType = string

// AssignableSubject struct for AssignableSubject
type AssignableSubject struct {
	DisplayName AssignableSubjectGetDisplayNameAttributeType `json:"displayName,omitempty"`
	// REQUIRED
	Subject AssignableSubjectGetSubjectAttributeType `json:"subject" required:"true"`
}

type _AssignableSubject AssignableSubject

// NewAssignableSubject instantiates a new AssignableSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignableSubject(subject AssignableSubjectGetSubjectArgType) *AssignableSubject {
	this := AssignableSubject{}
	setAssignableSubjectGetSubjectAttributeType(&this.Subject, subject)
	return &this
}

// NewAssignableSubjectWithDefaults instantiates a new AssignableSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignableSubjectWithDefaults() *AssignableSubject {
	this := AssignableSubject{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AssignableSubject) GetDisplayName() (res AssignableSubjectGetDisplayNameRetType) {
	res, _ = o.GetDisplayNameOk()
	return
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignableSubject) GetDisplayNameOk() (ret AssignableSubjectGetDisplayNameRetType, ok bool) {
	return getAssignableSubjectGetDisplayNameAttributeTypeOk(o.DisplayName)
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AssignableSubject) HasDisplayName() bool {
	_, ok := o.GetDisplayNameOk()
	return ok
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AssignableSubject) SetDisplayName(v AssignableSubjectGetDisplayNameRetType) {
	setAssignableSubjectGetDisplayNameAttributeType(&o.DisplayName, v)
}

// GetSubject returns the Subject field value
func (o *AssignableSubject) GetSubject() (ret AssignableSubjectGetSubjectRetType) {
	ret, _ = o.GetSubjectOk()
	return ret
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *AssignableSubject) GetSubjectOk() (ret AssignableSubjectGetSubjectRetType, ok bool) {
	return getAssignableSubjectGetSubjectAttributeTypeOk(o.Subject)
}

// SetSubject sets field value
func (o *AssignableSubject) SetSubject(v AssignableSubjectGetSubjectRetType) {
	setAssignableSubjectGetSubjectAttributeType(&o.Subject, v)
}

func (o AssignableSubject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAssignableSubjectGetDisplayNameAttributeTypeOk(o.DisplayName); ok {
		toSerialize["DisplayName"] = val
	}
	if val, ok := getAssignableSubjectGetSubjectAttributeTypeOk(o.Subject); ok {
		toSerialize["Subject"] = val
	}
	return toSerialize, nil
}

type NullableAssignableSubject struct {
	value *AssignableSubject
	isSet bool
}

func (v NullableAssignableSubject) Get() *AssignableSubject {
	return v.value
}

func (v *NullableAssignableSubject) Set(val *AssignableSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignableSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignableSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignableSubject(val *AssignableSubject) *NullableAssignableSubject {
	return &NullableAssignableSubject{value: val, isSet: true}
}

func (v NullableAssignableSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignableSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
