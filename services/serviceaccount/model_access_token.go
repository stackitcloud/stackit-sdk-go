/*
Service Account API

API to manage Service Accounts and their Access Tokens.  ### System for Cross-domain Identity Management (SCIM) Service Account Service offers SCIM APIs to query state. The SCIM protocol was created as standard for  automating the exchange of user identity information between identity domains, or IT systems. Service accounts  are be handled as indentites similar to SCIM users. A custom SCIM schema has been created: `/ServiceAccounts`  #### Syntax ##### Attribute operators | OPERATOR | DESCRIPTION              | |----------|--------------------------| | eq       | equal                    | | ne       | not equal                | | co       | contains                 | | sw       | starts with              | | ew       | ends with                |  ##### Logical operators | OPERATOR | DESCRIPTION              | |----------|--------------------------| | and      | logical \"and\"            | | or       | logical \"or\"             |  ##### Grouping operators | OPERATOR | DESCRIPTION              | |----------|--------------------------| | ()       | precending grouping      |  ##### Example ``` filter=email eq \"my-service-account-aBc2defg@sa.stackit.cloud\" filter=email ne \"my-service-account-aBc2defg@sa.stackit.cloud\" filter=email co \"my-service-account\" filter=name sw \"my\" filter=name ew \"account\" filter=email co \"my-service-account\" and name sw \"my\" filter=email co \"my-service-account\" and (name sw \"my\" or name ew \"account\") ```  #### Sorting  > Sorting is optional  | PARAMETER | DESCRIPTION                          | |-----------|--------------------------------------| | sortBy    | attribute response is ordered by     | | sortOrder | 'ASCENDING' (default) or 'DESCENDING'|  #### Pagination  | PARAMETER    | DESCRIPTION                                  | |--------------|----------------------------------------------| | startIndex   | index of first query result, default: 1      | | count        | maximum number of query results, default: 100|

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceaccount

import (
	"encoding/json"
	"time"
)

// checks if the AccessToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessToken{}

// AccessToken Contains token metadata and actual token.
type AccessToken struct {
	// Newly created access tokens are valid, and can be revoked if needed.
	// REQUIRED
	Active *bool `json:"active"`
	// Creation time of the access token.
	// REQUIRED
	CreatedAt *time.Time `json:"createdAt"`
	// Unique ID of the access token. Also used as JTI field.
	// REQUIRED
	Id *string `json:"id"`
	// The access token in JWT format. Use this with `Bearer` prefix for API calls. Store it, as it is not recoverable later.
	// REQUIRED
	Token *string `json:"token"`
	// Approximate expiration time of the access token. Check the JWT for actual validity date.
	// REQUIRED
	ValidUntil *time.Time `json:"validUntil"`
}

type _AccessToken AccessToken

// NewAccessToken instantiates a new AccessToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessToken(active *bool, createdAt *time.Time, id *string, token *string, validUntil *time.Time) *AccessToken {
	this := AccessToken{}
	this.Active = active
	this.CreatedAt = createdAt
	this.Id = id
	this.Token = token
	this.ValidUntil = validUntil
	return &this
}

// NewAccessTokenWithDefaults instantiates a new AccessToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenWithDefaults() *AccessToken {
	this := AccessToken{}
	return &this
}

// GetActive returns the Active field value
func (o *AccessToken) GetActive() *bool {
	if o == nil || IsNil(o.Active) {
		var ret *bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *AccessToken) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active, true
}

// SetActive sets field value
func (o *AccessToken) SetActive(v *bool) {
	o.Active = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AccessToken) GetCreatedAt() *time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret *time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AccessToken) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AccessToken) SetCreatedAt(v *time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *AccessToken) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccessToken) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *AccessToken) SetId(v *string) {
	o.Id = v
}

// GetToken returns the Token field value
func (o *AccessToken) GetToken() *string {
	if o == nil || IsNil(o.Token) {
		var ret *string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *AccessToken) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token, true
}

// SetToken sets field value
func (o *AccessToken) SetToken(v *string) {
	o.Token = v
}

// GetValidUntil returns the ValidUntil field value
func (o *AccessToken) GetValidUntil() *time.Time {
	if o == nil || IsNil(o.ValidUntil) {
		var ret *time.Time
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *AccessToken) GetValidUntilOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *AccessToken) SetValidUntil(v *time.Time) {
	o.ValidUntil = v
}

func (o AccessToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["token"] = o.Token
	toSerialize["validUntil"] = o.ValidUntil
	return toSerialize, nil
}

type NullableAccessToken struct {
	value *AccessToken
	isSet bool
}

func (v NullableAccessToken) Get() *AccessToken {
	return v.value
}

func (v *NullableAccessToken) Set(val *AccessToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessToken(val *AccessToken) *NullableAccessToken {
	return &NullableAccessToken{value: val, isSet: true}
}

func (v NullableAccessToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
