/*
STACKIT Server Backup Management API

API endpoints for Server Backup Operations on STACKIT Servers.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverbackup

import (
	"encoding/json"
)

// checks if the EnableServiceResourcePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableServiceResourcePayload{}

/*
	types and functions for backupPolicyId
*/

// isNotNullableString
type EnableServiceResourcePayloadGetBackupPolicyIdAttributeType = *string

func getEnableServiceResourcePayloadGetBackupPolicyIdAttributeTypeOk(arg EnableServiceResourcePayloadGetBackupPolicyIdAttributeType) (ret EnableServiceResourcePayloadGetBackupPolicyIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setEnableServiceResourcePayloadGetBackupPolicyIdAttributeType(arg *EnableServiceResourcePayloadGetBackupPolicyIdAttributeType, val EnableServiceResourcePayloadGetBackupPolicyIdRetType) {
	*arg = &val
}

type EnableServiceResourcePayloadGetBackupPolicyIdArgType = string
type EnableServiceResourcePayloadGetBackupPolicyIdRetType = string

// EnableServiceResourcePayload struct for EnableServiceResourcePayload
type EnableServiceResourcePayload struct {
	BackupPolicyId EnableServiceResourcePayloadGetBackupPolicyIdAttributeType `json:"backupPolicyId,omitempty"`
}

// NewEnableServiceResourcePayload instantiates a new EnableServiceResourcePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableServiceResourcePayload() *EnableServiceResourcePayload {
	this := EnableServiceResourcePayload{}
	return &this
}

// NewEnableServiceResourcePayloadWithDefaults instantiates a new EnableServiceResourcePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableServiceResourcePayloadWithDefaults() *EnableServiceResourcePayload {
	this := EnableServiceResourcePayload{}
	return &this
}

// GetBackupPolicyId returns the BackupPolicyId field value if set, zero value otherwise.
func (o *EnableServiceResourcePayload) GetBackupPolicyId() (res EnableServiceResourcePayloadGetBackupPolicyIdRetType) {
	res, _ = o.GetBackupPolicyIdOk()
	return
}

// GetBackupPolicyIdOk returns a tuple with the BackupPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableServiceResourcePayload) GetBackupPolicyIdOk() (ret EnableServiceResourcePayloadGetBackupPolicyIdRetType, ok bool) {
	return getEnableServiceResourcePayloadGetBackupPolicyIdAttributeTypeOk(o.BackupPolicyId)
}

// HasBackupPolicyId returns a boolean if a field has been set.
func (o *EnableServiceResourcePayload) HasBackupPolicyId() bool {
	_, ok := o.GetBackupPolicyIdOk()
	return ok
}

// SetBackupPolicyId gets a reference to the given string and assigns it to the BackupPolicyId field.
func (o *EnableServiceResourcePayload) SetBackupPolicyId(v EnableServiceResourcePayloadGetBackupPolicyIdRetType) {
	setEnableServiceResourcePayloadGetBackupPolicyIdAttributeType(&o.BackupPolicyId, v)
}

func (o EnableServiceResourcePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getEnableServiceResourcePayloadGetBackupPolicyIdAttributeTypeOk(o.BackupPolicyId); ok {
		toSerialize["BackupPolicyId"] = val
	}
	return toSerialize, nil
}

type NullableEnableServiceResourcePayload struct {
	value *EnableServiceResourcePayload
	isSet bool
}

func (v NullableEnableServiceResourcePayload) Get() *EnableServiceResourcePayload {
	return v.value
}

func (v *NullableEnableServiceResourcePayload) Set(val *EnableServiceResourcePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableServiceResourcePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableServiceResourcePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableServiceResourcePayload(val *EnableServiceResourcePayload) *NullableEnableServiceResourcePayload {
	return &NullableEnableServiceResourcePayload{value: val, isSet: true}
}

func (v NullableEnableServiceResourcePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableServiceResourcePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
