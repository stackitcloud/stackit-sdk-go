/*
STACKIT Server Backup Management API

API endpoints for Server Backup Operations on STACKIT Servers.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverbackup

import (
	"encoding/json"
	"fmt"
)

// checks if the Backup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Backup{}

/*
	types and functions for createdAt
*/

// isNotNullableString
type BackupGetCreatedAtAttributeType = *string

func getBackupGetCreatedAtAttributeTypeOk(arg BackupGetCreatedAtAttributeType) (ret BackupGetCreatedAtRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetCreatedAtAttributeType(arg *BackupGetCreatedAtAttributeType, val BackupGetCreatedAtRetType) {
	*arg = &val
}

type BackupGetCreatedAtArgType = string
type BackupGetCreatedAtRetType = string

/*
	types and functions for expireAt
*/

// isNotNullableString
type BackupGetExpireAtAttributeType = *string

func getBackupGetExpireAtAttributeTypeOk(arg BackupGetExpireAtAttributeType) (ret BackupGetExpireAtRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetExpireAtAttributeType(arg *BackupGetExpireAtAttributeType, val BackupGetExpireAtRetType) {
	*arg = &val
}

type BackupGetExpireAtArgType = string
type BackupGetExpireAtRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type BackupGetIdAttributeType = *string

func getBackupGetIdAttributeTypeOk(arg BackupGetIdAttributeType) (ret BackupGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetIdAttributeType(arg *BackupGetIdAttributeType, val BackupGetIdRetType) {
	*arg = &val
}

type BackupGetIdArgType = string
type BackupGetIdRetType = string

/*
	types and functions for lastRestoredAt
*/

// isNotNullableString
type BackupGetLastRestoredAtAttributeType = *string

func getBackupGetLastRestoredAtAttributeTypeOk(arg BackupGetLastRestoredAtAttributeType) (ret BackupGetLastRestoredAtRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetLastRestoredAtAttributeType(arg *BackupGetLastRestoredAtAttributeType, val BackupGetLastRestoredAtRetType) {
	*arg = &val
}

type BackupGetLastRestoredAtArgType = string
type BackupGetLastRestoredAtRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type BackupGetNameAttributeType = *string

func getBackupGetNameAttributeTypeOk(arg BackupGetNameAttributeType) (ret BackupGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetNameAttributeType(arg *BackupGetNameAttributeType, val BackupGetNameRetType) {
	*arg = &val
}

type BackupGetNameArgType = string
type BackupGetNameRetType = string

/*
	types and functions for size
*/

// isInteger
type BackupGetSizeAttributeType = *int64
type BackupGetSizeArgType = int64
type BackupGetSizeRetType = int64

func getBackupGetSizeAttributeTypeOk(arg BackupGetSizeAttributeType) (ret BackupGetSizeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetSizeAttributeType(arg *BackupGetSizeAttributeType, val BackupGetSizeRetType) {
	*arg = &val
}

/*
	types and functions for status
*/

// isEnum

// BackupStatus the model 'Backup'
type BackupStatus string

// List of Status
const (
	BACKUPSTATUS_CREATING       BackupStatus = "creating"
	BACKUPSTATUS_AVAILABLE      BackupStatus = "available"
	BACKUPSTATUS_DELETING       BackupStatus = "deleting"
	BACKUPSTATUS_ERROR          BackupStatus = "error"
	BACKUPSTATUS_RESTORING      BackupStatus = "restoring"
	BACKUPSTATUS_ERROR_DELETING BackupStatus = "error_deleting"
	BACKUPSTATUS_BACKING_UP     BackupStatus = "backing up"
	BACKUPSTATUS_INCONSISTENT   BackupStatus = "inconsistent"
	BACKUPSTATUS_ERROR_CREATING BackupStatus = "error-creating"
)

// All allowed values of Backup enum
var AllowedBackupStatusEnumValues = []BackupStatus{
	"creating",
	"available",
	"deleting",
	"error",
	"restoring",
	"error_deleting",
	"backing up",
	"inconsistent",
	"error-creating",
}

func (v *BackupStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := BackupStatus(value)
	for _, existing := range AllowedBackupStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Backup", value)
}

// NewBackupStatusFromValue returns a pointer to a valid BackupStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupStatusFromValue(v string) (*BackupStatus, error) {
	ev := BackupStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupStatus: valid values are %v", v, AllowedBackupStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupStatus) IsValid() bool {
	for _, existing := range AllowedBackupStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusStatus value
func (v BackupStatus) Ptr() *BackupStatus {
	return &v
}

type NullableBackupStatus struct {
	value *BackupStatus
	isSet bool
}

func (v NullableBackupStatus) Get() *BackupStatus {
	return v.value
}

func (v *NullableBackupStatus) Set(val *BackupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStatus(val *BackupStatus) *NullableBackupStatus {
	return &NullableBackupStatus{value: val, isSet: true}
}

func (v NullableBackupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type BackupGetStatusAttributeType = *BackupStatus
type BackupGetStatusArgType = BackupStatus
type BackupGetStatusRetType = BackupStatus

func getBackupGetStatusAttributeTypeOk(arg BackupGetStatusAttributeType) (ret BackupGetStatusRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetStatusAttributeType(arg *BackupGetStatusAttributeType, val BackupGetStatusRetType) {
	*arg = &val
}

/*
	types and functions for volumeBackups
*/

// isArray
type BackupGetVolumeBackupsAttributeType = *[]BackupVolumeBackupsInner
type BackupGetVolumeBackupsArgType = []BackupVolumeBackupsInner
type BackupGetVolumeBackupsRetType = []BackupVolumeBackupsInner

func getBackupGetVolumeBackupsAttributeTypeOk(arg BackupGetVolumeBackupsAttributeType) (ret BackupGetVolumeBackupsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBackupGetVolumeBackupsAttributeType(arg *BackupGetVolumeBackupsAttributeType, val BackupGetVolumeBackupsRetType) {
	*arg = &val
}

// Backup struct for Backup
type Backup struct {
	// REQUIRED
	CreatedAt BackupGetCreatedAtAttributeType `json:"createdAt"`
	// REQUIRED
	ExpireAt BackupGetExpireAtAttributeType `json:"expireAt"`
	// REQUIRED
	Id             BackupGetIdAttributeType             `json:"id"`
	LastRestoredAt BackupGetLastRestoredAtAttributeType `json:"lastRestoredAt,omitempty"`
	// REQUIRED
	Name BackupGetNameAttributeType `json:"name"`
	// Can be cast to int32 without loss of precision.
	Size BackupGetSizeAttributeType `json:"size,omitempty"`
	// REQUIRED
	Status        BackupGetStatusAttributeType        `json:"status"`
	VolumeBackups BackupGetVolumeBackupsAttributeType `json:"volumeBackups,omitempty"`
}

type _Backup Backup

// NewBackup instantiates a new Backup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackup(createdAt BackupGetCreatedAtArgType, expireAt BackupGetExpireAtArgType, id BackupGetIdArgType, name BackupGetNameArgType, status BackupGetStatusArgType) *Backup {
	this := Backup{}
	setBackupGetCreatedAtAttributeType(&this.CreatedAt, createdAt)
	setBackupGetExpireAtAttributeType(&this.ExpireAt, expireAt)
	setBackupGetIdAttributeType(&this.Id, id)
	setBackupGetNameAttributeType(&this.Name, name)
	setBackupGetStatusAttributeType(&this.Status, status)
	return &this
}

// NewBackupWithDefaults instantiates a new Backup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupWithDefaults() *Backup {
	this := Backup{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *Backup) GetCreatedAt() (ret BackupGetCreatedAtRetType) {
	ret, _ = o.GetCreatedAtOk()
	return ret
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Backup) GetCreatedAtOk() (ret BackupGetCreatedAtRetType, ok bool) {
	return getBackupGetCreatedAtAttributeTypeOk(o.CreatedAt)
}

// SetCreatedAt sets field value
func (o *Backup) SetCreatedAt(v BackupGetCreatedAtRetType) {
	setBackupGetCreatedAtAttributeType(&o.CreatedAt, v)
}

// GetExpireAt returns the ExpireAt field value
func (o *Backup) GetExpireAt() (ret BackupGetExpireAtRetType) {
	ret, _ = o.GetExpireAtOk()
	return ret
}

// GetExpireAtOk returns a tuple with the ExpireAt field value
// and a boolean to check if the value has been set.
func (o *Backup) GetExpireAtOk() (ret BackupGetExpireAtRetType, ok bool) {
	return getBackupGetExpireAtAttributeTypeOk(o.ExpireAt)
}

// SetExpireAt sets field value
func (o *Backup) SetExpireAt(v BackupGetExpireAtRetType) {
	setBackupGetExpireAtAttributeType(&o.ExpireAt, v)
}

// GetId returns the Id field value
func (o *Backup) GetId() (ret BackupGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Backup) GetIdOk() (ret BackupGetIdRetType, ok bool) {
	return getBackupGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Backup) SetId(v BackupGetIdRetType) {
	setBackupGetIdAttributeType(&o.Id, v)
}

// GetLastRestoredAt returns the LastRestoredAt field value if set, zero value otherwise.
func (o *Backup) GetLastRestoredAt() (res BackupGetLastRestoredAtRetType) {
	res, _ = o.GetLastRestoredAtOk()
	return
}

// GetLastRestoredAtOk returns a tuple with the LastRestoredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetLastRestoredAtOk() (ret BackupGetLastRestoredAtRetType, ok bool) {
	return getBackupGetLastRestoredAtAttributeTypeOk(o.LastRestoredAt)
}

// HasLastRestoredAt returns a boolean if a field has been set.
func (o *Backup) HasLastRestoredAt() bool {
	_, ok := o.GetLastRestoredAtOk()
	return ok
}

// SetLastRestoredAt gets a reference to the given string and assigns it to the LastRestoredAt field.
func (o *Backup) SetLastRestoredAt(v BackupGetLastRestoredAtRetType) {
	setBackupGetLastRestoredAtAttributeType(&o.LastRestoredAt, v)
}

// GetName returns the Name field value
func (o *Backup) GetName() (ret BackupGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Backup) GetNameOk() (ret BackupGetNameRetType, ok bool) {
	return getBackupGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Backup) SetName(v BackupGetNameRetType) {
	setBackupGetNameAttributeType(&o.Name, v)
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Backup) GetSize() (res BackupGetSizeRetType) {
	res, _ = o.GetSizeOk()
	return
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetSizeOk() (ret BackupGetSizeRetType, ok bool) {
	return getBackupGetSizeAttributeTypeOk(o.Size)
}

// HasSize returns a boolean if a field has been set.
func (o *Backup) HasSize() bool {
	_, ok := o.GetSizeOk()
	return ok
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Backup) SetSize(v BackupGetSizeRetType) {
	setBackupGetSizeAttributeType(&o.Size, v)
}

// GetStatus returns the Status field value
func (o *Backup) GetStatus() (ret BackupGetStatusRetType) {
	ret, _ = o.GetStatusOk()
	return ret
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Backup) GetStatusOk() (ret BackupGetStatusRetType, ok bool) {
	return getBackupGetStatusAttributeTypeOk(o.Status)
}

// SetStatus sets field value
func (o *Backup) SetStatus(v BackupGetStatusRetType) {
	setBackupGetStatusAttributeType(&o.Status, v)
}

// GetVolumeBackups returns the VolumeBackups field value if set, zero value otherwise.
func (o *Backup) GetVolumeBackups() (res BackupGetVolumeBackupsRetType) {
	res, _ = o.GetVolumeBackupsOk()
	return
}

// GetVolumeBackupsOk returns a tuple with the VolumeBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetVolumeBackupsOk() (ret BackupGetVolumeBackupsRetType, ok bool) {
	return getBackupGetVolumeBackupsAttributeTypeOk(o.VolumeBackups)
}

// HasVolumeBackups returns a boolean if a field has been set.
func (o *Backup) HasVolumeBackups() bool {
	_, ok := o.GetVolumeBackupsOk()
	return ok
}

// SetVolumeBackups gets a reference to the given []BackupVolumeBackupsInner and assigns it to the VolumeBackups field.
func (o *Backup) SetVolumeBackups(v BackupGetVolumeBackupsRetType) {
	setBackupGetVolumeBackupsAttributeType(&o.VolumeBackups, v)
}

func (o Backup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getBackupGetCreatedAtAttributeTypeOk(o.CreatedAt); ok {
		toSerialize["CreatedAt"] = val
	}
	if val, ok := getBackupGetExpireAtAttributeTypeOk(o.ExpireAt); ok {
		toSerialize["ExpireAt"] = val
	}
	if val, ok := getBackupGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getBackupGetLastRestoredAtAttributeTypeOk(o.LastRestoredAt); ok {
		toSerialize["LastRestoredAt"] = val
	}
	if val, ok := getBackupGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getBackupGetSizeAttributeTypeOk(o.Size); ok {
		toSerialize["Size"] = val
	}
	if val, ok := getBackupGetStatusAttributeTypeOk(o.Status); ok {
		toSerialize["Status"] = val
	}
	if val, ok := getBackupGetVolumeBackupsAttributeTypeOk(o.VolumeBackups); ok {
		toSerialize["VolumeBackups"] = val
	}
	return toSerialize, nil
}

type NullableBackup struct {
	value *Backup
	isSet bool
}

func (v NullableBackup) Get() *Backup {
	return v.value
}

func (v *NullableBackup) Set(val *Backup) {
	v.value = val
	v.isSet = true
}

func (v NullableBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackup(val *Backup) *NullableBackup {
	return &NullableBackup{value: val, isSet: true}
}

func (v NullableBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
