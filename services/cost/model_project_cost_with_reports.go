/*
STACKIT Cost API

The cost API provides detailed reports on the costs for a customer or project over a certain amount of time

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cost

import (
	"encoding/json"
)

// checks if the ProjectCostWithReports type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCostWithReports{}

/*
	types and functions for customerAccountId
*/

// isNotNullableString
type ProjectCostWithReportsGetCustomerAccountIdAttributeType = *string

func getProjectCostWithReportsGetCustomerAccountIdAttributeTypeOk(arg ProjectCostWithReportsGetCustomerAccountIdAttributeType) (ret ProjectCostWithReportsGetCustomerAccountIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectCostWithReportsGetCustomerAccountIdAttributeType(arg *ProjectCostWithReportsGetCustomerAccountIdAttributeType, val ProjectCostWithReportsGetCustomerAccountIdRetType) {
	*arg = &val
}

type ProjectCostWithReportsGetCustomerAccountIdArgType = string
type ProjectCostWithReportsGetCustomerAccountIdRetType = string

/*
	types and functions for projectId
*/

// isNotNullableString
type ProjectCostWithReportsGetProjectIdAttributeType = *string

func getProjectCostWithReportsGetProjectIdAttributeTypeOk(arg ProjectCostWithReportsGetProjectIdAttributeType) (ret ProjectCostWithReportsGetProjectIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectCostWithReportsGetProjectIdAttributeType(arg *ProjectCostWithReportsGetProjectIdAttributeType, val ProjectCostWithReportsGetProjectIdRetType) {
	*arg = &val
}

type ProjectCostWithReportsGetProjectIdArgType = string
type ProjectCostWithReportsGetProjectIdRetType = string

/*
	types and functions for projectName
*/

// isNotNullableString
type ProjectCostWithReportsGetProjectNameAttributeType = *string

func getProjectCostWithReportsGetProjectNameAttributeTypeOk(arg ProjectCostWithReportsGetProjectNameAttributeType) (ret ProjectCostWithReportsGetProjectNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectCostWithReportsGetProjectNameAttributeType(arg *ProjectCostWithReportsGetProjectNameAttributeType, val ProjectCostWithReportsGetProjectNameRetType) {
	*arg = &val
}

type ProjectCostWithReportsGetProjectNameArgType = string
type ProjectCostWithReportsGetProjectNameRetType = string

/*
	types and functions for reportData
*/

// isArray
type ProjectCostWithReportsGetReportDataAttributeType = *[]ReportData
type ProjectCostWithReportsGetReportDataArgType = []ReportData
type ProjectCostWithReportsGetReportDataRetType = []ReportData

func getProjectCostWithReportsGetReportDataAttributeTypeOk(arg ProjectCostWithReportsGetReportDataAttributeType) (ret ProjectCostWithReportsGetReportDataRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectCostWithReportsGetReportDataAttributeType(arg *ProjectCostWithReportsGetReportDataAttributeType, val ProjectCostWithReportsGetReportDataRetType) {
	*arg = &val
}

/*
	types and functions for totalCharge
*/

// isDouble
type ProjectCostWithReportsGetTotalChargeAttributeType = *float64
type ProjectCostWithReportsGetTotalChargeArgType = float64
type ProjectCostWithReportsGetTotalChargeRetType = float64

func getProjectCostWithReportsGetTotalChargeAttributeTypeOk(arg ProjectCostWithReportsGetTotalChargeAttributeType) (ret ProjectCostWithReportsGetTotalChargeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectCostWithReportsGetTotalChargeAttributeType(arg *ProjectCostWithReportsGetTotalChargeAttributeType, val ProjectCostWithReportsGetTotalChargeRetType) {
	*arg = &val
}

/*
	types and functions for totalDiscount
*/

// isDouble
type ProjectCostWithReportsGetTotalDiscountAttributeType = *float64
type ProjectCostWithReportsGetTotalDiscountArgType = float64
type ProjectCostWithReportsGetTotalDiscountRetType = float64

func getProjectCostWithReportsGetTotalDiscountAttributeTypeOk(arg ProjectCostWithReportsGetTotalDiscountAttributeType) (ret ProjectCostWithReportsGetTotalDiscountRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectCostWithReportsGetTotalDiscountAttributeType(arg *ProjectCostWithReportsGetTotalDiscountAttributeType, val ProjectCostWithReportsGetTotalDiscountRetType) {
	*arg = &val
}

// ProjectCostWithReports Detailed costs for a project
type ProjectCostWithReports struct {
	// REQUIRED
	CustomerAccountId ProjectCostWithReportsGetCustomerAccountIdAttributeType `json:"customerAccountId" required:"true"`
	// REQUIRED
	ProjectId ProjectCostWithReportsGetProjectIdAttributeType `json:"projectId" required:"true"`
	// REQUIRED
	ProjectName ProjectCostWithReportsGetProjectNameAttributeType `json:"projectName" required:"true"`
	// Detailed project costs which are ONLY included if granularity is provided AND depth is \"project\"
	ReportData ProjectCostWithReportsGetReportDataAttributeType `json:"reportData,omitempty"`
	// Total charge for all services and the whole requested date range (value in cents)
	// REQUIRED
	TotalCharge ProjectCostWithReportsGetTotalChargeAttributeType `json:"totalCharge" required:"true"`
	// Total discount for all services and the whole requested date range (value in cents)
	// REQUIRED
	TotalDiscount ProjectCostWithReportsGetTotalDiscountAttributeType `json:"totalDiscount" required:"true"`
}

type _ProjectCostWithReports ProjectCostWithReports

// NewProjectCostWithReports instantiates a new ProjectCostWithReports object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCostWithReports(customerAccountId ProjectCostWithReportsGetCustomerAccountIdArgType, projectId ProjectCostWithReportsGetProjectIdArgType, projectName ProjectCostWithReportsGetProjectNameArgType, totalCharge ProjectCostWithReportsGetTotalChargeArgType, totalDiscount ProjectCostWithReportsGetTotalDiscountArgType) *ProjectCostWithReports {
	this := ProjectCostWithReports{}
	setProjectCostWithReportsGetCustomerAccountIdAttributeType(&this.CustomerAccountId, customerAccountId)
	setProjectCostWithReportsGetProjectIdAttributeType(&this.ProjectId, projectId)
	setProjectCostWithReportsGetProjectNameAttributeType(&this.ProjectName, projectName)
	setProjectCostWithReportsGetTotalChargeAttributeType(&this.TotalCharge, totalCharge)
	setProjectCostWithReportsGetTotalDiscountAttributeType(&this.TotalDiscount, totalDiscount)
	return &this
}

// NewProjectCostWithReportsWithDefaults instantiates a new ProjectCostWithReports object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCostWithReportsWithDefaults() *ProjectCostWithReports {
	this := ProjectCostWithReports{}
	return &this
}

// GetCustomerAccountId returns the CustomerAccountId field value
func (o *ProjectCostWithReports) GetCustomerAccountId() (ret ProjectCostWithReportsGetCustomerAccountIdRetType) {
	ret, _ = o.GetCustomerAccountIdOk()
	return ret
}

// GetCustomerAccountIdOk returns a tuple with the CustomerAccountId field value
// and a boolean to check if the value has been set.
func (o *ProjectCostWithReports) GetCustomerAccountIdOk() (ret ProjectCostWithReportsGetCustomerAccountIdRetType, ok bool) {
	return getProjectCostWithReportsGetCustomerAccountIdAttributeTypeOk(o.CustomerAccountId)
}

// SetCustomerAccountId sets field value
func (o *ProjectCostWithReports) SetCustomerAccountId(v ProjectCostWithReportsGetCustomerAccountIdRetType) {
	setProjectCostWithReportsGetCustomerAccountIdAttributeType(&o.CustomerAccountId, v)
}

// GetProjectId returns the ProjectId field value
func (o *ProjectCostWithReports) GetProjectId() (ret ProjectCostWithReportsGetProjectIdRetType) {
	ret, _ = o.GetProjectIdOk()
	return ret
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ProjectCostWithReports) GetProjectIdOk() (ret ProjectCostWithReportsGetProjectIdRetType, ok bool) {
	return getProjectCostWithReportsGetProjectIdAttributeTypeOk(o.ProjectId)
}

// SetProjectId sets field value
func (o *ProjectCostWithReports) SetProjectId(v ProjectCostWithReportsGetProjectIdRetType) {
	setProjectCostWithReportsGetProjectIdAttributeType(&o.ProjectId, v)
}

// GetProjectName returns the ProjectName field value
func (o *ProjectCostWithReports) GetProjectName() (ret ProjectCostWithReportsGetProjectNameRetType) {
	ret, _ = o.GetProjectNameOk()
	return ret
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ProjectCostWithReports) GetProjectNameOk() (ret ProjectCostWithReportsGetProjectNameRetType, ok bool) {
	return getProjectCostWithReportsGetProjectNameAttributeTypeOk(o.ProjectName)
}

// SetProjectName sets field value
func (o *ProjectCostWithReports) SetProjectName(v ProjectCostWithReportsGetProjectNameRetType) {
	setProjectCostWithReportsGetProjectNameAttributeType(&o.ProjectName, v)
}

// GetReportData returns the ReportData field value if set, zero value otherwise.
func (o *ProjectCostWithReports) GetReportData() (res ProjectCostWithReportsGetReportDataRetType) {
	res, _ = o.GetReportDataOk()
	return
}

// GetReportDataOk returns a tuple with the ReportData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCostWithReports) GetReportDataOk() (ret ProjectCostWithReportsGetReportDataRetType, ok bool) {
	return getProjectCostWithReportsGetReportDataAttributeTypeOk(o.ReportData)
}

// HasReportData returns a boolean if a field has been set.
func (o *ProjectCostWithReports) HasReportData() bool {
	_, ok := o.GetReportDataOk()
	return ok
}

// SetReportData gets a reference to the given []ReportData and assigns it to the ReportData field.
func (o *ProjectCostWithReports) SetReportData(v ProjectCostWithReportsGetReportDataRetType) {
	setProjectCostWithReportsGetReportDataAttributeType(&o.ReportData, v)
}

// GetTotalCharge returns the TotalCharge field value
func (o *ProjectCostWithReports) GetTotalCharge() (ret ProjectCostWithReportsGetTotalChargeRetType) {
	ret, _ = o.GetTotalChargeOk()
	return ret
}

// GetTotalChargeOk returns a tuple with the TotalCharge field value
// and a boolean to check if the value has been set.
func (o *ProjectCostWithReports) GetTotalChargeOk() (ret ProjectCostWithReportsGetTotalChargeRetType, ok bool) {
	return getProjectCostWithReportsGetTotalChargeAttributeTypeOk(o.TotalCharge)
}

// SetTotalCharge sets field value
func (o *ProjectCostWithReports) SetTotalCharge(v ProjectCostWithReportsGetTotalChargeRetType) {
	setProjectCostWithReportsGetTotalChargeAttributeType(&o.TotalCharge, v)
}

// GetTotalDiscount returns the TotalDiscount field value
func (o *ProjectCostWithReports) GetTotalDiscount() (ret ProjectCostWithReportsGetTotalDiscountRetType) {
	ret, _ = o.GetTotalDiscountOk()
	return ret
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value
// and a boolean to check if the value has been set.
func (o *ProjectCostWithReports) GetTotalDiscountOk() (ret ProjectCostWithReportsGetTotalDiscountRetType, ok bool) {
	return getProjectCostWithReportsGetTotalDiscountAttributeTypeOk(o.TotalDiscount)
}

// SetTotalDiscount sets field value
func (o *ProjectCostWithReports) SetTotalDiscount(v ProjectCostWithReportsGetTotalDiscountRetType) {
	setProjectCostWithReportsGetTotalDiscountAttributeType(&o.TotalDiscount, v)
}

func (o ProjectCostWithReports) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getProjectCostWithReportsGetCustomerAccountIdAttributeTypeOk(o.CustomerAccountId); ok {
		toSerialize["CustomerAccountId"] = val
	}
	if val, ok := getProjectCostWithReportsGetProjectIdAttributeTypeOk(o.ProjectId); ok {
		toSerialize["ProjectId"] = val
	}
	if val, ok := getProjectCostWithReportsGetProjectNameAttributeTypeOk(o.ProjectName); ok {
		toSerialize["ProjectName"] = val
	}
	if val, ok := getProjectCostWithReportsGetReportDataAttributeTypeOk(o.ReportData); ok {
		toSerialize["ReportData"] = val
	}
	if val, ok := getProjectCostWithReportsGetTotalChargeAttributeTypeOk(o.TotalCharge); ok {
		toSerialize["TotalCharge"] = val
	}
	if val, ok := getProjectCostWithReportsGetTotalDiscountAttributeTypeOk(o.TotalDiscount); ok {
		toSerialize["TotalDiscount"] = val
	}
	return toSerialize, nil
}

type NullableProjectCostWithReports struct {
	value *ProjectCostWithReports
	isSet bool
}

func (v NullableProjectCostWithReports) Get() *ProjectCostWithReports {
	return v.value
}

func (v *NullableProjectCostWithReports) Set(val *ProjectCostWithReports) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCostWithReports) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCostWithReports) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCostWithReports(val *ProjectCostWithReports) *NullableProjectCostWithReports {
	return &NullableProjectCostWithReports{value: val, isSet: true}
}

func (v NullableProjectCostWithReports) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCostWithReports) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
