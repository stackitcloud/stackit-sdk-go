/*
STACKIT Cost API

The cost API provides detailed reports on the costs for a customer or project over a certain amount of time

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cost

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/stackitcloud/stackit-sdk-go/core/config"
	"github.com/stackitcloud/stackit-sdk-go/core/oapierror"
)

type DefaultApi interface {
	/*
		ListCostsForCustomer V3 Costs for all projects
		Get costs for all projects in a customer account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customerAccountId ID of a customer account
		@return ApiListCostsForCustomerRequest
	*/
	ListCostsForCustomer(ctx context.Context, customerAccountId string) ApiListCostsForCustomerRequest
	/*
		ListCostsForCustomerExecute executes the request

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customerAccountId ID of a customer account
		@return []ListCostsForCustomer200ResponseInner

	*/
	ListCostsForCustomerExecute(ctx context.Context, customerAccountId string) ([]ListCostsForCustomer200ResponseInner, error)
	/*
		ListCostsForProject V3 Costs for a certain project
		Get costs for a certain project in a customer account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customerAccountId ID of a customer account
		@param projectId ID of a project
		@return ApiListCostsForProjectRequest
	*/
	ListCostsForProject(ctx context.Context, customerAccountId string, projectId string) ApiListCostsForProjectRequest
	/*
		ListCostsForProjectExecute executes the request

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customerAccountId ID of a customer account
		@param projectId ID of a project
		@return ListCostsForCustomer200ResponseInner

	*/
	ListCostsForProjectExecute(ctx context.Context, customerAccountId string, projectId string) (*ListCostsForCustomer200ResponseInner, error)
	/*
		ListCostsForReseller V3 Costs for all projects of all related sub-customers
		Get costs for all projects of all related sub-customer accounts

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customerAccountId ID of a customer account
		@return ApiListCostsForResellerRequest
	*/
	ListCostsForReseller(ctx context.Context, customerAccountId string) ApiListCostsForResellerRequest
	/*
		ListCostsForResellerExecute executes the request

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customerAccountId ID of a customer account
		@return []ListCostsForCustomer200ResponseInner

	*/
	ListCostsForResellerExecute(ctx context.Context, customerAccountId string) ([]ListCostsForCustomer200ResponseInner, error)
}

type ApiListCostsForCustomerRequest interface {
	// Start date (including)
	From(from string) ApiListCostsForCustomerRequest
	// End date (including)
	To(to string) ApiListCostsForCustomerRequest
	// Depth of desired cost information. \&quot;project\&quot; provides costs grouped by project, without services. \&quot;service\&quot; provides costs separated on service level.
	Depth(depth string) ApiListCostsForCustomerRequest
	// Define granularity of costs – Default is \&quot;none\&quot; which does NOT include detailed report data.  If \&quot;monthly\&quot;, \&quot;weekly\&quot; or \&quot;yearly\&quot; is requested, the \&quot;from\&quot; parameter SHOULD be the first day and the \&quot;to\&quot; parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \&quot;daily\&quot; is requested, the date range defined by \&quot;from\&quot; and \&quot;to\&quot; MUST NOT be longer than 92 days.
	Granularity(granularity string) ApiListCostsForCustomerRequest
	// Whether costs of 0 should be included in the response
	IncludeZeroCosts(includeZeroCosts bool) ApiListCostsForCustomerRequest
	// Desired content type
	Accept(accept string) ApiListCostsForCustomerRequest
	Execute() ([]ListCostsForCustomer200ResponseInner, error)
}

type ApiListCostsForProjectRequest interface {
	// Start date (including)
	From(from string) ApiListCostsForProjectRequest
	// End date (including)
	To(to string) ApiListCostsForProjectRequest
	// Depth of desired cost information. \&quot;project\&quot; provides costs grouped by project, without services. \&quot;service\&quot; provides costs separated on service level.
	Depth(depth string) ApiListCostsForProjectRequest
	// Define granularity of costs – Default is \&quot;none\&quot; which does NOT include detailed report data.  If \&quot;monthly\&quot;, \&quot;weekly\&quot; or \&quot;yearly\&quot; is requested, the \&quot;from\&quot; parameter SHOULD be the first day and the \&quot;to\&quot; parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \&quot;daily\&quot; is requested, the date range defined by \&quot;from\&quot; and \&quot;to\&quot; MUST NOT be longer than 92 days.
	Granularity(granularity string) ApiListCostsForProjectRequest
	// Whether costs of 0 should be included in the response
	IncludeZeroCosts(includeZeroCosts bool) ApiListCostsForProjectRequest
	// Desired content type
	Accept(accept string) ApiListCostsForProjectRequest
	Execute() (*ListCostsForCustomer200ResponseInner, error)
}

type ApiListCostsForResellerRequest interface {
	// Start date (including)
	From(from string) ApiListCostsForResellerRequest
	// End date (including)
	To(to string) ApiListCostsForResellerRequest
	// Depth of desired cost information. \&quot;project\&quot; provides costs grouped by project, without services. \&quot;service\&quot; provides costs separated on service level.
	Depth(depth string) ApiListCostsForResellerRequest
	// Define granularity of costs – Default is \&quot;none\&quot; which does NOT include detailed report data.  If \&quot;monthly\&quot;, \&quot;weekly\&quot; or \&quot;yearly\&quot; is requested, the \&quot;from\&quot; parameter SHOULD be the first day and the \&quot;to\&quot; parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \&quot;daily\&quot; is requested, the date range defined by \&quot;from\&quot; and \&quot;to\&quot; MUST NOT be longer than 92 days.
	Granularity(granularity string) ApiListCostsForResellerRequest
	// Whether costs of 0 should be included in the response
	IncludeZeroCosts(includeZeroCosts bool) ApiListCostsForResellerRequest
	// Desired content type
	Accept(accept string) ApiListCostsForResellerRequest
	Execute() ([]ListCostsForCustomer200ResponseInner, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type ListCostsForCustomerRequest struct {
	ctx               context.Context
	apiService        *DefaultApiService
	customerAccountId string
	from              *string
	to                *string
	depth             *string
	granularity       *string
	includeZeroCosts  *bool
	accept            *string
}

// Start date (including)

func (r ListCostsForCustomerRequest) From(from string) ApiListCostsForCustomerRequest {
	r.from = &from
	return r
}

// End date (including)

func (r ListCostsForCustomerRequest) To(to string) ApiListCostsForCustomerRequest {
	r.to = &to
	return r
}

// Depth of desired cost information. \&quot;project\&quot; provides costs grouped by project, without services. \&quot;service\&quot; provides costs separated on service level.

func (r ListCostsForCustomerRequest) Depth(depth string) ApiListCostsForCustomerRequest {
	r.depth = &depth
	return r
}

// Define granularity of costs – Default is \&quot;none\&quot; which does NOT include detailed report data.  If \&quot;monthly\&quot;, \&quot;weekly\&quot; or \&quot;yearly\&quot; is requested, the \&quot;from\&quot; parameter SHOULD be the first day and the \&quot;to\&quot; parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \&quot;daily\&quot; is requested, the date range defined by \&quot;from\&quot; and \&quot;to\&quot; MUST NOT be longer than 92 days.

func (r ListCostsForCustomerRequest) Granularity(granularity string) ApiListCostsForCustomerRequest {
	r.granularity = &granularity
	return r
}

// Whether costs of 0 should be included in the response

func (r ListCostsForCustomerRequest) IncludeZeroCosts(includeZeroCosts bool) ApiListCostsForCustomerRequest {
	r.includeZeroCosts = &includeZeroCosts
	return r
}

// Desired content type

func (r ListCostsForCustomerRequest) Accept(accept string) ApiListCostsForCustomerRequest {
	r.accept = &accept
	return r
}

func (r ListCostsForCustomerRequest) Execute() ([]ListCostsForCustomer200ResponseInner, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ListCostsForCustomer200ResponseInner
	)
	a := r.apiService
	client, ok := a.client.(*APIClient)
	if !ok {
		return localVarReturnValue, fmt.Errorf("could not parse client to type APIClient")
	}
	localBasePath, err := client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListCostsForCustomer")
	if err != nil {
		return localVarReturnValue, &oapierror.GenericOpenAPIError{ErrorMessage: err.Error()}
	}

	localVarPath := localBasePath + "/v3/costs/{customerAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerAccountId"+"}", url.PathEscape(ParameterValueToString(r.customerAccountId, "customerAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return localVarReturnValue, fmt.Errorf("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, fmt.Errorf("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	if r.granularity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
	}
	if r.includeZeroCosts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroCosts", r.includeZeroCosts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, err
	}

	contextHTTPRequest, ok := r.ctx.Value(config.ContextHTTPRequest).(**http.Request)
	if ok {
		*contextHTTPRequest = req
	}

	localVarHTTPResponse, err := client.callAPI(req)
	contextHTTPResponse, ok := r.ctx.Value(config.ContextHTTPResponse).(**http.Response)
	if ok {
		*contextHTTPResponse = localVarHTTPResponse
	}
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &oapierror.GenericOpenAPIError{
			StatusCode:   localVarHTTPResponse.StatusCode,
			Body:         localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v map[string]interface{}
			err = client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, newErr
			}
			newErr.ErrorMessage = oapierror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.Model = v
			return localVarReturnValue, newErr
		}
		var v DefaultError
		err = client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMessage = err.Error()
			return localVarReturnValue, newErr
		}
		newErr.ErrorMessage = oapierror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.Model = v
		return localVarReturnValue, newErr
	}

	err = client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &oapierror.GenericOpenAPIError{
			StatusCode:   localVarHTTPResponse.StatusCode,
			Body:         localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

/*
ListCostsForCustomer: V3 Costs for all projects

Get costs for all projects in a customer account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerAccountId ID of a customer account
	@return ApiListCostsForCustomerRequest
*/
func (a *APIClient) ListCostsForCustomer(ctx context.Context, customerAccountId string) ApiListCostsForCustomerRequest {
	return ListCostsForCustomerRequest{
		apiService:        a.defaultApi,
		ctx:               ctx,
		customerAccountId: customerAccountId,
	}
}

func (a *APIClient) ListCostsForCustomerExecute(ctx context.Context, customerAccountId string) ([]ListCostsForCustomer200ResponseInner, error) {
	r := ListCostsForCustomerRequest{
		apiService:        a.defaultApi,
		ctx:               ctx,
		customerAccountId: customerAccountId,
	}
	return r.Execute()
}

type ListCostsForProjectRequest struct {
	ctx               context.Context
	apiService        *DefaultApiService
	customerAccountId string
	projectId         string
	from              *string
	to                *string
	depth             *string
	granularity       *string
	includeZeroCosts  *bool
	accept            *string
}

// Start date (including)

func (r ListCostsForProjectRequest) From(from string) ApiListCostsForProjectRequest {
	r.from = &from
	return r
}

// End date (including)

func (r ListCostsForProjectRequest) To(to string) ApiListCostsForProjectRequest {
	r.to = &to
	return r
}

// Depth of desired cost information. \&quot;project\&quot; provides costs grouped by project, without services. \&quot;service\&quot; provides costs separated on service level.

func (r ListCostsForProjectRequest) Depth(depth string) ApiListCostsForProjectRequest {
	r.depth = &depth
	return r
}

// Define granularity of costs – Default is \&quot;none\&quot; which does NOT include detailed report data.  If \&quot;monthly\&quot;, \&quot;weekly\&quot; or \&quot;yearly\&quot; is requested, the \&quot;from\&quot; parameter SHOULD be the first day and the \&quot;to\&quot; parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \&quot;daily\&quot; is requested, the date range defined by \&quot;from\&quot; and \&quot;to\&quot; MUST NOT be longer than 92 days.

func (r ListCostsForProjectRequest) Granularity(granularity string) ApiListCostsForProjectRequest {
	r.granularity = &granularity
	return r
}

// Whether costs of 0 should be included in the response

func (r ListCostsForProjectRequest) IncludeZeroCosts(includeZeroCosts bool) ApiListCostsForProjectRequest {
	r.includeZeroCosts = &includeZeroCosts
	return r
}

// Desired content type

func (r ListCostsForProjectRequest) Accept(accept string) ApiListCostsForProjectRequest {
	r.accept = &accept
	return r
}

func (r ListCostsForProjectRequest) Execute() (*ListCostsForCustomer200ResponseInner, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListCostsForCustomer200ResponseInner
	)
	a := r.apiService
	client, ok := a.client.(*APIClient)
	if !ok {
		return localVarReturnValue, fmt.Errorf("could not parse client to type APIClient")
	}
	localBasePath, err := client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListCostsForProject")
	if err != nil {
		return localVarReturnValue, &oapierror.GenericOpenAPIError{ErrorMessage: err.Error()}
	}

	localVarPath := localBasePath + "/v3/costs/{customerAccountId}/projects/{projectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerAccountId"+"}", url.PathEscape(ParameterValueToString(r.customerAccountId, "customerAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(ParameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return localVarReturnValue, fmt.Errorf("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, fmt.Errorf("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	if r.granularity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
	}
	if r.includeZeroCosts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroCosts", r.includeZeroCosts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, err
	}

	contextHTTPRequest, ok := r.ctx.Value(config.ContextHTTPRequest).(**http.Request)
	if ok {
		*contextHTTPRequest = req
	}

	localVarHTTPResponse, err := client.callAPI(req)
	contextHTTPResponse, ok := r.ctx.Value(config.ContextHTTPResponse).(**http.Response)
	if ok {
		*contextHTTPResponse = localVarHTTPResponse
	}
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &oapierror.GenericOpenAPIError{
			StatusCode:   localVarHTTPResponse.StatusCode,
			Body:         localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v map[string]interface{}
			err = client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, newErr
			}
			newErr.ErrorMessage = oapierror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.Model = v
			return localVarReturnValue, newErr
		}
		var v DefaultError
		err = client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMessage = err.Error()
			return localVarReturnValue, newErr
		}
		newErr.ErrorMessage = oapierror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.Model = v
		return localVarReturnValue, newErr
	}

	err = client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &oapierror.GenericOpenAPIError{
			StatusCode:   localVarHTTPResponse.StatusCode,
			Body:         localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

/*
ListCostsForProject: V3 Costs for a certain project

Get costs for a certain project in a customer account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerAccountId ID of a customer account
	@param projectId ID of a project
	@return ApiListCostsForProjectRequest
*/
func (a *APIClient) ListCostsForProject(ctx context.Context, customerAccountId string, projectId string) ApiListCostsForProjectRequest {
	return ListCostsForProjectRequest{
		apiService:        a.defaultApi,
		ctx:               ctx,
		customerAccountId: customerAccountId,
		projectId:         projectId,
	}
}

func (a *APIClient) ListCostsForProjectExecute(ctx context.Context, customerAccountId string, projectId string) (*ListCostsForCustomer200ResponseInner, error) {
	r := ListCostsForProjectRequest{
		apiService:        a.defaultApi,
		ctx:               ctx,
		customerAccountId: customerAccountId,
		projectId:         projectId,
	}
	return r.Execute()
}

type ListCostsForResellerRequest struct {
	ctx               context.Context
	apiService        *DefaultApiService
	customerAccountId string
	from              *string
	to                *string
	depth             *string
	granularity       *string
	includeZeroCosts  *bool
	accept            *string
}

// Start date (including)

func (r ListCostsForResellerRequest) From(from string) ApiListCostsForResellerRequest {
	r.from = &from
	return r
}

// End date (including)

func (r ListCostsForResellerRequest) To(to string) ApiListCostsForResellerRequest {
	r.to = &to
	return r
}

// Depth of desired cost information. \&quot;project\&quot; provides costs grouped by project, without services. \&quot;service\&quot; provides costs separated on service level.

func (r ListCostsForResellerRequest) Depth(depth string) ApiListCostsForResellerRequest {
	r.depth = &depth
	return r
}

// Define granularity of costs – Default is \&quot;none\&quot; which does NOT include detailed report data.  If \&quot;monthly\&quot;, \&quot;weekly\&quot; or \&quot;yearly\&quot; is requested, the \&quot;from\&quot; parameter SHOULD be the first day and the \&quot;to\&quot; parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \&quot;daily\&quot; is requested, the date range defined by \&quot;from\&quot; and \&quot;to\&quot; MUST NOT be longer than 92 days.

func (r ListCostsForResellerRequest) Granularity(granularity string) ApiListCostsForResellerRequest {
	r.granularity = &granularity
	return r
}

// Whether costs of 0 should be included in the response

func (r ListCostsForResellerRequest) IncludeZeroCosts(includeZeroCosts bool) ApiListCostsForResellerRequest {
	r.includeZeroCosts = &includeZeroCosts
	return r
}

// Desired content type

func (r ListCostsForResellerRequest) Accept(accept string) ApiListCostsForResellerRequest {
	r.accept = &accept
	return r
}

func (r ListCostsForResellerRequest) Execute() ([]ListCostsForCustomer200ResponseInner, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ListCostsForCustomer200ResponseInner
	)
	a := r.apiService
	client, ok := a.client.(*APIClient)
	if !ok {
		return localVarReturnValue, fmt.Errorf("could not parse client to type APIClient")
	}
	localBasePath, err := client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListCostsForReseller")
	if err != nil {
		return localVarReturnValue, &oapierror.GenericOpenAPIError{ErrorMessage: err.Error()}
	}

	localVarPath := localBasePath + "/v3/costs/{customerAccountId}/customers"
	localVarPath = strings.Replace(localVarPath, "{"+"customerAccountId"+"}", url.PathEscape(ParameterValueToString(r.customerAccountId, "customerAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return localVarReturnValue, fmt.Errorf("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, fmt.Errorf("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	}
	if r.granularity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
	}
	if r.includeZeroCosts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroCosts", r.includeZeroCosts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, err
	}

	contextHTTPRequest, ok := r.ctx.Value(config.ContextHTTPRequest).(**http.Request)
	if ok {
		*contextHTTPRequest = req
	}

	localVarHTTPResponse, err := client.callAPI(req)
	contextHTTPResponse, ok := r.ctx.Value(config.ContextHTTPResponse).(**http.Response)
	if ok {
		*contextHTTPResponse = localVarHTTPResponse
	}
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &oapierror.GenericOpenAPIError{
			StatusCode:   localVarHTTPResponse.StatusCode,
			Body:         localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v map[string]interface{}
			err = client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, newErr
			}
			newErr.ErrorMessage = oapierror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.Model = v
			return localVarReturnValue, newErr
		}
		var v DefaultError
		err = client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMessage = err.Error()
			return localVarReturnValue, newErr
		}
		newErr.ErrorMessage = oapierror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.Model = v
		return localVarReturnValue, newErr
	}

	err = client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &oapierror.GenericOpenAPIError{
			StatusCode:   localVarHTTPResponse.StatusCode,
			Body:         localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

/*
ListCostsForReseller: V3 Costs for all projects of all related sub-customers

Get costs for all projects of all related sub-customer accounts

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerAccountId ID of a customer account
	@return ApiListCostsForResellerRequest
*/
func (a *APIClient) ListCostsForReseller(ctx context.Context, customerAccountId string) ApiListCostsForResellerRequest {
	return ListCostsForResellerRequest{
		apiService:        a.defaultApi,
		ctx:               ctx,
		customerAccountId: customerAccountId,
	}
}

func (a *APIClient) ListCostsForResellerExecute(ctx context.Context, customerAccountId string) ([]ListCostsForCustomer200ResponseInner, error) {
	r := ListCostsForResellerRequest{
		apiService:        a.defaultApi,
		ctx:               ctx,
		customerAccountId: customerAccountId,
	}
	return r.Execute()
}
