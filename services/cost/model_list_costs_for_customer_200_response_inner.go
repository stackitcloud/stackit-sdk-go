/*
STACKIT Cost API

The cost API provides detailed reports on the costs for a customer or project over a certain amount of time

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cost

import (
	"encoding/json"
	"fmt"
)

// ListCostsForCustomer200ResponseInner struct for ListCostsForCustomer200ResponseInner
type ListCostsForCustomer200ResponseInner struct {
	ProjectCostsWithDetailedServices   *ProjectCostsWithDetailedServices
	ProjectCostsWithReports            *ProjectCostsWithReports
	ProjectCostsWithSummarizedServices *ProjectCostsWithSummarizedServices
	SummarizedProjectCosts             *SummarizedProjectCosts
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ListCostsForCustomer200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ProjectCostsWithDetailedServices
	err = json.Unmarshal(data, &dst.ProjectCostsWithDetailedServices)
	if err == nil {
		jsonProjectCostsWithDetailedServices, _ := json.Marshal(dst.ProjectCostsWithDetailedServices)
		if string(jsonProjectCostsWithDetailedServices) == "{}" { // empty struct
			dst.ProjectCostsWithDetailedServices = nil
		} else {
			return nil // data stored in dst.ProjectCostsWithDetailedServices, return on the first match
		}
	} else {
		dst.ProjectCostsWithDetailedServices = nil
	}

	// try to unmarshal JSON data into ProjectCostsWithReports
	err = json.Unmarshal(data, &dst.ProjectCostsWithReports)
	if err == nil {
		jsonProjectCostsWithReports, _ := json.Marshal(dst.ProjectCostsWithReports)
		if string(jsonProjectCostsWithReports) == "{}" { // empty struct
			dst.ProjectCostsWithReports = nil
		} else {
			return nil // data stored in dst.ProjectCostsWithReports, return on the first match
		}
	} else {
		dst.ProjectCostsWithReports = nil
	}

	// try to unmarshal JSON data into ProjectCostsWithSummarizedServices
	err = json.Unmarshal(data, &dst.ProjectCostsWithSummarizedServices)
	if err == nil {
		jsonProjectCostsWithSummarizedServices, _ := json.Marshal(dst.ProjectCostsWithSummarizedServices)
		if string(jsonProjectCostsWithSummarizedServices) == "{}" { // empty struct
			dst.ProjectCostsWithSummarizedServices = nil
		} else {
			return nil // data stored in dst.ProjectCostsWithSummarizedServices, return on the first match
		}
	} else {
		dst.ProjectCostsWithSummarizedServices = nil
	}

	// try to unmarshal JSON data into SummarizedProjectCosts
	err = json.Unmarshal(data, &dst.SummarizedProjectCosts)
	if err == nil {
		jsonSummarizedProjectCosts, _ := json.Marshal(dst.SummarizedProjectCosts)
		if string(jsonSummarizedProjectCosts) == "{}" { // empty struct
			dst.SummarizedProjectCosts = nil
		} else {
			return nil // data stored in dst.SummarizedProjectCosts, return on the first match
		}
	} else {
		dst.SummarizedProjectCosts = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ListCostsForCustomer200ResponseInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ListCostsForCustomer200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.ProjectCostsWithDetailedServices != nil {
		return json.Marshal(&src.ProjectCostsWithDetailedServices)
	}

	if src.ProjectCostsWithReports != nil {
		return json.Marshal(&src.ProjectCostsWithReports)
	}

	if src.ProjectCostsWithSummarizedServices != nil {
		return json.Marshal(&src.ProjectCostsWithSummarizedServices)
	}

	if src.SummarizedProjectCosts != nil {
		return json.Marshal(&src.SummarizedProjectCosts)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableListCostsForCustomer200ResponseInner struct {
	value *ListCostsForCustomer200ResponseInner
	isSet bool
}

func (v NullableListCostsForCustomer200ResponseInner) Get() *ListCostsForCustomer200ResponseInner {
	return v.value
}

func (v *NullableListCostsForCustomer200ResponseInner) Set(val *ListCostsForCustomer200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListCostsForCustomer200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListCostsForCustomer200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCostsForCustomer200ResponseInner(val *ListCostsForCustomer200ResponseInner) *NullableListCostsForCustomer200ResponseInner {
	return &NullableListCostsForCustomer200ResponseInner{value: val, isSet: true}
}

func (v NullableListCostsForCustomer200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCostsForCustomer200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
