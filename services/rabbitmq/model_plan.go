/*
STACKIT RabbitMQ API

The STACKIT RabbitMQ API provides endpoints to list service offerings, manage service instances and service credentials within STACKIT portal projects.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rabbitmq

import (
	"encoding/json"
)

// checks if the Plan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plan{}

// Plan struct for Plan
type Plan struct {
	// REQUIRED
	Description *string `json:"description"`
	// REQUIRED
	Free *bool `json:"free"`
	// REQUIRED
	Id *string `json:"id"`
	// REQUIRED
	Name *string `json:"name"`
	// REQUIRED
	SkuName *string `json:"skuName"`
}

type _Plan Plan

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(description *string, free *bool, id *string, name *string, skuName *string) *Plan {
	this := Plan{}
	this.Description = description
	this.Free = free
	this.Id = id
	this.Name = name
	this.SkuName = skuName
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	return &this
}

// GetDescription returns the Description field value
func (o *Plan) GetDescription() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Plan) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description, true
}

// SetDescription sets field value
func (o *Plan) SetDescription(v *string) {
	o.Description = v
}

// GetFree returns the Free field value
func (o *Plan) GetFree() *bool {
	if o == nil {
		var ret *bool
		return ret
	}

	return o.Free
}

// GetFreeOk returns a tuple with the Free field value
// and a boolean to check if the value has been set.
func (o *Plan) GetFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Free, true
}

// SetFree sets field value
func (o *Plan) SetFree(v *bool) {
	o.Free = v
}

// GetId returns the Id field value
func (o *Plan) GetId() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *Plan) SetId(v *string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Plan) GetName() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Plan) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Plan) SetName(v *string) {
	o.Name = v
}

// GetSkuName returns the SkuName field value
func (o *Plan) GetSkuName() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.SkuName
}

// GetSkuNameOk returns a tuple with the SkuName field value
// and a boolean to check if the value has been set.
func (o *Plan) GetSkuNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkuName, true
}

// SetSkuName sets field value
func (o *Plan) SetSkuName(v *string) {
	o.SkuName = v
}

func (o Plan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["free"] = o.Free
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["skuName"] = o.SkuName
	return toSerialize, nil
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
