/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"time"
)

// checks if the Distribution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Distribution{}

// Distribution struct for Distribution
type Distribution struct {
	// REQUIRED
	Config *Config `json:"config"`
	// RFC3339 string defining when the distribution was created
	// REQUIRED
	CreatedAt *time.Time `json:"createdAt"`
	// REQUIRED
	Domains *[]Domain `json:"domains"`
	// This object may be present if, and only if the distribution has encountered an error state.
	Errors *[]StatusError `json:"errors,omitempty"`
	// REQUIRED
	Id *string `json:"id"`
	// REQUIRED
	ProjectId *string `json:"projectId"`
	// - `CREATING`: The distribution was just created.    All the relevant resources are created in the background. Once fully reconciled,   this switches to `ACTIVE`. If there are any issues, the status changes to    `ERROR`. You can look at the `errors` array to get more infos. - `ACTIVE`: The usual state. The desired configuration is synced, there are no errors - `UPDATING`: The state when there is a discrepancy between the desired and    actual configuration state. This occurs right after an update. Will switch to    `ACTIVE` or `ERROR`, depending on if synchronizing succeeds or not. - `DELETING`: The state right after a delete request was received. The distribution will stay in this status   until all resources have been successfully removed, or until we encounter an `ERROR` state.    **NOTE:** You can keep fetching the distribution while it is deleting.    After successful deletion, trying to get a distribution will return a 404 Not Found response - `ERROR`: The error state. Look at the `errors` array for more info.
	// REQUIRED
	Status *string `json:"status"`
	// RFC3339 string which returns the last time the distribution's configuration was modified.
	// REQUIRED
	UpdatedAt *time.Time `json:"updatedAt"`
}

type _Distribution Distribution

// NewDistribution instantiates a new Distribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistribution(config *Config, createdAt *time.Time, domains *[]Domain, id *string, projectId *string, status *string, updatedAt *time.Time) *Distribution {
	this := Distribution{}
	this.Config = config
	this.CreatedAt = createdAt
	this.Domains = domains
	this.Id = id
	this.ProjectId = projectId
	this.Status = status
	this.UpdatedAt = updatedAt
	return &this
}

// NewDistributionWithDefaults instantiates a new Distribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistributionWithDefaults() *Distribution {
	this := Distribution{}
	return &this
}

// GetConfig returns the Config field value
func (o *Distribution) GetConfig() *Config {
	if o == nil || IsNil(o.Config) {
		var ret *Config
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetConfigOk() (*Config, bool) {
	if o == nil {
		return nil, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *Distribution) SetConfig(v *Config) {
	o.Config = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Distribution) GetCreatedAt() *time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret *time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Distribution) SetCreatedAt(v *time.Time) {
	o.CreatedAt = v
}

// GetDomains returns the Domains field value
func (o *Distribution) GetDomains() *[]Domain {
	if o == nil || IsNil(o.Domains) {
		var ret *[]Domain
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetDomainsOk() (*[]Domain, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *Distribution) SetDomains(v *[]Domain) {
	o.Domains = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Distribution) GetErrors() *[]StatusError {
	if o == nil || IsNil(o.Errors) {
		var ret *[]StatusError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Distribution) GetErrorsOk() (*[]StatusError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Distribution) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []StatusError and assigns it to the Errors field.
func (o *Distribution) SetErrors(v *[]StatusError) {
	o.Errors = v
}

// GetId returns the Id field value
func (o *Distribution) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *Distribution) SetId(v *string) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value
func (o *Distribution) GetProjectId() *string {
	if o == nil || IsNil(o.ProjectId) {
		var ret *string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// SetProjectId sets field value
func (o *Distribution) SetProjectId(v *string) {
	o.ProjectId = v
}

// GetStatus returns the Status field value
func (o *Distribution) GetStatus() *string {
	if o == nil || IsNil(o.Status) {
		var ret *string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *Distribution) SetStatus(v *string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Distribution) GetUpdatedAt() *time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret *time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Distribution) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Distribution) SetUpdatedAt(v *time.Time) {
	o.UpdatedAt = v
}

func (o Distribution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["domains"] = o.Domains
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	toSerialize["id"] = o.Id
	toSerialize["projectId"] = o.ProjectId
	toSerialize["status"] = o.Status
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

type NullableDistribution struct {
	value *Distribution
	isSet bool
}

func (v NullableDistribution) Get() *Distribution {
	return v.value
}

func (v *NullableDistribution) Set(val *Distribution) {
	v.value = val
	v.isSet = true
}

func (v NullableDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistribution(val *Distribution) *NullableDistribution {
	return &NullableDistribution{value: val, isSet: true}
}

func (v NullableDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
