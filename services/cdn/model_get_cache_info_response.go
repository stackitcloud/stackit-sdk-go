/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"time"
)

// checks if the GetCacheInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCacheInfoResponse{}

// GetCacheInfoResponse struct for GetCacheInfoResponse
type GetCacheInfoResponse struct {
	// REQUIRED
	History *[]GetCacheInfoResponseHistoryEntry `json:"history"`
	// Returns the last time the cache was purged by calling the PurgeCache endpoint.  Time represented as RFC3339 compliant string. If the cache was never purged, this returns `null`
	// REQUIRED
	LastPurgeTime *NullableTime `json:"lastPurgeTime"`
}

type _GetCacheInfoResponse GetCacheInfoResponse

// NewGetCacheInfoResponse instantiates a new GetCacheInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCacheInfoResponse(history *[]GetCacheInfoResponseHistoryEntry, lastPurgeTime *NullableTime) *GetCacheInfoResponse {
	this := GetCacheInfoResponse{}
	this.History = history
	this.LastPurgeTime = lastPurgeTime
	return &this
}

// NewGetCacheInfoResponseWithDefaults instantiates a new GetCacheInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCacheInfoResponseWithDefaults() *GetCacheInfoResponse {
	this := GetCacheInfoResponse{}
	return &this
}

// GetHistory returns the History field value
func (o *GetCacheInfoResponse) GetHistory() *[]GetCacheInfoResponseHistoryEntry {
	if o == nil || IsNil(o.History) {
		var ret *[]GetCacheInfoResponseHistoryEntry
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *GetCacheInfoResponse) GetHistoryOk() (*[]GetCacheInfoResponseHistoryEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.History, true
}

// SetHistory sets field value
func (o *GetCacheInfoResponse) SetHistory(v *[]GetCacheInfoResponseHistoryEntry) {
	o.History = v
}

// GetLastPurgeTime returns the LastPurgeTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *GetCacheInfoResponse) GetLastPurgeTime() *time.Time {
	if o == nil || IsNil(o.LastPurgeTime) || o.LastPurgeTime.Get() == nil {
		var ret *time.Time
		return ret
	}

	return o.LastPurgeTime.Get()
}

// GetLastPurgeTimeOk returns a tuple with the LastPurgeTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetCacheInfoResponse) GetLastPurgeTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPurgeTime.Get(), o.LastPurgeTime.IsSet()
}

// SetLastPurgeTime sets field value
func (o *GetCacheInfoResponse) SetLastPurgeTime(v *time.Time) {
	if IsNil(o.LastPurgeTime) {
		o.LastPurgeTime = new(NullableTime)
	}
	o.LastPurgeTime.Set(v)
}

func (o GetCacheInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["history"] = o.History
	toSerialize["lastPurgeTime"] = o.LastPurgeTime.Get()
	return toSerialize, nil
}

type NullableGetCacheInfoResponse struct {
	value *GetCacheInfoResponse
	isSet bool
}

func (v NullableGetCacheInfoResponse) Get() *GetCacheInfoResponse {
	return v.value
}

func (v *NullableGetCacheInfoResponse) Set(val *GetCacheInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCacheInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCacheInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCacheInfoResponse(val *GetCacheInfoResponse) *NullableGetCacheInfoResponse {
	return &NullableGetCacheInfoResponse{value: val, isSet: true}
}

func (v NullableGetCacheInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCacheInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
