/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"fmt"
)

// WafType Enable or disable the Premium WAF. Do note that enabling the Premium WAF will cause additional fees.   Some features are gated behind the Premium WAF, like additional, **premium-only rules** and the ability to create **custom rules** (not yet implemented)
type WafType string

// List of WafType
const (
	WAFTYPE_FREE    WafType = "FREE"
	WAFTYPE_PREMIUM WafType = "PREMIUM"
)

// All allowed values of WafType enum
var AllowedWafTypeEnumValues = []WafType{
	"FREE",
	"PREMIUM",
}

func (v *WafType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := WafType(value)
	for _, existing := range AllowedWafTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WafType", value)
}

// NewWafTypeFromValue returns a pointer to a valid WafType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWafTypeFromValue(v string) (*WafType, error) {
	ev := WafType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WafType: valid values are %v", v, AllowedWafTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WafType) IsValid() bool {
	for _, existing := range AllowedWafTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WafType value
func (v WafType) Ptr() *WafType {
	return &v
}

type NullableWafType struct {
	value *WafType
	isSet bool
}

func (v NullableWafType) Get() *WafType {
	return v.value
}

func (v *NullableWafType) Set(val *WafType) {
	v.value = val
	v.isSet = true
}

func (v NullableWafType) IsSet() bool {
	return v.isSet
}

func (v *NullableWafType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafType(val *WafType) *NullableWafType {
	return &NullableWafType{value: val, isSet: true}
}

func (v NullableWafType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
