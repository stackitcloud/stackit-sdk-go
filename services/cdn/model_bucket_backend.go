/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the BucketBackend type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketBackend{}

/*
	types and functions for bucketUrl
*/

// isNotNullableString
type BucketBackendGetBucketUrlAttributeType = *string

func getBucketBackendGetBucketUrlAttributeTypeOk(arg BucketBackendGetBucketUrlAttributeType) (ret BucketBackendGetBucketUrlRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBucketBackendGetBucketUrlAttributeType(arg *BucketBackendGetBucketUrlAttributeType, val BucketBackendGetBucketUrlRetType) {
	*arg = &val
}

type BucketBackendGetBucketUrlArgType = string
type BucketBackendGetBucketUrlRetType = string

/*
	types and functions for region
*/

// isNotNullableString
type BucketBackendGetRegionAttributeType = *string

func getBucketBackendGetRegionAttributeTypeOk(arg BucketBackendGetRegionAttributeType) (ret BucketBackendGetRegionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBucketBackendGetRegionAttributeType(arg *BucketBackendGetRegionAttributeType, val BucketBackendGetRegionRetType) {
	*arg = &val
}

type BucketBackendGetRegionArgType = string
type BucketBackendGetRegionRetType = string

/*
	types and functions for type
*/

// isNotNullableString
type BucketBackendGetTypeAttributeType = *string

func getBucketBackendGetTypeAttributeTypeOk(arg BucketBackendGetTypeAttributeType) (ret BucketBackendGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBucketBackendGetTypeAttributeType(arg *BucketBackendGetTypeAttributeType, val BucketBackendGetTypeRetType) {
	*arg = &val
}

type BucketBackendGetTypeArgType = string
type BucketBackendGetTypeRetType = string

// BucketBackend struct for BucketBackend
type BucketBackend struct {
	// REQUIRED
	BucketUrl BucketBackendGetBucketUrlAttributeType `json:"bucketUrl" required:"true"`
	// REQUIRED
	Region BucketBackendGetRegionAttributeType `json:"region" required:"true"`
	// REQUIRED
	Type BucketBackendGetTypeAttributeType `json:"type" required:"true"`
}

type _BucketBackend BucketBackend

// NewBucketBackend instantiates a new BucketBackend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketBackend(bucketUrl BucketBackendGetBucketUrlArgType, region BucketBackendGetRegionArgType, types BucketBackendGetTypeArgType) *BucketBackend {
	this := BucketBackend{}
	setBucketBackendGetBucketUrlAttributeType(&this.BucketUrl, bucketUrl)
	setBucketBackendGetRegionAttributeType(&this.Region, region)
	setBucketBackendGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewBucketBackendWithDefaults instantiates a new BucketBackend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketBackendWithDefaults() *BucketBackend {
	this := BucketBackend{}
	return &this
}

// GetBucketUrl returns the BucketUrl field value
func (o *BucketBackend) GetBucketUrl() (ret BucketBackendGetBucketUrlRetType) {
	ret, _ = o.GetBucketUrlOk()
	return ret
}

// GetBucketUrlOk returns a tuple with the BucketUrl field value
// and a boolean to check if the value has been set.
func (o *BucketBackend) GetBucketUrlOk() (ret BucketBackendGetBucketUrlRetType, ok bool) {
	return getBucketBackendGetBucketUrlAttributeTypeOk(o.BucketUrl)
}

// SetBucketUrl sets field value
func (o *BucketBackend) SetBucketUrl(v BucketBackendGetBucketUrlRetType) {
	setBucketBackendGetBucketUrlAttributeType(&o.BucketUrl, v)
}

// GetRegion returns the Region field value
func (o *BucketBackend) GetRegion() (ret BucketBackendGetRegionRetType) {
	ret, _ = o.GetRegionOk()
	return ret
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *BucketBackend) GetRegionOk() (ret BucketBackendGetRegionRetType, ok bool) {
	return getBucketBackendGetRegionAttributeTypeOk(o.Region)
}

// SetRegion sets field value
func (o *BucketBackend) SetRegion(v BucketBackendGetRegionRetType) {
	setBucketBackendGetRegionAttributeType(&o.Region, v)
}

// GetType returns the Type field value
func (o *BucketBackend) GetType() (ret BucketBackendGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BucketBackend) GetTypeOk() (ret BucketBackendGetTypeRetType, ok bool) {
	return getBucketBackendGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *BucketBackend) SetType(v BucketBackendGetTypeRetType) {
	setBucketBackendGetTypeAttributeType(&o.Type, v)
}

func (o BucketBackend) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getBucketBackendGetBucketUrlAttributeTypeOk(o.BucketUrl); ok {
		toSerialize["BucketUrl"] = val
	}
	if val, ok := getBucketBackendGetRegionAttributeTypeOk(o.Region); ok {
		toSerialize["Region"] = val
	}
	if val, ok := getBucketBackendGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableBucketBackend struct {
	value *BucketBackend
	isSet bool
}

func (v NullableBucketBackend) Get() *BucketBackend {
	return v.value
}

func (v *NullableBucketBackend) Set(val *BucketBackend) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketBackend) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketBackend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketBackend(val *BucketBackend) *NullableBucketBackend {
	return &NullableBucketBackend{value: val, isSet: true}
}

func (v NullableBucketBackend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketBackend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
