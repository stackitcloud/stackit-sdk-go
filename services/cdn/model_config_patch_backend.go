/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"fmt"
)

// ConfigPatchBackend - struct for ConfigPatchBackend
type ConfigPatchBackend struct {
	HttpBackendPatch *HttpBackendPatch
}

// HttpBackendPatchAsConfigPatchBackend is a convenience function that returns HttpBackendPatch wrapped in ConfigPatchBackend
func HttpBackendPatchAsConfigPatchBackend(v *HttpBackendPatch) ConfigPatchBackend {
	return ConfigPatchBackend{
		HttpBackendPatch: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConfigPatchBackend) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HttpBackendPatch
	err = newStrictDecoder(data).Decode(&dst.HttpBackendPatch)
	if err == nil {
		jsonHttpBackendPatch, _ := json.Marshal(dst.HttpBackendPatch)
		if string(jsonHttpBackendPatch) == "{}" { // empty struct
			dst.HttpBackendPatch = nil
		} else {
			match++
		}
	} else {
		dst.HttpBackendPatch = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HttpBackendPatch = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConfigPatchBackend)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConfigPatchBackend)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConfigPatchBackend) MarshalJSON() ([]byte, error) {
	if src.HttpBackendPatch != nil {
		return json.Marshal(&src.HttpBackendPatch)
	}

	return []byte("{}"), nil // no data in oneOf schemas => empty JSON object
}

// Get the actual instance
func (obj *ConfigPatchBackend) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HttpBackendPatch != nil {
		return obj.HttpBackendPatch
	}

	// all schemas are nil
	return nil
}

type NullableConfigPatchBackend struct {
	value *ConfigPatchBackend
	isSet bool
}

func (v NullableConfigPatchBackend) Get() *ConfigPatchBackend {
	return v.value
}

func (v *NullableConfigPatchBackend) Set(val *ConfigPatchBackend) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPatchBackend) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPatchBackend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPatchBackend(val *ConfigPatchBackend) *NullableConfigPatchBackend {
	return &NullableConfigPatchBackend{value: val, isSet: true}
}

func (v NullableConfigPatchBackend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPatchBackend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
