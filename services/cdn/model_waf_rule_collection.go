/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the WAFRuleCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WAFRuleCollection{}

/*
	types and functions for groups
*/

// isArray
type WAFRuleCollectionGetGroupsAttributeType = *[]WAFRuleGroup
type WAFRuleCollectionGetGroupsArgType = []WAFRuleGroup
type WAFRuleCollectionGetGroupsRetType = []WAFRuleGroup

func getWAFRuleCollectionGetGroupsAttributeTypeOk(arg WAFRuleCollectionGetGroupsAttributeType) (ret WAFRuleCollectionGetGroupsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setWAFRuleCollectionGetGroupsAttributeType(arg *WAFRuleCollectionGetGroupsAttributeType, val WAFRuleCollectionGetGroupsRetType) {
	*arg = &val
}

/*
	types and functions for id
*/

// isNotNullableString
type WAFRuleCollectionGetIdAttributeType = *string

func getWAFRuleCollectionGetIdAttributeTypeOk(arg WAFRuleCollectionGetIdAttributeType) (ret WAFRuleCollectionGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setWAFRuleCollectionGetIdAttributeType(arg *WAFRuleCollectionGetIdAttributeType, val WAFRuleCollectionGetIdRetType) {
	*arg = &val
}

type WAFRuleCollectionGetIdArgType = string
type WAFRuleCollectionGetIdRetType = string

/*
	types and functions for name
*/

// isContainer
type WAFRuleCollectionGetNameAttributeType = *map[string]string
type WAFRuleCollectionGetNameArgType = map[string]string
type WAFRuleCollectionGetNameRetType = map[string]string

func getWAFRuleCollectionGetNameAttributeTypeOk(arg WAFRuleCollectionGetNameAttributeType) (ret WAFRuleCollectionGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setWAFRuleCollectionGetNameAttributeType(arg *WAFRuleCollectionGetNameAttributeType, val WAFRuleCollectionGetNameRetType) {
	*arg = &val
}

// WAFRuleCollection struct for WAFRuleCollection
type WAFRuleCollection struct {
	// REQUIRED
	Groups WAFRuleCollectionGetGroupsAttributeType `json:"groups" required:"true"`
	// REQUIRED
	Id WAFRuleCollectionGetIdAttributeType `json:"id" required:"true"`
	// LocalizedString is a map from language to string value
	// REQUIRED
	Name WAFRuleCollectionGetNameAttributeType `json:"name" required:"true"`
}

type _WAFRuleCollection WAFRuleCollection

// NewWAFRuleCollection instantiates a new WAFRuleCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWAFRuleCollection(groups WAFRuleCollectionGetGroupsArgType, id WAFRuleCollectionGetIdArgType, name WAFRuleCollectionGetNameArgType) *WAFRuleCollection {
	this := WAFRuleCollection{}
	setWAFRuleCollectionGetGroupsAttributeType(&this.Groups, groups)
	setWAFRuleCollectionGetIdAttributeType(&this.Id, id)
	setWAFRuleCollectionGetNameAttributeType(&this.Name, name)
	return &this
}

// NewWAFRuleCollectionWithDefaults instantiates a new WAFRuleCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWAFRuleCollectionWithDefaults() *WAFRuleCollection {
	this := WAFRuleCollection{}
	return &this
}

// GetGroups returns the Groups field value
func (o *WAFRuleCollection) GetGroups() (ret WAFRuleCollectionGetGroupsRetType) {
	ret, _ = o.GetGroupsOk()
	return ret
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *WAFRuleCollection) GetGroupsOk() (ret WAFRuleCollectionGetGroupsRetType, ok bool) {
	return getWAFRuleCollectionGetGroupsAttributeTypeOk(o.Groups)
}

// SetGroups sets field value
func (o *WAFRuleCollection) SetGroups(v WAFRuleCollectionGetGroupsRetType) {
	setWAFRuleCollectionGetGroupsAttributeType(&o.Groups, v)
}

// GetId returns the Id field value
func (o *WAFRuleCollection) GetId() (ret WAFRuleCollectionGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WAFRuleCollection) GetIdOk() (ret WAFRuleCollectionGetIdRetType, ok bool) {
	return getWAFRuleCollectionGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *WAFRuleCollection) SetId(v WAFRuleCollectionGetIdRetType) {
	setWAFRuleCollectionGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value
func (o *WAFRuleCollection) GetName() (ret WAFRuleCollectionGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WAFRuleCollection) GetNameOk() (ret WAFRuleCollectionGetNameRetType, ok bool) {
	return getWAFRuleCollectionGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *WAFRuleCollection) SetName(v WAFRuleCollectionGetNameRetType) {
	setWAFRuleCollectionGetNameAttributeType(&o.Name, v)
}

func (o WAFRuleCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getWAFRuleCollectionGetGroupsAttributeTypeOk(o.Groups); ok {
		toSerialize["Groups"] = val
	}
	if val, ok := getWAFRuleCollectionGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getWAFRuleCollectionGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullableWAFRuleCollection struct {
	value *WAFRuleCollection
	isSet bool
}

func (v NullableWAFRuleCollection) Get() *WAFRuleCollection {
	return v.value
}

func (v *NullableWAFRuleCollection) Set(val *WAFRuleCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFRuleCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFRuleCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFRuleCollection(val *WAFRuleCollection) *NullableWAFRuleCollection {
	return &NullableWAFRuleCollection{value: val, isSet: true}
}

func (v NullableWAFRuleCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFRuleCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
