/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the StatusError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusError{}

// StatusError struct for StatusError
type StatusError struct {
	// A german translation string corresponding to the error key. Note that we do not guarantee german translations are present.
	De *string `json:"de,omitempty"`
	// An english translation string corresponding to the error key. An english translation key is always present.
	// REQUIRED
	En *string `json:"en"`
	// An enum value that describes a Status Error.
	// REQUIRED
	Key *string `json:"key"`
}

type _StatusError StatusError

// NewStatusError instantiates a new StatusError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusError(en *string, key *string) *StatusError {
	this := StatusError{}
	this.En = en
	this.Key = key
	return &this
}

// NewStatusErrorWithDefaults instantiates a new StatusError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusErrorWithDefaults() *StatusError {
	this := StatusError{}
	return &this
}

// GetDe returns the De field value if set, zero value otherwise.
func (o *StatusError) GetDe() *string {
	if o == nil || IsNil(o.De) {
		var ret *string
		return ret
	}
	return o.De
}

// GetDeOk returns a tuple with the De field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusError) GetDeOk() (*string, bool) {
	if o == nil || IsNil(o.De) {
		return nil, false
	}
	return o.De, true
}

// HasDe returns a boolean if a field has been set.
func (o *StatusError) HasDe() bool {
	if o != nil && !IsNil(o.De) {
		return true
	}

	return false
}

// SetDe gets a reference to the given string and assigns it to the De field.
func (o *StatusError) SetDe(v *string) {
	o.De = v
}

// GetEn returns the En field value
func (o *StatusError) GetEn() *string {
	if o == nil || IsNil(o.En) {
		var ret *string
		return ret
	}

	return o.En
}

// GetEnOk returns a tuple with the En field value
// and a boolean to check if the value has been set.
func (o *StatusError) GetEnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.En, true
}

// SetEn sets field value
func (o *StatusError) SetEn(v *string) {
	o.En = v
}

// GetKey returns the Key field value
func (o *StatusError) GetKey() *string {
	if o == nil || IsNil(o.Key) {
		var ret *string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *StatusError) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key, true
}

// SetKey sets field value
func (o *StatusError) SetKey(v *string) {
	o.Key = v
}

func (o StatusError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.De) {
		toSerialize["de"] = o.De
	}
	toSerialize["en"] = o.En
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullableStatusError struct {
	value *StatusError
	isSet bool
}

func (v NullableStatusError) Get() *StatusError {
	return v.value
}

func (v *NullableStatusError) Set(val *StatusError) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusError) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusError(val *StatusError) *NullableStatusError {
	return &NullableStatusError{value: val, isSet: true}
}

func (v NullableStatusError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
