/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

/*
	types and functions for backend
*/

// isModel
type ConfigGetBackendAttributeType = *ConfigBackend
type ConfigGetBackendArgType = ConfigBackend
type ConfigGetBackendRetType = ConfigBackend

func getConfigGetBackendAttributeTypeOk(arg ConfigGetBackendAttributeType) (ret ConfigGetBackendRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setConfigGetBackendAttributeType(arg *ConfigGetBackendAttributeType, val ConfigGetBackendRetType) {
	*arg = &val
}

/*
	types and functions for regions
*/

// isArray
type ConfigGetRegionsAttributeType = *[]Region
type ConfigGetRegionsArgType = []Region
type ConfigGetRegionsRetType = []Region

func getConfigGetRegionsAttributeTypeOk(arg ConfigGetRegionsAttributeType) (ret ConfigGetRegionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setConfigGetRegionsAttributeType(arg *ConfigGetRegionsAttributeType, val ConfigGetRegionsRetType) {
	*arg = &val
}

// Config struct for Config
type Config struct {
	// REQUIRED
	Backend ConfigGetBackendAttributeType `json:"backend"`
	// REQUIRED
	Regions ConfigGetRegionsAttributeType `json:"regions"`
}

type _Config Config

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig(backend ConfigGetBackendArgType, regions ConfigGetRegionsArgType) *Config {
	this := Config{}
	setConfigGetBackendAttributeType(&this.Backend, backend)
	setConfigGetRegionsAttributeType(&this.Regions, regions)
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetBackend returns the Backend field value
func (o *Config) GetBackend() (ret ConfigGetBackendRetType) {
	ret, _ = o.GetBackendOk()
	return ret
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *Config) GetBackendOk() (ret ConfigGetBackendRetType, ok bool) {
	return getConfigGetBackendAttributeTypeOk(o.Backend)
}

// SetBackend sets field value
func (o *Config) SetBackend(v ConfigGetBackendRetType) {
	setConfigGetBackendAttributeType(&o.Backend, v)
}

// GetRegions returns the Regions field value
func (o *Config) GetRegions() (ret ConfigGetRegionsRetType) {
	ret, _ = o.GetRegionsOk()
	return ret
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *Config) GetRegionsOk() (ret ConfigGetRegionsRetType, ok bool) {
	return getConfigGetRegionsAttributeTypeOk(o.Regions)
}

// SetRegions sets field value
func (o *Config) SetRegions(v ConfigGetRegionsRetType) {
	setConfigGetRegionsAttributeType(&o.Regions, v)
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getConfigGetBackendAttributeTypeOk(o.Backend); ok {
		toSerialize["Backend"] = val
	}
	if val, ok := getConfigGetRegionsAttributeTypeOk(o.Regions); ok {
		toSerialize["Regions"] = val
	}
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
