/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

// Config struct for Config
type Config struct {
	// REQUIRED
	Backend *ConfigBackend `json:"backend"`
	// REQUIRED
	Regions *[]Region `json:"regions"`
}

type _Config Config

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig(backend *ConfigBackend, regions *[]Region) *Config {
	this := Config{}
	this.Backend = backend
	this.Regions = regions
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetBackend returns the Backend field value
func (o *Config) GetBackend() *ConfigBackend {
	if o == nil || IsNil(o.Backend) {
		var ret *ConfigBackend
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *Config) GetBackendOk() (*ConfigBackend, bool) {
	if o == nil {
		return nil, false
	}
	return o.Backend, true
}

// SetBackend sets field value
func (o *Config) SetBackend(v *ConfigBackend) {
	o.Backend = v
}

// GetRegions returns the Regions field value
func (o *Config) GetRegions() *[]Region {
	if o == nil || IsNil(o.Regions) {
		var ret *[]Region
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *Config) GetRegionsOk() (*[]Region, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *Config) SetRegions(v *[]Region) {
	o.Regions = v
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backend"] = o.Backend
	toSerialize["regions"] = o.Regions
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
