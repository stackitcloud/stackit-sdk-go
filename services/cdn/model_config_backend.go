/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"fmt"
)

// ConfigBackend - struct for ConfigBackend
type ConfigBackend struct {
	HttpBackend *HttpBackend
}

// HttpBackendAsConfigBackend is a convenience function that returns HttpBackend wrapped in ConfigBackend
func HttpBackendAsConfigBackend(v *HttpBackend) ConfigBackend {
	return ConfigBackend{
		HttpBackend: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConfigBackend) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HttpBackend
	err = newStrictDecoder(data).Decode(&dst.HttpBackend)
	if err == nil {
		jsonHttpBackend, _ := json.Marshal(dst.HttpBackend)
		if string(jsonHttpBackend) == "{}" { // empty struct
			dst.HttpBackend = nil
		} else {
			match++
		}
	} else {
		dst.HttpBackend = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HttpBackend = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConfigBackend)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConfigBackend)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConfigBackend) MarshalJSON() ([]byte, error) {
	if src.HttpBackend != nil {
		return json.Marshal(&src.HttpBackend)
	}

	return []byte("{}"), nil // no data in oneOf schemas => empty JSON object
}

// Get the actual instance
func (obj *ConfigBackend) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HttpBackend != nil {
		return obj.HttpBackend
	}

	// all schemas are nil
	return nil
}

type NullableConfigBackend struct {
	value *ConfigBackend
	isSet bool
}

func (v NullableConfigBackend) Get() *ConfigBackend {
	return v.value
}

func (v *NullableConfigBackend) Set(val *ConfigBackend) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigBackend) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigBackend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigBackend(val *ConfigBackend) *NullableConfigBackend {
	return &NullableConfigBackend{value: val, isSet: true}
}

func (v NullableConfigBackend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigBackend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
