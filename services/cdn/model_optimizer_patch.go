/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the OptimizerPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptimizerPatch{}

/*
	types and functions for enabled
*/

// isBoolean
type OptimizerPatchgetEnabledAttributeType = *bool
type OptimizerPatchgetEnabledArgType = bool
type OptimizerPatchgetEnabledRetType = bool

func getOptimizerPatchgetEnabledAttributeTypeOk(arg OptimizerPatchgetEnabledAttributeType) (ret OptimizerPatchgetEnabledRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setOptimizerPatchgetEnabledAttributeType(arg *OptimizerPatchgetEnabledAttributeType, val OptimizerPatchgetEnabledRetType) {
	*arg = &val
}

// OptimizerPatch struct for OptimizerPatch
type OptimizerPatch struct {
	Enabled OptimizerPatchgetEnabledAttributeType `json:"enabled,omitempty"`
}

// NewOptimizerPatch instantiates a new OptimizerPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimizerPatch() *OptimizerPatch {
	this := OptimizerPatch{}
	return &this
}

// NewOptimizerPatchWithDefaults instantiates a new OptimizerPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizerPatchWithDefaults() *OptimizerPatch {
	this := OptimizerPatch{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OptimizerPatch) GetEnabled() (res OptimizerPatchgetEnabledRetType) {
	res, _ = o.GetEnabledOk()
	return
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizerPatch) GetEnabledOk() (ret OptimizerPatchgetEnabledRetType, ok bool) {
	return getOptimizerPatchgetEnabledAttributeTypeOk(o.Enabled)
}

// HasEnabled returns a boolean if a field has been set.
func (o *OptimizerPatch) HasEnabled() bool {
	_, ok := o.GetEnabledOk()
	return ok
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OptimizerPatch) SetEnabled(v OptimizerPatchgetEnabledRetType) {
	setOptimizerPatchgetEnabledAttributeType(&o.Enabled, v)
}

func (o OptimizerPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getOptimizerPatchgetEnabledAttributeTypeOk(o.Enabled); ok {
		toSerialize["Enabled"] = val
	}
	return toSerialize, nil
}

type NullableOptimizerPatch struct {
	value *OptimizerPatch
	isSet bool
}

func (v NullableOptimizerPatch) Get() *OptimizerPatch {
	return v.value
}

func (v *NullableOptimizerPatch) Set(val *OptimizerPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizerPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizerPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizerPatch(val *OptimizerPatch) *NullableOptimizerPatch {
	return &NullableOptimizerPatch{value: val, isSet: true}
}

func (v NullableOptimizerPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizerPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
