/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"fmt"
)

// ConfigPatchLogSink - struct for ConfigPatchLogSink
type ConfigPatchLogSink struct {
	PatchLokiLogSink *PatchLokiLogSink
}

// PatchLokiLogSinkAsConfigPatchLogSink is a convenience function that returns PatchLokiLogSink wrapped in ConfigPatchLogSink
func PatchLokiLogSinkAsConfigPatchLogSink(v *PatchLokiLogSink) ConfigPatchLogSink {
	return ConfigPatchLogSink{
		PatchLokiLogSink: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConfigPatchLogSink) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'PatchLokiLogSink'
	if jsonDict["type"] == "PatchLokiLogSink" {
		// try to unmarshal JSON data into PatchLokiLogSink
		err = json.Unmarshal(data, &dst.PatchLokiLogSink)
		if err == nil {
			return nil // data stored in dst.PatchLokiLogSink, return on the first match
		} else {
			dst.PatchLokiLogSink = nil
			return fmt.Errorf("failed to unmarshal ConfigPatchLogSink as PatchLokiLogSink: %s", err.Error())
		}
	}

	// check if the discriminator value is 'loki'
	if jsonDict["type"] == "loki" {
		// try to unmarshal JSON data into PatchLokiLogSink
		err = json.Unmarshal(data, &dst.PatchLokiLogSink)
		if err == nil {
			return nil // data stored in dst.PatchLokiLogSink, return on the first match
		} else {
			dst.PatchLokiLogSink = nil
			return fmt.Errorf("failed to unmarshal ConfigPatchLogSink as PatchLokiLogSink: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConfigPatchLogSink) MarshalJSON() ([]byte, error) {
	if src.PatchLokiLogSink != nil {
		return json.Marshal(&src.PatchLokiLogSink)
	}

	return []byte("{}"), nil // no data in oneOf schemas => empty JSON object
}

// Get the actual instance
func (obj *ConfigPatchLogSink) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PatchLokiLogSink != nil {
		return obj.PatchLokiLogSink
	}

	// all schemas are nil
	return nil
}

type NullableConfigPatchLogSink struct {
	value *ConfigPatchLogSink
	isSet bool
}

func (v NullableConfigPatchLogSink) Get() *ConfigPatchLogSink {
	return v.value
}

func (v *NullableConfigPatchLogSink) Set(val *ConfigPatchLogSink) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPatchLogSink) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPatchLogSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPatchLogSink(val *ConfigPatchLogSink) *NullableConfigPatchLogSink {
	return &NullableConfigPatchLogSink{value: val, isSet: true}
}

func (v NullableConfigPatchLogSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPatchLogSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
