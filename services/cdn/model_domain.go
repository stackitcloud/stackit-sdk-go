/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the Domain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Domain{}

/*
	types and functions for errors
*/

// isArray
type DomainGetErrorsAttributeType = *[]StatusError
type DomainGetErrorsArgType = []StatusError
type DomainGetErrorsRetType = []StatusError

func getDomainGetErrorsAttributeTypeOk(arg DomainGetErrorsAttributeType) (ret DomainGetErrorsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDomainGetErrorsAttributeType(arg *DomainGetErrorsAttributeType, val DomainGetErrorsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type DomainGetNameAttributeType = *string

func getDomainGetNameAttributeTypeOk(arg DomainGetNameAttributeType) (ret DomainGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDomainGetNameAttributeType(arg *DomainGetNameAttributeType, val DomainGetNameRetType) {
	*arg = &val
}

type DomainGetNameArgType = string
type DomainGetNameRetType = string

/*
	types and functions for status
*/

// isEnumRef
type DomainGetStatusAttributeType = *DomainStatus
type DomainGetStatusArgType = DomainStatus
type DomainGetStatusRetType = DomainStatus

func getDomainGetStatusAttributeTypeOk(arg DomainGetStatusAttributeType) (ret DomainGetStatusRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDomainGetStatusAttributeType(arg *DomainGetStatusAttributeType, val DomainGetStatusRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isEnumRef
type DomainGetTypeAttributeType = *string
type DomainGetTypeArgType = string
type DomainGetTypeRetType = string

func getDomainGetTypeAttributeTypeOk(arg DomainGetTypeAttributeType) (ret DomainGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDomainGetTypeAttributeType(arg *DomainGetTypeAttributeType, val DomainGetTypeRetType) {
	*arg = &val
}

// Domain Definition of a custom or managed domain without any certificates or keys
type Domain struct {
	// This object is present if the custom domain has errors.
	Errors DomainGetErrorsAttributeType `json:"errors,omitempty"`
	// The domain. If this is a custom domain, you can call the GetCustomDomain Endpoint
	// REQUIRED
	Name DomainGetNameAttributeType `json:"name"`
	// REQUIRED
	Status DomainGetStatusAttributeType `json:"status"`
	// Specifies the type of this Domain. Custom Domain can be further queries using the GetCustomDomain Endpoint
	// REQUIRED
	Type DomainGetTypeAttributeType `json:"type"`
}

type _Domain Domain

// NewDomain instantiates a new Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomain(name DomainGetNameArgType, status DomainGetStatusArgType, type_ DomainGetTypeArgType) *Domain {
	this := Domain{}
	setDomainGetNameAttributeType(&this.Name, name)
	setDomainGetStatusAttributeType(&this.Status, status)
	setDomainGetTypeAttributeType(&this.Type, type_)
	return &this
}

// NewDomainWithDefaults instantiates a new Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainWithDefaults() *Domain {
	this := Domain{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Domain) GetErrors() (res DomainGetErrorsRetType) {
	res, _ = o.GetErrorsOk()
	return
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetErrorsOk() (ret DomainGetErrorsRetType, ok bool) {
	return getDomainGetErrorsAttributeTypeOk(o.Errors)
}

// HasErrors returns a boolean if a field has been set.
func (o *Domain) HasErrors() bool {
	_, ok := o.GetErrorsOk()
	return ok
}

// SetErrors gets a reference to the given []StatusError and assigns it to the Errors field.
func (o *Domain) SetErrors(v DomainGetErrorsRetType) {
	setDomainGetErrorsAttributeType(&o.Errors, v)
}

// GetName returns the Name field value
func (o *Domain) GetName() (ret DomainGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Domain) GetNameOk() (ret DomainGetNameRetType, ok bool) {
	return getDomainGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Domain) SetName(v DomainGetNameRetType) {
	setDomainGetNameAttributeType(&o.Name, v)
}

// GetStatus returns the Status field value
func (o *Domain) GetStatus() (ret DomainGetStatusRetType) {
	ret, _ = o.GetStatusOk()
	return ret
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Domain) GetStatusOk() (ret DomainGetStatusRetType, ok bool) {
	return getDomainGetStatusAttributeTypeOk(o.Status)
}

// SetStatus sets field value
func (o *Domain) SetStatus(v DomainGetStatusRetType) {
	setDomainGetStatusAttributeType(&o.Status, v)
}

// GetType returns the Type field value
func (o *Domain) GetType() (ret DomainGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Domain) GetTypeOk() (ret DomainGetTypeRetType, ok bool) {
	return getDomainGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *Domain) SetType(v DomainGetTypeRetType) {
	setDomainGetTypeAttributeType(&o.Type, v)
}

func (o Domain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getDomainGetErrorsAttributeTypeOk(o.Errors); ok {
		toSerialize["Errors"] = val
	}
	if val, ok := getDomainGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getDomainGetStatusAttributeTypeOk(o.Status); ok {
		toSerialize["Status"] = val
	}
	if val, ok := getDomainGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableDomain struct {
	value *Domain
	isSet bool
}

func (v NullableDomain) Get() *Domain {
	return v.value
}

func (v *NullableDomain) Set(val *Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomain(val *Domain) *NullableDomain {
	return &NullableDomain{value: val, isSet: true}
}

func (v NullableDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
