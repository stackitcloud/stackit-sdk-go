/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FindCachePathsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindCachePathsResponse{}

/*
	types and functions for response
*/

// isArray
type FindCachePathsResponseGetResponseAttributeType = *[]FindCachePathsResponseEntry
type FindCachePathsResponseGetResponseArgType = []FindCachePathsResponseEntry
type FindCachePathsResponseGetResponseRetType = []FindCachePathsResponseEntry

func getFindCachePathsResponseGetResponseAttributeTypeOk(arg FindCachePathsResponseGetResponseAttributeType) (ret FindCachePathsResponseGetResponseRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFindCachePathsResponseGetResponseAttributeType(arg *FindCachePathsResponseGetResponseAttributeType, val FindCachePathsResponseGetResponseRetType) {
	*arg = &val
}

// FindCachePathsResponse struct for FindCachePathsResponse
type FindCachePathsResponse struct {
	// REQUIRED
	Response FindCachePathsResponseGetResponseAttributeType `json:"response"`
}

type _FindCachePathsResponse FindCachePathsResponse

// NewFindCachePathsResponse instantiates a new FindCachePathsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindCachePathsResponse(response FindCachePathsResponseGetResponseArgType) *FindCachePathsResponse {
	this := FindCachePathsResponse{}
	setFindCachePathsResponseGetResponseAttributeType(&this.Response, response)
	return &this
}

// NewFindCachePathsResponseWithDefaults instantiates a new FindCachePathsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindCachePathsResponseWithDefaults() *FindCachePathsResponse {
	this := FindCachePathsResponse{}
	return &this
}

// GetResponse returns the Response field value
func (o *FindCachePathsResponse) GetResponse() (ret FindCachePathsResponseGetResponseRetType) {
	ret, _ = o.GetResponseOk()
	return ret
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *FindCachePathsResponse) GetResponseOk() (ret FindCachePathsResponseGetResponseRetType, ok bool) {
	return getFindCachePathsResponseGetResponseAttributeTypeOk(o.Response)
}

// SetResponse sets field value
func (o *FindCachePathsResponse) SetResponse(v FindCachePathsResponseGetResponseRetType) {
	setFindCachePathsResponseGetResponseAttributeType(&o.Response, v)
}

func (o FindCachePathsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindCachePathsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getFindCachePathsResponseGetResponseAttributeTypeOk(o.Response); ok {
		toSerialize["Response"] = val
	}
	return toSerialize, nil
}

func (o *FindCachePathsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"response",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFindCachePathsResponse := _FindCachePathsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFindCachePathsResponse)

	if err != nil {
		return err
	}

	*o = FindCachePathsResponse(varFindCachePathsResponse)

	return err
}

type NullableFindCachePathsResponse struct {
	value *FindCachePathsResponse
	isSet bool
}

func (v NullableFindCachePathsResponse) Get() *FindCachePathsResponse {
	return v.value
}

func (v *NullableFindCachePathsResponse) Set(val *FindCachePathsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFindCachePathsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFindCachePathsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindCachePathsResponse(val *FindCachePathsResponse) *NullableFindCachePathsResponse {
	return &NullableFindCachePathsResponse{value: val, isSet: true}
}

func (v NullableFindCachePathsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindCachePathsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
