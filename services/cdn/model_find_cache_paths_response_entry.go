/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FindCachePathsResponseEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindCachePathsResponseEntry{}

/*
	types and functions for path
*/

// isNotNullableString
type FindCachePathsResponseEntryGetPathAttributeType = *string

func getFindCachePathsResponseEntryGetPathAttributeTypeOk(arg FindCachePathsResponseEntryGetPathAttributeType) (ret FindCachePathsResponseEntryGetPathRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFindCachePathsResponseEntryGetPathAttributeType(arg *FindCachePathsResponseEntryGetPathAttributeType, val FindCachePathsResponseEntryGetPathRetType) {
	*arg = &val
}

type FindCachePathsResponseEntryGetPathArgType = string
type FindCachePathsResponseEntryGetPathRetType = string

// FindCachePathsResponseEntry struct for FindCachePathsResponseEntry
type FindCachePathsResponseEntry struct {
	// Defines one path that was previously used as part of a granular purge
	// REQUIRED
	Path FindCachePathsResponseEntryGetPathAttributeType `json:"path"`
}

type _FindCachePathsResponseEntry FindCachePathsResponseEntry

// NewFindCachePathsResponseEntry instantiates a new FindCachePathsResponseEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindCachePathsResponseEntry(path FindCachePathsResponseEntryGetPathArgType) *FindCachePathsResponseEntry {
	this := FindCachePathsResponseEntry{}
	setFindCachePathsResponseEntryGetPathAttributeType(&this.Path, path)
	return &this
}

// NewFindCachePathsResponseEntryWithDefaults instantiates a new FindCachePathsResponseEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindCachePathsResponseEntryWithDefaults() *FindCachePathsResponseEntry {
	this := FindCachePathsResponseEntry{}
	return &this
}

// GetPath returns the Path field value
func (o *FindCachePathsResponseEntry) GetPath() (ret FindCachePathsResponseEntryGetPathRetType) {
	ret, _ = o.GetPathOk()
	return ret
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FindCachePathsResponseEntry) GetPathOk() (ret FindCachePathsResponseEntryGetPathRetType, ok bool) {
	return getFindCachePathsResponseEntryGetPathAttributeTypeOk(o.Path)
}

// SetPath sets field value
func (o *FindCachePathsResponseEntry) SetPath(v FindCachePathsResponseEntryGetPathRetType) {
	setFindCachePathsResponseEntryGetPathAttributeType(&o.Path, v)
}

func (o FindCachePathsResponseEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindCachePathsResponseEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getFindCachePathsResponseEntryGetPathAttributeTypeOk(o.Path); ok {
		toSerialize["Path"] = val
	}
	return toSerialize, nil
}

func (o *FindCachePathsResponseEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFindCachePathsResponseEntry := _FindCachePathsResponseEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFindCachePathsResponseEntry)

	if err != nil {
		return err
	}

	*o = FindCachePathsResponseEntry(varFindCachePathsResponseEntry)

	return err
}

type NullableFindCachePathsResponseEntry struct {
	value *FindCachePathsResponseEntry
	isSet bool
}

func (v NullableFindCachePathsResponseEntry) Get() *FindCachePathsResponseEntry {
	return v.value
}

func (v *NullableFindCachePathsResponseEntry) Set(val *FindCachePathsResponseEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFindCachePathsResponseEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFindCachePathsResponseEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindCachePathsResponseEntry(val *FindCachePathsResponseEntry) *NullableFindCachePathsResponseEntry {
	return &NullableFindCachePathsResponseEntry{value: val, isSet: true}
}

func (v NullableFindCachePathsResponseEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindCachePathsResponseEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
