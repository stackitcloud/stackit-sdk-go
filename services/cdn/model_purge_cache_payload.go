/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
)

// checks if the PurgeCachePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurgeCachePayload{}

/*
	types and functions for path
*/

// isNotNullableString
type PurgeCachePayloadGetPathAttributeType = *string

func getPurgeCachePayloadGetPathAttributeTypeOk(arg PurgeCachePayloadGetPathAttributeType) (ret PurgeCachePayloadGetPathRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPurgeCachePayloadGetPathAttributeType(arg *PurgeCachePayloadGetPathAttributeType, val PurgeCachePayloadGetPathRetType) {
	*arg = &val
}

type PurgeCachePayloadGetPathArgType = string
type PurgeCachePayloadGetPathRetType = string

// PurgeCachePayload struct for PurgeCachePayload
type PurgeCachePayload struct {
	// Defines an optional path. If this is set, a granular purge is done. If missing, the entire cache is invalidated.  During a granular cache purge, only the provided path is purged.   Please do not that for example `/some/path` and `/some/path.txt` are considered different paths.
	Path PurgeCachePayloadGetPathAttributeType `json:"path,omitempty"`
}

// NewPurgeCachePayload instantiates a new PurgeCachePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurgeCachePayload() *PurgeCachePayload {
	this := PurgeCachePayload{}
	return &this
}

// NewPurgeCachePayloadWithDefaults instantiates a new PurgeCachePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurgeCachePayloadWithDefaults() *PurgeCachePayload {
	this := PurgeCachePayload{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PurgeCachePayload) GetPath() (res PurgeCachePayloadGetPathRetType) {
	res, _ = o.GetPathOk()
	return
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurgeCachePayload) GetPathOk() (ret PurgeCachePayloadGetPathRetType, ok bool) {
	return getPurgeCachePayloadGetPathAttributeTypeOk(o.Path)
}

// HasPath returns a boolean if a field has been set.
func (o *PurgeCachePayload) HasPath() bool {
	_, ok := o.GetPathOk()
	return ok
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PurgeCachePayload) SetPath(v PurgeCachePayloadGetPathRetType) {
	setPurgeCachePayloadGetPathAttributeType(&o.Path, v)
}

func (o PurgeCachePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getPurgeCachePayloadGetPathAttributeTypeOk(o.Path); ok {
		toSerialize["Path"] = val
	}
	return toSerialize, nil
}

type NullablePurgeCachePayload struct {
	value *PurgeCachePayload
	isSet bool
}

func (v NullablePurgeCachePayload) Get() *PurgeCachePayload {
	return v.value
}

func (v *NullablePurgeCachePayload) Set(val *PurgeCachePayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePurgeCachePayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePurgeCachePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurgeCachePayload(val *PurgeCachePayload) *NullablePurgeCachePayload {
	return &NullablePurgeCachePayload{value: val, isSet: true}
}

func (v NullablePurgeCachePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurgeCachePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
