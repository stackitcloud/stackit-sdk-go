/*
CDN API

API used to create and manage your CDN distributions.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn

import (
	"encoding/json"
	"fmt"
)

// Region The following regions exist: - `EU` - Europe - `US` - United States / North America - `AF` - Africa - `SA` - South America - `ASIA` - Asia and Oceania
type Region string

// List of Region
const (
	REGION_EU   Region = "EU"
	REGION_US   Region = "US"
	REGION_AF   Region = "AF"
	REGION_SA   Region = "SA"
	REGION_ASIA Region = "ASIA"
)

// All allowed values of Region enum
var AllowedRegionEnumValues = []Region{
	"EU",
	"US",
	"AF",
	"SA",
	"ASIA",
}

func (v *Region) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := Region(value)
	for _, existing := range AllowedRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Region", value)
}

// NewRegionFromValue returns a pointer to a valid Region
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegionFromValue(v string) (*Region, error) {
	ev := Region(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Region: valid values are %v", v, AllowedRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Region) IsValid() bool {
	for _, existing := range AllowedRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Region value
func (v Region) Ptr() *Region {
	return &v
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
