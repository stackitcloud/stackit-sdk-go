/*
STACKIT Object Storage API

STACKIT API to manage the Object Storage

API version: 1.0.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
	"fmt"
)

// ProjectScope The scope of a STACKIT project can be public (default) or can have client specific special requirements.
type ProjectScope string

// List of ProjectScope
const (
	PROJECTSCOPE_PUBLIC  ProjectScope = "PUBLIC"
	PROJECTSCOPE_SCHWARZ ProjectScope = "SCHWARZ"
)

// All allowed values of ProjectScope enum
var AllowedProjectScopeEnumValues = []ProjectScope{
	"PUBLIC",
	"SCHWARZ",
}

func (v *ProjectScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ProjectScope(value)
	for _, existing := range AllowedProjectScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProjectScope", value)
}

// NewProjectScopeFromValue returns a pointer to a valid ProjectScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProjectScopeFromValue(v string) (*ProjectScope, error) {
	ev := ProjectScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProjectScope: valid values are %v", v, AllowedProjectScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProjectScope) IsValid() bool {
	for _, existing := range AllowedProjectScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProjectScope value
func (v ProjectScope) Ptr() *ProjectScope {
	return &v
}

type NullableProjectScope struct {
	value *ProjectScope
	isSet bool
}

func (v NullableProjectScope) Get() *ProjectScope {
	return v.value
}

func (v *NullableProjectScope) Set(val *ProjectScope) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectScope) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectScope(val *ProjectScope) *NullableProjectScope {
	return &NullableProjectScope{value: val, isSet: true}
}

func (v NullableProjectScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
