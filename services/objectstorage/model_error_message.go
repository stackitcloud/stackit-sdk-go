/*
STACKIT Object Storage API

STACKIT API to manage the Object Storage

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

// checks if the ErrorMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorMessage{}

/*
	types and functions for detail
*/

// isArray
type ErrorMessageGetDetailAttributeType = *[]DetailedError
type ErrorMessageGetDetailArgType = []DetailedError
type ErrorMessageGetDetailRetType = []DetailedError

func getErrorMessageGetDetailAttributeTypeOk(arg ErrorMessageGetDetailAttributeType) (ret ErrorMessageGetDetailRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorMessageGetDetailAttributeType(arg *ErrorMessageGetDetailAttributeType, val ErrorMessageGetDetailRetType) {
	*arg = &val
}

// ErrorMessage struct for ErrorMessage
type ErrorMessage struct {
	// REQUIRED
	Detail ErrorMessageGetDetailAttributeType `json:"detail" required:"true"`
}

type _ErrorMessage ErrorMessage

// NewErrorMessage instantiates a new ErrorMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorMessage(detail ErrorMessageGetDetailArgType) *ErrorMessage {
	this := ErrorMessage{}
	setErrorMessageGetDetailAttributeType(&this.Detail, detail)
	return &this
}

// NewErrorMessageWithDefaults instantiates a new ErrorMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorMessageWithDefaults() *ErrorMessage {
	this := ErrorMessage{}
	return &this
}

// GetDetail returns the Detail field value
func (o *ErrorMessage) GetDetail() (ret ErrorMessageGetDetailRetType) {
	ret, _ = o.GetDetailOk()
	return ret
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetDetailOk() (ret ErrorMessageGetDetailRetType, ok bool) {
	return getErrorMessageGetDetailAttributeTypeOk(o.Detail)
}

// SetDetail sets field value
func (o *ErrorMessage) SetDetail(v ErrorMessageGetDetailRetType) {
	setErrorMessageGetDetailAttributeType(&o.Detail, v)
}

func (o ErrorMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getErrorMessageGetDetailAttributeTypeOk(o.Detail); ok {
		toSerialize["Detail"] = val
	}
	return toSerialize, nil
}

type NullableErrorMessage struct {
	value *ErrorMessage
	isSet bool
}

func (v NullableErrorMessage) Get() *ErrorMessage {
	return v.value
}

func (v *NullableErrorMessage) Set(val *ErrorMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorMessage(val *ErrorMessage) *NullableErrorMessage {
	return &NullableErrorMessage{value: val, isSet: true}
}

func (v NullableErrorMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
