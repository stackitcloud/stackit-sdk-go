/*
STACKIT Object Storage API

STACKIT API to manage the Object Storage

API version: 1.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

// checks if the ProjectStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectStatus{}

// ProjectStatus struct for ProjectStatus
type ProjectStatus struct {
	// Project ID
	// REQUIRED
	Project *string `json:"project"`
	// REQUIRED
	Scope *ProjectScope `json:"scope"`
}

type _ProjectStatus ProjectStatus

// NewProjectStatus instantiates a new ProjectStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectStatus(project *string, scope *ProjectScope) *ProjectStatus {
	this := ProjectStatus{}
	this.Project = project
	this.Scope = scope
	return &this
}

// NewProjectStatusWithDefaults instantiates a new ProjectStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectStatusWithDefaults() *ProjectStatus {
	this := ProjectStatus{}
	return &this
}

// GetProject returns the Project field value
func (o *ProjectStatus) GetProject() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Project, true
}

// SetProject sets field value
func (o *ProjectStatus) SetProject(v *string) {
	o.Project = v
}

// GetScope returns the Scope field value
func (o *ProjectStatus) GetScope() *ProjectScope {
	if o == nil {
		var ret *ProjectScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetScopeOk() (*ProjectScope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope, true
}

// SetScope sets field value
func (o *ProjectStatus) SetScope(v *ProjectScope) {
	o.Scope = v
}

func (o ProjectStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	toSerialize["scope"] = o.Scope
	return toSerialize, nil
}

type NullableProjectStatus struct {
	value *ProjectStatus
	isSet bool
}

func (v NullableProjectStatus) Get() *ProjectStatus {
	return v.value
}

func (v *NullableProjectStatus) Set(val *ProjectStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectStatus(val *ProjectStatus) *NullableProjectStatus {
	return &NullableProjectStatus{value: val, isSet: true}
}

func (v NullableProjectStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
