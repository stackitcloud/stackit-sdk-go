/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudService{}

/*
	types and functions for dependencies
*/

// isModel
type CloudServiceGetDependenciesAttributeType = *Dependencies
type CloudServiceGetDependenciesArgType = Dependencies
type CloudServiceGetDependenciesRetType = Dependencies

func getCloudServiceGetDependenciesAttributeTypeOk(arg CloudServiceGetDependenciesAttributeType) (ret CloudServiceGetDependenciesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCloudServiceGetDependenciesAttributeType(arg *CloudServiceGetDependenciesAttributeType, val CloudServiceGetDependenciesRetType) {
	*arg = &val
}

/*
	types and functions for labels
*/

// isContainer
type CloudServiceGetLabelsAttributeType = *map[string]string
type CloudServiceGetLabelsArgType = map[string]string
type CloudServiceGetLabelsRetType = map[string]string

func getCloudServiceGetLabelsAttributeTypeOk(arg CloudServiceGetLabelsAttributeType) (ret CloudServiceGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCloudServiceGetLabelsAttributeType(arg *CloudServiceGetLabelsAttributeType, val CloudServiceGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for scope
*/

// isEnum

// CloudServiceScope the model 'CloudService'
type CloudServiceScope string

// List of Scope
const (
	CLOUDSERVICESCOPE_PRIVATE CloudServiceScope = "PRIVATE"
	CLOUDSERVICESCOPE_PUBLIC  CloudServiceScope = "PUBLIC"
)

// All allowed values of CloudService enum
var AllowedCloudServiceScopeEnumValues = []CloudServiceScope{
	"PRIVATE",
	"PUBLIC",
}

func (v *CloudServiceScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := CloudServiceScope(value)
	for _, existing := range AllowedCloudServiceScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudService", value)
}

// NewCloudServiceScopeFromValue returns a pointer to a valid CloudServiceScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudServiceScopeFromValue(v string) (*CloudServiceScope, error) {
	ev := CloudServiceScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudServiceScope: valid values are %v", v, AllowedCloudServiceScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudServiceScope) IsValid() bool {
	for _, existing := range AllowedCloudServiceScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScopeScope value
func (v CloudServiceScope) Ptr() *CloudServiceScope {
	return &v
}

type NullableCloudServiceScope struct {
	value *CloudServiceScope
	isSet bool
}

func (v NullableCloudServiceScope) Get() *CloudServiceScope {
	return v.value
}

func (v *NullableCloudServiceScope) Set(val *CloudServiceScope) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudServiceScope) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudServiceScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudServiceScope(val *CloudServiceScope) *NullableCloudServiceScope {
	return &NullableCloudServiceScope{value: val, isSet: true}
}

func (v NullableCloudServiceScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudServiceScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type CloudServiceGetScopeAttributeType = *CloudServiceScope
type CloudServiceGetScopeArgType = CloudServiceScope
type CloudServiceGetScopeRetType = CloudServiceScope

func getCloudServiceGetScopeAttributeTypeOk(arg CloudServiceGetScopeAttributeType) (ret CloudServiceGetScopeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCloudServiceGetScopeAttributeType(arg *CloudServiceGetScopeAttributeType, val CloudServiceGetScopeRetType) {
	*arg = &val
}

/*
	types and functions for serviceId
*/

// isNotNullableString
type CloudServiceGetServiceIdAttributeType = *string

func getCloudServiceGetServiceIdAttributeTypeOk(arg CloudServiceGetServiceIdAttributeType) (ret CloudServiceGetServiceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCloudServiceGetServiceIdAttributeType(arg *CloudServiceGetServiceIdAttributeType, val CloudServiceGetServiceIdRetType) {
	*arg = &val
}

type CloudServiceGetServiceIdArgType = string
type CloudServiceGetServiceIdRetType = string

// CloudService struct for CloudService
type CloudService struct {
	Dependencies CloudServiceGetDependenciesAttributeType `json:"dependencies,omitempty"`
	Labels       CloudServiceGetLabelsAttributeType       `json:"labels,omitempty"`
	Scope        CloudServiceGetScopeAttributeType        `json:"scope,omitempty"`
	// the id of the service
	ServiceId CloudServiceGetServiceIdAttributeType `json:"serviceId,omitempty"`
}

// NewCloudService instantiates a new CloudService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudService() *CloudService {
	this := CloudService{}
	return &this
}

// NewCloudServiceWithDefaults instantiates a new CloudService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudServiceWithDefaults() *CloudService {
	this := CloudService{}
	var scope CloudServiceScope = "PUBLIC"
	this.Scope = &scope
	return &this
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *CloudService) GetDependencies() (res CloudServiceGetDependenciesRetType) {
	res, _ = o.GetDependenciesOk()
	return
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetDependenciesOk() (ret CloudServiceGetDependenciesRetType, ok bool) {
	return getCloudServiceGetDependenciesAttributeTypeOk(o.Dependencies)
}

// HasDependencies returns a boolean if a field has been set.
func (o *CloudService) HasDependencies() bool {
	_, ok := o.GetDependenciesOk()
	return ok
}

// SetDependencies gets a reference to the given Dependencies and assigns it to the Dependencies field.
func (o *CloudService) SetDependencies(v CloudServiceGetDependenciesRetType) {
	setCloudServiceGetDependenciesAttributeType(&o.Dependencies, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CloudService) GetLabels() (res CloudServiceGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetLabelsOk() (ret CloudServiceGetLabelsRetType, ok bool) {
	return getCloudServiceGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *CloudService) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CloudService) SetLabels(v CloudServiceGetLabelsRetType) {
	setCloudServiceGetLabelsAttributeType(&o.Labels, v)
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CloudService) GetScope() (res CloudServiceGetScopeRetType) {
	res, _ = o.GetScopeOk()
	return
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetScopeOk() (ret CloudServiceGetScopeRetType, ok bool) {
	return getCloudServiceGetScopeAttributeTypeOk(o.Scope)
}

// HasScope returns a boolean if a field has been set.
func (o *CloudService) HasScope() bool {
	_, ok := o.GetScopeOk()
	return ok
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CloudService) SetScope(v CloudServiceGetScopeRetType) {
	setCloudServiceGetScopeAttributeType(&o.Scope, v)
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *CloudService) GetServiceId() (res CloudServiceGetServiceIdRetType) {
	res, _ = o.GetServiceIdOk()
	return
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetServiceIdOk() (ret CloudServiceGetServiceIdRetType, ok bool) {
	return getCloudServiceGetServiceIdAttributeTypeOk(o.ServiceId)
}

// HasServiceId returns a boolean if a field has been set.
func (o *CloudService) HasServiceId() bool {
	_, ok := o.GetServiceIdOk()
	return ok
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *CloudService) SetServiceId(v CloudServiceGetServiceIdRetType) {
	setCloudServiceGetServiceIdAttributeType(&o.ServiceId, v)
}

func (o CloudService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCloudServiceGetDependenciesAttributeTypeOk(o.Dependencies); ok {
		toSerialize["Dependencies"] = val
	}
	if val, ok := getCloudServiceGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getCloudServiceGetScopeAttributeTypeOk(o.Scope); ok {
		toSerialize["Scope"] = val
	}
	if val, ok := getCloudServiceGetServiceIdAttributeTypeOk(o.ServiceId); ok {
		toSerialize["ServiceId"] = val
	}
	return toSerialize, nil
}

type NullableCloudService struct {
	value *CloudService
	isSet bool
}

func (v NullableCloudService) Get() *CloudService {
	return v.value
}

func (v *NullableCloudService) Set(val *CloudService) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudService) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudService(val *CloudService) *NullableCloudService {
	return &NullableCloudService{value: val, isSet: true}
}

func (v NullableCloudService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
