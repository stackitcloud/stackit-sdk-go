/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
)

// checks if the CloudService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudService{}

// CloudService struct for CloudService
type CloudService struct {
	Dependencies *Dependencies      `json:"dependencies,omitempty"`
	Labels       *map[string]string `json:"labels,omitempty"`
	Scope        *string            `json:"scope,omitempty"`
	// the id of the service
	ServiceId *string `json:"serviceId,omitempty"`
}

// NewCloudService instantiates a new CloudService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudService() *CloudService {
	this := CloudService{}
	var scope string = "PUBLIC"
	this.Scope = &scope
	return &this
}

// NewCloudServiceWithDefaults instantiates a new CloudService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudServiceWithDefaults() *CloudService {
	this := CloudService{}
	var scope string = "PUBLIC"
	this.Scope = &scope
	return &this
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *CloudService) GetDependencies() *Dependencies {
	if o == nil || IsNil(o.Dependencies) {
		var ret *Dependencies
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetDependenciesOk() (*Dependencies, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *CloudService) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given Dependencies and assigns it to the Dependencies field.
func (o *CloudService) SetDependencies(v *Dependencies) {
	o.Dependencies = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CloudService) GetLabels() *map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CloudService) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CloudService) SetLabels(v *map[string]string) {
	o.Labels = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CloudService) GetScope() *string {
	if o == nil || IsNil(o.Scope) {
		var ret *string
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CloudService) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CloudService) SetScope(v *string) {
	o.Scope = v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *CloudService) GetServiceId() *string {
	if o == nil || IsNil(o.ServiceId) {
		var ret *string
		return ret
	}
	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudService) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *CloudService) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *CloudService) SetServiceId(v *string) {
	o.ServiceId = v
}

func (o CloudService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	return toSerialize, nil
}

type NullableCloudService struct {
	value *CloudService
	isSet bool
}

func (v NullableCloudService) Get() *CloudService {
	return v.value
}

func (v *NullableCloudService) Set(val *CloudService) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudService) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudService(val *CloudService) *NullableCloudService {
	return &NullableCloudService{value: val, isSet: true}
}

func (v NullableCloudService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
