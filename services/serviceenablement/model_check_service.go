/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
	"fmt"
)

// checks if the CheckService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckService{}

/*
	types and functions for resource
*/

// isNotNullableString
type CheckServiceGetResourceAttributeType = *string

func getCheckServiceGetResourceAttributeTypeOk(arg CheckServiceGetResourceAttributeType) (ret CheckServiceGetResourceRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCheckServiceGetResourceAttributeType(arg *CheckServiceGetResourceAttributeType, val CheckServiceGetResourceRetType) {
	*arg = &val
}

type CheckServiceGetResourceArgType = string
type CheckServiceGetResourceRetType = string

/*
	types and functions for resourceType
*/

// isEnum

// CheckServiceResourceType the model 'CheckService'
type CheckServiceResourceType string

// List of ResourceType
const (
	CHECKSERVICERESOURCE_TYPE_PROJECT CheckServiceResourceType = "project"
)

// All allowed values of CheckService enum
var AllowedCheckServiceResourceTypeEnumValues = []CheckServiceResourceType{
	"project",
}

func (v *CheckServiceResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := CheckServiceResourceType(value)
	for _, existing := range AllowedCheckServiceResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CheckService", value)
}

// NewCheckServiceResourceTypeFromValue returns a pointer to a valid CheckServiceResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCheckServiceResourceTypeFromValue(v string) (*CheckServiceResourceType, error) {
	ev := CheckServiceResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CheckServiceResourceType: valid values are %v", v, AllowedCheckServiceResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CheckServiceResourceType) IsValid() bool {
	for _, existing := range AllowedCheckServiceResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceTypeResourceType value
func (v CheckServiceResourceType) Ptr() *CheckServiceResourceType {
	return &v
}

type NullableCheckServiceResourceType struct {
	value *CheckServiceResourceType
	isSet bool
}

func (v NullableCheckServiceResourceType) Get() *CheckServiceResourceType {
	return v.value
}

func (v *NullableCheckServiceResourceType) Set(val *CheckServiceResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckServiceResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckServiceResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckServiceResourceType(val *CheckServiceResourceType) *NullableCheckServiceResourceType {
	return &NullableCheckServiceResourceType{value: val, isSet: true}
}

func (v NullableCheckServiceResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckServiceResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type CheckServiceGetResourceTypeAttributeType = *CheckServiceResourceType
type CheckServiceGetResourceTypeArgType = CheckServiceResourceType
type CheckServiceGetResourceTypeRetType = CheckServiceResourceType

func getCheckServiceGetResourceTypeAttributeTypeOk(arg CheckServiceGetResourceTypeAttributeType) (ret CheckServiceGetResourceTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCheckServiceGetResourceTypeAttributeType(arg *CheckServiceGetResourceTypeAttributeType, val CheckServiceGetResourceTypeRetType) {
	*arg = &val
}

/*
	types and functions for serviceId
*/

// isNotNullableString
type CheckServiceGetServiceIdAttributeType = *string

func getCheckServiceGetServiceIdAttributeTypeOk(arg CheckServiceGetServiceIdAttributeType) (ret CheckServiceGetServiceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCheckServiceGetServiceIdAttributeType(arg *CheckServiceGetServiceIdAttributeType, val CheckServiceGetServiceIdRetType) {
	*arg = &val
}

type CheckServiceGetServiceIdArgType = string
type CheckServiceGetServiceIdRetType = string

// CheckService struct for CheckService
type CheckService struct {
	// the identifier of the resource e.g. projectID
	Resource     CheckServiceGetResourceAttributeType     `json:"resource,omitempty"`
	ResourceType CheckServiceGetResourceTypeAttributeType `json:"resourceType,omitempty"`
	// the id of the service
	ServiceId CheckServiceGetServiceIdAttributeType `json:"serviceId,omitempty"`
}

// NewCheckService instantiates a new CheckService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckService() *CheckService {
	this := CheckService{}
	return &this
}

// NewCheckServiceWithDefaults instantiates a new CheckService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckServiceWithDefaults() *CheckService {
	this := CheckService{}
	var resourceType CheckServiceResourceType = "project"
	this.ResourceType = &resourceType
	return &this
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *CheckService) GetResource() (res CheckServiceGetResourceRetType) {
	res, _ = o.GetResourceOk()
	return
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckService) GetResourceOk() (ret CheckServiceGetResourceRetType, ok bool) {
	return getCheckServiceGetResourceAttributeTypeOk(o.Resource)
}

// HasResource returns a boolean if a field has been set.
func (o *CheckService) HasResource() bool {
	_, ok := o.GetResourceOk()
	return ok
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *CheckService) SetResource(v CheckServiceGetResourceRetType) {
	setCheckServiceGetResourceAttributeType(&o.Resource, v)
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *CheckService) GetResourceType() (res CheckServiceGetResourceTypeRetType) {
	res, _ = o.GetResourceTypeOk()
	return
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckService) GetResourceTypeOk() (ret CheckServiceGetResourceTypeRetType, ok bool) {
	return getCheckServiceGetResourceTypeAttributeTypeOk(o.ResourceType)
}

// HasResourceType returns a boolean if a field has been set.
func (o *CheckService) HasResourceType() bool {
	_, ok := o.GetResourceTypeOk()
	return ok
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *CheckService) SetResourceType(v CheckServiceGetResourceTypeRetType) {
	setCheckServiceGetResourceTypeAttributeType(&o.ResourceType, v)
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *CheckService) GetServiceId() (res CheckServiceGetServiceIdRetType) {
	res, _ = o.GetServiceIdOk()
	return
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckService) GetServiceIdOk() (ret CheckServiceGetServiceIdRetType, ok bool) {
	return getCheckServiceGetServiceIdAttributeTypeOk(o.ServiceId)
}

// HasServiceId returns a boolean if a field has been set.
func (o *CheckService) HasServiceId() bool {
	_, ok := o.GetServiceIdOk()
	return ok
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *CheckService) SetServiceId(v CheckServiceGetServiceIdRetType) {
	setCheckServiceGetServiceIdAttributeType(&o.ServiceId, v)
}

func (o CheckService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCheckServiceGetResourceAttributeTypeOk(o.Resource); ok {
		toSerialize["Resource"] = val
	}
	if val, ok := getCheckServiceGetResourceTypeAttributeTypeOk(o.ResourceType); ok {
		toSerialize["ResourceType"] = val
	}
	if val, ok := getCheckServiceGetServiceIdAttributeTypeOk(o.ServiceId); ok {
		toSerialize["ServiceId"] = val
	}
	return toSerialize, nil
}

type NullableCheckService struct {
	value *CheckService
	isSet bool
}

func (v NullableCheckService) Get() *CheckService {
	return v.value
}

func (v *NullableCheckService) Set(val *CheckService) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckService) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckService(val *CheckService) *NullableCheckService {
	return &NullableCheckService{value: val, isSet: true}
}

func (v NullableCheckService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
