/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
)

// checks if the CheckService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckService{}

// CheckService struct for CheckService
type CheckService struct {
	// the identifier of the resource e.g. projectID
	Resource     *string `json:"resource,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	// the id of the service
	ServiceId *string `json:"serviceId,omitempty"`
}

// NewCheckService instantiates a new CheckService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckService() *CheckService {
	this := CheckService{}
	var resourceType string = "project"
	this.ResourceType = &resourceType
	return &this
}

// NewCheckServiceWithDefaults instantiates a new CheckService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckServiceWithDefaults() *CheckService {
	this := CheckService{}
	var resourceType string = "project"
	this.ResourceType = &resourceType
	return &this
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *CheckService) GetResource() *string {
	if o == nil || IsNil(o.Resource) {
		var ret *string
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckService) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *CheckService) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *CheckService) SetResource(v *string) {
	o.Resource = v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *CheckService) GetResourceType() *string {
	if o == nil || IsNil(o.ResourceType) {
		var ret *string
		return ret
	}
	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckService) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *CheckService) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *CheckService) SetResourceType(v *string) {
	o.ResourceType = v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *CheckService) GetServiceId() *string {
	if o == nil || IsNil(o.ServiceId) {
		var ret *string
		return ret
	}
	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckService) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *CheckService) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *CheckService) SetServiceId(v *string) {
	o.ServiceId = v
}

func (o CheckService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	return toSerialize, nil
}

type NullableCheckService struct {
	value *CheckService
	isSet bool
}

func (v NullableCheckService) Get() *CheckService {
	return v.value
}

func (v *NullableCheckService) Set(val *CheckService) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckService) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckService(val *CheckService) *NullableCheckService {
	return &NullableCheckService{value: val, isSet: true}
}

func (v NullableCheckService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
