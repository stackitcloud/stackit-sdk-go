/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceStatus{}

/*
	types and functions for dependencies
*/

// isModel
type ServiceStatusGetDependenciesAttributeType = *Dependencies
type ServiceStatusGetDependenciesArgType = Dependencies
type ServiceStatusGetDependenciesRetType = Dependencies

func getServiceStatusGetDependenciesAttributeTypeOk(arg ServiceStatusGetDependenciesAttributeType) (ret ServiceStatusGetDependenciesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetDependenciesAttributeType(arg *ServiceStatusGetDependenciesAttributeType, val ServiceStatusGetDependenciesRetType) {
	*arg = &val
}

/*
	types and functions for enablement
*/

// isEnum

// ServiceStatusEnablement the model 'ServiceStatus'
type ServiceStatusEnablement string

// List of Enablement
const (
	SERVICESTATUSENABLEMENT_REQUEST ServiceStatusEnablement = "REQUEST"
	SERVICESTATUSENABLEMENT_AUTO    ServiceStatusEnablement = "AUTO"
)

// All allowed values of ServiceStatus enum
var AllowedServiceStatusEnablementEnumValues = []ServiceStatusEnablement{
	"REQUEST",
	"AUTO",
}

func (v *ServiceStatusEnablement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ServiceStatusEnablement(value)
	for _, existing := range AllowedServiceStatusEnablementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStatus", value)
}

// NewServiceStatusEnablementFromValue returns a pointer to a valid ServiceStatusEnablement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStatusEnablementFromValue(v string) (*ServiceStatusEnablement, error) {
	ev := ServiceStatusEnablement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStatusEnablement: valid values are %v", v, AllowedServiceStatusEnablementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStatusEnablement) IsValid() bool {
	for _, existing := range AllowedServiceStatusEnablementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnablementEnablement value
func (v ServiceStatusEnablement) Ptr() *ServiceStatusEnablement {
	return &v
}

type NullableServiceStatusEnablement struct {
	value *ServiceStatusEnablement
	isSet bool
}

func (v NullableServiceStatusEnablement) Get() *ServiceStatusEnablement {
	return v.value
}

func (v *NullableServiceStatusEnablement) Set(val *ServiceStatusEnablement) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusEnablement) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusEnablement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusEnablement(val *ServiceStatusEnablement) *NullableServiceStatusEnablement {
	return &NullableServiceStatusEnablement{value: val, isSet: true}
}

func (v NullableServiceStatusEnablement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusEnablement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ServiceStatusGetEnablementAttributeType = *ServiceStatusEnablement
type ServiceStatusGetEnablementArgType = ServiceStatusEnablement
type ServiceStatusGetEnablementRetType = ServiceStatusEnablement

func getServiceStatusGetEnablementAttributeTypeOk(arg ServiceStatusGetEnablementAttributeType) (ret ServiceStatusGetEnablementRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetEnablementAttributeType(arg *ServiceStatusGetEnablementAttributeType, val ServiceStatusGetEnablementRetType) {
	*arg = &val
}

/*
	types and functions for error
*/

// isModel
type ServiceStatusGetErrorAttributeType = *ActionError
type ServiceStatusGetErrorArgType = ActionError
type ServiceStatusGetErrorRetType = ActionError

func getServiceStatusGetErrorAttributeTypeOk(arg ServiceStatusGetErrorAttributeType) (ret ServiceStatusGetErrorRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetErrorAttributeType(arg *ServiceStatusGetErrorAttributeType, val ServiceStatusGetErrorRetType) {
	*arg = &val
}

/*
	types and functions for labels
*/

// isContainer
type ServiceStatusGetLabelsAttributeType = *map[string]string
type ServiceStatusGetLabelsArgType = map[string]string
type ServiceStatusGetLabelsRetType = map[string]string

func getServiceStatusGetLabelsAttributeTypeOk(arg ServiceStatusGetLabelsAttributeType) (ret ServiceStatusGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetLabelsAttributeType(arg *ServiceStatusGetLabelsAttributeType, val ServiceStatusGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for lifecycle
*/

// isEnum

// ServiceStatusLifecycle the model 'ServiceStatus'
type ServiceStatusLifecycle string

// List of Lifecycle
const (
	SERVICESTATUSLIFECYCLE_FLEX    ServiceStatusLifecycle = "FLEX"
	SERVICESTATUSLIFECYCLE_PROJECT ServiceStatusLifecycle = "PROJECT"
)

// All allowed values of ServiceStatus enum
var AllowedServiceStatusLifecycleEnumValues = []ServiceStatusLifecycle{
	"FLEX",
	"PROJECT",
}

func (v *ServiceStatusLifecycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ServiceStatusLifecycle(value)
	for _, existing := range AllowedServiceStatusLifecycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStatus", value)
}

// NewServiceStatusLifecycleFromValue returns a pointer to a valid ServiceStatusLifecycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStatusLifecycleFromValue(v string) (*ServiceStatusLifecycle, error) {
	ev := ServiceStatusLifecycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStatusLifecycle: valid values are %v", v, AllowedServiceStatusLifecycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStatusLifecycle) IsValid() bool {
	for _, existing := range AllowedServiceStatusLifecycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LifecycleLifecycle value
func (v ServiceStatusLifecycle) Ptr() *ServiceStatusLifecycle {
	return &v
}

type NullableServiceStatusLifecycle struct {
	value *ServiceStatusLifecycle
	isSet bool
}

func (v NullableServiceStatusLifecycle) Get() *ServiceStatusLifecycle {
	return v.value
}

func (v *NullableServiceStatusLifecycle) Set(val *ServiceStatusLifecycle) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusLifecycle) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusLifecycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusLifecycle(val *ServiceStatusLifecycle) *NullableServiceStatusLifecycle {
	return &NullableServiceStatusLifecycle{value: val, isSet: true}
}

func (v NullableServiceStatusLifecycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusLifecycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ServiceStatusGetLifecycleAttributeType = *ServiceStatusLifecycle
type ServiceStatusGetLifecycleArgType = ServiceStatusLifecycle
type ServiceStatusGetLifecycleRetType = ServiceStatusLifecycle

func getServiceStatusGetLifecycleAttributeTypeOk(arg ServiceStatusGetLifecycleAttributeType) (ret ServiceStatusGetLifecycleRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetLifecycleAttributeType(arg *ServiceStatusGetLifecycleAttributeType, val ServiceStatusGetLifecycleRetType) {
	*arg = &val
}

/*
	types and functions for parameters
*/

// fallback
type ServiceStatusGetParametersAttributeType = *Parameters
type ServiceStatusGetParametersArgType = Parameters
type ServiceStatusGetParametersRetType = Parameters

func getServiceStatusGetParametersAttributeTypeOk(arg ServiceStatusGetParametersAttributeType) (ret ServiceStatusGetParametersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetParametersAttributeType(arg *ServiceStatusGetParametersAttributeType, val ServiceStatusGetParametersRetType) {
	*arg = &val
}

/*
	types and functions for scope
*/

// isEnum

// ServiceStatusScope the model 'ServiceStatus'
type ServiceStatusScope string

// List of Scope
const (
	SERVICESTATUSSCOPE_PRIVATE ServiceStatusScope = "PRIVATE"
	SERVICESTATUSSCOPE_PUBLIC  ServiceStatusScope = "PUBLIC"
)

// All allowed values of ServiceStatus enum
var AllowedServiceStatusScopeEnumValues = []ServiceStatusScope{
	"PRIVATE",
	"PUBLIC",
}

func (v *ServiceStatusScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ServiceStatusScope(value)
	for _, existing := range AllowedServiceStatusScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStatus", value)
}

// NewServiceStatusScopeFromValue returns a pointer to a valid ServiceStatusScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStatusScopeFromValue(v string) (*ServiceStatusScope, error) {
	ev := ServiceStatusScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStatusScope: valid values are %v", v, AllowedServiceStatusScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStatusScope) IsValid() bool {
	for _, existing := range AllowedServiceStatusScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScopeScope value
func (v ServiceStatusScope) Ptr() *ServiceStatusScope {
	return &v
}

type NullableServiceStatusScope struct {
	value *ServiceStatusScope
	isSet bool
}

func (v NullableServiceStatusScope) Get() *ServiceStatusScope {
	return v.value
}

func (v *NullableServiceStatusScope) Set(val *ServiceStatusScope) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusScope) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusScope(val *ServiceStatusScope) *NullableServiceStatusScope {
	return &NullableServiceStatusScope{value: val, isSet: true}
}

func (v NullableServiceStatusScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ServiceStatusGetScopeAttributeType = *ServiceStatusScope
type ServiceStatusGetScopeArgType = ServiceStatusScope
type ServiceStatusGetScopeRetType = ServiceStatusScope

func getServiceStatusGetScopeAttributeTypeOk(arg ServiceStatusGetScopeAttributeType) (ret ServiceStatusGetScopeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetScopeAttributeType(arg *ServiceStatusGetScopeAttributeType, val ServiceStatusGetScopeRetType) {
	*arg = &val
}

/*
	types and functions for serviceId
*/

// isNotNullableString
type ServiceStatusGetServiceIdAttributeType = *string

func getServiceStatusGetServiceIdAttributeTypeOk(arg ServiceStatusGetServiceIdAttributeType) (ret ServiceStatusGetServiceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetServiceIdAttributeType(arg *ServiceStatusGetServiceIdAttributeType, val ServiceStatusGetServiceIdRetType) {
	*arg = &val
}

type ServiceStatusGetServiceIdArgType = string
type ServiceStatusGetServiceIdRetType = string

/*
	types and functions for state
*/

// isEnum

// ServiceStatusState the state of a service within a project
type ServiceStatusState string

// List of State
const (
	SERVICESTATUSSTATE_ENABLED   ServiceStatusState = "ENABLED"
	SERVICESTATUSSTATE_ENABLING  ServiceStatusState = "ENABLING"
	SERVICESTATUSSTATE_DISABLED  ServiceStatusState = "DISABLED"
	SERVICESTATUSSTATE_DISABLING ServiceStatusState = "DISABLING"
)

// All allowed values of ServiceStatus enum
var AllowedServiceStatusStateEnumValues = []ServiceStatusState{
	"ENABLED",
	"ENABLING",
	"DISABLED",
	"DISABLING",
}

func (v *ServiceStatusState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ServiceStatusState(value)
	for _, existing := range AllowedServiceStatusStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStatus", value)
}

// NewServiceStatusStateFromValue returns a pointer to a valid ServiceStatusState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStatusStateFromValue(v string) (*ServiceStatusState, error) {
	ev := ServiceStatusState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStatusState: valid values are %v", v, AllowedServiceStatusStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStatusState) IsValid() bool {
	for _, existing := range AllowedServiceStatusStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v ServiceStatusState) Ptr() *ServiceStatusState {
	return &v
}

type NullableServiceStatusState struct {
	value *ServiceStatusState
	isSet bool
}

func (v NullableServiceStatusState) Get() *ServiceStatusState {
	return v.value
}

func (v *NullableServiceStatusState) Set(val *ServiceStatusState) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusState) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusState(val *ServiceStatusState) *NullableServiceStatusState {
	return &NullableServiceStatusState{value: val, isSet: true}
}

func (v NullableServiceStatusState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ServiceStatusGetStateAttributeType = *ServiceStatusState
type ServiceStatusGetStateArgType = ServiceStatusState
type ServiceStatusGetStateRetType = ServiceStatusState

func getServiceStatusGetStateAttributeTypeOk(arg ServiceStatusGetStateAttributeType) (ret ServiceStatusGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServiceStatusGetStateAttributeType(arg *ServiceStatusGetStateAttributeType, val ServiceStatusGetStateRetType) {
	*arg = &val
}

// ServiceStatus struct for ServiceStatus
type ServiceStatus struct {
	Dependencies ServiceStatusGetDependenciesAttributeType `json:"dependencies,omitempty"`
	Enablement   ServiceStatusGetEnablementAttributeType   `json:"enablement,omitempty"`
	Error        ServiceStatusGetErrorAttributeType        `json:"error,omitempty"`
	Labels       ServiceStatusGetLabelsAttributeType       `json:"labels,omitempty"`
	Lifecycle    ServiceStatusGetLifecycleAttributeType    `json:"lifecycle,omitempty"`
	Parameters   ServiceStatusGetParametersAttributeType   `json:"parameters,omitempty"`
	Scope        ServiceStatusGetScopeAttributeType        `json:"scope,omitempty"`
	// the id of the service
	ServiceId ServiceStatusGetServiceIdAttributeType `json:"serviceId,omitempty"`
	// the state of a service within a project
	State ServiceStatusGetStateAttributeType `json:"state,omitempty"`
}

// NewServiceStatus instantiates a new ServiceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStatus() *ServiceStatus {
	this := ServiceStatus{}
	return &this
}

// NewServiceStatusWithDefaults instantiates a new ServiceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStatusWithDefaults() *ServiceStatus {
	this := ServiceStatus{}
	var enablement ServiceStatusEnablement = "REQUEST"
	this.Enablement = &enablement
	var lifecycle ServiceStatusLifecycle = "FLEX"
	this.Lifecycle = &lifecycle
	var scope ServiceStatusScope = "PUBLIC"
	this.Scope = &scope
	var state ServiceStatusState = "ENABLED"
	this.State = &state
	return &this
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *ServiceStatus) GetDependencies() (res ServiceStatusGetDependenciesRetType) {
	res, _ = o.GetDependenciesOk()
	return
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetDependenciesOk() (ret ServiceStatusGetDependenciesRetType, ok bool) {
	return getServiceStatusGetDependenciesAttributeTypeOk(o.Dependencies)
}

// HasDependencies returns a boolean if a field has been set.
func (o *ServiceStatus) HasDependencies() bool {
	_, ok := o.GetDependenciesOk()
	return ok
}

// SetDependencies gets a reference to the given Dependencies and assigns it to the Dependencies field.
func (o *ServiceStatus) SetDependencies(v ServiceStatusGetDependenciesRetType) {
	setServiceStatusGetDependenciesAttributeType(&o.Dependencies, v)
}

// GetEnablement returns the Enablement field value if set, zero value otherwise.
func (o *ServiceStatus) GetEnablement() (res ServiceStatusGetEnablementRetType) {
	res, _ = o.GetEnablementOk()
	return
}

// GetEnablementOk returns a tuple with the Enablement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetEnablementOk() (ret ServiceStatusGetEnablementRetType, ok bool) {
	return getServiceStatusGetEnablementAttributeTypeOk(o.Enablement)
}

// HasEnablement returns a boolean if a field has been set.
func (o *ServiceStatus) HasEnablement() bool {
	_, ok := o.GetEnablementOk()
	return ok
}

// SetEnablement gets a reference to the given string and assigns it to the Enablement field.
func (o *ServiceStatus) SetEnablement(v ServiceStatusGetEnablementRetType) {
	setServiceStatusGetEnablementAttributeType(&o.Enablement, v)
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ServiceStatus) GetError() (res ServiceStatusGetErrorRetType) {
	res, _ = o.GetErrorOk()
	return
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetErrorOk() (ret ServiceStatusGetErrorRetType, ok bool) {
	return getServiceStatusGetErrorAttributeTypeOk(o.Error)
}

// HasError returns a boolean if a field has been set.
func (o *ServiceStatus) HasError() bool {
	_, ok := o.GetErrorOk()
	return ok
}

// SetError gets a reference to the given ActionError and assigns it to the Error field.
func (o *ServiceStatus) SetError(v ServiceStatusGetErrorRetType) {
	setServiceStatusGetErrorAttributeType(&o.Error, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ServiceStatus) GetLabels() (res ServiceStatusGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetLabelsOk() (ret ServiceStatusGetLabelsRetType, ok bool) {
	return getServiceStatusGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *ServiceStatus) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ServiceStatus) SetLabels(v ServiceStatusGetLabelsRetType) {
	setServiceStatusGetLabelsAttributeType(&o.Labels, v)
}

// GetLifecycle returns the Lifecycle field value if set, zero value otherwise.
func (o *ServiceStatus) GetLifecycle() (res ServiceStatusGetLifecycleRetType) {
	res, _ = o.GetLifecycleOk()
	return
}

// GetLifecycleOk returns a tuple with the Lifecycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetLifecycleOk() (ret ServiceStatusGetLifecycleRetType, ok bool) {
	return getServiceStatusGetLifecycleAttributeTypeOk(o.Lifecycle)
}

// HasLifecycle returns a boolean if a field has been set.
func (o *ServiceStatus) HasLifecycle() bool {
	_, ok := o.GetLifecycleOk()
	return ok
}

// SetLifecycle gets a reference to the given string and assigns it to the Lifecycle field.
func (o *ServiceStatus) SetLifecycle(v ServiceStatusGetLifecycleRetType) {
	setServiceStatusGetLifecycleAttributeType(&o.Lifecycle, v)
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ServiceStatus) GetParameters() (res ServiceStatusGetParametersRetType) {
	res, _ = o.GetParametersOk()
	return
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetParametersOk() (ret ServiceStatusGetParametersRetType, ok bool) {
	return getServiceStatusGetParametersAttributeTypeOk(o.Parameters)
}

// HasParameters returns a boolean if a field has been set.
func (o *ServiceStatus) HasParameters() bool {
	_, ok := o.GetParametersOk()
	return ok
}

// SetParameters gets a reference to the given Parameters and assigns it to the Parameters field.
func (o *ServiceStatus) SetParameters(v ServiceStatusGetParametersRetType) {
	setServiceStatusGetParametersAttributeType(&o.Parameters, v)
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ServiceStatus) GetScope() (res ServiceStatusGetScopeRetType) {
	res, _ = o.GetScopeOk()
	return
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetScopeOk() (ret ServiceStatusGetScopeRetType, ok bool) {
	return getServiceStatusGetScopeAttributeTypeOk(o.Scope)
}

// HasScope returns a boolean if a field has been set.
func (o *ServiceStatus) HasScope() bool {
	_, ok := o.GetScopeOk()
	return ok
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *ServiceStatus) SetScope(v ServiceStatusGetScopeRetType) {
	setServiceStatusGetScopeAttributeType(&o.Scope, v)
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *ServiceStatus) GetServiceId() (res ServiceStatusGetServiceIdRetType) {
	res, _ = o.GetServiceIdOk()
	return
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetServiceIdOk() (ret ServiceStatusGetServiceIdRetType, ok bool) {
	return getServiceStatusGetServiceIdAttributeTypeOk(o.ServiceId)
}

// HasServiceId returns a boolean if a field has been set.
func (o *ServiceStatus) HasServiceId() bool {
	_, ok := o.GetServiceIdOk()
	return ok
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *ServiceStatus) SetServiceId(v ServiceStatusGetServiceIdRetType) {
	setServiceStatusGetServiceIdAttributeType(&o.ServiceId, v)
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ServiceStatus) GetState() (res ServiceStatusGetStateRetType) {
	res, _ = o.GetStateOk()
	return
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetStateOk() (ret ServiceStatusGetStateRetType, ok bool) {
	return getServiceStatusGetStateAttributeTypeOk(o.State)
}

// HasState returns a boolean if a field has been set.
func (o *ServiceStatus) HasState() bool {
	_, ok := o.GetStateOk()
	return ok
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ServiceStatus) SetState(v ServiceStatusGetStateRetType) {
	setServiceStatusGetStateAttributeType(&o.State, v)
}

func (o ServiceStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getServiceStatusGetDependenciesAttributeTypeOk(o.Dependencies); ok {
		toSerialize["Dependencies"] = val
	}
	if val, ok := getServiceStatusGetEnablementAttributeTypeOk(o.Enablement); ok {
		toSerialize["Enablement"] = val
	}
	if val, ok := getServiceStatusGetErrorAttributeTypeOk(o.Error); ok {
		toSerialize["Error"] = val
	}
	if val, ok := getServiceStatusGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getServiceStatusGetLifecycleAttributeTypeOk(o.Lifecycle); ok {
		toSerialize["Lifecycle"] = val
	}
	if val, ok := getServiceStatusGetParametersAttributeTypeOk(o.Parameters); ok {
		toSerialize["Parameters"] = val
	}
	if val, ok := getServiceStatusGetScopeAttributeTypeOk(o.Scope); ok {
		toSerialize["Scope"] = val
	}
	if val, ok := getServiceStatusGetServiceIdAttributeTypeOk(o.ServiceId); ok {
		toSerialize["ServiceId"] = val
	}
	if val, ok := getServiceStatusGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	return toSerialize, nil
}

type NullableServiceStatus struct {
	value *ServiceStatus
	isSet bool
}

func (v NullableServiceStatus) Get() *ServiceStatus {
	return v.value
}

func (v *NullableServiceStatus) Set(val *ServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatus(val *ServiceStatus) *NullableServiceStatus {
	return &NullableServiceStatus{value: val, isSet: true}
}

func (v NullableServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
