/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
	"fmt"
)

// checks if the ActionError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionError{}

/*
	types and functions for action
*/

// isEnum

// ActionErrorAction the last action which was triggered on this service
type ActionErrorAction string

// List of Action
const (
	ACTIONERRORACTION_DISABLE ActionErrorAction = "DISABLE"
	ACTIONERRORACTION_ENABLE  ActionErrorAction = "ENABLE"
)

// All allowed values of ActionError enum
var AllowedActionErrorActionEnumValues = []ActionErrorAction{
	"DISABLE",
	"ENABLE",
}

func (v *ActionErrorAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ActionErrorAction(value)
	for _, existing := range AllowedActionErrorActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionError", value)
}

// NewActionErrorActionFromValue returns a pointer to a valid ActionErrorAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionErrorActionFromValue(v string) (*ActionErrorAction, error) {
	ev := ActionErrorAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionErrorAction: valid values are %v", v, AllowedActionErrorActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionErrorAction) IsValid() bool {
	for _, existing := range AllowedActionErrorActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionAction value
func (v ActionErrorAction) Ptr() *ActionErrorAction {
	return &v
}

type NullableActionErrorAction struct {
	value *ActionErrorAction
	isSet bool
}

func (v NullableActionErrorAction) Get() *ActionErrorAction {
	return v.value
}

func (v *NullableActionErrorAction) Set(val *ActionErrorAction) {
	v.value = val
	v.isSet = true
}

func (v NullableActionErrorAction) IsSet() bool {
	return v.isSet
}

func (v *NullableActionErrorAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionErrorAction(val *ActionErrorAction) *NullableActionErrorAction {
	return &NullableActionErrorAction{value: val, isSet: true}
}

func (v NullableActionErrorAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionErrorAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ActionErrorGetActionAttributeType = *ActionErrorAction
type ActionErrorGetActionArgType = ActionErrorAction
type ActionErrorGetActionRetType = ActionErrorAction

func getActionErrorGetActionAttributeTypeOk(arg ActionErrorGetActionAttributeType) (ret ActionErrorGetActionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActionErrorGetActionAttributeType(arg *ActionErrorGetActionAttributeType, val ActionErrorGetActionRetType) {
	*arg = &val
}

/*
	types and functions for code
*/

// isNotNullableString
type ActionErrorGetCodeAttributeType = *string

func getActionErrorGetCodeAttributeTypeOk(arg ActionErrorGetCodeAttributeType) (ret ActionErrorGetCodeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActionErrorGetCodeAttributeType(arg *ActionErrorGetCodeAttributeType, val ActionErrorGetCodeRetType) {
	*arg = &val
}

type ActionErrorGetCodeArgType = string
type ActionErrorGetCodeRetType = string

/*
	types and functions for reason
*/

// isNotNullableString
type ActionErrorGetReasonAttributeType = *string

func getActionErrorGetReasonAttributeTypeOk(arg ActionErrorGetReasonAttributeType) (ret ActionErrorGetReasonRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActionErrorGetReasonAttributeType(arg *ActionErrorGetReasonAttributeType, val ActionErrorGetReasonRetType) {
	*arg = &val
}

type ActionErrorGetReasonArgType = string
type ActionErrorGetReasonRetType = string

// ActionError the last error for this service.
type ActionError struct {
	// the last action which was triggered on this service
	Action ActionErrorGetActionAttributeType `json:"action,omitempty"`
	// the error code if provided by the service
	Code ActionErrorGetCodeAttributeType `json:"code,omitempty"`
	// the error reason provided by the service
	Reason ActionErrorGetReasonAttributeType `json:"reason,omitempty"`
}

// NewActionError instantiates a new ActionError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionError() *ActionError {
	this := ActionError{}
	return &this
}

// NewActionErrorWithDefaults instantiates a new ActionError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionErrorWithDefaults() *ActionError {
	this := ActionError{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ActionError) GetAction() (res ActionErrorGetActionRetType) {
	res, _ = o.GetActionOk()
	return
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionError) GetActionOk() (ret ActionErrorGetActionRetType, ok bool) {
	return getActionErrorGetActionAttributeTypeOk(o.Action)
}

// HasAction returns a boolean if a field has been set.
func (o *ActionError) HasAction() bool {
	_, ok := o.GetActionOk()
	return ok
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ActionError) SetAction(v ActionErrorGetActionRetType) {
	setActionErrorGetActionAttributeType(&o.Action, v)
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ActionError) GetCode() (res ActionErrorGetCodeRetType) {
	res, _ = o.GetCodeOk()
	return
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionError) GetCodeOk() (ret ActionErrorGetCodeRetType, ok bool) {
	return getActionErrorGetCodeAttributeTypeOk(o.Code)
}

// HasCode returns a boolean if a field has been set.
func (o *ActionError) HasCode() bool {
	_, ok := o.GetCodeOk()
	return ok
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ActionError) SetCode(v ActionErrorGetCodeRetType) {
	setActionErrorGetCodeAttributeType(&o.Code, v)
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ActionError) GetReason() (res ActionErrorGetReasonRetType) {
	res, _ = o.GetReasonOk()
	return
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionError) GetReasonOk() (ret ActionErrorGetReasonRetType, ok bool) {
	return getActionErrorGetReasonAttributeTypeOk(o.Reason)
}

// HasReason returns a boolean if a field has been set.
func (o *ActionError) HasReason() bool {
	_, ok := o.GetReasonOk()
	return ok
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ActionError) SetReason(v ActionErrorGetReasonRetType) {
	setActionErrorGetReasonAttributeType(&o.Reason, v)
}

func (o ActionError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getActionErrorGetActionAttributeTypeOk(o.Action); ok {
		toSerialize["Action"] = val
	}
	if val, ok := getActionErrorGetCodeAttributeTypeOk(o.Code); ok {
		toSerialize["Code"] = val
	}
	if val, ok := getActionErrorGetReasonAttributeTypeOk(o.Reason); ok {
		toSerialize["Reason"] = val
	}
	return toSerialize, nil
}

type NullableActionError struct {
	value *ActionError
	isSet bool
}

func (v NullableActionError) Get() *ActionError {
	return v.value
}

func (v *NullableActionError) Set(val *ActionError) {
	v.value = val
	v.isSet = true
}

func (v NullableActionError) IsSet() bool {
	return v.isSet
}

func (v *NullableActionError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionError(val *ActionError) *NullableActionError {
	return &NullableActionError{value: val, isSet: true}
}

func (v NullableActionError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
