/*
STACKIT Service Enablement API

STACKIT Service Enablement API

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceenablement

import (
	"encoding/json"
)

// checks if the ParametersGeneral type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParametersGeneral{}

// ParametersGeneral struct for ParametersGeneral
type ParametersGeneral struct {
	OrganizationId *string `json:"organizationId,omitempty"`
	ProjectName    *string `json:"projectName,omitempty"`
	ProjectScope   *string `json:"projectScope,omitempty"`
}

// NewParametersGeneral instantiates a new ParametersGeneral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParametersGeneral() *ParametersGeneral {
	this := ParametersGeneral{}
	var projectScope string = "PUBLIC"
	this.ProjectScope = &projectScope
	return &this
}

// NewParametersGeneralWithDefaults instantiates a new ParametersGeneral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParametersGeneralWithDefaults() *ParametersGeneral {
	this := ParametersGeneral{}
	var projectScope string = "PUBLIC"
	this.ProjectScope = &projectScope
	return &this
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ParametersGeneral) GetOrganizationId() *string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret *string
		return ret
	}
	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParametersGeneral) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ParametersGeneral) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ParametersGeneral) SetOrganizationId(v *string) {
	o.OrganizationId = v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *ParametersGeneral) GetProjectName() *string {
	if o == nil || IsNil(o.ProjectName) {
		var ret *string
		return ret
	}
	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParametersGeneral) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *ParametersGeneral) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *ParametersGeneral) SetProjectName(v *string) {
	o.ProjectName = v
}

// GetProjectScope returns the ProjectScope field value if set, zero value otherwise.
func (o *ParametersGeneral) GetProjectScope() *string {
	if o == nil || IsNil(o.ProjectScope) {
		var ret *string
		return ret
	}
	return o.ProjectScope
}

// GetProjectScopeOk returns a tuple with the ProjectScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParametersGeneral) GetProjectScopeOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectScope) {
		return nil, false
	}
	return o.ProjectScope, true
}

// HasProjectScope returns a boolean if a field has been set.
func (o *ParametersGeneral) HasProjectScope() bool {
	if o != nil && !IsNil(o.ProjectScope) {
		return true
	}

	return false
}

// SetProjectScope gets a reference to the given string and assigns it to the ProjectScope field.
func (o *ParametersGeneral) SetProjectScope(v *string) {
	o.ProjectScope = v
}

func (o ParametersGeneral) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if !IsNil(o.ProjectScope) {
		toSerialize["projectScope"] = o.ProjectScope
	}
	return toSerialize, nil
}

type NullableParametersGeneral struct {
	value *ParametersGeneral
	isSet bool
}

func (v NullableParametersGeneral) Get() *ParametersGeneral {
	return v.value
}

func (v *NullableParametersGeneral) Set(val *ParametersGeneral) {
	v.value = val
	v.isSet = true
}

func (v NullableParametersGeneral) IsSet() bool {
	return v.isSet
}

func (v *NullableParametersGeneral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParametersGeneral(val *ParametersGeneral) *NullableParametersGeneral {
	return &NullableParametersGeneral{value: val, isSet: true}
}

func (v NullableParametersGeneral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParametersGeneral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
