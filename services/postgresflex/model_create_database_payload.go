/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the CreateDatabasePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDatabasePayload{}

// CreateDatabasePayload struct for CreateDatabasePayload
type CreateDatabasePayload struct {
	Name *string `json:"name,omitempty"`
	// Database specific options
	Options *map[string]string `json:"options,omitempty"`
}

// NewCreateDatabasePayload instantiates a new CreateDatabasePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDatabasePayload() *CreateDatabasePayload {
	this := CreateDatabasePayload{}
	return &this
}

// NewCreateDatabasePayloadWithDefaults instantiates a new CreateDatabasePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDatabasePayloadWithDefaults() *CreateDatabasePayload {
	this := CreateDatabasePayload{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateDatabasePayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabasePayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateDatabasePayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateDatabasePayload) SetName(v *string) {
	o.Name = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CreateDatabasePayload) GetOptions() *map[string]string {
	if o == nil || IsNil(o.Options) {
		var ret *map[string]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabasePayload) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CreateDatabasePayload) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *CreateDatabasePayload) SetOptions(v *map[string]string) {
	o.Options = v
}

func (o CreateDatabasePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableCreateDatabasePayload struct {
	value *CreateDatabasePayload
	isSet bool
}

func (v NullableCreateDatabasePayload) Get() *CreateDatabasePayload {
	return v.value
}

func (v *NullableCreateDatabasePayload) Set(val *CreateDatabasePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDatabasePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDatabasePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDatabasePayload(val *CreateDatabasePayload) *NullableCreateDatabasePayload {
	return &NullableCreateDatabasePayload{value: val, isSet: true}
}

func (v NullableCreateDatabasePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDatabasePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
