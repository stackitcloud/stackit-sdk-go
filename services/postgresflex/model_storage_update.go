/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the StorageUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageUpdate{}

/*
	types and functions for class
*/

// isNotNullableString
type StorageUpdateGetClassAttributeType = *string

func getStorageUpdateGetClassAttributeTypeOk(arg StorageUpdateGetClassAttributeType) (ret StorageUpdateGetClassRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setStorageUpdateGetClassAttributeType(arg *StorageUpdateGetClassAttributeType, val StorageUpdateGetClassRetType) {
	*arg = &val
}

type StorageUpdateGetClassArgType = string
type StorageUpdateGetClassRetType = string

/*
	types and functions for size
*/

// isLong
type StorageUpdateGetSizeAttributeType = *int64
type StorageUpdateGetSizeArgType = int64
type StorageUpdateGetSizeRetType = int64

func getStorageUpdateGetSizeAttributeTypeOk(arg StorageUpdateGetSizeAttributeType) (ret StorageUpdateGetSizeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setStorageUpdateGetSizeAttributeType(arg *StorageUpdateGetSizeAttributeType, val StorageUpdateGetSizeRetType) {
	*arg = &val
}

// StorageUpdate struct for StorageUpdate
type StorageUpdate struct {
	//  Deprecated:  ⚠️ **DEPRECATED AND NON-FUNCTIONAL:** Updating the performance class field is not possible.
	Class StorageUpdateGetClassAttributeType `json:"class,omitempty"`
	Size  StorageUpdateGetSizeAttributeType  `json:"size,omitempty"`
}

// NewStorageUpdate instantiates a new StorageUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageUpdate() *StorageUpdate {
	this := StorageUpdate{}
	return &this
}

// NewStorageUpdateWithDefaults instantiates a new StorageUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageUpdateWithDefaults() *StorageUpdate {
	this := StorageUpdate{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
// Deprecated
func (o *StorageUpdate) GetClass() (res StorageUpdateGetClassRetType) {
	res, _ = o.GetClassOk()
	return
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StorageUpdate) GetClassOk() (ret StorageUpdateGetClassRetType, ok bool) {
	return getStorageUpdateGetClassAttributeTypeOk(o.Class)
}

// HasClass returns a boolean if a field has been set.
func (o *StorageUpdate) HasClass() bool {
	_, ok := o.GetClassOk()
	return ok
}

// SetClass gets a reference to the given string and assigns it to the Class field.
// Deprecated
func (o *StorageUpdate) SetClass(v StorageUpdateGetClassRetType) {
	setStorageUpdateGetClassAttributeType(&o.Class, v)
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StorageUpdate) GetSize() (res StorageUpdateGetSizeRetType) {
	res, _ = o.GetSizeOk()
	return
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageUpdate) GetSizeOk() (ret StorageUpdateGetSizeRetType, ok bool) {
	return getStorageUpdateGetSizeAttributeTypeOk(o.Size)
}

// HasSize returns a boolean if a field has been set.
func (o *StorageUpdate) HasSize() bool {
	_, ok := o.GetSizeOk()
	return ok
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *StorageUpdate) SetSize(v StorageUpdateGetSizeRetType) {
	setStorageUpdateGetSizeAttributeType(&o.Size, v)
}

func (o StorageUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getStorageUpdateGetClassAttributeTypeOk(o.Class); ok {
		toSerialize["Class"] = val
	}
	if val, ok := getStorageUpdateGetSizeAttributeTypeOk(o.Size); ok {
		toSerialize["Size"] = val
	}
	return toSerialize, nil
}

type NullableStorageUpdate struct {
	value *StorageUpdate
	isSet bool
}

func (v NullableStorageUpdate) Get() *StorageUpdate {
	return v.value
}

func (v *NullableStorageUpdate) Set(val *StorageUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageUpdate(val *StorageUpdate) *NullableStorageUpdate {
	return &NullableStorageUpdate{value: val, isSet: true}
}

func (v NullableStorageUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
