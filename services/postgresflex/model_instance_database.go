/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the InstanceDatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceDatabase{}

/*
	types and functions for id
*/

// isNotNullableString
type InstanceDatabaseGetIdAttributeType = *string

func getInstanceDatabaseGetIdAttributeTypeOk(arg InstanceDatabaseGetIdAttributeType) (ret InstanceDatabaseGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceDatabaseGetIdAttributeType(arg *InstanceDatabaseGetIdAttributeType, val InstanceDatabaseGetIdRetType) {
	*arg = &val
}

type InstanceDatabaseGetIdArgType = string
type InstanceDatabaseGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type InstanceDatabaseGetNameAttributeType = *string

func getInstanceDatabaseGetNameAttributeTypeOk(arg InstanceDatabaseGetNameAttributeType) (ret InstanceDatabaseGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceDatabaseGetNameAttributeType(arg *InstanceDatabaseGetNameAttributeType, val InstanceDatabaseGetNameRetType) {
	*arg = &val
}

type InstanceDatabaseGetNameArgType = string
type InstanceDatabaseGetNameRetType = string

/*
	types and functions for options
*/

// isFreeform
type InstanceDatabaseGetOptionsAttributeType = *map[string]interface{}
type InstanceDatabaseGetOptionsArgType = map[string]interface{}
type InstanceDatabaseGetOptionsRetType = map[string]interface{}

func getInstanceDatabaseGetOptionsAttributeTypeOk(arg InstanceDatabaseGetOptionsAttributeType) (ret InstanceDatabaseGetOptionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceDatabaseGetOptionsAttributeType(arg *InstanceDatabaseGetOptionsAttributeType, val InstanceDatabaseGetOptionsRetType) {
	*arg = &val
}

// InstanceDatabase struct for InstanceDatabase
type InstanceDatabase struct {
	Id   InstanceDatabaseGetIdAttributeType   `json:"id,omitempty"`
	Name InstanceDatabaseGetNameAttributeType `json:"name,omitempty"`
	// Database specific options
	Options InstanceDatabaseGetOptionsAttributeType `json:"options,omitempty"`
}

// NewInstanceDatabase instantiates a new InstanceDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceDatabase() *InstanceDatabase {
	this := InstanceDatabase{}
	return &this
}

// NewInstanceDatabaseWithDefaults instantiates a new InstanceDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceDatabaseWithDefaults() *InstanceDatabase {
	this := InstanceDatabase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceDatabase) GetId() (res InstanceDatabaseGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDatabase) GetIdOk() (ret InstanceDatabaseGetIdRetType, ok bool) {
	return getInstanceDatabaseGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *InstanceDatabase) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstanceDatabase) SetId(v InstanceDatabaseGetIdRetType) {
	setInstanceDatabaseGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceDatabase) GetName() (res InstanceDatabaseGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDatabase) GetNameOk() (ret InstanceDatabaseGetNameRetType, ok bool) {
	return getInstanceDatabaseGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *InstanceDatabase) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceDatabase) SetName(v InstanceDatabaseGetNameRetType) {
	setInstanceDatabaseGetNameAttributeType(&o.Name, v)
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *InstanceDatabase) GetOptions() (res InstanceDatabaseGetOptionsRetType) {
	res, _ = o.GetOptionsOk()
	return
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDatabase) GetOptionsOk() (ret InstanceDatabaseGetOptionsRetType, ok bool) {
	return getInstanceDatabaseGetOptionsAttributeTypeOk(o.Options)
}

// HasOptions returns a boolean if a field has been set.
func (o *InstanceDatabase) HasOptions() bool {
	_, ok := o.GetOptionsOk()
	return ok
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *InstanceDatabase) SetOptions(v InstanceDatabaseGetOptionsRetType) {
	setInstanceDatabaseGetOptionsAttributeType(&o.Options, v)
}

func (o InstanceDatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceDatabaseGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getInstanceDatabaseGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getInstanceDatabaseGetOptionsAttributeTypeOk(o.Options); ok {
		toSerialize["Options"] = val
	}
	return toSerialize, nil
}

type NullableInstanceDatabase struct {
	value *InstanceDatabase
	isSet bool
}

func (v NullableInstanceDatabase) Get() *InstanceDatabase {
	return v.value
}

func (v *NullableInstanceDatabase) Set(val *InstanceDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceDatabase(val *InstanceDatabase) *NullableInstanceDatabase {
	return &NullableInstanceDatabase{value: val, isSet: true}
}

func (v NullableInstanceDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
