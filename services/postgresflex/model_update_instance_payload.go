/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the UpdateInstancePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInstancePayload{}

// UpdateInstancePayload struct for UpdateInstancePayload
type UpdateInstancePayload struct {
	Acl            *ACL    `json:"acl,omitempty"`
	BackupSchedule *string `json:"backupSchedule,omitempty"`
	FlavorId       *string `json:"flavorId,omitempty"`
	// Labels field is not certain/clear
	Labels  *map[string]string `json:"labels,omitempty"`
	Name    *string            `json:"name,omitempty"`
	Options *map[string]string `json:"options,omitempty"`
	// Can be cast to int32 without loss of precision.
	Replicas *int64   `json:"replicas,omitempty"`
	Storage  *Storage `json:"storage,omitempty"`
	Version  *string  `json:"version,omitempty"`
}

// NewUpdateInstancePayload instantiates a new UpdateInstancePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInstancePayload() *UpdateInstancePayload {
	this := UpdateInstancePayload{}
	return &this
}

// NewUpdateInstancePayloadWithDefaults instantiates a new UpdateInstancePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInstancePayloadWithDefaults() *UpdateInstancePayload {
	this := UpdateInstancePayload{}
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetAcl() *ACL {
	if o == nil || IsNil(o.Acl) {
		var ret *ACL
		return ret
	}
	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetAclOk() (*ACL, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given ACL and assigns it to the Acl field.
func (o *UpdateInstancePayload) SetAcl(v *ACL) {
	o.Acl = v
}

// GetBackupSchedule returns the BackupSchedule field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetBackupSchedule() *string {
	if o == nil || IsNil(o.BackupSchedule) {
		var ret *string
		return ret
	}
	return o.BackupSchedule
}

// GetBackupScheduleOk returns a tuple with the BackupSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetBackupScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.BackupSchedule) {
		return nil, false
	}
	return o.BackupSchedule, true
}

// HasBackupSchedule returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasBackupSchedule() bool {
	if o != nil && !IsNil(o.BackupSchedule) {
		return true
	}

	return false
}

// SetBackupSchedule gets a reference to the given string and assigns it to the BackupSchedule field.
func (o *UpdateInstancePayload) SetBackupSchedule(v *string) {
	o.BackupSchedule = v
}

// GetFlavorId returns the FlavorId field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetFlavorId() *string {
	if o == nil || IsNil(o.FlavorId) {
		var ret *string
		return ret
	}
	return o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetFlavorIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlavorId) {
		return nil, false
	}
	return o.FlavorId, true
}

// HasFlavorId returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasFlavorId() bool {
	if o != nil && !IsNil(o.FlavorId) {
		return true
	}

	return false
}

// SetFlavorId gets a reference to the given string and assigns it to the FlavorId field.
func (o *UpdateInstancePayload) SetFlavorId(v *string) {
	o.FlavorId = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetLabels() *map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *UpdateInstancePayload) SetLabels(v *map[string]string) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateInstancePayload) SetName(v *string) {
	o.Name = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetOptions() *map[string]string {
	if o == nil || IsNil(o.Options) {
		var ret *map[string]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *UpdateInstancePayload) SetOptions(v *map[string]string) {
	o.Options = v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetReplicas() *int64 {
	if o == nil || IsNil(o.Replicas) {
		var ret *int64
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetReplicasOk() (*int64, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given int64 and assigns it to the Replicas field.
func (o *UpdateInstancePayload) SetReplicas(v *int64) {
	o.Replicas = v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetStorage() *Storage {
	if o == nil || IsNil(o.Storage) {
		var ret *Storage
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetStorageOk() (*Storage, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given Storage and assigns it to the Storage field.
func (o *UpdateInstancePayload) SetStorage(v *Storage) {
	o.Storage = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UpdateInstancePayload) GetVersion() *string {
	if o == nil || IsNil(o.Version) {
		var ret *string
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UpdateInstancePayload) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *UpdateInstancePayload) SetVersion(v *string) {
	o.Version = v
}

func (o UpdateInstancePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	if !IsNil(o.BackupSchedule) {
		toSerialize["backupSchedule"] = o.BackupSchedule
	}
	if !IsNil(o.FlavorId) {
		toSerialize["flavorId"] = o.FlavorId
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableUpdateInstancePayload struct {
	value *UpdateInstancePayload
	isSet bool
}

func (v NullableUpdateInstancePayload) Get() *UpdateInstancePayload {
	return v.value
}

func (v *NullableUpdateInstancePayload) Set(val *UpdateInstancePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInstancePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInstancePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInstancePayload(val *UpdateInstancePayload) *NullableUpdateInstancePayload {
	return &NullableUpdateInstancePayload{value: val, isSet: true}
}

func (v NullableUpdateInstancePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInstancePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
