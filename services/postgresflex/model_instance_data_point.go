/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the InstanceDataPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceDataPoint{}

/*
	types and functions for timestamp
*/

// isNotNullableString
type InstanceDataPointGetTimestampAttributeType = *string

func getInstanceDataPointGetTimestampAttributeTypeOk(arg InstanceDataPointGetTimestampAttributeType) (ret InstanceDataPointGetTimestampRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceDataPointGetTimestampAttributeType(arg *InstanceDataPointGetTimestampAttributeType, val InstanceDataPointGetTimestampRetType) {
	*arg = &val
}

type InstanceDataPointGetTimestampArgType = string
type InstanceDataPointGetTimestampRetType = string

/*
	types and functions for value
*/

// isNumber
type InstanceDataPointGetValueAttributeType = *float64
type InstanceDataPointGetValueArgType = float64
type InstanceDataPointGetValueRetType = float64

func getInstanceDataPointGetValueAttributeTypeOk(arg InstanceDataPointGetValueAttributeType) (ret InstanceDataPointGetValueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceDataPointGetValueAttributeType(arg *InstanceDataPointGetValueAttributeType, val InstanceDataPointGetValueRetType) {
	*arg = &val
}

// InstanceDataPoint struct for InstanceDataPoint
type InstanceDataPoint struct {
	Timestamp InstanceDataPointGetTimestampAttributeType `json:"timestamp,omitempty"`
	Value     InstanceDataPointGetValueAttributeType     `json:"value,omitempty"`
}

// NewInstanceDataPoint instantiates a new InstanceDataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceDataPoint() *InstanceDataPoint {
	this := InstanceDataPoint{}
	return &this
}

// NewInstanceDataPointWithDefaults instantiates a new InstanceDataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceDataPointWithDefaults() *InstanceDataPoint {
	this := InstanceDataPoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *InstanceDataPoint) GetTimestamp() (res InstanceDataPointGetTimestampRetType) {
	res, _ = o.GetTimestampOk()
	return
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDataPoint) GetTimestampOk() (ret InstanceDataPointGetTimestampRetType, ok bool) {
	return getInstanceDataPointGetTimestampAttributeTypeOk(o.Timestamp)
}

// HasTimestamp returns a boolean if a field has been set.
func (o *InstanceDataPoint) HasTimestamp() bool {
	_, ok := o.GetTimestampOk()
	return ok
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *InstanceDataPoint) SetTimestamp(v InstanceDataPointGetTimestampRetType) {
	setInstanceDataPointGetTimestampAttributeType(&o.Timestamp, v)
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InstanceDataPoint) GetValue() (res InstanceDataPointGetValueRetType) {
	res, _ = o.GetValueOk()
	return
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDataPoint) GetValueOk() (ret InstanceDataPointGetValueRetType, ok bool) {
	return getInstanceDataPointGetValueAttributeTypeOk(o.Value)
}

// HasValue returns a boolean if a field has been set.
func (o *InstanceDataPoint) HasValue() bool {
	_, ok := o.GetValueOk()
	return ok
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *InstanceDataPoint) SetValue(v InstanceDataPointGetValueRetType) {
	setInstanceDataPointGetValueAttributeType(&o.Value, v)
}

func (o InstanceDataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceDataPointGetTimestampAttributeTypeOk(o.Timestamp); ok {
		toSerialize["Timestamp"] = val
	}
	if val, ok := getInstanceDataPointGetValueAttributeTypeOk(o.Value); ok {
		toSerialize["Value"] = val
	}
	return toSerialize, nil
}

type NullableInstanceDataPoint struct {
	value *InstanceDataPoint
	isSet bool
}

func (v NullableInstanceDataPoint) Get() *InstanceDataPoint {
	return v.value
}

func (v *NullableInstanceDataPoint) Set(val *InstanceDataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceDataPoint(val *InstanceDataPoint) *NullableInstanceDataPoint {
	return &NullableInstanceDataPoint{value: val, isSet: true}
}

func (v NullableInstanceDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
