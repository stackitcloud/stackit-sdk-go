/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the InstanceHostMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceHostMetric{}

/*
	types and functions for datapoints
*/

// isArray
type InstanceHostMetricGetDatapointsAttributeType = *[]InstanceDataPoint
type InstanceHostMetricGetDatapointsArgType = []InstanceDataPoint
type InstanceHostMetricGetDatapointsRetType = []InstanceDataPoint

func getInstanceHostMetricGetDatapointsAttributeTypeOk(arg InstanceHostMetricGetDatapointsAttributeType) (ret InstanceHostMetricGetDatapointsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceHostMetricGetDatapointsAttributeType(arg *InstanceHostMetricGetDatapointsAttributeType, val InstanceHostMetricGetDatapointsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type InstanceHostMetricGetNameAttributeType = *string

func getInstanceHostMetricGetNameAttributeTypeOk(arg InstanceHostMetricGetNameAttributeType) (ret InstanceHostMetricGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceHostMetricGetNameAttributeType(arg *InstanceHostMetricGetNameAttributeType, val InstanceHostMetricGetNameRetType) {
	*arg = &val
}

type InstanceHostMetricGetNameArgType = string
type InstanceHostMetricGetNameRetType = string

/*
	types and functions for units
*/

// isNotNullableString
type InstanceHostMetricGetUnitsAttributeType = *string

func getInstanceHostMetricGetUnitsAttributeTypeOk(arg InstanceHostMetricGetUnitsAttributeType) (ret InstanceHostMetricGetUnitsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceHostMetricGetUnitsAttributeType(arg *InstanceHostMetricGetUnitsAttributeType, val InstanceHostMetricGetUnitsRetType) {
	*arg = &val
}

type InstanceHostMetricGetUnitsArgType = string
type InstanceHostMetricGetUnitsRetType = string

// InstanceHostMetric struct for InstanceHostMetric
type InstanceHostMetric struct {
	Datapoints InstanceHostMetricGetDatapointsAttributeType `json:"datapoints,omitempty"`
	Name       InstanceHostMetricGetNameAttributeType       `json:"name,omitempty"`
	Units      InstanceHostMetricGetUnitsAttributeType      `json:"units,omitempty"`
}

// NewInstanceHostMetric instantiates a new InstanceHostMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceHostMetric() *InstanceHostMetric {
	this := InstanceHostMetric{}
	return &this
}

// NewInstanceHostMetricWithDefaults instantiates a new InstanceHostMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceHostMetricWithDefaults() *InstanceHostMetric {
	this := InstanceHostMetric{}
	return &this
}

// GetDatapoints returns the Datapoints field value if set, zero value otherwise.
func (o *InstanceHostMetric) GetDatapoints() (res InstanceHostMetricGetDatapointsRetType) {
	res, _ = o.GetDatapointsOk()
	return
}

// GetDatapointsOk returns a tuple with the Datapoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHostMetric) GetDatapointsOk() (ret InstanceHostMetricGetDatapointsRetType, ok bool) {
	return getInstanceHostMetricGetDatapointsAttributeTypeOk(o.Datapoints)
}

// HasDatapoints returns a boolean if a field has been set.
func (o *InstanceHostMetric) HasDatapoints() bool {
	_, ok := o.GetDatapointsOk()
	return ok
}

// SetDatapoints gets a reference to the given []InstanceDataPoint and assigns it to the Datapoints field.
func (o *InstanceHostMetric) SetDatapoints(v InstanceHostMetricGetDatapointsRetType) {
	setInstanceHostMetricGetDatapointsAttributeType(&o.Datapoints, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceHostMetric) GetName() (res InstanceHostMetricGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHostMetric) GetNameOk() (ret InstanceHostMetricGetNameRetType, ok bool) {
	return getInstanceHostMetricGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *InstanceHostMetric) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceHostMetric) SetName(v InstanceHostMetricGetNameRetType) {
	setInstanceHostMetricGetNameAttributeType(&o.Name, v)
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *InstanceHostMetric) GetUnits() (res InstanceHostMetricGetUnitsRetType) {
	res, _ = o.GetUnitsOk()
	return
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHostMetric) GetUnitsOk() (ret InstanceHostMetricGetUnitsRetType, ok bool) {
	return getInstanceHostMetricGetUnitsAttributeTypeOk(o.Units)
}

// HasUnits returns a boolean if a field has been set.
func (o *InstanceHostMetric) HasUnits() bool {
	_, ok := o.GetUnitsOk()
	return ok
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *InstanceHostMetric) SetUnits(v InstanceHostMetricGetUnitsRetType) {
	setInstanceHostMetricGetUnitsAttributeType(&o.Units, v)
}

func (o InstanceHostMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceHostMetricGetDatapointsAttributeTypeOk(o.Datapoints); ok {
		toSerialize["Datapoints"] = val
	}
	if val, ok := getInstanceHostMetricGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getInstanceHostMetricGetUnitsAttributeTypeOk(o.Units); ok {
		toSerialize["Units"] = val
	}
	return toSerialize, nil
}

type NullableInstanceHostMetric struct {
	value *InstanceHostMetric
	isSet bool
}

func (v NullableInstanceHostMetric) Get() *InstanceHostMetric {
	return v.value
}

func (v *NullableInstanceHostMetric) Set(val *InstanceHostMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceHostMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceHostMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceHostMetric(val *InstanceHostMetric) *NullableInstanceHostMetric {
	return &NullableInstanceHostMetric{value: val, isSet: true}
}

func (v NullableInstanceHostMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceHostMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
