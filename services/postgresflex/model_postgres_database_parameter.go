/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
)

// checks if the PostgresDatabaseParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresDatabaseParameter{}

// PostgresDatabaseParameter struct for PostgresDatabaseParameter
type PostgresDatabaseParameter struct {
	// Context of the parameter.
	Context *string `json:"context,omitempty"`
	// Datatype describes the type of data that is used in the Value field.
	DataType *string `json:"dataType,omitempty"`
	// DefaultValue for the value field.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Description of the parameter.
	Description *string `json:"description,omitempty"`
	// Edit shows if the user can change this value.
	Edit *bool `json:"edit,omitempty"`
	// MaxValue describes the highest possible value that can be set.
	MaxValue *string `json:"maxValue,omitempty"`
	// MinValue describes the lowest possible value that can be set.
	MinValue *string `json:"minValue,omitempty"`
	// Name of the parameter.
	Name *string `json:"name,omitempty"`
	// PendingRestart describes if a parameter change requires a restart of the server.
	PendingRestart *bool `json:"pendingRestart,omitempty"`
	// ResetValue for the value field af.ter a reset.
	ResetValue *string `json:"resetValue,omitempty"`
	// Unit if the parameter has a unit if not empty.
	Unit *string `json:"unit,omitempty"`
	// Value of this parameter.
	Value *string `json:"value,omitempty"`
}

// NewPostgresDatabaseParameter instantiates a new PostgresDatabaseParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresDatabaseParameter() *PostgresDatabaseParameter {
	this := PostgresDatabaseParameter{}
	return &this
}

// NewPostgresDatabaseParameterWithDefaults instantiates a new PostgresDatabaseParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresDatabaseParameterWithDefaults() *PostgresDatabaseParameter {
	this := PostgresDatabaseParameter{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetContext() *string {
	if o == nil || IsNil(o.Context) {
		var ret *string
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *PostgresDatabaseParameter) SetContext(v *string) {
	o.Context = v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetDataType() *string {
	if o == nil || IsNil(o.DataType) {
		var ret *string
		return ret
	}
	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *PostgresDatabaseParameter) SetDataType(v *string) {
	o.DataType = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetDefaultValue() *string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret *string
		return ret
	}
	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *PostgresDatabaseParameter) SetDefaultValue(v *string) {
	o.DefaultValue = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostgresDatabaseParameter) SetDescription(v *string) {
	o.Description = v
}

// GetEdit returns the Edit field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetEdit() *bool {
	if o == nil || IsNil(o.Edit) {
		var ret *bool
		return ret
	}
	return o.Edit
}

// GetEditOk returns a tuple with the Edit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetEditOk() (*bool, bool) {
	if o == nil || IsNil(o.Edit) {
		return nil, false
	}
	return o.Edit, true
}

// HasEdit returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasEdit() bool {
	if o != nil && !IsNil(o.Edit) {
		return true
	}

	return false
}

// SetEdit gets a reference to the given bool and assigns it to the Edit field.
func (o *PostgresDatabaseParameter) SetEdit(v *bool) {
	o.Edit = v
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetMaxValue() *string {
	if o == nil || IsNil(o.MaxValue) {
		var ret *string
		return ret
	}
	return o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetMaxValueOk() (*string, bool) {
	if o == nil || IsNil(o.MaxValue) {
		return nil, false
	}
	return o.MaxValue, true
}

// HasMaxValue returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasMaxValue() bool {
	if o != nil && !IsNil(o.MaxValue) {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given string and assigns it to the MaxValue field.
func (o *PostgresDatabaseParameter) SetMaxValue(v *string) {
	o.MaxValue = v
}

// GetMinValue returns the MinValue field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetMinValue() *string {
	if o == nil || IsNil(o.MinValue) {
		var ret *string
		return ret
	}
	return o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetMinValueOk() (*string, bool) {
	if o == nil || IsNil(o.MinValue) {
		return nil, false
	}
	return o.MinValue, true
}

// HasMinValue returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasMinValue() bool {
	if o != nil && !IsNil(o.MinValue) {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given string and assigns it to the MinValue field.
func (o *PostgresDatabaseParameter) SetMinValue(v *string) {
	o.MinValue = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PostgresDatabaseParameter) SetName(v *string) {
	o.Name = v
}

// GetPendingRestart returns the PendingRestart field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetPendingRestart() *bool {
	if o == nil || IsNil(o.PendingRestart) {
		var ret *bool
		return ret
	}
	return o.PendingRestart
}

// GetPendingRestartOk returns a tuple with the PendingRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetPendingRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.PendingRestart) {
		return nil, false
	}
	return o.PendingRestart, true
}

// HasPendingRestart returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasPendingRestart() bool {
	if o != nil && !IsNil(o.PendingRestart) {
		return true
	}

	return false
}

// SetPendingRestart gets a reference to the given bool and assigns it to the PendingRestart field.
func (o *PostgresDatabaseParameter) SetPendingRestart(v *bool) {
	o.PendingRestart = v
}

// GetResetValue returns the ResetValue field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetResetValue() *string {
	if o == nil || IsNil(o.ResetValue) {
		var ret *string
		return ret
	}
	return o.ResetValue
}

// GetResetValueOk returns a tuple with the ResetValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetResetValueOk() (*string, bool) {
	if o == nil || IsNil(o.ResetValue) {
		return nil, false
	}
	return o.ResetValue, true
}

// HasResetValue returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasResetValue() bool {
	if o != nil && !IsNil(o.ResetValue) {
		return true
	}

	return false
}

// SetResetValue gets a reference to the given string and assigns it to the ResetValue field.
func (o *PostgresDatabaseParameter) SetResetValue(v *string) {
	o.ResetValue = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetUnit() *string {
	if o == nil || IsNil(o.Unit) {
		var ret *string
		return ret
	}
	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *PostgresDatabaseParameter) SetUnit(v *string) {
	o.Unit = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PostgresDatabaseParameter) GetValue() *string {
	if o == nil || IsNil(o.Value) {
		var ret *string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresDatabaseParameter) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PostgresDatabaseParameter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PostgresDatabaseParameter) SetValue(v *string) {
	o.Value = v
}

func (o PostgresDatabaseParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Edit) {
		toSerialize["edit"] = o.Edit
	}
	if !IsNil(o.MaxValue) {
		toSerialize["maxValue"] = o.MaxValue
	}
	if !IsNil(o.MinValue) {
		toSerialize["minValue"] = o.MinValue
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PendingRestart) {
		toSerialize["pendingRestart"] = o.PendingRestart
	}
	if !IsNil(o.ResetValue) {
		toSerialize["resetValue"] = o.ResetValue
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePostgresDatabaseParameter struct {
	value *PostgresDatabaseParameter
	isSet bool
}

func (v NullablePostgresDatabaseParameter) Get() *PostgresDatabaseParameter {
	return v.value
}

func (v *NullablePostgresDatabaseParameter) Set(val *PostgresDatabaseParameter) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresDatabaseParameter) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresDatabaseParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresDatabaseParameter(val *PostgresDatabaseParameter) *NullablePostgresDatabaseParameter {
	return &NullablePostgresDatabaseParameter{value: val, isSet: true}
}

func (v NullablePostgresDatabaseParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresDatabaseParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
