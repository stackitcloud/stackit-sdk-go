/*
Load Balancer Certificates API

This API offers the ability to store TLS certificates, which can be used by load balancing servers in STACKIT. They can be between consumer and load balancing server and/or between load balancing server and endpoint server.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package certificates

import (
	"encoding/json"
)

// checks if the CreateCertificateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCertificateResponse{}

// CreateCertificateResponse CreateCertificateResponse returns unique resource id
type CreateCertificateResponse struct {
	// The certificates resource id
	Id *string `json:"id,omitempty"`
}

// NewCreateCertificateResponse instantiates a new CreateCertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCertificateResponse() *CreateCertificateResponse {
	this := CreateCertificateResponse{}
	return &this
}

// NewCreateCertificateResponseWithDefaults instantiates a new CreateCertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCertificateResponseWithDefaults() *CreateCertificateResponse {
	this := CreateCertificateResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateCertificateResponse) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCertificateResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateCertificateResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateCertificateResponse) SetId(v *string) {
	o.Id = v
}

func (o CreateCertificateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableCreateCertificateResponse struct {
	value *CreateCertificateResponse
	isSet bool
}

func (v NullableCreateCertificateResponse) Get() *CreateCertificateResponse {
	return v.value
}

func (v *NullableCreateCertificateResponse) Set(val *CreateCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCertificateResponse(val *CreateCertificateResponse) *NullableCreateCertificateResponse {
	return &NullableCreateCertificateResponse{value: val, isSet: true}
}

func (v NullableCreateCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
