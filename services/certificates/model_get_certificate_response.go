/*
Load Balancer Certificates API

This API offers the ability to store TLS certificates, which can be used by load balancing servers in STACKIT. They can be between consumer and load balancing server and/or between load balancing server and endpoint server.

API version: 2beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package certificates

import (
	"encoding/json"
)

// checks if the GetCertificateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCertificateResponse{}

// GetCertificateResponse GetCertificateResponse returns name, id and public key
type GetCertificateResponse struct {
	// The certificates resource id
	Id *string `json:"id,omitempty"`
	// TLS certificate name
	Name *string `json:"name,omitempty"`
	// The PEM encoded public key part
	PublicKey *string `json:"publicKey,omitempty"`
	// Region of the LoadBalancer
	Region *string `json:"region,omitempty"`
}

// NewGetCertificateResponse instantiates a new GetCertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCertificateResponse() *GetCertificateResponse {
	this := GetCertificateResponse{}
	return &this
}

// NewGetCertificateResponseWithDefaults instantiates a new GetCertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCertificateResponseWithDefaults() *GetCertificateResponse {
	this := GetCertificateResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetCertificateResponse) SetId(v *string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetCertificateResponse) SetName(v *string) {
	o.Name = v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetPublicKey() *string {
	if o == nil || IsNil(o.PublicKey) {
		var ret *string
		return ret
	}
	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *GetCertificateResponse) SetPublicKey(v *string) {
	o.PublicKey = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetRegion() *string {
	if o == nil || IsNil(o.Region) {
		var ret *string
		return ret
	}
	return o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *GetCertificateResponse) SetRegion(v *string) {
	o.Region = v
}

func (o GetCertificateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableGetCertificateResponse struct {
	value *GetCertificateResponse
	isSet bool
}

func (v NullableGetCertificateResponse) Get() *GetCertificateResponse {
	return v.value
}

func (v *NullableGetCertificateResponse) Set(val *GetCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCertificateResponse(val *GetCertificateResponse) *NullableGetCertificateResponse {
	return &NullableGetCertificateResponse{value: val, isSet: true}
}

func (v NullableGetCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
