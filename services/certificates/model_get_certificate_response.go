/*
Load Balancer Certificates API

This API offers the ability to store TLS certificates, which can be used by load balancing servers in STACKIT. They can be between consumer and load balancing server and/or between load balancing server and endpoint server.

API version: 2beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package certificates

import (
	"encoding/json"
)

// checks if the GetCertificateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCertificateResponse{}

/*
	types and functions for id
*/

// isNotNullableString
type GetCertificateResponseGetIdAttributeType = *string

func getGetCertificateResponseGetIdAttributeTypeOk(arg GetCertificateResponseGetIdAttributeType) (ret GetCertificateResponseGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setGetCertificateResponseGetIdAttributeType(arg *GetCertificateResponseGetIdAttributeType, val GetCertificateResponseGetIdRetType) {
	*arg = &val
}

type GetCertificateResponseGetIdArgType = string
type GetCertificateResponseGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type GetCertificateResponseGetNameAttributeType = *string

func getGetCertificateResponseGetNameAttributeTypeOk(arg GetCertificateResponseGetNameAttributeType) (ret GetCertificateResponseGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setGetCertificateResponseGetNameAttributeType(arg *GetCertificateResponseGetNameAttributeType, val GetCertificateResponseGetNameRetType) {
	*arg = &val
}

type GetCertificateResponseGetNameArgType = string
type GetCertificateResponseGetNameRetType = string

/*
	types and functions for publicKey
*/

// isNotNullableString
type GetCertificateResponseGetPublicKeyAttributeType = *string

func getGetCertificateResponseGetPublicKeyAttributeTypeOk(arg GetCertificateResponseGetPublicKeyAttributeType) (ret GetCertificateResponseGetPublicKeyRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setGetCertificateResponseGetPublicKeyAttributeType(arg *GetCertificateResponseGetPublicKeyAttributeType, val GetCertificateResponseGetPublicKeyRetType) {
	*arg = &val
}

type GetCertificateResponseGetPublicKeyArgType = string
type GetCertificateResponseGetPublicKeyRetType = string

/*
	types and functions for region
*/

// isNotNullableString
type GetCertificateResponseGetRegionAttributeType = *string

func getGetCertificateResponseGetRegionAttributeTypeOk(arg GetCertificateResponseGetRegionAttributeType) (ret GetCertificateResponseGetRegionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setGetCertificateResponseGetRegionAttributeType(arg *GetCertificateResponseGetRegionAttributeType, val GetCertificateResponseGetRegionRetType) {
	*arg = &val
}

type GetCertificateResponseGetRegionArgType = string
type GetCertificateResponseGetRegionRetType = string

// GetCertificateResponse GetCertificateResponse returns name, id and public key
type GetCertificateResponse struct {
	// The certificates resource id
	Id GetCertificateResponseGetIdAttributeType `json:"id,omitempty"`
	// TLS certificate name
	Name GetCertificateResponseGetNameAttributeType `json:"name,omitempty"`
	// The PEM encoded public key part
	PublicKey GetCertificateResponseGetPublicKeyAttributeType `json:"publicKey,omitempty"`
	// Region of the LoadBalancer
	Region GetCertificateResponseGetRegionAttributeType `json:"region,omitempty"`
}

// NewGetCertificateResponse instantiates a new GetCertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCertificateResponse() *GetCertificateResponse {
	this := GetCertificateResponse{}
	return &this
}

// NewGetCertificateResponseWithDefaults instantiates a new GetCertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCertificateResponseWithDefaults() *GetCertificateResponse {
	this := GetCertificateResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetId() (res GetCertificateResponseGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetIdOk() (ret GetCertificateResponseGetIdRetType, ok bool) {
	return getGetCertificateResponseGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetCertificateResponse) SetId(v GetCertificateResponseGetIdRetType) {
	setGetCertificateResponseGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetName() (res GetCertificateResponseGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetNameOk() (ret GetCertificateResponseGetNameRetType, ok bool) {
	return getGetCertificateResponseGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetCertificateResponse) SetName(v GetCertificateResponseGetNameRetType) {
	setGetCertificateResponseGetNameAttributeType(&o.Name, v)
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetPublicKey() (res GetCertificateResponseGetPublicKeyRetType) {
	res, _ = o.GetPublicKeyOk()
	return
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetPublicKeyOk() (ret GetCertificateResponseGetPublicKeyRetType, ok bool) {
	return getGetCertificateResponseGetPublicKeyAttributeTypeOk(o.PublicKey)
}

// HasPublicKey returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasPublicKey() bool {
	_, ok := o.GetPublicKeyOk()
	return ok
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *GetCertificateResponse) SetPublicKey(v GetCertificateResponseGetPublicKeyRetType) {
	setGetCertificateResponseGetPublicKeyAttributeType(&o.PublicKey, v)
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *GetCertificateResponse) GetRegion() (res GetCertificateResponseGetRegionRetType) {
	res, _ = o.GetRegionOk()
	return
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificateResponse) GetRegionOk() (ret GetCertificateResponseGetRegionRetType, ok bool) {
	return getGetCertificateResponseGetRegionAttributeTypeOk(o.Region)
}

// HasRegion returns a boolean if a field has been set.
func (o *GetCertificateResponse) HasRegion() bool {
	_, ok := o.GetRegionOk()
	return ok
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *GetCertificateResponse) SetRegion(v GetCertificateResponseGetRegionRetType) {
	setGetCertificateResponseGetRegionAttributeType(&o.Region, v)
}

func (o GetCertificateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getGetCertificateResponseGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getGetCertificateResponseGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getGetCertificateResponseGetPublicKeyAttributeTypeOk(o.PublicKey); ok {
		toSerialize["PublicKey"] = val
	}
	if val, ok := getGetCertificateResponseGetRegionAttributeTypeOk(o.Region); ok {
		toSerialize["Region"] = val
	}
	return toSerialize, nil
}

type NullableGetCertificateResponse struct {
	value *GetCertificateResponse
	isSet bool
}

func (v NullableGetCertificateResponse) Get() *GetCertificateResponse {
	return v.value
}

func (v *NullableGetCertificateResponse) Set(val *GetCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCertificateResponse(val *GetCertificateResponse) *NullableGetCertificateResponse {
	return &NullableGetCertificateResponse{value: val, isSet: true}
}

func (v NullableGetCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
