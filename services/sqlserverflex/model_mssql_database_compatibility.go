/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the MssqlDatabaseCompatibility type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MssqlDatabaseCompatibility{}

/*
	types and functions for compatibility_level
*/

// isLong
type MssqlDatabaseCompatibilityGetCompatibilityLevelAttributeType = *int64
type MssqlDatabaseCompatibilityGetCompatibilityLevelArgType = int64
type MssqlDatabaseCompatibilityGetCompatibilityLevelRetType = int64

func getMssqlDatabaseCompatibilityGetCompatibilityLevelAttributeTypeOk(arg MssqlDatabaseCompatibilityGetCompatibilityLevelAttributeType) (ret MssqlDatabaseCompatibilityGetCompatibilityLevelRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMssqlDatabaseCompatibilityGetCompatibilityLevelAttributeType(arg *MssqlDatabaseCompatibilityGetCompatibilityLevelAttributeType, val MssqlDatabaseCompatibilityGetCompatibilityLevelRetType) {
	*arg = &val
}

/*
	types and functions for description
*/

// isNotNullableString
type MssqlDatabaseCompatibilityGetDescriptionAttributeType = *string

func getMssqlDatabaseCompatibilityGetDescriptionAttributeTypeOk(arg MssqlDatabaseCompatibilityGetDescriptionAttributeType) (ret MssqlDatabaseCompatibilityGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMssqlDatabaseCompatibilityGetDescriptionAttributeType(arg *MssqlDatabaseCompatibilityGetDescriptionAttributeType, val MssqlDatabaseCompatibilityGetDescriptionRetType) {
	*arg = &val
}

type MssqlDatabaseCompatibilityGetDescriptionArgType = string
type MssqlDatabaseCompatibilityGetDescriptionRetType = string

// MssqlDatabaseCompatibility struct for MssqlDatabaseCompatibility
type MssqlDatabaseCompatibility struct {
	CompatibilityLevel MssqlDatabaseCompatibilityGetCompatibilityLevelAttributeType `json:"compatibility_level,omitempty"`
	Description        MssqlDatabaseCompatibilityGetDescriptionAttributeType        `json:"description,omitempty"`
}

// NewMssqlDatabaseCompatibility instantiates a new MssqlDatabaseCompatibility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMssqlDatabaseCompatibility() *MssqlDatabaseCompatibility {
	this := MssqlDatabaseCompatibility{}
	return &this
}

// NewMssqlDatabaseCompatibilityWithDefaults instantiates a new MssqlDatabaseCompatibility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMssqlDatabaseCompatibilityWithDefaults() *MssqlDatabaseCompatibility {
	this := MssqlDatabaseCompatibility{}
	return &this
}

// GetCompatibilityLevel returns the CompatibilityLevel field value if set, zero value otherwise.
func (o *MssqlDatabaseCompatibility) GetCompatibilityLevel() (res MssqlDatabaseCompatibilityGetCompatibilityLevelRetType) {
	res, _ = o.GetCompatibilityLevelOk()
	return
}

// GetCompatibilityLevelOk returns a tuple with the CompatibilityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MssqlDatabaseCompatibility) GetCompatibilityLevelOk() (ret MssqlDatabaseCompatibilityGetCompatibilityLevelRetType, ok bool) {
	return getMssqlDatabaseCompatibilityGetCompatibilityLevelAttributeTypeOk(o.CompatibilityLevel)
}

// HasCompatibilityLevel returns a boolean if a field has been set.
func (o *MssqlDatabaseCompatibility) HasCompatibilityLevel() bool {
	_, ok := o.GetCompatibilityLevelOk()
	return ok
}

// SetCompatibilityLevel gets a reference to the given int64 and assigns it to the CompatibilityLevel field.
func (o *MssqlDatabaseCompatibility) SetCompatibilityLevel(v MssqlDatabaseCompatibilityGetCompatibilityLevelRetType) {
	setMssqlDatabaseCompatibilityGetCompatibilityLevelAttributeType(&o.CompatibilityLevel, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MssqlDatabaseCompatibility) GetDescription() (res MssqlDatabaseCompatibilityGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MssqlDatabaseCompatibility) GetDescriptionOk() (ret MssqlDatabaseCompatibilityGetDescriptionRetType, ok bool) {
	return getMssqlDatabaseCompatibilityGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *MssqlDatabaseCompatibility) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MssqlDatabaseCompatibility) SetDescription(v MssqlDatabaseCompatibilityGetDescriptionRetType) {
	setMssqlDatabaseCompatibilityGetDescriptionAttributeType(&o.Description, v)
}

func (o MssqlDatabaseCompatibility) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMssqlDatabaseCompatibilityGetCompatibilityLevelAttributeTypeOk(o.CompatibilityLevel); ok {
		toSerialize["CompatibilityLevel"] = val
	}
	if val, ok := getMssqlDatabaseCompatibilityGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	return toSerialize, nil
}

type NullableMssqlDatabaseCompatibility struct {
	value *MssqlDatabaseCompatibility
	isSet bool
}

func (v NullableMssqlDatabaseCompatibility) Get() *MssqlDatabaseCompatibility {
	return v.value
}

func (v *NullableMssqlDatabaseCompatibility) Set(val *MssqlDatabaseCompatibility) {
	v.value = val
	v.isSet = true
}

func (v NullableMssqlDatabaseCompatibility) IsSet() bool {
	return v.isSet
}

func (v *NullableMssqlDatabaseCompatibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMssqlDatabaseCompatibility(val *MssqlDatabaseCompatibility) *NullableMssqlDatabaseCompatibility {
	return &NullableMssqlDatabaseCompatibility{value: val, isSet: true}
}

func (v NullableMssqlDatabaseCompatibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMssqlDatabaseCompatibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
