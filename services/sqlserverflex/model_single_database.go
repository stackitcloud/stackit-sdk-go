/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the SingleDatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleDatabase{}

// SingleDatabase struct for SingleDatabase
type SingleDatabase struct {
	// Database id
	Id *string `json:"id,omitempty"`
	// Database name
	Name    *string                `json:"name,omitempty"`
	Options *SingleDatabaseOptions `json:"options,omitempty"`
}

// NewSingleDatabase instantiates a new SingleDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDatabase() *SingleDatabase {
	this := SingleDatabase{}
	return &this
}

// NewSingleDatabaseWithDefaults instantiates a new SingleDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDatabaseWithDefaults() *SingleDatabase {
	this := SingleDatabase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SingleDatabase) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabase) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SingleDatabase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SingleDatabase) SetId(v *string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SingleDatabase) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SingleDatabase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SingleDatabase) SetName(v *string) {
	o.Name = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SingleDatabase) GetOptions() *SingleDatabaseOptions {
	if o == nil || IsNil(o.Options) {
		var ret *SingleDatabaseOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabase) GetOptionsOk() (*SingleDatabaseOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SingleDatabase) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given SingleDatabaseOptions and assigns it to the Options field.
func (o *SingleDatabase) SetOptions(v *SingleDatabaseOptions) {
	o.Options = v
}

func (o SingleDatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableSingleDatabase struct {
	value *SingleDatabase
	isSet bool
}

func (v NullableSingleDatabase) Get() *SingleDatabase {
	return v.value
}

func (v *NullableSingleDatabase) Set(val *SingleDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDatabase(val *SingleDatabase) *NullableSingleDatabase {
	return &NullableSingleDatabase{value: val, isSet: true}
}

func (v NullableSingleDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
