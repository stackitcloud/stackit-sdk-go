/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the SingleDatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleDatabase{}

/*
	types and functions for id
*/

// isNotNullableString
type SingleDatabaseGetIdAttributeType = *string

func getSingleDatabaseGetIdAttributeTypeOk(arg SingleDatabaseGetIdAttributeType) (ret SingleDatabaseGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSingleDatabaseGetIdAttributeType(arg *SingleDatabaseGetIdAttributeType, val SingleDatabaseGetIdRetType) {
	*arg = &val
}

type SingleDatabaseGetIdArgType = string
type SingleDatabaseGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type SingleDatabaseGetNameAttributeType = *string

func getSingleDatabaseGetNameAttributeTypeOk(arg SingleDatabaseGetNameAttributeType) (ret SingleDatabaseGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSingleDatabaseGetNameAttributeType(arg *SingleDatabaseGetNameAttributeType, val SingleDatabaseGetNameRetType) {
	*arg = &val
}

type SingleDatabaseGetNameArgType = string
type SingleDatabaseGetNameRetType = string

/*
	types and functions for options
*/

// isModel
type SingleDatabaseGetOptionsAttributeType = *SingleDatabaseOptions
type SingleDatabaseGetOptionsArgType = SingleDatabaseOptions
type SingleDatabaseGetOptionsRetType = SingleDatabaseOptions

func getSingleDatabaseGetOptionsAttributeTypeOk(arg SingleDatabaseGetOptionsAttributeType) (ret SingleDatabaseGetOptionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSingleDatabaseGetOptionsAttributeType(arg *SingleDatabaseGetOptionsAttributeType, val SingleDatabaseGetOptionsRetType) {
	*arg = &val
}

// SingleDatabase struct for SingleDatabase
type SingleDatabase struct {
	// Database id
	Id SingleDatabaseGetIdAttributeType `json:"id,omitempty"`
	// Database name
	Name    SingleDatabaseGetNameAttributeType    `json:"name,omitempty"`
	Options SingleDatabaseGetOptionsAttributeType `json:"options,omitempty"`
}

// NewSingleDatabase instantiates a new SingleDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDatabase() *SingleDatabase {
	this := SingleDatabase{}
	return &this
}

// NewSingleDatabaseWithDefaults instantiates a new SingleDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDatabaseWithDefaults() *SingleDatabase {
	this := SingleDatabase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SingleDatabase) GetId() (res SingleDatabaseGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabase) GetIdOk() (ret SingleDatabaseGetIdRetType, ok bool) {
	return getSingleDatabaseGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *SingleDatabase) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SingleDatabase) SetId(v SingleDatabaseGetIdRetType) {
	setSingleDatabaseGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SingleDatabase) GetName() (res SingleDatabaseGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabase) GetNameOk() (ret SingleDatabaseGetNameRetType, ok bool) {
	return getSingleDatabaseGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *SingleDatabase) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SingleDatabase) SetName(v SingleDatabaseGetNameRetType) {
	setSingleDatabaseGetNameAttributeType(&o.Name, v)
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SingleDatabase) GetOptions() (res SingleDatabaseGetOptionsRetType) {
	res, _ = o.GetOptionsOk()
	return
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabase) GetOptionsOk() (ret SingleDatabaseGetOptionsRetType, ok bool) {
	return getSingleDatabaseGetOptionsAttributeTypeOk(o.Options)
}

// HasOptions returns a boolean if a field has been set.
func (o *SingleDatabase) HasOptions() bool {
	_, ok := o.GetOptionsOk()
	return ok
}

// SetOptions gets a reference to the given SingleDatabaseOptions and assigns it to the Options field.
func (o *SingleDatabase) SetOptions(v SingleDatabaseGetOptionsRetType) {
	setSingleDatabaseGetOptionsAttributeType(&o.Options, v)
}

func (o SingleDatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getSingleDatabaseGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getSingleDatabaseGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getSingleDatabaseGetOptionsAttributeTypeOk(o.Options); ok {
		toSerialize["Options"] = val
	}
	return toSerialize, nil
}

type NullableSingleDatabase struct {
	value *SingleDatabase
	isSet bool
}

func (v NullableSingleDatabase) Get() *SingleDatabase {
	return v.value
}

func (v *NullableSingleDatabase) Set(val *SingleDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDatabase(val *SingleDatabase) *NullableSingleDatabase {
	return &NullableSingleDatabase{value: val, isSet: true}
}

func (v NullableSingleDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
