/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the MssqlDatabaseCollation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MssqlDatabaseCollation{}

/*
	types and functions for collation_name
*/

// isNotNullableString
type MssqlDatabaseCollationGetCollationNameAttributeType = *string

func getMssqlDatabaseCollationGetCollationNameAttributeTypeOk(arg MssqlDatabaseCollationGetCollationNameAttributeType) (ret MssqlDatabaseCollationGetCollationNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMssqlDatabaseCollationGetCollationNameAttributeType(arg *MssqlDatabaseCollationGetCollationNameAttributeType, val MssqlDatabaseCollationGetCollationNameRetType) {
	*arg = &val
}

type MssqlDatabaseCollationGetCollationNameArgType = string
type MssqlDatabaseCollationGetCollationNameRetType = string

/*
	types and functions for description
*/

// isNotNullableString
type MssqlDatabaseCollationGetDescriptionAttributeType = *string

func getMssqlDatabaseCollationGetDescriptionAttributeTypeOk(arg MssqlDatabaseCollationGetDescriptionAttributeType) (ret MssqlDatabaseCollationGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMssqlDatabaseCollationGetDescriptionAttributeType(arg *MssqlDatabaseCollationGetDescriptionAttributeType, val MssqlDatabaseCollationGetDescriptionRetType) {
	*arg = &val
}

type MssqlDatabaseCollationGetDescriptionArgType = string
type MssqlDatabaseCollationGetDescriptionRetType = string

// MssqlDatabaseCollation struct for MssqlDatabaseCollation
type MssqlDatabaseCollation struct {
	CollationName MssqlDatabaseCollationGetCollationNameAttributeType `json:"collation_name,omitempty"`
	Description   MssqlDatabaseCollationGetDescriptionAttributeType   `json:"description,omitempty"`
}

// NewMssqlDatabaseCollation instantiates a new MssqlDatabaseCollation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMssqlDatabaseCollation() *MssqlDatabaseCollation {
	this := MssqlDatabaseCollation{}
	return &this
}

// NewMssqlDatabaseCollationWithDefaults instantiates a new MssqlDatabaseCollation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMssqlDatabaseCollationWithDefaults() *MssqlDatabaseCollation {
	this := MssqlDatabaseCollation{}
	return &this
}

// GetCollationName returns the CollationName field value if set, zero value otherwise.
func (o *MssqlDatabaseCollation) GetCollationName() (res MssqlDatabaseCollationGetCollationNameRetType) {
	res, _ = o.GetCollationNameOk()
	return
}

// GetCollationNameOk returns a tuple with the CollationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MssqlDatabaseCollation) GetCollationNameOk() (ret MssqlDatabaseCollationGetCollationNameRetType, ok bool) {
	return getMssqlDatabaseCollationGetCollationNameAttributeTypeOk(o.CollationName)
}

// HasCollationName returns a boolean if a field has been set.
func (o *MssqlDatabaseCollation) HasCollationName() bool {
	_, ok := o.GetCollationNameOk()
	return ok
}

// SetCollationName gets a reference to the given string and assigns it to the CollationName field.
func (o *MssqlDatabaseCollation) SetCollationName(v MssqlDatabaseCollationGetCollationNameRetType) {
	setMssqlDatabaseCollationGetCollationNameAttributeType(&o.CollationName, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MssqlDatabaseCollation) GetDescription() (res MssqlDatabaseCollationGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MssqlDatabaseCollation) GetDescriptionOk() (ret MssqlDatabaseCollationGetDescriptionRetType, ok bool) {
	return getMssqlDatabaseCollationGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *MssqlDatabaseCollation) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MssqlDatabaseCollation) SetDescription(v MssqlDatabaseCollationGetDescriptionRetType) {
	setMssqlDatabaseCollationGetDescriptionAttributeType(&o.Description, v)
}

func (o MssqlDatabaseCollation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMssqlDatabaseCollationGetCollationNameAttributeTypeOk(o.CollationName); ok {
		toSerialize["CollationName"] = val
	}
	if val, ok := getMssqlDatabaseCollationGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	return toSerialize, nil
}

type NullableMssqlDatabaseCollation struct {
	value *MssqlDatabaseCollation
	isSet bool
}

func (v NullableMssqlDatabaseCollation) Get() *MssqlDatabaseCollation {
	return v.value
}

func (v *NullableMssqlDatabaseCollation) Set(val *MssqlDatabaseCollation) {
	v.value = val
	v.isSet = true
}

func (v NullableMssqlDatabaseCollation) IsSet() bool {
	return v.isSet
}

func (v *NullableMssqlDatabaseCollation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMssqlDatabaseCollation(val *MssqlDatabaseCollation) *NullableMssqlDatabaseCollation {
	return &NullableMssqlDatabaseCollation{value: val, isSet: true}
}

func (v NullableMssqlDatabaseCollation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMssqlDatabaseCollation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
