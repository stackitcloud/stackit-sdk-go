/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the DatabaseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseOptions{}

// DatabaseOptions struct for DatabaseOptions
type DatabaseOptions struct {
	// Name of the collation of the database
	CollationName *string `json:"collationName,omitempty"`
	// CompatibilityLevel of the Database.
	CompatibilityLevel *int64 `json:"compatibilityLevel,omitempty"`
	// Name of the owner of the database.
	Owner *string `json:"owner,omitempty"`
}

// NewDatabaseOptions instantiates a new DatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseOptions() *DatabaseOptions {
	this := DatabaseOptions{}
	return &this
}

// NewDatabaseOptionsWithDefaults instantiates a new DatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseOptionsWithDefaults() *DatabaseOptions {
	this := DatabaseOptions{}
	return &this
}

// GetCollationName returns the CollationName field value if set, zero value otherwise.
func (o *DatabaseOptions) GetCollationName() *string {
	if o == nil || IsNil(o.CollationName) {
		var ret *string
		return ret
	}
	return o.CollationName
}

// GetCollationNameOk returns a tuple with the CollationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseOptions) GetCollationNameOk() (*string, bool) {
	if o == nil || IsNil(o.CollationName) {
		return nil, false
	}
	return o.CollationName, true
}

// HasCollationName returns a boolean if a field has been set.
func (o *DatabaseOptions) HasCollationName() bool {
	if o != nil && !IsNil(o.CollationName) {
		return true
	}

	return false
}

// SetCollationName gets a reference to the given string and assigns it to the CollationName field.
func (o *DatabaseOptions) SetCollationName(v *string) {
	o.CollationName = v
}

// GetCompatibilityLevel returns the CompatibilityLevel field value if set, zero value otherwise.
func (o *DatabaseOptions) GetCompatibilityLevel() *int64 {
	if o == nil || IsNil(o.CompatibilityLevel) {
		var ret *int64
		return ret
	}
	return o.CompatibilityLevel
}

// GetCompatibilityLevelOk returns a tuple with the CompatibilityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseOptions) GetCompatibilityLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.CompatibilityLevel) {
		return nil, false
	}
	return o.CompatibilityLevel, true
}

// HasCompatibilityLevel returns a boolean if a field has been set.
func (o *DatabaseOptions) HasCompatibilityLevel() bool {
	if o != nil && !IsNil(o.CompatibilityLevel) {
		return true
	}

	return false
}

// SetCompatibilityLevel gets a reference to the given int64 and assigns it to the CompatibilityLevel field.
func (o *DatabaseOptions) SetCompatibilityLevel(v *int64) {
	o.CompatibilityLevel = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DatabaseOptions) GetOwner() *string {
	if o == nil || IsNil(o.Owner) {
		var ret *string
		return ret
	}
	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseOptions) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DatabaseOptions) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *DatabaseOptions) SetOwner(v *string) {
	o.Owner = v
}

func (o DatabaseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollationName) {
		toSerialize["collationName"] = o.CollationName
	}
	if !IsNil(o.CompatibilityLevel) {
		toSerialize["compatibilityLevel"] = o.CompatibilityLevel
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullableDatabaseOptions struct {
	value *DatabaseOptions
	isSet bool
}

func (v NullableDatabaseOptions) Get() *DatabaseOptions {
	return v.value
}

func (v *NullableDatabaseOptions) Set(val *DatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseOptions(val *DatabaseOptions) *NullableDatabaseOptions {
	return &NullableDatabaseOptions{value: val, isSet: true}
}

func (v NullableDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
