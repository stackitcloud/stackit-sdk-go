/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the InstanceDocumentationOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceDocumentationOptions{}

// InstanceDocumentationOptions struct for InstanceDocumentationOptions
type InstanceDocumentationOptions struct {
	// Edition of the MSSQL server instance
	Edition *string `json:"edition,omitempty"`
	// The days for how long the backup files should be stored before cleaned up. 30 to 365
	RetentionDays *string `json:"retentionDays,omitempty"`
}

// NewInstanceDocumentationOptions instantiates a new InstanceDocumentationOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceDocumentationOptions() *InstanceDocumentationOptions {
	this := InstanceDocumentationOptions{}
	var edition string = "developer"
	this.Edition = &edition
	var retentionDays string = "32"
	this.RetentionDays = &retentionDays
	return &this
}

// NewInstanceDocumentationOptionsWithDefaults instantiates a new InstanceDocumentationOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceDocumentationOptionsWithDefaults() *InstanceDocumentationOptions {
	this := InstanceDocumentationOptions{}
	var edition string = "developer"
	this.Edition = &edition
	var retentionDays string = "32"
	this.RetentionDays = &retentionDays
	return &this
}

// GetEdition returns the Edition field value if set, zero value otherwise.
func (o *InstanceDocumentationOptions) GetEdition() *string {
	if o == nil || IsNil(o.Edition) {
		var ret *string
		return ret
	}
	return o.Edition
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDocumentationOptions) GetEditionOk() (*string, bool) {
	if o == nil || IsNil(o.Edition) {
		return nil, false
	}
	return o.Edition, true
}

// HasEdition returns a boolean if a field has been set.
func (o *InstanceDocumentationOptions) HasEdition() bool {
	if o != nil && !IsNil(o.Edition) {
		return true
	}

	return false
}

// SetEdition gets a reference to the given string and assigns it to the Edition field.
func (o *InstanceDocumentationOptions) SetEdition(v *string) {
	o.Edition = v
}

// GetRetentionDays returns the RetentionDays field value if set, zero value otherwise.
func (o *InstanceDocumentationOptions) GetRetentionDays() *string {
	if o == nil || IsNil(o.RetentionDays) {
		var ret *string
		return ret
	}
	return o.RetentionDays
}

// GetRetentionDaysOk returns a tuple with the RetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceDocumentationOptions) GetRetentionDaysOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionDays) {
		return nil, false
	}
	return o.RetentionDays, true
}

// HasRetentionDays returns a boolean if a field has been set.
func (o *InstanceDocumentationOptions) HasRetentionDays() bool {
	if o != nil && !IsNil(o.RetentionDays) {
		return true
	}

	return false
}

// SetRetentionDays gets a reference to the given string and assigns it to the RetentionDays field.
func (o *InstanceDocumentationOptions) SetRetentionDays(v *string) {
	o.RetentionDays = v
}

func (o InstanceDocumentationOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Edition) {
		toSerialize["edition"] = o.Edition
	}
	if !IsNil(o.RetentionDays) {
		toSerialize["retentionDays"] = o.RetentionDays
	}
	return toSerialize, nil
}

type NullableInstanceDocumentationOptions struct {
	value *InstanceDocumentationOptions
	isSet bool
}

func (v NullableInstanceDocumentationOptions) Get() *InstanceDocumentationOptions {
	return v.value
}

func (v *NullableInstanceDocumentationOptions) Set(val *InstanceDocumentationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceDocumentationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceDocumentationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceDocumentationOptions(val *InstanceDocumentationOptions) *NullableInstanceDocumentationOptions {
	return &NullableInstanceDocumentationOptions{value: val, isSet: true}
}

func (v NullableInstanceDocumentationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceDocumentationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
