/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the UpdateInstancePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInstancePayload{}

// UpdateInstancePayload struct for UpdateInstancePayload
type UpdateInstancePayload struct {
	// REQUIRED
	Acl *CreateInstancePayloadAcl `json:"acl"`
	// Cronjob for the daily full backup if not provided a job will generated between 00:00 and 04:59
	// REQUIRED
	BackupSchedule *string `json:"backupSchedule"`
	// Id of the selected flavor
	// REQUIRED
	FlavorId *string `json:"flavorId"`
	// REQUIRED
	Labels *map[string]interface{} `json:"labels"`
	// Name of the instance
	// REQUIRED
	Name *string `json:"name"`
	// Version of the MSSQL Server
	// REQUIRED
	Version *string `json:"version"`
}

type _UpdateInstancePayload UpdateInstancePayload

// NewUpdateInstancePayload instantiates a new UpdateInstancePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInstancePayload(acl *CreateInstancePayloadAcl, backupSchedule *string, flavorId *string, labels *map[string]interface{}, name *string, version *string) *UpdateInstancePayload {
	this := UpdateInstancePayload{}
	this.Acl = acl
	this.BackupSchedule = backupSchedule
	this.FlavorId = flavorId
	this.Labels = labels
	this.Name = name
	this.Version = version
	return &this
}

// NewUpdateInstancePayloadWithDefaults instantiates a new UpdateInstancePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInstancePayloadWithDefaults() *UpdateInstancePayload {
	this := UpdateInstancePayload{}
	var version string = "2022"
	this.Version = &version
	return &this
}

// GetAcl returns the Acl field value
func (o *UpdateInstancePayload) GetAcl() *CreateInstancePayloadAcl {
	if o == nil {
		var ret *CreateInstancePayloadAcl
		return ret
	}

	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetAclOk() (*CreateInstancePayloadAcl, bool) {
	if o == nil {
		return nil, false
	}
	return o.Acl, true
}

// SetAcl sets field value
func (o *UpdateInstancePayload) SetAcl(v *CreateInstancePayloadAcl) {
	o.Acl = v
}

// GetBackupSchedule returns the BackupSchedule field value
func (o *UpdateInstancePayload) GetBackupSchedule() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.BackupSchedule
}

// GetBackupScheduleOk returns a tuple with the BackupSchedule field value
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetBackupScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupSchedule, true
}

// SetBackupSchedule sets field value
func (o *UpdateInstancePayload) SetBackupSchedule(v *string) {
	o.BackupSchedule = v
}

// GetFlavorId returns the FlavorId field value
func (o *UpdateInstancePayload) GetFlavorId() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetFlavorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlavorId, true
}

// SetFlavorId sets field value
func (o *UpdateInstancePayload) SetFlavorId(v *string) {
	o.FlavorId = v
}

// GetLabels returns the Labels field value
func (o *UpdateInstancePayload) GetLabels() *map[string]interface{} {
	if o == nil {
		var ret *map[string]interface{}
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *UpdateInstancePayload) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *UpdateInstancePayload) GetName() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *UpdateInstancePayload) SetName(v *string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *UpdateInstancePayload) GetVersion() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *UpdateInstancePayload) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version, true
}

// SetVersion sets field value
func (o *UpdateInstancePayload) SetVersion(v *string) {
	o.Version = v
}

func (o UpdateInstancePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["acl"] = o.Acl
	toSerialize["backupSchedule"] = o.BackupSchedule
	toSerialize["flavorId"] = o.FlavorId
	toSerialize["labels"] = o.Labels
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableUpdateInstancePayload struct {
	value *UpdateInstancePayload
	isSet bool
}

func (v NullableUpdateInstancePayload) Get() *UpdateInstancePayload {
	return v.value
}

func (v *NullableUpdateInstancePayload) Set(val *UpdateInstancePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInstancePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInstancePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInstancePayload(val *UpdateInstancePayload) *NullableUpdateInstancePayload {
	return &NullableUpdateInstancePayload{value: val, isSet: true}
}

func (v NullableUpdateInstancePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInstancePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
