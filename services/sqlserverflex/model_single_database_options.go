/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the SingleDatabaseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleDatabaseOptions{}

/*
	types and functions for collationName
*/

// isNotNullableString
type SingleDatabaseOptionsGetCollationNameAttributeType = *string

func getSingleDatabaseOptionsGetCollationNameAttributeTypeOk(arg SingleDatabaseOptionsGetCollationNameAttributeType) (ret SingleDatabaseOptionsGetCollationNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSingleDatabaseOptionsGetCollationNameAttributeType(arg *SingleDatabaseOptionsGetCollationNameAttributeType, val SingleDatabaseOptionsGetCollationNameRetType) {
	*arg = &val
}

type SingleDatabaseOptionsGetCollationNameArgType = string
type SingleDatabaseOptionsGetCollationNameRetType = string

/*
	types and functions for compatibilityLevel
*/

// isLong
type SingleDatabaseOptionsGetCompatibilityLevelAttributeType = *int64
type SingleDatabaseOptionsGetCompatibilityLevelArgType = int64
type SingleDatabaseOptionsGetCompatibilityLevelRetType = int64

func getSingleDatabaseOptionsGetCompatibilityLevelAttributeTypeOk(arg SingleDatabaseOptionsGetCompatibilityLevelAttributeType) (ret SingleDatabaseOptionsGetCompatibilityLevelRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSingleDatabaseOptionsGetCompatibilityLevelAttributeType(arg *SingleDatabaseOptionsGetCompatibilityLevelAttributeType, val SingleDatabaseOptionsGetCompatibilityLevelRetType) {
	*arg = &val
}

/*
	types and functions for owner
*/

// isNotNullableString
type SingleDatabaseOptionsGetOwnerAttributeType = *string

func getSingleDatabaseOptionsGetOwnerAttributeTypeOk(arg SingleDatabaseOptionsGetOwnerAttributeType) (ret SingleDatabaseOptionsGetOwnerRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSingleDatabaseOptionsGetOwnerAttributeType(arg *SingleDatabaseOptionsGetOwnerAttributeType, val SingleDatabaseOptionsGetOwnerRetType) {
	*arg = &val
}

type SingleDatabaseOptionsGetOwnerArgType = string
type SingleDatabaseOptionsGetOwnerRetType = string

// SingleDatabaseOptions Database specific options
type SingleDatabaseOptions struct {
	// Name of the collation of the database
	CollationName SingleDatabaseOptionsGetCollationNameAttributeType `json:"collationName,omitempty"`
	// CompatibilityLevel of the Database.
	CompatibilityLevel SingleDatabaseOptionsGetCompatibilityLevelAttributeType `json:"compatibilityLevel,omitempty"`
	// Name of the owner of the database.
	Owner SingleDatabaseOptionsGetOwnerAttributeType `json:"owner,omitempty"`
}

// NewSingleDatabaseOptions instantiates a new SingleDatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDatabaseOptions() *SingleDatabaseOptions {
	this := SingleDatabaseOptions{}
	return &this
}

// NewSingleDatabaseOptionsWithDefaults instantiates a new SingleDatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDatabaseOptionsWithDefaults() *SingleDatabaseOptions {
	this := SingleDatabaseOptions{}
	return &this
}

// GetCollationName returns the CollationName field value if set, zero value otherwise.
func (o *SingleDatabaseOptions) GetCollationName() (res SingleDatabaseOptionsGetCollationNameRetType) {
	res, _ = o.GetCollationNameOk()
	return
}

// GetCollationNameOk returns a tuple with the CollationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabaseOptions) GetCollationNameOk() (ret SingleDatabaseOptionsGetCollationNameRetType, ok bool) {
	return getSingleDatabaseOptionsGetCollationNameAttributeTypeOk(o.CollationName)
}

// HasCollationName returns a boolean if a field has been set.
func (o *SingleDatabaseOptions) HasCollationName() bool {
	_, ok := o.GetCollationNameOk()
	return ok
}

// SetCollationName gets a reference to the given string and assigns it to the CollationName field.
func (o *SingleDatabaseOptions) SetCollationName(v SingleDatabaseOptionsGetCollationNameRetType) {
	setSingleDatabaseOptionsGetCollationNameAttributeType(&o.CollationName, v)
}

// GetCompatibilityLevel returns the CompatibilityLevel field value if set, zero value otherwise.
func (o *SingleDatabaseOptions) GetCompatibilityLevel() (res SingleDatabaseOptionsGetCompatibilityLevelRetType) {
	res, _ = o.GetCompatibilityLevelOk()
	return
}

// GetCompatibilityLevelOk returns a tuple with the CompatibilityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabaseOptions) GetCompatibilityLevelOk() (ret SingleDatabaseOptionsGetCompatibilityLevelRetType, ok bool) {
	return getSingleDatabaseOptionsGetCompatibilityLevelAttributeTypeOk(o.CompatibilityLevel)
}

// HasCompatibilityLevel returns a boolean if a field has been set.
func (o *SingleDatabaseOptions) HasCompatibilityLevel() bool {
	_, ok := o.GetCompatibilityLevelOk()
	return ok
}

// SetCompatibilityLevel gets a reference to the given int64 and assigns it to the CompatibilityLevel field.
func (o *SingleDatabaseOptions) SetCompatibilityLevel(v SingleDatabaseOptionsGetCompatibilityLevelRetType) {
	setSingleDatabaseOptionsGetCompatibilityLevelAttributeType(&o.CompatibilityLevel, v)
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *SingleDatabaseOptions) GetOwner() (res SingleDatabaseOptionsGetOwnerRetType) {
	res, _ = o.GetOwnerOk()
	return
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDatabaseOptions) GetOwnerOk() (ret SingleDatabaseOptionsGetOwnerRetType, ok bool) {
	return getSingleDatabaseOptionsGetOwnerAttributeTypeOk(o.Owner)
}

// HasOwner returns a boolean if a field has been set.
func (o *SingleDatabaseOptions) HasOwner() bool {
	_, ok := o.GetOwnerOk()
	return ok
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *SingleDatabaseOptions) SetOwner(v SingleDatabaseOptionsGetOwnerRetType) {
	setSingleDatabaseOptionsGetOwnerAttributeType(&o.Owner, v)
}

func (o SingleDatabaseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getSingleDatabaseOptionsGetCollationNameAttributeTypeOk(o.CollationName); ok {
		toSerialize["CollationName"] = val
	}
	if val, ok := getSingleDatabaseOptionsGetCompatibilityLevelAttributeTypeOk(o.CompatibilityLevel); ok {
		toSerialize["CompatibilityLevel"] = val
	}
	if val, ok := getSingleDatabaseOptionsGetOwnerAttributeTypeOk(o.Owner); ok {
		toSerialize["Owner"] = val
	}
	return toSerialize, nil
}

type NullableSingleDatabaseOptions struct {
	value *SingleDatabaseOptions
	isSet bool
}

func (v NullableSingleDatabaseOptions) Get() *SingleDatabaseOptions {
	return v.value
}

func (v *NullableSingleDatabaseOptions) Set(val *SingleDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDatabaseOptions(val *SingleDatabaseOptions) *NullableSingleDatabaseOptions {
	return &NullableSingleDatabaseOptions{value: val, isSet: true}
}

func (v NullableSingleDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
