/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the TriggerDatabaseRestorePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerDatabaseRestorePayload{}

// TriggerDatabaseRestorePayload struct for TriggerDatabaseRestorePayload
type TriggerDatabaseRestorePayload struct {
	// Name for the restored database no overwrite allowed at the moment
	// REQUIRED
	Name *string `json:"name"`
	// Time of the restore point formate RFC3339
	// REQUIRED
	RestoreDateTime *string `json:"restoreDateTime"`
}

type _TriggerDatabaseRestorePayload TriggerDatabaseRestorePayload

// NewTriggerDatabaseRestorePayload instantiates a new TriggerDatabaseRestorePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerDatabaseRestorePayload(name *string, restoreDateTime *string) *TriggerDatabaseRestorePayload {
	this := TriggerDatabaseRestorePayload{}
	this.Name = name
	this.RestoreDateTime = restoreDateTime
	return &this
}

// NewTriggerDatabaseRestorePayloadWithDefaults instantiates a new TriggerDatabaseRestorePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerDatabaseRestorePayloadWithDefaults() *TriggerDatabaseRestorePayload {
	this := TriggerDatabaseRestorePayload{}
	return &this
}

// GetName returns the Name field value
func (o *TriggerDatabaseRestorePayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TriggerDatabaseRestorePayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *TriggerDatabaseRestorePayload) SetName(v *string) {
	o.Name = v
}

// GetRestoreDateTime returns the RestoreDateTime field value
func (o *TriggerDatabaseRestorePayload) GetRestoreDateTime() *string {
	if o == nil || IsNil(o.RestoreDateTime) {
		var ret *string
		return ret
	}

	return o.RestoreDateTime
}

// GetRestoreDateTimeOk returns a tuple with the RestoreDateTime field value
// and a boolean to check if the value has been set.
func (o *TriggerDatabaseRestorePayload) GetRestoreDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreDateTime, true
}

// SetRestoreDateTime sets field value
func (o *TriggerDatabaseRestorePayload) SetRestoreDateTime(v *string) {
	o.RestoreDateTime = v
}

func (o TriggerDatabaseRestorePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["restoreDateTime"] = o.RestoreDateTime
	return toSerialize, nil
}

type NullableTriggerDatabaseRestorePayload struct {
	value *TriggerDatabaseRestorePayload
	isSet bool
}

func (v NullableTriggerDatabaseRestorePayload) Get() *TriggerDatabaseRestorePayload {
	return v.value
}

func (v *NullableTriggerDatabaseRestorePayload) Set(val *TriggerDatabaseRestorePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerDatabaseRestorePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerDatabaseRestorePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerDatabaseRestorePayload(val *TriggerDatabaseRestorePayload) *NullableTriggerDatabaseRestorePayload {
	return &NullableTriggerDatabaseRestorePayload{value: val, isSet: true}
}

func (v NullableTriggerDatabaseRestorePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerDatabaseRestorePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
