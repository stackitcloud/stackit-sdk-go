/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the ListDatabasesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListDatabasesResponse{}

// ListDatabasesResponse struct for ListDatabasesResponse
type ListDatabasesResponse struct {
	Databases *[]Database `json:"databases,omitempty"`
}

// NewListDatabasesResponse instantiates a new ListDatabasesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDatabasesResponse() *ListDatabasesResponse {
	this := ListDatabasesResponse{}
	return &this
}

// NewListDatabasesResponseWithDefaults instantiates a new ListDatabasesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDatabasesResponseWithDefaults() *ListDatabasesResponse {
	this := ListDatabasesResponse{}
	return &this
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *ListDatabasesResponse) GetDatabases() *[]Database {
	if o == nil || IsNil(o.Databases) {
		var ret *[]Database
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDatabasesResponse) GetDatabasesOk() (*[]Database, bool) {
	if o == nil || IsNil(o.Databases) {
		return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *ListDatabasesResponse) HasDatabases() bool {
	if o != nil && !IsNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []Database and assigns it to the Databases field.
func (o *ListDatabasesResponse) SetDatabases(v *[]Database) {
	o.Databases = v
}

func (o ListDatabasesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	return toSerialize, nil
}

type NullableListDatabasesResponse struct {
	value *ListDatabasesResponse
	isSet bool
}

func (v NullableListDatabasesResponse) Get() *ListDatabasesResponse {
	return v.value
}

func (v *NullableListDatabasesResponse) Set(val *ListDatabasesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDatabasesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDatabasesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDatabasesResponse(val *ListDatabasesResponse) *NullableListDatabasesResponse {
	return &NullableListDatabasesResponse{value: val, isSet: true}
}

func (v NullableListDatabasesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDatabasesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
