/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the CreateInstancePayloadStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInstancePayloadStorage{}

// CreateInstancePayloadStorage Storage for the instance
type CreateInstancePayloadStorage struct {
	// Class of the instance.
	Class *string `json:"class,omitempty"`
	// Size of the instance storage in GB
	Size *int64 `json:"size,omitempty"`
}

// NewCreateInstancePayloadStorage instantiates a new CreateInstancePayloadStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInstancePayloadStorage() *CreateInstancePayloadStorage {
	this := CreateInstancePayloadStorage{}
	var class string = "premium-perf12-stackit"
	this.Class = &class
	return &this
}

// NewCreateInstancePayloadStorageWithDefaults instantiates a new CreateInstancePayloadStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInstancePayloadStorageWithDefaults() *CreateInstancePayloadStorage {
	this := CreateInstancePayloadStorage{}
	var class string = "premium-perf12-stackit"
	this.Class = &class
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *CreateInstancePayloadStorage) GetClass() *string {
	if o == nil || IsNil(o.Class) {
		var ret *string
		return ret
	}
	return o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancePayloadStorage) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *CreateInstancePayloadStorage) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *CreateInstancePayloadStorage) SetClass(v *string) {
	o.Class = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CreateInstancePayloadStorage) GetSize() *int64 {
	if o == nil || IsNil(o.Size) {
		var ret *int64
		return ret
	}
	return o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancePayloadStorage) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CreateInstancePayloadStorage) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *CreateInstancePayloadStorage) SetSize(v *int64) {
	o.Size = v
}

func (o CreateInstancePayloadStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableCreateInstancePayloadStorage struct {
	value *CreateInstancePayloadStorage
	isSet bool
}

func (v NullableCreateInstancePayloadStorage) Get() *CreateInstancePayloadStorage {
	return v.value
}

func (v *NullableCreateInstancePayloadStorage) Set(val *CreateInstancePayloadStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInstancePayloadStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInstancePayloadStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInstancePayloadStorage(val *CreateInstancePayloadStorage) *NullableCreateInstancePayloadStorage {
	return &NullableCreateInstancePayloadStorage{value: val, isSet: true}
}

func (v NullableCreateInstancePayloadStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInstancePayloadStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
