/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the UserResponseUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserResponseUser{}

/*
	types and functions for default_database
*/

// isNotNullableString
type UserResponseUserGetDefaultDatabaseAttributeType = *string

func getUserResponseUserGetDefaultDatabaseAttributeTypeOk(arg UserResponseUserGetDefaultDatabaseAttributeType) (ret UserResponseUserGetDefaultDatabaseRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserResponseUserGetDefaultDatabaseAttributeType(arg *UserResponseUserGetDefaultDatabaseAttributeType, val UserResponseUserGetDefaultDatabaseRetType) {
	*arg = &val
}

type UserResponseUserGetDefaultDatabaseArgType = string
type UserResponseUserGetDefaultDatabaseRetType = string

/*
	types and functions for host
*/

// isNotNullableString
type UserResponseUserGetHostAttributeType = *string

func getUserResponseUserGetHostAttributeTypeOk(arg UserResponseUserGetHostAttributeType) (ret UserResponseUserGetHostRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserResponseUserGetHostAttributeType(arg *UserResponseUserGetHostAttributeType, val UserResponseUserGetHostRetType) {
	*arg = &val
}

type UserResponseUserGetHostArgType = string
type UserResponseUserGetHostRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type UserResponseUserGetIdAttributeType = *string

func getUserResponseUserGetIdAttributeTypeOk(arg UserResponseUserGetIdAttributeType) (ret UserResponseUserGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserResponseUserGetIdAttributeType(arg *UserResponseUserGetIdAttributeType, val UserResponseUserGetIdRetType) {
	*arg = &val
}

type UserResponseUserGetIdArgType = string
type UserResponseUserGetIdRetType = string

/*
	types and functions for port
*/

// isLong
type UserResponseUserGetPortAttributeType = *int64
type UserResponseUserGetPortArgType = int64
type UserResponseUserGetPortRetType = int64

func getUserResponseUserGetPortAttributeTypeOk(arg UserResponseUserGetPortAttributeType) (ret UserResponseUserGetPortRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserResponseUserGetPortAttributeType(arg *UserResponseUserGetPortAttributeType, val UserResponseUserGetPortRetType) {
	*arg = &val
}

/*
	types and functions for roles
*/

// isArray
type UserResponseUserGetRolesAttributeType = *[]string
type UserResponseUserGetRolesArgType = []string
type UserResponseUserGetRolesRetType = []string

func getUserResponseUserGetRolesAttributeTypeOk(arg UserResponseUserGetRolesAttributeType) (ret UserResponseUserGetRolesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserResponseUserGetRolesAttributeType(arg *UserResponseUserGetRolesAttributeType, val UserResponseUserGetRolesRetType) {
	*arg = &val
}

/*
	types and functions for username
*/

// isNotNullableString
type UserResponseUserGetUsernameAttributeType = *string

func getUserResponseUserGetUsernameAttributeTypeOk(arg UserResponseUserGetUsernameAttributeType) (ret UserResponseUserGetUsernameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserResponseUserGetUsernameAttributeType(arg *UserResponseUserGetUsernameAttributeType, val UserResponseUserGetUsernameRetType) {
	*arg = &val
}

type UserResponseUserGetUsernameArgType = string
type UserResponseUserGetUsernameRetType = string

// UserResponseUser struct for UserResponseUser
type UserResponseUser struct {
	DefaultDatabase UserResponseUserGetDefaultDatabaseAttributeType `json:"default_database,omitempty"`
	Host            UserResponseUserGetHostAttributeType            `json:"host,omitempty"`
	Id              UserResponseUserGetIdAttributeType              `json:"id,omitempty"`
	Port            UserResponseUserGetPortAttributeType            `json:"port,omitempty"`
	Roles           UserResponseUserGetRolesAttributeType           `json:"roles,omitempty"`
	Username        UserResponseUserGetUsernameAttributeType        `json:"username,omitempty"`
}

// NewUserResponseUser instantiates a new UserResponseUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserResponseUser() *UserResponseUser {
	this := UserResponseUser{}
	return &this
}

// NewUserResponseUserWithDefaults instantiates a new UserResponseUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserResponseUserWithDefaults() *UserResponseUser {
	this := UserResponseUser{}
	return &this
}

// GetDefaultDatabase returns the DefaultDatabase field value if set, zero value otherwise.
func (o *UserResponseUser) GetDefaultDatabase() (res UserResponseUserGetDefaultDatabaseRetType) {
	res, _ = o.GetDefaultDatabaseOk()
	return
}

// GetDefaultDatabaseOk returns a tuple with the DefaultDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResponseUser) GetDefaultDatabaseOk() (ret UserResponseUserGetDefaultDatabaseRetType, ok bool) {
	return getUserResponseUserGetDefaultDatabaseAttributeTypeOk(o.DefaultDatabase)
}

// HasDefaultDatabase returns a boolean if a field has been set.
func (o *UserResponseUser) HasDefaultDatabase() bool {
	_, ok := o.GetDefaultDatabaseOk()
	return ok
}

// SetDefaultDatabase gets a reference to the given string and assigns it to the DefaultDatabase field.
func (o *UserResponseUser) SetDefaultDatabase(v UserResponseUserGetDefaultDatabaseRetType) {
	setUserResponseUserGetDefaultDatabaseAttributeType(&o.DefaultDatabase, v)
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *UserResponseUser) GetHost() (res UserResponseUserGetHostRetType) {
	res, _ = o.GetHostOk()
	return
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResponseUser) GetHostOk() (ret UserResponseUserGetHostRetType, ok bool) {
	return getUserResponseUserGetHostAttributeTypeOk(o.Host)
}

// HasHost returns a boolean if a field has been set.
func (o *UserResponseUser) HasHost() bool {
	_, ok := o.GetHostOk()
	return ok
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *UserResponseUser) SetHost(v UserResponseUserGetHostRetType) {
	setUserResponseUserGetHostAttributeType(&o.Host, v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserResponseUser) GetId() (res UserResponseUserGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResponseUser) GetIdOk() (ret UserResponseUserGetIdRetType, ok bool) {
	return getUserResponseUserGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *UserResponseUser) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserResponseUser) SetId(v UserResponseUserGetIdRetType) {
	setUserResponseUserGetIdAttributeType(&o.Id, v)
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *UserResponseUser) GetPort() (res UserResponseUserGetPortRetType) {
	res, _ = o.GetPortOk()
	return
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResponseUser) GetPortOk() (ret UserResponseUserGetPortRetType, ok bool) {
	return getUserResponseUserGetPortAttributeTypeOk(o.Port)
}

// HasPort returns a boolean if a field has been set.
func (o *UserResponseUser) HasPort() bool {
	_, ok := o.GetPortOk()
	return ok
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *UserResponseUser) SetPort(v UserResponseUserGetPortRetType) {
	setUserResponseUserGetPortAttributeType(&o.Port, v)
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserResponseUser) GetRoles() (res UserResponseUserGetRolesRetType) {
	res, _ = o.GetRolesOk()
	return
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResponseUser) GetRolesOk() (ret UserResponseUserGetRolesRetType, ok bool) {
	return getUserResponseUserGetRolesAttributeTypeOk(o.Roles)
}

// HasRoles returns a boolean if a field has been set.
func (o *UserResponseUser) HasRoles() bool {
	_, ok := o.GetRolesOk()
	return ok
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UserResponseUser) SetRoles(v UserResponseUserGetRolesRetType) {
	setUserResponseUserGetRolesAttributeType(&o.Roles, v)
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserResponseUser) GetUsername() (res UserResponseUserGetUsernameRetType) {
	res, _ = o.GetUsernameOk()
	return
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResponseUser) GetUsernameOk() (ret UserResponseUserGetUsernameRetType, ok bool) {
	return getUserResponseUserGetUsernameAttributeTypeOk(o.Username)
}

// HasUsername returns a boolean if a field has been set.
func (o *UserResponseUser) HasUsername() bool {
	_, ok := o.GetUsernameOk()
	return ok
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserResponseUser) SetUsername(v UserResponseUserGetUsernameRetType) {
	setUserResponseUserGetUsernameAttributeType(&o.Username, v)
}

func (o UserResponseUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUserResponseUserGetDefaultDatabaseAttributeTypeOk(o.DefaultDatabase); ok {
		toSerialize["DefaultDatabase"] = val
	}
	if val, ok := getUserResponseUserGetHostAttributeTypeOk(o.Host); ok {
		toSerialize["Host"] = val
	}
	if val, ok := getUserResponseUserGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getUserResponseUserGetPortAttributeTypeOk(o.Port); ok {
		toSerialize["Port"] = val
	}
	if val, ok := getUserResponseUserGetRolesAttributeTypeOk(o.Roles); ok {
		toSerialize["Roles"] = val
	}
	if val, ok := getUserResponseUserGetUsernameAttributeTypeOk(o.Username); ok {
		toSerialize["Username"] = val
	}
	return toSerialize, nil
}

type NullableUserResponseUser struct {
	value *UserResponseUser
	isSet bool
}

func (v NullableUserResponseUser) Get() *UserResponseUser {
	return v.value
}

func (v *NullableUserResponseUser) Set(val *UserResponseUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResponseUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResponseUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResponseUser(val *UserResponseUser) *NullableUserResponseUser {
	return &NullableUserResponseUser{value: val, isSet: true}
}

func (v NullableUserResponseUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResponseUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
