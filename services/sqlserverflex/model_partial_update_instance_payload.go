/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the PartialUpdateInstancePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialUpdateInstancePayload{}

// PartialUpdateInstancePayload struct for PartialUpdateInstancePayload
type PartialUpdateInstancePayload struct {
	Acl *CreateInstancePayloadAcl `json:"acl,omitempty"`
	// Cronjob for the daily full backup if not provided a job will generated between 00:00 and 04:59
	BackupSchedule *string `json:"backupSchedule,omitempty"`
	// Id of the selected flavor
	FlavorId *string                 `json:"flavorId,omitempty"`
	Labels   *map[string]interface{} `json:"labels,omitempty"`
	// Name of the instance
	Name *string `json:"name,omitempty"`
	// Version of the MSSQL Server
	Version *string `json:"version,omitempty"`
}

// NewPartialUpdateInstancePayload instantiates a new PartialUpdateInstancePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialUpdateInstancePayload() *PartialUpdateInstancePayload {
	this := PartialUpdateInstancePayload{}
	var version string = "2022"
	this.Version = &version
	return &this
}

// NewPartialUpdateInstancePayloadWithDefaults instantiates a new PartialUpdateInstancePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialUpdateInstancePayloadWithDefaults() *PartialUpdateInstancePayload {
	this := PartialUpdateInstancePayload{}
	var version string = "2022"
	this.Version = &version
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *PartialUpdateInstancePayload) GetAcl() *CreateInstancePayloadAcl {
	if o == nil || IsNil(o.Acl) {
		var ret *CreateInstancePayloadAcl
		return ret
	}
	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateInstancePayload) GetAclOk() (*CreateInstancePayloadAcl, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *PartialUpdateInstancePayload) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given CreateInstancePayloadAcl and assigns it to the Acl field.
func (o *PartialUpdateInstancePayload) SetAcl(v *CreateInstancePayloadAcl) {
	o.Acl = v
}

// GetBackupSchedule returns the BackupSchedule field value if set, zero value otherwise.
func (o *PartialUpdateInstancePayload) GetBackupSchedule() *string {
	if o == nil || IsNil(o.BackupSchedule) {
		var ret *string
		return ret
	}
	return o.BackupSchedule
}

// GetBackupScheduleOk returns a tuple with the BackupSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateInstancePayload) GetBackupScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.BackupSchedule) {
		return nil, false
	}
	return o.BackupSchedule, true
}

// HasBackupSchedule returns a boolean if a field has been set.
func (o *PartialUpdateInstancePayload) HasBackupSchedule() bool {
	if o != nil && !IsNil(o.BackupSchedule) {
		return true
	}

	return false
}

// SetBackupSchedule gets a reference to the given string and assigns it to the BackupSchedule field.
func (o *PartialUpdateInstancePayload) SetBackupSchedule(v *string) {
	o.BackupSchedule = v
}

// GetFlavorId returns the FlavorId field value if set, zero value otherwise.
func (o *PartialUpdateInstancePayload) GetFlavorId() *string {
	if o == nil || IsNil(o.FlavorId) {
		var ret *string
		return ret
	}
	return o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateInstancePayload) GetFlavorIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlavorId) {
		return nil, false
	}
	return o.FlavorId, true
}

// HasFlavorId returns a boolean if a field has been set.
func (o *PartialUpdateInstancePayload) HasFlavorId() bool {
	if o != nil && !IsNil(o.FlavorId) {
		return true
	}

	return false
}

// SetFlavorId gets a reference to the given string and assigns it to the FlavorId field.
func (o *PartialUpdateInstancePayload) SetFlavorId(v *string) {
	o.FlavorId = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PartialUpdateInstancePayload) GetLabels() *map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateInstancePayload) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PartialUpdateInstancePayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *PartialUpdateInstancePayload) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PartialUpdateInstancePayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateInstancePayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PartialUpdateInstancePayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PartialUpdateInstancePayload) SetName(v *string) {
	o.Name = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PartialUpdateInstancePayload) GetVersion() *string {
	if o == nil || IsNil(o.Version) {
		var ret *string
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateInstancePayload) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PartialUpdateInstancePayload) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PartialUpdateInstancePayload) SetVersion(v *string) {
	o.Version = v
}

func (o PartialUpdateInstancePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	if !IsNil(o.BackupSchedule) {
		toSerialize["backupSchedule"] = o.BackupSchedule
	}
	if !IsNil(o.FlavorId) {
		toSerialize["flavorId"] = o.FlavorId
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullablePartialUpdateInstancePayload struct {
	value *PartialUpdateInstancePayload
	isSet bool
}

func (v NullablePartialUpdateInstancePayload) Get() *PartialUpdateInstancePayload {
	return v.value
}

func (v *NullablePartialUpdateInstancePayload) Set(val *PartialUpdateInstancePayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialUpdateInstancePayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialUpdateInstancePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialUpdateInstancePayload(val *PartialUpdateInstancePayload) *NullablePartialUpdateInstancePayload {
	return &NullablePartialUpdateInstancePayload{value: val, isSet: true}
}

func (v NullablePartialUpdateInstancePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialUpdateInstancePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
