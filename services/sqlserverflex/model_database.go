/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the Database type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Database{}

/*
	types and functions for id
*/

// isNotNullableString
type DatabaseGetIdAttributeType = *string

func getDatabaseGetIdAttributeTypeOk(arg DatabaseGetIdAttributeType) (ret DatabaseGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDatabaseGetIdAttributeType(arg *DatabaseGetIdAttributeType, val DatabaseGetIdRetType) {
	*arg = &val
}

type DatabaseGetIdArgType = string
type DatabaseGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type DatabaseGetNameAttributeType = *string

func getDatabaseGetNameAttributeTypeOk(arg DatabaseGetNameAttributeType) (ret DatabaseGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDatabaseGetNameAttributeType(arg *DatabaseGetNameAttributeType, val DatabaseGetNameRetType) {
	*arg = &val
}

type DatabaseGetNameArgType = string
type DatabaseGetNameRetType = string

/*
	types and functions for options
*/

// isFreeform
type DatabaseGetOptionsAttributeType = *map[string]interface{}
type DatabaseGetOptionsArgType = map[string]interface{}
type DatabaseGetOptionsRetType = map[string]interface{}

func getDatabaseGetOptionsAttributeTypeOk(arg DatabaseGetOptionsAttributeType) (ret DatabaseGetOptionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDatabaseGetOptionsAttributeType(arg *DatabaseGetOptionsAttributeType, val DatabaseGetOptionsRetType) {
	*arg = &val
}

// Database struct for Database
type Database struct {
	Id   DatabaseGetIdAttributeType   `json:"id,omitempty"`
	Name DatabaseGetNameAttributeType `json:"name,omitempty"`
	// Database specific options
	Options DatabaseGetOptionsAttributeType `json:"options,omitempty"`
}

// NewDatabase instantiates a new Database object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabase() *Database {
	this := Database{}
	return &this
}

// NewDatabaseWithDefaults instantiates a new Database object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseWithDefaults() *Database {
	this := Database{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Database) GetId() (res DatabaseGetIdRetType) {
	res, _ = o.GetIdOk()
	return
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetIdOk() (ret DatabaseGetIdRetType, ok bool) {
	return getDatabaseGetIdAttributeTypeOk(o.Id)
}

// HasId returns a boolean if a field has been set.
func (o *Database) HasId() bool {
	_, ok := o.GetIdOk()
	return ok
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Database) SetId(v DatabaseGetIdRetType) {
	setDatabaseGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Database) GetName() (res DatabaseGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetNameOk() (ret DatabaseGetNameRetType, ok bool) {
	return getDatabaseGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *Database) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Database) SetName(v DatabaseGetNameRetType) {
	setDatabaseGetNameAttributeType(&o.Name, v)
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Database) GetOptions() (res DatabaseGetOptionsRetType) {
	res, _ = o.GetOptionsOk()
	return
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetOptionsOk() (ret DatabaseGetOptionsRetType, ok bool) {
	return getDatabaseGetOptionsAttributeTypeOk(o.Options)
}

// HasOptions returns a boolean if a field has been set.
func (o *Database) HasOptions() bool {
	_, ok := o.GetOptionsOk()
	return ok
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *Database) SetOptions(v DatabaseGetOptionsRetType) {
	setDatabaseGetOptionsAttributeType(&o.Options, v)
}

func (o Database) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getDatabaseGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getDatabaseGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getDatabaseGetOptionsAttributeTypeOk(o.Options); ok {
		toSerialize["Options"] = val
	}
	return toSerialize, nil
}

type NullableDatabase struct {
	value *Database
	isSet bool
}

func (v NullableDatabase) Get() *Database {
	return v.value
}

func (v *NullableDatabase) Set(val *Database) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabase(val *Database) *NullableDatabase {
	return &NullableDatabase{value: val, isSet: true}
}

func (v NullableDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
