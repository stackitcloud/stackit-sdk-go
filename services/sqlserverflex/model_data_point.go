/*
STACKIT MSSQL Service API

This is the documentation for the STACKIT MSSQL service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserverflex

import (
	"encoding/json"
)

// checks if the DataPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataPoint{}

/*
	types and functions for timestamp
*/

// isNotNullableString
type DataPointGetTimestampAttributeType = *string

func getDataPointGetTimestampAttributeTypeOk(arg DataPointGetTimestampAttributeType) (ret DataPointGetTimestampRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDataPointGetTimestampAttributeType(arg *DataPointGetTimestampAttributeType, val DataPointGetTimestampRetType) {
	*arg = &val
}

type DataPointGetTimestampArgType = string
type DataPointGetTimestampRetType = string

/*
	types and functions for value
*/

// isNumber
type DataPointGetValueAttributeType = *float64
type DataPointGetValueArgType = float64
type DataPointGetValueRetType = float64

func getDataPointGetValueAttributeTypeOk(arg DataPointGetValueAttributeType) (ret DataPointGetValueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDataPointGetValueAttributeType(arg *DataPointGetValueAttributeType, val DataPointGetValueRetType) {
	*arg = &val
}

// DataPoint struct for DataPoint
type DataPoint struct {
	Timestamp DataPointGetTimestampAttributeType `json:"timestamp,omitempty"`
	Value     DataPointGetValueAttributeType     `json:"value,omitempty"`
}

// NewDataPoint instantiates a new DataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataPoint() *DataPoint {
	this := DataPoint{}
	return &this
}

// NewDataPointWithDefaults instantiates a new DataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataPointWithDefaults() *DataPoint {
	this := DataPoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DataPoint) GetTimestamp() (res DataPointGetTimestampRetType) {
	res, _ = o.GetTimestampOk()
	return
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataPoint) GetTimestampOk() (ret DataPointGetTimestampRetType, ok bool) {
	return getDataPointGetTimestampAttributeTypeOk(o.Timestamp)
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DataPoint) HasTimestamp() bool {
	_, ok := o.GetTimestampOk()
	return ok
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *DataPoint) SetTimestamp(v DataPointGetTimestampRetType) {
	setDataPointGetTimestampAttributeType(&o.Timestamp, v)
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataPoint) GetValue() (res DataPointGetValueRetType) {
	res, _ = o.GetValueOk()
	return
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataPoint) GetValueOk() (ret DataPointGetValueRetType, ok bool) {
	return getDataPointGetValueAttributeTypeOk(o.Value)
}

// HasValue returns a boolean if a field has been set.
func (o *DataPoint) HasValue() bool {
	_, ok := o.GetValueOk()
	return ok
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *DataPoint) SetValue(v DataPointGetValueRetType) {
	setDataPointGetValueAttributeType(&o.Value, v)
}

func (o DataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getDataPointGetTimestampAttributeTypeOk(o.Timestamp); ok {
		toSerialize["Timestamp"] = val
	}
	if val, ok := getDataPointGetValueAttributeTypeOk(o.Value); ok {
		toSerialize["Value"] = val
	}
	return toSerialize, nil
}

type NullableDataPoint struct {
	value *DataPoint
	isSet bool
}

func (v NullableDataPoint) Get() *DataPoint {
	return v.value
}

func (v *NullableDataPoint) Set(val *DataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataPoint(val *DataPoint) *NullableDataPoint {
	return &NullableDataPoint{value: val, isSet: true}
}

func (v NullableDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
