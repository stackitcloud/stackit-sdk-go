/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"time"
)

// checks if the KubernetesVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesVersion{}

/*
	types and functions for expirationDate
*/

// isDateTime
type KubernetesVersionGetExpirationDateAttributeType = *time.Time
type KubernetesVersionGetExpirationDateArgType = time.Time
type KubernetesVersionGetExpirationDateRetType = time.Time

func getKubernetesVersionGetExpirationDateAttributeTypeOk(arg KubernetesVersionGetExpirationDateAttributeType) (ret KubernetesVersionGetExpirationDateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKubernetesVersionGetExpirationDateAttributeType(arg *KubernetesVersionGetExpirationDateAttributeType, val KubernetesVersionGetExpirationDateRetType) {
	*arg = &val
}

/*
	types and functions for featureGates
*/

// isContainer
type KubernetesVersionGetFeatureGatesAttributeType = *map[string]string
type KubernetesVersionGetFeatureGatesArgType = map[string]string
type KubernetesVersionGetFeatureGatesRetType = map[string]string

func getKubernetesVersionGetFeatureGatesAttributeTypeOk(arg KubernetesVersionGetFeatureGatesAttributeType) (ret KubernetesVersionGetFeatureGatesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKubernetesVersionGetFeatureGatesAttributeType(arg *KubernetesVersionGetFeatureGatesAttributeType, val KubernetesVersionGetFeatureGatesRetType) {
	*arg = &val
}

/*
	types and functions for state
*/

// isNotNullableString
type KubernetesVersionGetStateAttributeType = *string

func getKubernetesVersionGetStateAttributeTypeOk(arg KubernetesVersionGetStateAttributeType) (ret KubernetesVersionGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKubernetesVersionGetStateAttributeType(arg *KubernetesVersionGetStateAttributeType, val KubernetesVersionGetStateRetType) {
	*arg = &val
}

type KubernetesVersionGetStateArgType = string
type KubernetesVersionGetStateRetType = string

/*
	types and functions for version
*/

// isNotNullableString
type KubernetesVersionGetVersionAttributeType = *string

func getKubernetesVersionGetVersionAttributeTypeOk(arg KubernetesVersionGetVersionAttributeType) (ret KubernetesVersionGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setKubernetesVersionGetVersionAttributeType(arg *KubernetesVersionGetVersionAttributeType, val KubernetesVersionGetVersionRetType) {
	*arg = &val
}

type KubernetesVersionGetVersionArgType = string
type KubernetesVersionGetVersionRetType = string

// KubernetesVersion struct for KubernetesVersion
type KubernetesVersion struct {
	ExpirationDate KubernetesVersionGetExpirationDateAttributeType `json:"expirationDate,omitempty"`
	FeatureGates   KubernetesVersionGetFeatureGatesAttributeType   `json:"featureGates,omitempty"`
	State          KubernetesVersionGetStateAttributeType          `json:"state,omitempty"`
	Version        KubernetesVersionGetVersionAttributeType        `json:"version,omitempty"`
}

// NewKubernetesVersion instantiates a new KubernetesVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesVersion() *KubernetesVersion {
	this := KubernetesVersion{}
	return &this
}

// NewKubernetesVersionWithDefaults instantiates a new KubernetesVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesVersionWithDefaults() *KubernetesVersion {
	this := KubernetesVersion{}
	return &this
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *KubernetesVersion) GetExpirationDate() (res KubernetesVersionGetExpirationDateRetType) {
	res, _ = o.GetExpirationDateOk()
	return
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetExpirationDateOk() (ret KubernetesVersionGetExpirationDateRetType, ok bool) {
	return getKubernetesVersionGetExpirationDateAttributeTypeOk(o.ExpirationDate)
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KubernetesVersion) HasExpirationDate() bool {
	_, ok := o.GetExpirationDateOk()
	return ok
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *KubernetesVersion) SetExpirationDate(v KubernetesVersionGetExpirationDateRetType) {
	setKubernetesVersionGetExpirationDateAttributeType(&o.ExpirationDate, v)
}

// GetFeatureGates returns the FeatureGates field value if set, zero value otherwise.
func (o *KubernetesVersion) GetFeatureGates() (res KubernetesVersionGetFeatureGatesRetType) {
	res, _ = o.GetFeatureGatesOk()
	return
}

// GetFeatureGatesOk returns a tuple with the FeatureGates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetFeatureGatesOk() (ret KubernetesVersionGetFeatureGatesRetType, ok bool) {
	return getKubernetesVersionGetFeatureGatesAttributeTypeOk(o.FeatureGates)
}

// HasFeatureGates returns a boolean if a field has been set.
func (o *KubernetesVersion) HasFeatureGates() bool {
	_, ok := o.GetFeatureGatesOk()
	return ok
}

// SetFeatureGates gets a reference to the given map[string]string and assigns it to the FeatureGates field.
func (o *KubernetesVersion) SetFeatureGates(v KubernetesVersionGetFeatureGatesRetType) {
	setKubernetesVersionGetFeatureGatesAttributeType(&o.FeatureGates, v)
}

// GetState returns the State field value if set, zero value otherwise.
func (o *KubernetesVersion) GetState() (res KubernetesVersionGetStateRetType) {
	res, _ = o.GetStateOk()
	return
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetStateOk() (ret KubernetesVersionGetStateRetType, ok bool) {
	return getKubernetesVersionGetStateAttributeTypeOk(o.State)
}

// HasState returns a boolean if a field has been set.
func (o *KubernetesVersion) HasState() bool {
	_, ok := o.GetStateOk()
	return ok
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *KubernetesVersion) SetState(v KubernetesVersionGetStateRetType) {
	setKubernetesVersionGetStateAttributeType(&o.State, v)
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *KubernetesVersion) GetVersion() (res KubernetesVersionGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetVersionOk() (ret KubernetesVersionGetVersionRetType, ok bool) {
	return getKubernetesVersionGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *KubernetesVersion) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *KubernetesVersion) SetVersion(v KubernetesVersionGetVersionRetType) {
	setKubernetesVersionGetVersionAttributeType(&o.Version, v)
}

func (o KubernetesVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getKubernetesVersionGetExpirationDateAttributeTypeOk(o.ExpirationDate); ok {
		toSerialize["ExpirationDate"] = val
	}
	if val, ok := getKubernetesVersionGetFeatureGatesAttributeTypeOk(o.FeatureGates); ok {
		toSerialize["FeatureGates"] = val
	}
	if val, ok := getKubernetesVersionGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getKubernetesVersionGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableKubernetesVersion struct {
	value *KubernetesVersion
	isSet bool
}

func (v NullableKubernetesVersion) Get() *KubernetesVersion {
	return v.value
}

func (v *NullableKubernetesVersion) Set(val *KubernetesVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesVersion(val *KubernetesVersion) *NullableKubernetesVersion {
	return &NullableKubernetesVersion{value: val, isSet: true}
}

func (v NullableKubernetesVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
