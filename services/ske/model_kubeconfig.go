/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"time"
)

// checks if the Kubeconfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kubeconfig{}

// Kubeconfig struct for Kubeconfig
type Kubeconfig struct {
	ExpirationTimestamp *time.Time `json:"expirationTimestamp,omitempty"`
	Kubeconfig          *string    `json:"kubeconfig,omitempty"`
}

// NewKubeconfig instantiates a new Kubeconfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubeconfig() *Kubeconfig {
	this := Kubeconfig{}
	return &this
}

// NewKubeconfigWithDefaults instantiates a new Kubeconfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubeconfigWithDefaults() *Kubeconfig {
	this := Kubeconfig{}
	return &this
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value if set, zero value otherwise.
func (o *Kubeconfig) GetExpirationTimestamp() *time.Time {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		var ret *time.Time
		return ret
	}
	return o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kubeconfig) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		return nil, false
	}
	return o.ExpirationTimestamp, true
}

// HasExpirationTimestamp returns a boolean if a field has been set.
func (o *Kubeconfig) HasExpirationTimestamp() bool {
	if o != nil && !IsNil(o.ExpirationTimestamp) {
		return true
	}

	return false
}

// SetExpirationTimestamp gets a reference to the given time.Time and assigns it to the ExpirationTimestamp field.
func (o *Kubeconfig) SetExpirationTimestamp(v *time.Time) {
	o.ExpirationTimestamp = v
}

// GetKubeconfig returns the Kubeconfig field value if set, zero value otherwise.
func (o *Kubeconfig) GetKubeconfig() *string {
	if o == nil || IsNil(o.Kubeconfig) {
		var ret *string
		return ret
	}
	return o.Kubeconfig
}

// GetKubeconfigOk returns a tuple with the Kubeconfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kubeconfig) GetKubeconfigOk() (*string, bool) {
	if o == nil || IsNil(o.Kubeconfig) {
		return nil, false
	}
	return o.Kubeconfig, true
}

// HasKubeconfig returns a boolean if a field has been set.
func (o *Kubeconfig) HasKubeconfig() bool {
	if o != nil && !IsNil(o.Kubeconfig) {
		return true
	}

	return false
}

// SetKubeconfig gets a reference to the given string and assigns it to the Kubeconfig field.
func (o *Kubeconfig) SetKubeconfig(v *string) {
	o.Kubeconfig = v
}

func (o Kubeconfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirationTimestamp) {
		toSerialize["expirationTimestamp"] = o.ExpirationTimestamp
	}
	if !IsNil(o.Kubeconfig) {
		toSerialize["kubeconfig"] = o.Kubeconfig
	}
	return toSerialize, nil
}

type NullableKubeconfig struct {
	value *Kubeconfig
	isSet bool
}

func (v NullableKubeconfig) Get() *Kubeconfig {
	return v.value
}

func (v *NullableKubeconfig) Set(val *Kubeconfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKubeconfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKubeconfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubeconfig(val *Kubeconfig) *NullableKubeconfig {
	return &NullableKubeconfig{value: val, isSet: true}
}

func (v NullableKubeconfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubeconfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
