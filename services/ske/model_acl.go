/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the ACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACL{}

/*
	types and functions for allowedCidrs
*/

// isArray
type ACLGetAllowedCidrsAttributeType = *[]string
type ACLGetAllowedCidrsArgType = []string
type ACLGetAllowedCidrsRetType = []string

func getACLGetAllowedCidrsAttributeTypeOk(arg ACLGetAllowedCidrsAttributeType) (ret ACLGetAllowedCidrsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setACLGetAllowedCidrsAttributeType(arg *ACLGetAllowedCidrsAttributeType, val ACLGetAllowedCidrsRetType) {
	*arg = &val
}

/*
	types and functions for enabled
*/

// isBoolean
type ACLgetEnabledAttributeType = *bool
type ACLgetEnabledArgType = bool
type ACLgetEnabledRetType = bool

func getACLgetEnabledAttributeTypeOk(arg ACLgetEnabledAttributeType) (ret ACLgetEnabledRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setACLgetEnabledAttributeType(arg *ACLgetEnabledAttributeType, val ACLgetEnabledRetType) {
	*arg = &val
}

// ACL struct for ACL
type ACL struct {
	// Array of CIDRs to allow access to the kubernetes API.
	// REQUIRED
	AllowedCidrs ACLGetAllowedCidrsAttributeType `json:"allowedCidrs" required:"true"`
	// Enables the acl extension.
	// REQUIRED
	Enabled ACLgetEnabledAttributeType `json:"enabled" required:"true"`
}

type _ACL ACL

// NewACL instantiates a new ACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACL(allowedCidrs ACLGetAllowedCidrsArgType, enabled ACLgetEnabledArgType) *ACL {
	this := ACL{}
	setACLGetAllowedCidrsAttributeType(&this.AllowedCidrs, allowedCidrs)
	setACLgetEnabledAttributeType(&this.Enabled, enabled)
	return &this
}

// NewACLWithDefaults instantiates a new ACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLWithDefaults() *ACL {
	this := ACL{}
	return &this
}

// GetAllowedCidrs returns the AllowedCidrs field value
func (o *ACL) GetAllowedCidrs() (ret ACLGetAllowedCidrsRetType) {
	ret, _ = o.GetAllowedCidrsOk()
	return ret
}

// GetAllowedCidrsOk returns a tuple with the AllowedCidrs field value
// and a boolean to check if the value has been set.
func (o *ACL) GetAllowedCidrsOk() (ret ACLGetAllowedCidrsRetType, ok bool) {
	return getACLGetAllowedCidrsAttributeTypeOk(o.AllowedCidrs)
}

// SetAllowedCidrs sets field value
func (o *ACL) SetAllowedCidrs(v ACLGetAllowedCidrsRetType) {
	setACLGetAllowedCidrsAttributeType(&o.AllowedCidrs, v)
}

// GetEnabled returns the Enabled field value
func (o *ACL) GetEnabled() (ret ACLgetEnabledRetType) {
	ret, _ = o.GetEnabledOk()
	return ret
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ACL) GetEnabledOk() (ret ACLgetEnabledRetType, ok bool) {
	return getACLgetEnabledAttributeTypeOk(o.Enabled)
}

// SetEnabled sets field value
func (o *ACL) SetEnabled(v ACLgetEnabledRetType) {
	setACLgetEnabledAttributeType(&o.Enabled, v)
}

func (o ACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getACLGetAllowedCidrsAttributeTypeOk(o.AllowedCidrs); ok {
		toSerialize["AllowedCidrs"] = val
	}
	if val, ok := getACLgetEnabledAttributeTypeOk(o.Enabled); ok {
		toSerialize["Enabled"] = val
	}
	return toSerialize, nil
}

type NullableACL struct {
	value *ACL
	isSet bool
}

func (v NullableACL) Get() *ACL {
	return v.value
}

func (v *NullableACL) Set(val *ACL) {
	v.value = val
	v.isSet = true
}

func (v NullableACL) IsSet() bool {
	return v.isSet
}

func (v *NullableACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACL(val *ACL) *NullableACL {
	return &NullableACL{value: val, isSet: true}
}

func (v NullableACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
