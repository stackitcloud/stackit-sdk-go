/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the MachineImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineImage{}

// MachineImage struct for MachineImage
type MachineImage struct {
	Name     *string                `json:"name,omitempty"`
	Versions *[]MachineImageVersion `json:"versions,omitempty"`
}

// NewMachineImage instantiates a new MachineImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineImage() *MachineImage {
	this := MachineImage{}
	return &this
}

// NewMachineImageWithDefaults instantiates a new MachineImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineImageWithDefaults() *MachineImage {
	this := MachineImage{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MachineImage) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineImage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MachineImage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MachineImage) SetName(v *string) {
	o.Name = v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *MachineImage) GetVersions() *[]MachineImageVersion {
	if o == nil || IsNil(o.Versions) {
		var ret *[]MachineImageVersion
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineImage) GetVersionsOk() (*[]MachineImageVersion, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *MachineImage) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []MachineImageVersion and assigns it to the Versions field.
func (o *MachineImage) SetVersions(v *[]MachineImageVersion) {
	o.Versions = v
}

func (o MachineImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableMachineImage struct {
	value *MachineImage
	isSet bool
}

func (v NullableMachineImage) Get() *MachineImage {
	return v.value
}

func (v *NullableMachineImage) Set(val *MachineImage) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineImage) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineImage(val *MachineImage) *NullableMachineImage {
	return &NullableMachineImage{value: val, isSet: true}
}

func (v NullableMachineImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
