/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HibernationSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HibernationSchedule{}

/*
	types and functions for end
*/

// isNotNullableString
type HibernationScheduleGetEndAttributeType = *string

func getHibernationScheduleGetEndAttributeTypeOk(arg HibernationScheduleGetEndAttributeType) (ret HibernationScheduleGetEndRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHibernationScheduleGetEndAttributeType(arg *HibernationScheduleGetEndAttributeType, val HibernationScheduleGetEndRetType) {
	*arg = &val
}

type HibernationScheduleGetEndArgType = string
type HibernationScheduleGetEndRetType = string

/*
	types and functions for start
*/

// isNotNullableString
type HibernationScheduleGetStartAttributeType = *string

func getHibernationScheduleGetStartAttributeTypeOk(arg HibernationScheduleGetStartAttributeType) (ret HibernationScheduleGetStartRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHibernationScheduleGetStartAttributeType(arg *HibernationScheduleGetStartAttributeType, val HibernationScheduleGetStartRetType) {
	*arg = &val
}

type HibernationScheduleGetStartArgType = string
type HibernationScheduleGetStartRetType = string

/*
	types and functions for timezone
*/

// isNotNullableString
type HibernationScheduleGetTimezoneAttributeType = *string

func getHibernationScheduleGetTimezoneAttributeTypeOk(arg HibernationScheduleGetTimezoneAttributeType) (ret HibernationScheduleGetTimezoneRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHibernationScheduleGetTimezoneAttributeType(arg *HibernationScheduleGetTimezoneAttributeType, val HibernationScheduleGetTimezoneRetType) {
	*arg = &val
}

type HibernationScheduleGetTimezoneArgType = string
type HibernationScheduleGetTimezoneRetType = string

// HibernationSchedule struct for HibernationSchedule
type HibernationSchedule struct {
	// REQUIRED
	End HibernationScheduleGetEndAttributeType `json:"end" validate:"regexp=(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\\\\\\\d+(ns|us|µs|ms|s|m|h))+)|((((\\\\\\\\d+,)+\\\\\\\\d+|(\\\\\\\\d+(\\\\\\/|-)\\\\\\\\d+)|\\\\\\\\d+|\\\\\\\\*) ?){5,7})"`
	// REQUIRED
	Start    HibernationScheduleGetStartAttributeType    `json:"start" validate:"regexp=(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\\\\\\\d+(ns|us|µs|ms|s|m|h))+)|((((\\\\\\\\d+,)+\\\\\\\\d+|(\\\\\\\\d+(\\\\\\/|-)\\\\\\\\d+)|\\\\\\\\d+|\\\\\\\\*) ?){5,7})"`
	Timezone HibernationScheduleGetTimezoneAttributeType `json:"timezone,omitempty"`
}

type _HibernationSchedule HibernationSchedule

// NewHibernationSchedule instantiates a new HibernationSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHibernationSchedule(end HibernationScheduleGetEndArgType, start HibernationScheduleGetStartArgType) *HibernationSchedule {
	this := HibernationSchedule{}
	setHibernationScheduleGetEndAttributeType(&this.End, end)
	setHibernationScheduleGetStartAttributeType(&this.Start, start)
	return &this
}

// NewHibernationScheduleWithDefaults instantiates a new HibernationSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHibernationScheduleWithDefaults() *HibernationSchedule {
	this := HibernationSchedule{}
	return &this
}

// GetEnd returns the End field value
func (o *HibernationSchedule) GetEnd() (ret HibernationScheduleGetEndRetType) {
	ret, _ = o.GetEndOk()
	return ret
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *HibernationSchedule) GetEndOk() (ret HibernationScheduleGetEndRetType, ok bool) {
	return getHibernationScheduleGetEndAttributeTypeOk(o.End)
}

// SetEnd sets field value
func (o *HibernationSchedule) SetEnd(v HibernationScheduleGetEndRetType) {
	setHibernationScheduleGetEndAttributeType(&o.End, v)
}

// GetStart returns the Start field value
func (o *HibernationSchedule) GetStart() (ret HibernationScheduleGetStartRetType) {
	ret, _ = o.GetStartOk()
	return ret
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *HibernationSchedule) GetStartOk() (ret HibernationScheduleGetStartRetType, ok bool) {
	return getHibernationScheduleGetStartAttributeTypeOk(o.Start)
}

// SetStart sets field value
func (o *HibernationSchedule) SetStart(v HibernationScheduleGetStartRetType) {
	setHibernationScheduleGetStartAttributeType(&o.Start, v)
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *HibernationSchedule) GetTimezone() (res HibernationScheduleGetTimezoneRetType) {
	res, _ = o.GetTimezoneOk()
	return
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HibernationSchedule) GetTimezoneOk() (ret HibernationScheduleGetTimezoneRetType, ok bool) {
	return getHibernationScheduleGetTimezoneAttributeTypeOk(o.Timezone)
}

// HasTimezone returns a boolean if a field has been set.
func (o *HibernationSchedule) HasTimezone() bool {
	_, ok := o.GetTimezoneOk()
	return ok
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *HibernationSchedule) SetTimezone(v HibernationScheduleGetTimezoneRetType) {
	setHibernationScheduleGetTimezoneAttributeType(&o.Timezone, v)
}

func (o HibernationSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HibernationSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHibernationScheduleGetEndAttributeTypeOk(o.End); ok {
		toSerialize["End"] = val
	}
	if val, ok := getHibernationScheduleGetStartAttributeTypeOk(o.Start); ok {
		toSerialize["Start"] = val
	}
	if val, ok := getHibernationScheduleGetTimezoneAttributeTypeOk(o.Timezone); ok {
		toSerialize["Timezone"] = val
	}
	return toSerialize, nil
}

func (o *HibernationSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"end",
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHibernationSchedule := _HibernationSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHibernationSchedule)

	if err != nil {
		return err
	}

	*o = HibernationSchedule(varHibernationSchedule)

	return err
}

type NullableHibernationSchedule struct {
	value *HibernationSchedule
	isSet bool
}

func (v NullableHibernationSchedule) Get() *HibernationSchedule {
	return v.value
}

func (v *NullableHibernationSchedule) Set(val *HibernationSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableHibernationSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableHibernationSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHibernationSchedule(val *HibernationSchedule) *NullableHibernationSchedule {
	return &NullableHibernationSchedule{value: val, isSet: true}
}

func (v NullableHibernationSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHibernationSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
