/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"fmt"
)

// checks if the Taint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Taint{}

/*
	types and functions for effect
*/

// isEnum

// TaintEffect the model 'Taint'
type TaintEffect string

// List of Effect
const (
	TAINTEFFECT_NO_SCHEDULE        TaintEffect = "NoSchedule"
	TAINTEFFECT_PREFER_NO_SCHEDULE TaintEffect = "PreferNoSchedule"
	TAINTEFFECT_NO_EXECUTE         TaintEffect = "NoExecute"
)

// All allowed values of Taint enum
var AllowedTaintEffectEnumValues = []TaintEffect{
	"NoSchedule",
	"PreferNoSchedule",
	"NoExecute",
}

func (v *TaintEffect) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := TaintEffect(value)
	for _, existing := range AllowedTaintEffectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Taint", value)
}

// NewTaintEffectFromValue returns a pointer to a valid TaintEffect
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaintEffectFromValue(v string) (*TaintEffect, error) {
	ev := TaintEffect(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaintEffect: valid values are %v", v, AllowedTaintEffectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaintEffect) IsValid() bool {
	for _, existing := range AllowedTaintEffectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EffectEffect value
func (v TaintEffect) Ptr() *TaintEffect {
	return &v
}

type NullableTaintEffect struct {
	value *TaintEffect
	isSet bool
}

func (v NullableTaintEffect) Get() *TaintEffect {
	return v.value
}

func (v *NullableTaintEffect) Set(val *TaintEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableTaintEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableTaintEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaintEffect(val *TaintEffect) *NullableTaintEffect {
	return &NullableTaintEffect{value: val, isSet: true}
}

func (v NullableTaintEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaintEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type TaintGetEffectAttributeType = *TaintEffect
type TaintGetEffectArgType = TaintEffect
type TaintGetEffectRetType = TaintEffect

func getTaintGetEffectAttributeTypeOk(arg TaintGetEffectAttributeType) (ret TaintGetEffectRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTaintGetEffectAttributeType(arg *TaintGetEffectAttributeType, val TaintGetEffectRetType) {
	*arg = &val
}

/*
	types and functions for key
*/

// isNotNullableString
type TaintGetKeyAttributeType = *string

func getTaintGetKeyAttributeTypeOk(arg TaintGetKeyAttributeType) (ret TaintGetKeyRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTaintGetKeyAttributeType(arg *TaintGetKeyAttributeType, val TaintGetKeyRetType) {
	*arg = &val
}

type TaintGetKeyArgType = string
type TaintGetKeyRetType = string

/*
	types and functions for value
*/

// isNotNullableString
type TaintGetValueAttributeType = *string

func getTaintGetValueAttributeTypeOk(arg TaintGetValueAttributeType) (ret TaintGetValueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTaintGetValueAttributeType(arg *TaintGetValueAttributeType, val TaintGetValueRetType) {
	*arg = &val
}

type TaintGetValueArgType = string
type TaintGetValueRetType = string

// Taint struct for Taint
type Taint struct {
	// REQUIRED
	Effect TaintGetEffectAttributeType `json:"effect"`
	// REQUIRED
	Key   TaintGetKeyAttributeType   `json:"key"`
	Value TaintGetValueAttributeType `json:"value,omitempty"`
}

type _Taint Taint

// NewTaint instantiates a new Taint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaint(effect TaintGetEffectArgType, key TaintGetKeyArgType) *Taint {
	this := Taint{}
	setTaintGetEffectAttributeType(&this.Effect, effect)
	setTaintGetKeyAttributeType(&this.Key, key)
	return &this
}

// NewTaintWithDefaults instantiates a new Taint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaintWithDefaults() *Taint {
	this := Taint{}
	return &this
}

// GetEffect returns the Effect field value
func (o *Taint) GetEffect() (ret TaintGetEffectRetType) {
	ret, _ = o.GetEffectOk()
	return ret
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *Taint) GetEffectOk() (ret TaintGetEffectRetType, ok bool) {
	return getTaintGetEffectAttributeTypeOk(o.Effect)
}

// SetEffect sets field value
func (o *Taint) SetEffect(v TaintGetEffectRetType) {
	setTaintGetEffectAttributeType(&o.Effect, v)
}

// GetKey returns the Key field value
func (o *Taint) GetKey() (ret TaintGetKeyRetType) {
	ret, _ = o.GetKeyOk()
	return ret
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Taint) GetKeyOk() (ret TaintGetKeyRetType, ok bool) {
	return getTaintGetKeyAttributeTypeOk(o.Key)
}

// SetKey sets field value
func (o *Taint) SetKey(v TaintGetKeyRetType) {
	setTaintGetKeyAttributeType(&o.Key, v)
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Taint) GetValue() (res TaintGetValueRetType) {
	res, _ = o.GetValueOk()
	return
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taint) GetValueOk() (ret TaintGetValueRetType, ok bool) {
	return getTaintGetValueAttributeTypeOk(o.Value)
}

// HasValue returns a boolean if a field has been set.
func (o *Taint) HasValue() bool {
	_, ok := o.GetValueOk()
	return ok
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Taint) SetValue(v TaintGetValueRetType) {
	setTaintGetValueAttributeType(&o.Value, v)
}

func (o Taint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getTaintGetEffectAttributeTypeOk(o.Effect); ok {
		toSerialize["Effect"] = val
	}
	if val, ok := getTaintGetKeyAttributeTypeOk(o.Key); ok {
		toSerialize["Key"] = val
	}
	if val, ok := getTaintGetValueAttributeTypeOk(o.Value); ok {
		toSerialize["Value"] = val
	}
	return toSerialize, nil
}

type NullableTaint struct {
	value *Taint
	isSet bool
}

func (v NullableTaint) Get() *Taint {
	return v.value
}

func (v *NullableTaint) Set(val *Taint) {
	v.value = val
	v.isSet = true
}

func (v NullableTaint) IsSet() bool {
	return v.isSet
}

func (v *NullableTaint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaint(val *Taint) *NullableTaint {
	return &NullableTaint{value: val, isSet: true}
}

func (v NullableTaint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
