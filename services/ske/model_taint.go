/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the Taint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Taint{}

// Taint struct for Taint
type Taint struct {
	// REQUIRED
	Effect *string `json:"effect"`
	// REQUIRED
	Key   *string `json:"key"`
	Value *string `json:"value,omitempty"`
}

type _Taint Taint

// NewTaint instantiates a new Taint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaint(effect *string, key *string) *Taint {
	this := Taint{}
	this.Effect = effect
	this.Key = key
	return &this
}

// NewTaintWithDefaults instantiates a new Taint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaintWithDefaults() *Taint {
	this := Taint{}
	return &this
}

// GetEffect returns the Effect field value
func (o *Taint) GetEffect() *string {
	if o == nil || IsNil(o.Effect) {
		var ret *string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *Taint) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Effect, true
}

// SetEffect sets field value
func (o *Taint) SetEffect(v *string) {
	o.Effect = v
}

// GetKey returns the Key field value
func (o *Taint) GetKey() *string {
	if o == nil || IsNil(o.Key) {
		var ret *string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Taint) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key, true
}

// SetKey sets field value
func (o *Taint) SetKey(v *string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Taint) GetValue() *string {
	if o == nil || IsNil(o.Value) {
		var ret *string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taint) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Taint) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Taint) SetValue(v *string) {
	o.Value = v
}

func (o Taint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["effect"] = o.Effect
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTaint struct {
	value *Taint
	isSet bool
}

func (v NullableTaint) Get() *Taint {
	return v.value
}

func (v *NullableTaint) Set(val *Taint) {
	v.value = val
	v.isSet = true
}

func (v NullableTaint) IsSet() bool {
	return v.isSet
}

func (v *NullableTaint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaint(val *Taint) *NullableTaint {
	return &NullableTaint{value: val, isSet: true}
}

func (v NullableTaint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
