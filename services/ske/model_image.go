/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the Image type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Image{}

/*
	types and functions for name
*/

// isNotNullableString
type ImageGetNameAttributeType = *string

func getImageGetNameAttributeTypeOk(arg ImageGetNameAttributeType) (ret ImageGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setImageGetNameAttributeType(arg *ImageGetNameAttributeType, val ImageGetNameRetType) {
	*arg = &val
}

type ImageGetNameArgType = string
type ImageGetNameRetType = string

/*
	types and functions for version
*/

// isNotNullableString
type ImageGetVersionAttributeType = *string

func getImageGetVersionAttributeTypeOk(arg ImageGetVersionAttributeType) (ret ImageGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setImageGetVersionAttributeType(arg *ImageGetVersionAttributeType, val ImageGetVersionRetType) {
	*arg = &val
}

type ImageGetVersionArgType = string
type ImageGetVersionRetType = string

// Image For valid names and versions please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `machineImages`.
type Image struct {
	// REQUIRED
	Name ImageGetNameAttributeType `json:"name" required:"true"`
	// REQUIRED
	Version ImageGetVersionAttributeType `json:"version" required:"true"`
}

type _Image Image

// NewImage instantiates a new Image object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImage(name ImageGetNameArgType, version ImageGetVersionArgType) *Image {
	this := Image{}
	setImageGetNameAttributeType(&this.Name, name)
	setImageGetVersionAttributeType(&this.Version, version)
	return &this
}

// NewImageWithDefaults instantiates a new Image object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageWithDefaults() *Image {
	this := Image{}
	return &this
}

// GetName returns the Name field value
func (o *Image) GetName() (ret ImageGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Image) GetNameOk() (ret ImageGetNameRetType, ok bool) {
	return getImageGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Image) SetName(v ImageGetNameRetType) {
	setImageGetNameAttributeType(&o.Name, v)
}

// GetVersion returns the Version field value
func (o *Image) GetVersion() (ret ImageGetVersionRetType) {
	ret, _ = o.GetVersionOk()
	return ret
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Image) GetVersionOk() (ret ImageGetVersionRetType, ok bool) {
	return getImageGetVersionAttributeTypeOk(o.Version)
}

// SetVersion sets field value
func (o *Image) SetVersion(v ImageGetVersionRetType) {
	setImageGetVersionAttributeType(&o.Version, v)
}

func (o Image) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getImageGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getImageGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableImage struct {
	value *Image
	isSet bool
}

func (v NullableImage) Get() *Image {
	return v.value
}

func (v *NullableImage) Set(val *Image) {
	v.value = val
	v.isSet = true
}

func (v NullableImage) IsSet() bool {
	return v.isSet
}

func (v *NullableImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImage(val *Image) *NullableImage {
	return &NullableImage{value: val, isSet: true}
}

func (v NullableImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
