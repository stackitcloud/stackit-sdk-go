/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the Argus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Argus{}

/*
	types and functions for argusInstanceId
*/

// isNotNullableString
type ArgusGetArgusInstanceIdAttributeType = *string

func getArgusGetArgusInstanceIdAttributeTypeOk(arg ArgusGetArgusInstanceIdAttributeType) (ret ArgusGetArgusInstanceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setArgusGetArgusInstanceIdAttributeType(arg *ArgusGetArgusInstanceIdAttributeType, val ArgusGetArgusInstanceIdRetType) {
	*arg = &val
}

type ArgusGetArgusInstanceIdArgType = string
type ArgusGetArgusInstanceIdRetType = string

/*
	types and functions for enabled
*/

// isBoolean
type ArgusgetEnabledAttributeType = *bool
type ArgusgetEnabledArgType = bool
type ArgusgetEnabledRetType = bool

func getArgusgetEnabledAttributeTypeOk(arg ArgusgetEnabledAttributeType) (ret ArgusgetEnabledRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setArgusgetEnabledAttributeType(arg *ArgusgetEnabledAttributeType, val ArgusgetEnabledRetType) {
	*arg = &val
}

// Argus struct for Argus
type Argus struct {
	// Argus instance ID to choose which Argus instance is used.
	// REQUIRED
	ArgusInstanceId ArgusGetArgusInstanceIdAttributeType `json:"argusInstanceId"`
	// Enables the argus extension.
	// REQUIRED
	Enabled ArgusgetEnabledAttributeType `json:"enabled"`
}

type _Argus Argus

// NewArgus instantiates a new Argus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArgus(argusInstanceId ArgusGetArgusInstanceIdArgType, enabled ArgusgetEnabledArgType) *Argus {
	this := Argus{}
	setArgusGetArgusInstanceIdAttributeType(&this.ArgusInstanceId, argusInstanceId)
	setArgusgetEnabledAttributeType(&this.Enabled, enabled)
	return &this
}

// NewArgusWithDefaults instantiates a new Argus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArgusWithDefaults() *Argus {
	this := Argus{}
	return &this
}

// GetArgusInstanceId returns the ArgusInstanceId field value
func (o *Argus) GetArgusInstanceId() (ret ArgusGetArgusInstanceIdRetType) {
	ret, _ = o.GetArgusInstanceIdOk()
	return ret
}

// GetArgusInstanceIdOk returns a tuple with the ArgusInstanceId field value
// and a boolean to check if the value has been set.
func (o *Argus) GetArgusInstanceIdOk() (ret ArgusGetArgusInstanceIdRetType, ok bool) {
	return getArgusGetArgusInstanceIdAttributeTypeOk(o.ArgusInstanceId)
}

// SetArgusInstanceId sets field value
func (o *Argus) SetArgusInstanceId(v ArgusGetArgusInstanceIdRetType) {
	setArgusGetArgusInstanceIdAttributeType(&o.ArgusInstanceId, v)
}

// GetEnabled returns the Enabled field value
func (o *Argus) GetEnabled() (ret ArgusgetEnabledRetType) {
	ret, _ = o.GetEnabledOk()
	return ret
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Argus) GetEnabledOk() (ret ArgusgetEnabledRetType, ok bool) {
	return getArgusgetEnabledAttributeTypeOk(o.Enabled)
}

// SetEnabled sets field value
func (o *Argus) SetEnabled(v ArgusgetEnabledRetType) {
	setArgusgetEnabledAttributeType(&o.Enabled, v)
}

func (o Argus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getArgusGetArgusInstanceIdAttributeTypeOk(o.ArgusInstanceId); ok {
		toSerialize["ArgusInstanceId"] = val
	}
	if val, ok := getArgusgetEnabledAttributeTypeOk(o.Enabled); ok {
		toSerialize["Enabled"] = val
	}
	return toSerialize, nil
}

type NullableArgus struct {
	value *Argus
	isSet bool
}

func (v NullableArgus) Get() *Argus {
	return v.value
}

func (v *NullableArgus) Set(val *Argus) {
	v.value = val
	v.isSet = true
}

func (v NullableArgus) IsSet() bool {
	return v.isSet
}

func (v *NullableArgus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArgus(val *Argus) *NullableArgus {
	return &NullableArgus{value: val, isSet: true}
}

func (v NullableArgus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArgus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
