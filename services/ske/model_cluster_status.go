/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the ClusterStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterStatus{}

// ClusterStatus struct for ClusterStatus
type ClusterStatus struct {
	Aggregated *ClusterStatusState `json:"aggregated,omitempty"`
	// Format: `2024-02-15T11:06:29Z`
	CreationTime        *string                   `json:"creationTime,omitempty"`
	CredentialsRotation *CredentialsRotationState `json:"credentialsRotation,omitempty"`
	Error               *RuntimeError             `json:"error,omitempty"`
	Hibernated          *bool                     `json:"hibernated,omitempty"`
}

// NewClusterStatus instantiates a new ClusterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStatus() *ClusterStatus {
	this := ClusterStatus{}
	var aggregated ClusterStatusState = CLUSTERSTATUSSTATE_UNSPECIFIED
	this.Aggregated = &aggregated
	return &this
}

// NewClusterStatusWithDefaults instantiates a new ClusterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatusWithDefaults() *ClusterStatus {
	this := ClusterStatus{}
	var aggregated ClusterStatusState = CLUSTERSTATUSSTATE_UNSPECIFIED
	this.Aggregated = &aggregated
	return &this
}

// GetAggregated returns the Aggregated field value if set, zero value otherwise.
func (o *ClusterStatus) GetAggregated() *ClusterStatusState {
	if o == nil || IsNil(o.Aggregated) {
		var ret *ClusterStatusState
		return ret
	}
	return o.Aggregated
}

// GetAggregatedOk returns a tuple with the Aggregated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetAggregatedOk() (*ClusterStatusState, bool) {
	if o == nil || IsNil(o.Aggregated) {
		return nil, false
	}
	return o.Aggregated, true
}

// HasAggregated returns a boolean if a field has been set.
func (o *ClusterStatus) HasAggregated() bool {
	if o != nil && !IsNil(o.Aggregated) {
		return true
	}

	return false
}

// SetAggregated gets a reference to the given ClusterStatusState and assigns it to the Aggregated field.
func (o *ClusterStatus) SetAggregated(v *ClusterStatusState) {
	o.Aggregated = v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *ClusterStatus) GetCreationTime() *string {
	if o == nil || IsNil(o.CreationTime) {
		var ret *string
		return ret
	}
	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetCreationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *ClusterStatus) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given string and assigns it to the CreationTime field.
func (o *ClusterStatus) SetCreationTime(v *string) {
	o.CreationTime = v
}

// GetCredentialsRotation returns the CredentialsRotation field value if set, zero value otherwise.
func (o *ClusterStatus) GetCredentialsRotation() *CredentialsRotationState {
	if o == nil || IsNil(o.CredentialsRotation) {
		var ret *CredentialsRotationState
		return ret
	}
	return o.CredentialsRotation
}

// GetCredentialsRotationOk returns a tuple with the CredentialsRotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetCredentialsRotationOk() (*CredentialsRotationState, bool) {
	if o == nil || IsNil(o.CredentialsRotation) {
		return nil, false
	}
	return o.CredentialsRotation, true
}

// HasCredentialsRotation returns a boolean if a field has been set.
func (o *ClusterStatus) HasCredentialsRotation() bool {
	if o != nil && !IsNil(o.CredentialsRotation) {
		return true
	}

	return false
}

// SetCredentialsRotation gets a reference to the given CredentialsRotationState and assigns it to the CredentialsRotation field.
func (o *ClusterStatus) SetCredentialsRotation(v *CredentialsRotationState) {
	o.CredentialsRotation = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ClusterStatus) GetError() *RuntimeError {
	if o == nil || IsNil(o.Error) {
		var ret *RuntimeError
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetErrorOk() (*RuntimeError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ClusterStatus) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given RuntimeError and assigns it to the Error field.
func (o *ClusterStatus) SetError(v *RuntimeError) {
	o.Error = v
}

// GetHibernated returns the Hibernated field value if set, zero value otherwise.
func (o *ClusterStatus) GetHibernated() *bool {
	if o == nil || IsNil(o.Hibernated) {
		var ret *bool
		return ret
	}
	return o.Hibernated
}

// GetHibernatedOk returns a tuple with the Hibernated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetHibernatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Hibernated) {
		return nil, false
	}
	return o.Hibernated, true
}

// HasHibernated returns a boolean if a field has been set.
func (o *ClusterStatus) HasHibernated() bool {
	if o != nil && !IsNil(o.Hibernated) {
		return true
	}

	return false
}

// SetHibernated gets a reference to the given bool and assigns it to the Hibernated field.
func (o *ClusterStatus) SetHibernated(v *bool) {
	o.Hibernated = v
}

func (o ClusterStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregated) {
		toSerialize["aggregated"] = o.Aggregated
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.CredentialsRotation) {
		toSerialize["credentialsRotation"] = o.CredentialsRotation
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Hibernated) {
		toSerialize["hibernated"] = o.Hibernated
	}
	return toSerialize, nil
}

type NullableClusterStatus struct {
	value *ClusterStatus
	isSet bool
}

func (v NullableClusterStatus) Get() *ClusterStatus {
	return v.value
}

func (v *NullableClusterStatus) Set(val *ClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatus(val *ClusterStatus) *NullableClusterStatus {
	return &NullableClusterStatus{value: val, isSet: true}
}

func (v NullableClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
