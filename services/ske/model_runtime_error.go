/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the RuntimeError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuntimeError{}

// RuntimeError struct for RuntimeError
type RuntimeError struct {
	// - Code:    `SKE_UNSPECIFIED`   Message: \"An error occurred. Please open a support ticket if this error persists.\" - Code:    `SKE_TMP_AUTH_ERROR`   Message: \"Authentication failed. This is a temporary error. Please wait while the system recovers.\" - Code:    `SKE_QUOTA_EXCEEDED`   Message: \"Your project's resource quotas are exhausted. Please make sure your quota is sufficient for the ordered cluster.\" - Code:    `SKE_ARGUS_INSTANCE_NOT_FOUND`   Message: \"The provided Argus instance could not be found.\" - Code:    `SKE_RATE_LIMITS`   Message: \"While provisioning your cluster, request rate limits where incurred. Please wait while the system recovers.\" - Code:    `SKE_INFRA_ERROR`   Message: \"An error occurred with the underlying infrastructure. Please open a support ticket if this error persists.\" - Code:    `SKE_REMAINING_RESOURCES`   Message: \"There are remaining Kubernetes resources in your cluster that prevent deletion. Please make sure to remove them.\" - Code:    `SKE_CONFIGURATION_PROBLEM`   Message: \"A configuration error occurred. Please open a support ticket if this error persists.\" - Code:    `SKE_UNREADY_NODES`   Message: \"Not all worker nodes are ready. Please open a support ticket if this error persists.\" - Code:    `SKE_API_SERVER_ERROR`   Message: \"The Kubernetes API server is not reporting readiness. Please open a support ticket if this error persists.\" - Code:    `SKE_DNS_ZONE_NOT_FOUND`   Message: \"The provided DNS zone for the STACKIT DNS extension could not be found. Please ensure you defined a valid domain that belongs to a STACKIT DNS zone.\"
	Code    *string `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewRuntimeError instantiates a new RuntimeError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuntimeError() *RuntimeError {
	this := RuntimeError{}
	return &this
}

// NewRuntimeErrorWithDefaults instantiates a new RuntimeError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuntimeErrorWithDefaults() *RuntimeError {
	this := RuntimeError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RuntimeError) GetCode() *string {
	if o == nil || IsNil(o.Code) {
		var ret *string
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RuntimeError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RuntimeError) SetCode(v *string) {
	o.Code = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *RuntimeError) GetDetails() *string {
	if o == nil || IsNil(o.Details) {
		var ret *string
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeError) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *RuntimeError) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *RuntimeError) SetDetails(v *string) {
	o.Details = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RuntimeError) GetMessage() *string {
	if o == nil || IsNil(o.Message) {
		var ret *string
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RuntimeError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RuntimeError) SetMessage(v *string) {
	o.Message = v
}

func (o RuntimeError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableRuntimeError struct {
	value *RuntimeError
	isSet bool
}

func (v NullableRuntimeError) Get() *RuntimeError {
	return v.value
}

func (v *NullableRuntimeError) Set(val *RuntimeError) {
	v.value = val
	v.isSet = true
}

func (v NullableRuntimeError) IsSet() bool {
	return v.isSet
}

func (v *NullableRuntimeError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuntimeError(val *RuntimeError) *NullableRuntimeError {
	return &NullableRuntimeError{value: val, isSet: true}
}

func (v NullableRuntimeError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuntimeError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
