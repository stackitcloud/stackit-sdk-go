/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the NodepoolKubernetes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolKubernetes{}

/*
	types and functions for version
*/

// isNotNullableString
type NodepoolKubernetesGetVersionAttributeType = *string

func getNodepoolKubernetesGetVersionAttributeTypeOk(arg NodepoolKubernetesGetVersionAttributeType) (ret NodepoolKubernetesGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNodepoolKubernetesGetVersionAttributeType(arg *NodepoolKubernetesGetVersionAttributeType, val NodepoolKubernetesGetVersionRetType) {
	*arg = &val
}

type NodepoolKubernetesGetVersionArgType = string
type NodepoolKubernetesGetVersionRetType = string

// NodepoolKubernetes struct for NodepoolKubernetes
type NodepoolKubernetes struct {
	// Override the Kubernetes version for the Kubelet of this Nodepool. Version must be equal or lower than the version of the cluster. Only one minor version difference to the version of the cluster is allowed. Downgrade of existing Nodepools is prohibited.
	Version NodepoolKubernetesGetVersionAttributeType `json:"version,omitempty"`
}

// NewNodepoolKubernetes instantiates a new NodepoolKubernetes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolKubernetes() *NodepoolKubernetes {
	this := NodepoolKubernetes{}
	return &this
}

// NewNodepoolKubernetesWithDefaults instantiates a new NodepoolKubernetes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolKubernetesWithDefaults() *NodepoolKubernetes {
	this := NodepoolKubernetes{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NodepoolKubernetes) GetVersion() (res NodepoolKubernetesGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodepoolKubernetes) GetVersionOk() (ret NodepoolKubernetesGetVersionRetType, ok bool) {
	return getNodepoolKubernetesGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *NodepoolKubernetes) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NodepoolKubernetes) SetVersion(v NodepoolKubernetesGetVersionRetType) {
	setNodepoolKubernetesGetVersionAttributeType(&o.Version, v)
}

func (o NodepoolKubernetes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getNodepoolKubernetesGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableNodepoolKubernetes struct {
	value *NodepoolKubernetes
	isSet bool
}

func (v NullableNodepoolKubernetes) Get() *NodepoolKubernetes {
	return v.value
}

func (v *NullableNodepoolKubernetes) Set(val *NodepoolKubernetes) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolKubernetes) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolKubernetes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolKubernetes(val *NodepoolKubernetes) *NullableNodepoolKubernetes {
	return &NullableNodepoolKubernetes{value: val, isSet: true}
}

func (v NullableNodepoolKubernetes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolKubernetes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
