/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the Observability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Observability{}

/*
	types and functions for enabled
*/

// isBoolean
type ObservabilitygetEnabledAttributeType = *bool
type ObservabilitygetEnabledArgType = bool
type ObservabilitygetEnabledRetType = bool

func getObservabilitygetEnabledAttributeTypeOk(arg ObservabilitygetEnabledAttributeType) (ret ObservabilitygetEnabledRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setObservabilitygetEnabledAttributeType(arg *ObservabilitygetEnabledAttributeType, val ObservabilitygetEnabledRetType) {
	*arg = &val
}

/*
	types and functions for instanceId
*/

// isNotNullableString
type ObservabilityGetInstanceIdAttributeType = *string

func getObservabilityGetInstanceIdAttributeTypeOk(arg ObservabilityGetInstanceIdAttributeType) (ret ObservabilityGetInstanceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setObservabilityGetInstanceIdAttributeType(arg *ObservabilityGetInstanceIdAttributeType, val ObservabilityGetInstanceIdRetType) {
	*arg = &val
}

type ObservabilityGetInstanceIdArgType = string
type ObservabilityGetInstanceIdRetType = string

// Observability struct for Observability
type Observability struct {
	// Enables the Observability extension.
	// REQUIRED
	Enabled ObservabilitygetEnabledAttributeType `json:"enabled" required:"true"`
	// Instance ID to choose which Observability instance is used.
	// REQUIRED
	InstanceId ObservabilityGetInstanceIdAttributeType `json:"instanceId" required:"true"`
}

type _Observability Observability

// NewObservability instantiates a new Observability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservability(enabled ObservabilitygetEnabledArgType, instanceId ObservabilityGetInstanceIdArgType) *Observability {
	this := Observability{}
	setObservabilitygetEnabledAttributeType(&this.Enabled, enabled)
	setObservabilityGetInstanceIdAttributeType(&this.InstanceId, instanceId)
	return &this
}

// NewObservabilityWithDefaults instantiates a new Observability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservabilityWithDefaults() *Observability {
	this := Observability{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *Observability) GetEnabled() (ret ObservabilitygetEnabledRetType) {
	ret, _ = o.GetEnabledOk()
	return ret
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Observability) GetEnabledOk() (ret ObservabilitygetEnabledRetType, ok bool) {
	return getObservabilitygetEnabledAttributeTypeOk(o.Enabled)
}

// SetEnabled sets field value
func (o *Observability) SetEnabled(v ObservabilitygetEnabledRetType) {
	setObservabilitygetEnabledAttributeType(&o.Enabled, v)
}

// GetInstanceId returns the InstanceId field value
func (o *Observability) GetInstanceId() (ret ObservabilityGetInstanceIdRetType) {
	ret, _ = o.GetInstanceIdOk()
	return ret
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *Observability) GetInstanceIdOk() (ret ObservabilityGetInstanceIdRetType, ok bool) {
	return getObservabilityGetInstanceIdAttributeTypeOk(o.InstanceId)
}

// SetInstanceId sets field value
func (o *Observability) SetInstanceId(v ObservabilityGetInstanceIdRetType) {
	setObservabilityGetInstanceIdAttributeType(&o.InstanceId, v)
}

func (o Observability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getObservabilitygetEnabledAttributeTypeOk(o.Enabled); ok {
		toSerialize["Enabled"] = val
	}
	if val, ok := getObservabilityGetInstanceIdAttributeTypeOk(o.InstanceId); ok {
		toSerialize["InstanceId"] = val
	}
	return toSerialize, nil
}

type NullableObservability struct {
	value *Observability
	isSet bool
}

func (v NullableObservability) Get() *Observability {
	return v.value
}

func (v *NullableObservability) Set(val *Observability) {
	v.value = val
	v.isSet = true
}

func (v NullableObservability) IsSet() bool {
	return v.isSet
}

func (v *NullableObservability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservability(val *Observability) *NullableObservability {
	return &NullableObservability{value: val, isSet: true}
}

func (v NullableObservability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
