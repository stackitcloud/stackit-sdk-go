/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Machine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Machine{}

/*
	types and functions for image
*/

// isModel
type MachineGetImageAttributeType = *Image
type MachineGetImageArgType = Image
type MachineGetImageRetType = Image

func getMachineGetImageAttributeTypeOk(arg MachineGetImageAttributeType) (ret MachineGetImageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMachineGetImageAttributeType(arg *MachineGetImageAttributeType, val MachineGetImageRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isNotNullableString
type MachineGetTypeAttributeType = *string

func getMachineGetTypeAttributeTypeOk(arg MachineGetTypeAttributeType) (ret MachineGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMachineGetTypeAttributeType(arg *MachineGetTypeAttributeType, val MachineGetTypeRetType) {
	*arg = &val
}

type MachineGetTypeArgType = string
type MachineGetTypeRetType = string

// Machine struct for Machine
type Machine struct {
	// REQUIRED
	Image MachineGetImageAttributeType `json:"image"`
	// For valid types please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `machineTypes`.
	// REQUIRED
	Type MachineGetTypeAttributeType `json:"type"`
}

type _Machine Machine

// NewMachine instantiates a new Machine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachine(image MachineGetImageArgType, types MachineGetTypeArgType) *Machine {
	this := Machine{}
	setMachineGetImageAttributeType(&this.Image, image)
	setMachineGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewMachineWithDefaults instantiates a new Machine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineWithDefaults() *Machine {
	this := Machine{}
	return &this
}

// GetImage returns the Image field value
func (o *Machine) GetImage() (ret MachineGetImageRetType) {
	ret, _ = o.GetImageOk()
	return ret
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Machine) GetImageOk() (ret MachineGetImageRetType, ok bool) {
	return getMachineGetImageAttributeTypeOk(o.Image)
}

// SetImage sets field value
func (o *Machine) SetImage(v MachineGetImageRetType) {
	setMachineGetImageAttributeType(&o.Image, v)
}

// GetType returns the Type field value
func (o *Machine) GetType() (ret MachineGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Machine) GetTypeOk() (ret MachineGetTypeRetType, ok bool) {
	return getMachineGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *Machine) SetType(v MachineGetTypeRetType) {
	setMachineGetTypeAttributeType(&o.Type, v)
}

func (o Machine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Machine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMachineGetImageAttributeTypeOk(o.Image); ok {
		toSerialize["Image"] = val
	}
	if val, ok := getMachineGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

func (o *Machine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMachine := _Machine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMachine)

	if err != nil {
		return err
	}

	*o = Machine(varMachine)

	return err
}

type NullableMachine struct {
	value *Machine
	isSet bool
}

func (v NullableMachine) Get() *Machine {
	return v.value
}

func (v *NullableMachine) Set(val *Machine) {
	v.value = val
	v.isSet = true
}

func (v NullableMachine) IsSet() bool {
	return v.isSet
}

func (v *NullableMachine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachine(val *Machine) *NullableMachine {
	return &NullableMachine{value: val, isSet: true}
}

func (v NullableMachine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
