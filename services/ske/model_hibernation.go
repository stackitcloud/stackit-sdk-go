/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the Hibernation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hibernation{}

// Hibernation struct for Hibernation
type Hibernation struct {
	// REQUIRED
	Schedules *[]HibernationSchedule `json:"schedules"`
}

type _Hibernation Hibernation

// NewHibernation instantiates a new Hibernation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHibernation(schedules *[]HibernationSchedule) *Hibernation {
	this := Hibernation{}
	this.Schedules = schedules
	return &this
}

// NewHibernationWithDefaults instantiates a new Hibernation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHibernationWithDefaults() *Hibernation {
	this := Hibernation{}
	return &this
}

// GetSchedules returns the Schedules field value
func (o *Hibernation) GetSchedules() *[]HibernationSchedule {
	if o == nil {
		var ret *[]HibernationSchedule
		return ret
	}

	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value
// and a boolean to check if the value has been set.
func (o *Hibernation) GetSchedulesOk() (*[]HibernationSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedules, true
}

// SetSchedules sets field value
func (o *Hibernation) SetSchedules(v *[]HibernationSchedule) {
	o.Schedules = v
}

func (o Hibernation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schedules"] = o.Schedules
	return toSerialize, nil
}

type NullableHibernation struct {
	value *Hibernation
	isSet bool
}

func (v NullableHibernation) Get() *Hibernation {
	return v.value
}

func (v *NullableHibernation) Set(val *Hibernation) {
	v.value = val
	v.isSet = true
}

func (v NullableHibernation) IsSet() bool {
	return v.isSet
}

func (v *NullableHibernation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHibernation(val *Hibernation) *NullableHibernation {
	return &NullableHibernation{value: val, isSet: true}
}

func (v NullableHibernation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHibernation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
