/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"time"
)

// checks if the MachineImageVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineImageVersion{}

/*
	types and functions for cri
*/

// isArray
type MachineImageVersionGetCriAttributeType = *[]CRI
type MachineImageVersionGetCriArgType = []CRI
type MachineImageVersionGetCriRetType = []CRI

func getMachineImageVersionGetCriAttributeTypeOk(arg MachineImageVersionGetCriAttributeType) (ret MachineImageVersionGetCriRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMachineImageVersionGetCriAttributeType(arg *MachineImageVersionGetCriAttributeType, val MachineImageVersionGetCriRetType) {
	*arg = &val
}

/*
	types and functions for expirationDate
*/

// isDateTime
type MachineImageVersionGetExpirationDateAttributeType = *time.Time
type MachineImageVersionGetExpirationDateArgType = time.Time
type MachineImageVersionGetExpirationDateRetType = time.Time

func getMachineImageVersionGetExpirationDateAttributeTypeOk(arg MachineImageVersionGetExpirationDateAttributeType) (ret MachineImageVersionGetExpirationDateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMachineImageVersionGetExpirationDateAttributeType(arg *MachineImageVersionGetExpirationDateAttributeType, val MachineImageVersionGetExpirationDateRetType) {
	*arg = &val
}

/*
	types and functions for state
*/

// isNotNullableString
type MachineImageVersionGetStateAttributeType = *string

func getMachineImageVersionGetStateAttributeTypeOk(arg MachineImageVersionGetStateAttributeType) (ret MachineImageVersionGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMachineImageVersionGetStateAttributeType(arg *MachineImageVersionGetStateAttributeType, val MachineImageVersionGetStateRetType) {
	*arg = &val
}

type MachineImageVersionGetStateArgType = string
type MachineImageVersionGetStateRetType = string

/*
	types and functions for version
*/

// isNotNullableString
type MachineImageVersionGetVersionAttributeType = *string

func getMachineImageVersionGetVersionAttributeTypeOk(arg MachineImageVersionGetVersionAttributeType) (ret MachineImageVersionGetVersionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMachineImageVersionGetVersionAttributeType(arg *MachineImageVersionGetVersionAttributeType, val MachineImageVersionGetVersionRetType) {
	*arg = &val
}

type MachineImageVersionGetVersionArgType = string
type MachineImageVersionGetVersionRetType = string

// MachineImageVersion struct for MachineImageVersion
type MachineImageVersion struct {
	Cri            MachineImageVersionGetCriAttributeType            `json:"cri,omitempty"`
	ExpirationDate MachineImageVersionGetExpirationDateAttributeType `json:"expirationDate,omitempty"`
	State          MachineImageVersionGetStateAttributeType          `json:"state,omitempty"`
	Version        MachineImageVersionGetVersionAttributeType        `json:"version,omitempty"`
}

// NewMachineImageVersion instantiates a new MachineImageVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineImageVersion() *MachineImageVersion {
	this := MachineImageVersion{}
	return &this
}

// NewMachineImageVersionWithDefaults instantiates a new MachineImageVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineImageVersionWithDefaults() *MachineImageVersion {
	this := MachineImageVersion{}
	return &this
}

// GetCri returns the Cri field value if set, zero value otherwise.
func (o *MachineImageVersion) GetCri() (res MachineImageVersionGetCriRetType) {
	res, _ = o.GetCriOk()
	return
}

// GetCriOk returns a tuple with the Cri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineImageVersion) GetCriOk() (ret MachineImageVersionGetCriRetType, ok bool) {
	return getMachineImageVersionGetCriAttributeTypeOk(o.Cri)
}

// HasCri returns a boolean if a field has been set.
func (o *MachineImageVersion) HasCri() bool {
	_, ok := o.GetCriOk()
	return ok
}

// SetCri gets a reference to the given []CRI and assigns it to the Cri field.
func (o *MachineImageVersion) SetCri(v MachineImageVersionGetCriRetType) {
	setMachineImageVersionGetCriAttributeType(&o.Cri, v)
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *MachineImageVersion) GetExpirationDate() (res MachineImageVersionGetExpirationDateRetType) {
	res, _ = o.GetExpirationDateOk()
	return
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineImageVersion) GetExpirationDateOk() (ret MachineImageVersionGetExpirationDateRetType, ok bool) {
	return getMachineImageVersionGetExpirationDateAttributeTypeOk(o.ExpirationDate)
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *MachineImageVersion) HasExpirationDate() bool {
	_, ok := o.GetExpirationDateOk()
	return ok
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *MachineImageVersion) SetExpirationDate(v MachineImageVersionGetExpirationDateRetType) {
	setMachineImageVersionGetExpirationDateAttributeType(&o.ExpirationDate, v)
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MachineImageVersion) GetState() (res MachineImageVersionGetStateRetType) {
	res, _ = o.GetStateOk()
	return
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineImageVersion) GetStateOk() (ret MachineImageVersionGetStateRetType, ok bool) {
	return getMachineImageVersionGetStateAttributeTypeOk(o.State)
}

// HasState returns a boolean if a field has been set.
func (o *MachineImageVersion) HasState() bool {
	_, ok := o.GetStateOk()
	return ok
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MachineImageVersion) SetState(v MachineImageVersionGetStateRetType) {
	setMachineImageVersionGetStateAttributeType(&o.State, v)
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MachineImageVersion) GetVersion() (res MachineImageVersionGetVersionRetType) {
	res, _ = o.GetVersionOk()
	return
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineImageVersion) GetVersionOk() (ret MachineImageVersionGetVersionRetType, ok bool) {
	return getMachineImageVersionGetVersionAttributeTypeOk(o.Version)
}

// HasVersion returns a boolean if a field has been set.
func (o *MachineImageVersion) HasVersion() bool {
	_, ok := o.GetVersionOk()
	return ok
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MachineImageVersion) SetVersion(v MachineImageVersionGetVersionRetType) {
	setMachineImageVersionGetVersionAttributeType(&o.Version, v)
}

func (o MachineImageVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMachineImageVersionGetCriAttributeTypeOk(o.Cri); ok {
		toSerialize["Cri"] = val
	}
	if val, ok := getMachineImageVersionGetExpirationDateAttributeTypeOk(o.ExpirationDate); ok {
		toSerialize["ExpirationDate"] = val
	}
	if val, ok := getMachineImageVersionGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getMachineImageVersionGetVersionAttributeTypeOk(o.Version); ok {
		toSerialize["Version"] = val
	}
	return toSerialize, nil
}

type NullableMachineImageVersion struct {
	value *MachineImageVersion
	isSet bool
}

func (v NullableMachineImageVersion) Get() *MachineImageVersion {
	return v.value
}

func (v *NullableMachineImageVersion) Set(val *MachineImageVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineImageVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineImageVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineImageVersion(val *MachineImageVersion) *NullableMachineImageVersion {
	return &NullableMachineImageVersion{value: val, isSet: true}
}

func (v NullableMachineImageVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineImageVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
