/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"fmt"
)

// ClusterStatusState the model 'ClusterStatusState'
type ClusterStatusState string

// List of ClusterStatusState
const (
	CLUSTERSTATUSSTATE_UNSPECIFIED ClusterStatusState = "STATE_UNSPECIFIED"
	CLUSTERSTATUSSTATE_HEALTHY     ClusterStatusState = "STATE_HEALTHY"
	CLUSTERSTATUSSTATE_CREATING    ClusterStatusState = "STATE_CREATING"
	CLUSTERSTATUSSTATE_DELETING    ClusterStatusState = "STATE_DELETING"
	CLUSTERSTATUSSTATE_UNHEALTHY   ClusterStatusState = "STATE_UNHEALTHY"
	CLUSTERSTATUSSTATE_RECONCILING ClusterStatusState = "STATE_RECONCILING"
	CLUSTERSTATUSSTATE_HIBERNATED  ClusterStatusState = "STATE_HIBERNATED"
	CLUSTERSTATUSSTATE_HIBERNATING ClusterStatusState = "STATE_HIBERNATING"
	CLUSTERSTATUSSTATE_WAKINGUP    ClusterStatusState = "STATE_WAKINGUP"
)

// All allowed values of ClusterStatusState enum
var AllowedClusterStatusStateEnumValues = []ClusterStatusState{
	"STATE_UNSPECIFIED",
	"STATE_HEALTHY",
	"STATE_CREATING",
	"STATE_DELETING",
	"STATE_UNHEALTHY",
	"STATE_RECONCILING",
	"STATE_HIBERNATED",
	"STATE_HIBERNATING",
	"STATE_WAKINGUP",
}

func (v *ClusterStatusState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ClusterStatusState(value)
	for _, existing := range AllowedClusterStatusStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterStatusState", value)
}

// NewClusterStatusStateFromValue returns a pointer to a valid ClusterStatusState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterStatusStateFromValue(v string) (*ClusterStatusState, error) {
	ev := ClusterStatusState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterStatusState: valid values are %v", v, AllowedClusterStatusStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterStatusState) IsValid() bool {
	for _, existing := range AllowedClusterStatusStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterStatusState value
func (v ClusterStatusState) Ptr() *ClusterStatusState {
	return &v
}

type NullableClusterStatusState struct {
	value *ClusterStatusState
	isSet bool
}

func (v NullableClusterStatusState) Get() *ClusterStatusState {
	return v.value
}

func (v *NullableClusterStatusState) Set(val *ClusterStatusState) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatusState) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatusState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatusState(val *ClusterStatusState) *NullableClusterStatusState {
	return &NullableClusterStatusState{value: val, isSet: true}
}

func (v NullableClusterStatusState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatusState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
