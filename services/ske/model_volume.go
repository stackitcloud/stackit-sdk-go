/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the Volume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Volume{}

/*
	types and functions for size
*/

// isInteger
type VolumeGetSizeAttributeType = *int64
type VolumeGetSizeArgType = int64
type VolumeGetSizeRetType = int64

func getVolumeGetSizeAttributeTypeOk(arg VolumeGetSizeAttributeType) (ret VolumeGetSizeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setVolumeGetSizeAttributeType(arg *VolumeGetSizeAttributeType, val VolumeGetSizeRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isNotNullableString
type VolumeGetTypeAttributeType = *string

func getVolumeGetTypeAttributeTypeOk(arg VolumeGetTypeAttributeType) (ret VolumeGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setVolumeGetTypeAttributeType(arg *VolumeGetTypeAttributeType, val VolumeGetTypeRetType) {
	*arg = &val
}

type VolumeGetTypeArgType = string
type VolumeGetTypeRetType = string

// Volume struct for Volume
type Volume struct {
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	Size VolumeGetSizeAttributeType `json:"size" required:"true"`
	// For valid values please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `volumeTypes`.
	Type VolumeGetTypeAttributeType `json:"type,omitempty"`
}

type _Volume Volume

// NewVolume instantiates a new Volume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolume(size VolumeGetSizeArgType) *Volume {
	this := Volume{}
	setVolumeGetSizeAttributeType(&this.Size, size)
	return &this
}

// NewVolumeWithDefaults instantiates a new Volume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeWithDefaults() *Volume {
	this := Volume{}
	return &this
}

// GetSize returns the Size field value
func (o *Volume) GetSize() (ret VolumeGetSizeRetType) {
	ret, _ = o.GetSizeOk()
	return ret
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Volume) GetSizeOk() (ret VolumeGetSizeRetType, ok bool) {
	return getVolumeGetSizeAttributeTypeOk(o.Size)
}

// SetSize sets field value
func (o *Volume) SetSize(v VolumeGetSizeRetType) {
	setVolumeGetSizeAttributeType(&o.Size, v)
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Volume) GetType() (res VolumeGetTypeRetType) {
	res, _ = o.GetTypeOk()
	return
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volume) GetTypeOk() (ret VolumeGetTypeRetType, ok bool) {
	return getVolumeGetTypeAttributeTypeOk(o.Type)
}

// HasType returns a boolean if a field has been set.
func (o *Volume) HasType() bool {
	_, ok := o.GetTypeOk()
	return ok
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Volume) SetType(v VolumeGetTypeRetType) {
	setVolumeGetTypeAttributeType(&o.Type, v)
}

func (o Volume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getVolumeGetSizeAttributeTypeOk(o.Size); ok {
		toSerialize["Size"] = val
	}
	if val, ok := getVolumeGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableVolume struct {
	value *Volume
	isSet bool
}

func (v NullableVolume) Get() *Volume {
	return v.value
}

func (v *NullableVolume) Set(val *Volume) {
	v.value = val
	v.isSet = true
}

func (v NullableVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolume(val *Volume) *NullableVolume {
	return &NullableVolume{value: val, isSet: true}
}

func (v NullableVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
