/*
SKE-API

The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"fmt"
)

// checks if the CRI type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CRI{}

/*
	types and functions for name
*/

// isEnum

// CRIName the model 'CRI'
type CRIName string

// List of Name
const (
	CRINAME_DOCKER     CRIName = "docker"
	CRINAME_CONTAINERD CRIName = "containerd"
)

// All allowed values of CRI enum
var AllowedCRINameEnumValues = []CRIName{
	"docker",
	"containerd",
}

func (v *CRIName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := CRIName(value)
	for _, existing := range AllowedCRINameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CRI", value)
}

// NewCRINameFromValue returns a pointer to a valid CRIName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCRINameFromValue(v string) (*CRIName, error) {
	ev := CRIName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CRIName: valid values are %v", v, AllowedCRINameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CRIName) IsValid() bool {
	for _, existing := range AllowedCRINameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NameName value
func (v CRIName) Ptr() *CRIName {
	return &v
}

type NullableCRIName struct {
	value *CRIName
	isSet bool
}

func (v NullableCRIName) Get() *CRIName {
	return v.value
}

func (v *NullableCRIName) Set(val *CRIName) {
	v.value = val
	v.isSet = true
}

func (v NullableCRIName) IsSet() bool {
	return v.isSet
}

func (v *NullableCRIName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCRIName(val *CRIName) *NullableCRIName {
	return &NullableCRIName{value: val, isSet: true}
}

func (v NullableCRIName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCRIName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type CRIGetNameAttributeType = *CRIName
type CRIGetNameArgType = CRIName
type CRIGetNameRetType = CRIName

func getCRIGetNameAttributeTypeOk(arg CRIGetNameAttributeType) (ret CRIGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCRIGetNameAttributeType(arg *CRIGetNameAttributeType, val CRIGetNameRetType) {
	*arg = &val
}

// CRI struct for CRI
type CRI struct {
	Name CRIGetNameAttributeType `json:"name,omitempty"`
}

// NewCRI instantiates a new CRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCRI() *CRI {
	this := CRI{}
	return &this
}

// NewCRIWithDefaults instantiates a new CRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCRIWithDefaults() *CRI {
	this := CRI{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CRI) GetName() (res CRIGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRI) GetNameOk() (ret CRIGetNameRetType, ok bool) {
	return getCRIGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *CRI) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CRI) SetName(v CRIGetNameRetType) {
	setCRIGetNameAttributeType(&o.Name, v)
}

func (o CRI) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCRIGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullableCRI struct {
	value *CRI
	isSet bool
}

func (v NullableCRI) Get() *CRI {
	return v.value
}

func (v *NullableCRI) Set(val *CRI) {
	v.value = val
	v.isSet = true
}

func (v NullableCRI) IsSet() bool {
	return v.isSet
}

func (v *NullableCRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCRI(val *CRI) *NullableCRI {
	return &NullableCRI{value: val, isSet: true}
}

func (v NullableCRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
