/*
Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1.7.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the LoadbalancerOptionLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadbalancerOptionLogs{}

// LoadbalancerOptionLogs struct for LoadbalancerOptionLogs
type LoadbalancerOptionLogs struct {
	// Credentials reference for logging. This reference is created via the observability create endpoint and the credential needs to contain the basic auth username and password for the logging solution the push URL points to. Then this enables monitoring via remote write for the Load Balancer.
	CredentialsRef *string `json:"credentialsRef,omitempty"`
	// The ARGUS/Loki remote write Push URL you want the logs to be shipped to.
	PushUrl *string `json:"pushUrl,omitempty"`
}

// NewLoadbalancerOptionLogs instantiates a new LoadbalancerOptionLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadbalancerOptionLogs() *LoadbalancerOptionLogs {
	this := LoadbalancerOptionLogs{}
	return &this
}

// NewLoadbalancerOptionLogsWithDefaults instantiates a new LoadbalancerOptionLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadbalancerOptionLogsWithDefaults() *LoadbalancerOptionLogs {
	this := LoadbalancerOptionLogs{}
	return &this
}

// GetCredentialsRef returns the CredentialsRef field value if set, zero value otherwise.
func (o *LoadbalancerOptionLogs) GetCredentialsRef() *string {
	if o == nil || IsNil(o.CredentialsRef) {
		var ret *string
		return ret
	}
	return o.CredentialsRef
}

// GetCredentialsRefOk returns a tuple with the CredentialsRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadbalancerOptionLogs) GetCredentialsRefOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialsRef) {
		return nil, false
	}
	return o.CredentialsRef, true
}

// HasCredentialsRef returns a boolean if a field has been set.
func (o *LoadbalancerOptionLogs) HasCredentialsRef() bool {
	if o != nil && !IsNil(o.CredentialsRef) {
		return true
	}

	return false
}

// SetCredentialsRef gets a reference to the given string and assigns it to the CredentialsRef field.
func (o *LoadbalancerOptionLogs) SetCredentialsRef(v *string) {
	o.CredentialsRef = v
}

// GetPushUrl returns the PushUrl field value if set, zero value otherwise.
func (o *LoadbalancerOptionLogs) GetPushUrl() *string {
	if o == nil || IsNil(o.PushUrl) {
		var ret *string
		return ret
	}
	return o.PushUrl
}

// GetPushUrlOk returns a tuple with the PushUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadbalancerOptionLogs) GetPushUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PushUrl) {
		return nil, false
	}
	return o.PushUrl, true
}

// HasPushUrl returns a boolean if a field has been set.
func (o *LoadbalancerOptionLogs) HasPushUrl() bool {
	if o != nil && !IsNil(o.PushUrl) {
		return true
	}

	return false
}

// SetPushUrl gets a reference to the given string and assigns it to the PushUrl field.
func (o *LoadbalancerOptionLogs) SetPushUrl(v *string) {
	o.PushUrl = v
}

func (o LoadbalancerOptionLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CredentialsRef) {
		toSerialize["credentialsRef"] = o.CredentialsRef
	}
	if !IsNil(o.PushUrl) {
		toSerialize["pushUrl"] = o.PushUrl
	}
	return toSerialize, nil
}

type NullableLoadbalancerOptionLogs struct {
	value *LoadbalancerOptionLogs
	isSet bool
}

func (v NullableLoadbalancerOptionLogs) Get() *LoadbalancerOptionLogs {
	return v.value
}

func (v *NullableLoadbalancerOptionLogs) Set(val *LoadbalancerOptionLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadbalancerOptionLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadbalancerOptionLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadbalancerOptionLogs(val *LoadbalancerOptionLogs) *NullableLoadbalancerOptionLogs {
	return &NullableLoadbalancerOptionLogs{value: val, isSet: true}
}

func (v NullableLoadbalancerOptionLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadbalancerOptionLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
