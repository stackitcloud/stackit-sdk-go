/*
Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1.7.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the ActiveHealthCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveHealthCheck{}

// ActiveHealthCheck struct for ActiveHealthCheck
type ActiveHealthCheck struct {
	// Healthy threshold of the health checking
	HealthyThreshold *int64 `json:"healthyThreshold,omitempty"`
	// Interval duration of health checking in seconds
	Interval *string `json:"interval,omitempty"`
	// Interval duration threshold of the health checking in seconds
	IntervalJitter *string `json:"intervalJitter,omitempty"`
	// Active health checking timeout duration in seconds
	Timeout *string `json:"timeout,omitempty"`
	// Unhealthy threshold of the health checking
	UnhealthyThreshold *int64 `json:"unhealthyThreshold,omitempty"`
}

// NewActiveHealthCheck instantiates a new ActiveHealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveHealthCheck() *ActiveHealthCheck {
	this := ActiveHealthCheck{}
	return &this
}

// NewActiveHealthCheckWithDefaults instantiates a new ActiveHealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveHealthCheckWithDefaults() *ActiveHealthCheck {
	this := ActiveHealthCheck{}
	return &this
}

// GetHealthyThreshold returns the HealthyThreshold field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetHealthyThreshold() *int64 {
	if o == nil || IsNil(o.HealthyThreshold) {
		var ret *int64
		return ret
	}
	return o.HealthyThreshold
}

// GetHealthyThresholdOk returns a tuple with the HealthyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetHealthyThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.HealthyThreshold) {
		return nil, false
	}
	return o.HealthyThreshold, true
}

// HasHealthyThreshold returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasHealthyThreshold() bool {
	if o != nil && !IsNil(o.HealthyThreshold) {
		return true
	}

	return false
}

// SetHealthyThreshold gets a reference to the given int64 and assigns it to the HealthyThreshold field.
func (o *ActiveHealthCheck) SetHealthyThreshold(v *int64) {
	o.HealthyThreshold = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetInterval() *string {
	if o == nil || IsNil(o.Interval) {
		var ret *string
		return ret
	}
	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *ActiveHealthCheck) SetInterval(v *string) {
	o.Interval = v
}

// GetIntervalJitter returns the IntervalJitter field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetIntervalJitter() *string {
	if o == nil || IsNil(o.IntervalJitter) {
		var ret *string
		return ret
	}
	return o.IntervalJitter
}

// GetIntervalJitterOk returns a tuple with the IntervalJitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetIntervalJitterOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalJitter) {
		return nil, false
	}
	return o.IntervalJitter, true
}

// HasIntervalJitter returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasIntervalJitter() bool {
	if o != nil && !IsNil(o.IntervalJitter) {
		return true
	}

	return false
}

// SetIntervalJitter gets a reference to the given string and assigns it to the IntervalJitter field.
func (o *ActiveHealthCheck) SetIntervalJitter(v *string) {
	o.IntervalJitter = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetTimeout() *string {
	if o == nil || IsNil(o.Timeout) {
		var ret *string
		return ret
	}
	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given string and assigns it to the Timeout field.
func (o *ActiveHealthCheck) SetTimeout(v *string) {
	o.Timeout = v
}

// GetUnhealthyThreshold returns the UnhealthyThreshold field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetUnhealthyThreshold() *int64 {
	if o == nil || IsNil(o.UnhealthyThreshold) {
		var ret *int64
		return ret
	}
	return o.UnhealthyThreshold
}

// GetUnhealthyThresholdOk returns a tuple with the UnhealthyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetUnhealthyThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.UnhealthyThreshold) {
		return nil, false
	}
	return o.UnhealthyThreshold, true
}

// HasUnhealthyThreshold returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasUnhealthyThreshold() bool {
	if o != nil && !IsNil(o.UnhealthyThreshold) {
		return true
	}

	return false
}

// SetUnhealthyThreshold gets a reference to the given int64 and assigns it to the UnhealthyThreshold field.
func (o *ActiveHealthCheck) SetUnhealthyThreshold(v *int64) {
	o.UnhealthyThreshold = v
}

func (o ActiveHealthCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HealthyThreshold) {
		toSerialize["healthyThreshold"] = o.HealthyThreshold
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.IntervalJitter) {
		toSerialize["intervalJitter"] = o.IntervalJitter
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.UnhealthyThreshold) {
		toSerialize["unhealthyThreshold"] = o.UnhealthyThreshold
	}
	return toSerialize, nil
}

type NullableActiveHealthCheck struct {
	value *ActiveHealthCheck
	isSet bool
}

func (v NullableActiveHealthCheck) Get() *ActiveHealthCheck {
	return v.value
}

func (v *NullableActiveHealthCheck) Set(val *ActiveHealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveHealthCheck(val *ActiveHealthCheck) *NullableActiveHealthCheck {
	return &NullableActiveHealthCheck{value: val, isSet: true}
}

func (v NullableActiveHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
