/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membership

import (
	"encoding/json"
)

// checks if the Zookie type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Zookie{}

// Zookie struct for Zookie
type Zookie struct {
	Zookie *string `json:"zookie,omitempty"`
}

// NewZookie instantiates a new Zookie object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZookie() *Zookie {
	this := Zookie{}
	return &this
}

// NewZookieWithDefaults instantiates a new Zookie object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZookieWithDefaults() *Zookie {
	this := Zookie{}
	return &this
}

// GetZookie returns the Zookie field value if set, zero value otherwise.
func (o *Zookie) GetZookie() *string {
	if o == nil || IsNil(o.Zookie) {
		var ret *string
		return ret
	}
	return o.Zookie
}

// GetZookieOk returns a tuple with the Zookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zookie) GetZookieOk() (*string, bool) {
	if o == nil || IsNil(o.Zookie) {
		return nil, false
	}
	return o.Zookie, true
}

// HasZookie returns a boolean if a field has been set.
func (o *Zookie) HasZookie() bool {
	if o != nil && !IsNil(o.Zookie) {
		return true
	}

	return false
}

// SetZookie gets a reference to the given string and assigns it to the Zookie field.
func (o *Zookie) SetZookie(v *string) {
	o.Zookie = v
}

func (o Zookie) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Zookie) {
		toSerialize["zookie"] = o.Zookie
	}
	return toSerialize, nil
}

type NullableZookie struct {
	value *Zookie
	isSet bool
}

func (v NullableZookie) Get() *Zookie {
	return v.value
}

func (v *NullableZookie) Set(val *Zookie) {
	v.value = val
	v.isSet = true
}

func (v NullableZookie) IsSet() bool {
	return v.isSet
}

func (v *NullableZookie) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZookie(val *Zookie) *NullableZookie {
	return &NullableZookie{value: val, isSet: true}
}

func (v NullableZookie) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZookie) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
