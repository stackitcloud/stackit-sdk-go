/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membership

import (
	"encoding/json"
)

// checks if the ValidateChildMembersPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateChildMembersPayload{}

// ValidateChildMembersPayload struct for ValidateChildMembersPayload
type ValidateChildMembersPayload struct {
	// REQUIRED
	ChildResourceType *string `json:"childResourceType"`
	// REQUIRED
	Members *[]Member `json:"members"`
	// REQUIRED
	ResourceType *string `json:"resourceType"`
}

type _ValidateChildMembersPayload ValidateChildMembersPayload

// NewValidateChildMembersPayload instantiates a new ValidateChildMembersPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateChildMembersPayload(childResourceType *string, members *[]Member, resourceType *string) *ValidateChildMembersPayload {
	this := ValidateChildMembersPayload{}
	this.ChildResourceType = childResourceType
	this.Members = members
	this.ResourceType = resourceType
	return &this
}

// NewValidateChildMembersPayloadWithDefaults instantiates a new ValidateChildMembersPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateChildMembersPayloadWithDefaults() *ValidateChildMembersPayload {
	this := ValidateChildMembersPayload{}
	return &this
}

// GetChildResourceType returns the ChildResourceType field value
func (o *ValidateChildMembersPayload) GetChildResourceType() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.ChildResourceType
}

// GetChildResourceTypeOk returns a tuple with the ChildResourceType field value
// and a boolean to check if the value has been set.
func (o *ValidateChildMembersPayload) GetChildResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildResourceType, true
}

// SetChildResourceType sets field value
func (o *ValidateChildMembersPayload) SetChildResourceType(v *string) {
	o.ChildResourceType = v
}

// GetMembers returns the Members field value
func (o *ValidateChildMembersPayload) GetMembers() *[]Member {
	if o == nil {
		var ret *[]Member
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *ValidateChildMembersPayload) GetMembersOk() (*[]Member, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *ValidateChildMembersPayload) SetMembers(v *[]Member) {
	o.Members = v
}

// GetResourceType returns the ResourceType field value
func (o *ValidateChildMembersPayload) GetResourceType() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ValidateChildMembersPayload) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// SetResourceType sets field value
func (o *ValidateChildMembersPayload) SetResourceType(v *string) {
	o.ResourceType = v
}

func (o ValidateChildMembersPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["childResourceType"] = o.ChildResourceType
	toSerialize["members"] = o.Members
	toSerialize["resourceType"] = o.ResourceType
	return toSerialize, nil
}

type NullableValidateChildMembersPayload struct {
	value *ValidateChildMembersPayload
	isSet bool
}

func (v NullableValidateChildMembersPayload) Get() *ValidateChildMembersPayload {
	return v.value
}

func (v *NullableValidateChildMembersPayload) Set(val *ValidateChildMembersPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateChildMembersPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateChildMembersPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateChildMembersPayload(val *ValidateChildMembersPayload) *NullableValidateChildMembersPayload {
	return &NullableValidateChildMembersPayload{value: val, isSet: true}
}

func (v NullableValidateChildMembersPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateChildMembersPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
