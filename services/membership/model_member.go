/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membership

import (
	"encoding/json"
)

// checks if the Member type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Member{}

// Member struct for Member
type Member struct {
	// REQUIRED
	Role *string `json:"role"`
	// REQUIRED
	Subject *string `json:"subject"`
}

type _Member Member

// NewMember instantiates a new Member object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMember(role *string, subject *string) *Member {
	this := Member{}
	this.Role = role
	this.Subject = subject
	return &this
}

// NewMemberWithDefaults instantiates a new Member object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberWithDefaults() *Member {
	this := Member{}
	return &this
}

// GetRole returns the Role field value
func (o *Member) GetRole() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *Member) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role, true
}

// SetRole sets field value
func (o *Member) SetRole(v *string) {
	o.Role = v
}

// GetSubject returns the Subject field value
func (o *Member) GetSubject() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *Member) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject, true
}

// SetSubject sets field value
func (o *Member) SetSubject(v *string) {
	o.Subject = v
}

func (o Member) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["subject"] = o.Subject
	return toSerialize, nil
}

type NullableMember struct {
	value *Member
	isSet bool
}

func (v NullableMember) Get() *Member {
	return v.value
}

func (v *NullableMember) Set(val *Member) {
	v.value = val
	v.isSet = true
}

func (v NullableMember) IsSet() bool {
	return v.isSet
}

func (v *NullableMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMember(val *Member) *NullableMember {
	return &NullableMember{value: val, isSet: true}
}

func (v NullableMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
