/*
STACKIT Membership API

The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membership

import (
	"encoding/json"
)

// checks if the Subject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subject{}

// Subject struct for Subject
type Subject struct {
	// REQUIRED
	Email *string `json:"email"`
	// REQUIRED
	Id *string `json:"id"`
	// REQUIRED
	Type *string `json:"type"`
}

type _Subject Subject

// NewSubject instantiates a new Subject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubject(email *string, id *string, type_ *string) *Subject {
	this := Subject{}
	this.Email = email
	this.Id = id
	this.Type = type_
	return &this
}

// NewSubjectWithDefaults instantiates a new Subject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectWithDefaults() *Subject {
	this := Subject{}
	return &this
}

// GetEmail returns the Email field value
func (o *Subject) GetEmail() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Subject) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email, true
}

// SetEmail sets field value
func (o *Subject) SetEmail(v *string) {
	o.Email = v
}

// GetId returns the Id field value
func (o *Subject) GetId() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Subject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *Subject) SetId(v *string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Subject) GetType() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Subject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Subject) SetType(v *string) {
	o.Type = v
}

func (o Subject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableSubject struct {
	value *Subject
	isSet bool
}

func (v NullableSubject) Get() *Subject {
	return v.value
}

func (v *NullableSubject) Set(val *Subject) {
	v.value = val
	v.isSet = true
}

func (v NullableSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubject(val *Subject) *NullableSubject {
	return &NullableSubject{value: val, isSet: true}
}

func (v NullableSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
