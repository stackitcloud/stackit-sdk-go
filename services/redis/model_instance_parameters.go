/*
STACKIT Redis API

The STACKIT Redis API provides endpoints to list service offerings, manage service instances and service credentials within STACKIT portal projects.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redis

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceParameters{}

/*
	types and functions for down-after-milliseconds
*/

// isInteger
type InstanceParametersGetDownAfterMillisecondsAttributeType = *int64
type InstanceParametersGetDownAfterMillisecondsArgType = int64
type InstanceParametersGetDownAfterMillisecondsRetType = int64

func getInstanceParametersGetDownAfterMillisecondsAttributeTypeOk(arg InstanceParametersGetDownAfterMillisecondsAttributeType) (ret InstanceParametersGetDownAfterMillisecondsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetDownAfterMillisecondsAttributeType(arg *InstanceParametersGetDownAfterMillisecondsAttributeType, val InstanceParametersGetDownAfterMillisecondsRetType) {
	*arg = &val
}

/*
	types and functions for enable_monitoring
*/

// isBoolean
type InstanceParametersgetEnableMonitoringAttributeType = *bool
type InstanceParametersgetEnableMonitoringArgType = bool
type InstanceParametersgetEnableMonitoringRetType = bool

func getInstanceParametersgetEnableMonitoringAttributeTypeOk(arg InstanceParametersgetEnableMonitoringAttributeType) (ret InstanceParametersgetEnableMonitoringRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersgetEnableMonitoringAttributeType(arg *InstanceParametersgetEnableMonitoringAttributeType, val InstanceParametersgetEnableMonitoringRetType) {
	*arg = &val
}

/*
	types and functions for failover-timeout
*/

// isInteger
type InstanceParametersGetFailoverTimeoutAttributeType = *int64
type InstanceParametersGetFailoverTimeoutArgType = int64
type InstanceParametersGetFailoverTimeoutRetType = int64

func getInstanceParametersGetFailoverTimeoutAttributeTypeOk(arg InstanceParametersGetFailoverTimeoutAttributeType) (ret InstanceParametersGetFailoverTimeoutRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetFailoverTimeoutAttributeType(arg *InstanceParametersGetFailoverTimeoutAttributeType, val InstanceParametersGetFailoverTimeoutRetType) {
	*arg = &val
}

/*
	types and functions for graphite
*/

// isNotNullableString
type InstanceParametersGetGraphiteAttributeType = *string

func getInstanceParametersGetGraphiteAttributeTypeOk(arg InstanceParametersGetGraphiteAttributeType) (ret InstanceParametersGetGraphiteRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetGraphiteAttributeType(arg *InstanceParametersGetGraphiteAttributeType, val InstanceParametersGetGraphiteRetType) {
	*arg = &val
}

type InstanceParametersGetGraphiteArgType = string
type InstanceParametersGetGraphiteRetType = string

/*
	types and functions for lazyfree-lazy-eviction
*/

// isEnum

// InstanceParametersLazyfreeLazyEviction the model 'InstanceParameters'
type InstanceParametersLazyfreeLazyEviction string

// List of LazyfreeLazyEviction
const (
	INSTANCEPARAMETERSLAZYFREE_LAZY_EVICTION_YES InstanceParametersLazyfreeLazyEviction = "yes"
	INSTANCEPARAMETERSLAZYFREE_LAZY_EVICTION_NO  InstanceParametersLazyfreeLazyEviction = "no"
)

// All allowed values of InstanceParameters enum
var AllowedInstanceParametersLazyfreeLazyEvictionEnumValues = []InstanceParametersLazyfreeLazyEviction{
	"yes",
	"no",
}

func (v *InstanceParametersLazyfreeLazyEviction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InstanceParametersLazyfreeLazyEviction(value)
	for _, existing := range AllowedInstanceParametersLazyfreeLazyEvictionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceParameters", value)
}

// NewInstanceParametersLazyfreeLazyEvictionFromValue returns a pointer to a valid InstanceParametersLazyfreeLazyEviction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceParametersLazyfreeLazyEvictionFromValue(v string) (*InstanceParametersLazyfreeLazyEviction, error) {
	ev := InstanceParametersLazyfreeLazyEviction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceParametersLazyfreeLazyEviction: valid values are %v", v, AllowedInstanceParametersLazyfreeLazyEvictionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceParametersLazyfreeLazyEviction) IsValid() bool {
	for _, existing := range AllowedInstanceParametersLazyfreeLazyEvictionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LazyfreeLazyEvictionLazyfreeLazyEviction value
func (v InstanceParametersLazyfreeLazyEviction) Ptr() *InstanceParametersLazyfreeLazyEviction {
	return &v
}

type NullableInstanceParametersLazyfreeLazyEviction struct {
	value *InstanceParametersLazyfreeLazyEviction
	isSet bool
}

func (v NullableInstanceParametersLazyfreeLazyEviction) Get() *InstanceParametersLazyfreeLazyEviction {
	return v.value
}

func (v *NullableInstanceParametersLazyfreeLazyEviction) Set(val *InstanceParametersLazyfreeLazyEviction) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceParametersLazyfreeLazyEviction) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceParametersLazyfreeLazyEviction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceParametersLazyfreeLazyEviction(val *InstanceParametersLazyfreeLazyEviction) *NullableInstanceParametersLazyfreeLazyEviction {
	return &NullableInstanceParametersLazyfreeLazyEviction{value: val, isSet: true}
}

func (v NullableInstanceParametersLazyfreeLazyEviction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceParametersLazyfreeLazyEviction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type InstanceParametersGetLazyfreeLazyEvictionAttributeType = *InstanceParametersLazyfreeLazyEviction
type InstanceParametersGetLazyfreeLazyEvictionArgType = InstanceParametersLazyfreeLazyEviction
type InstanceParametersGetLazyfreeLazyEvictionRetType = InstanceParametersLazyfreeLazyEviction

func getInstanceParametersGetLazyfreeLazyEvictionAttributeTypeOk(arg InstanceParametersGetLazyfreeLazyEvictionAttributeType) (ret InstanceParametersGetLazyfreeLazyEvictionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetLazyfreeLazyEvictionAttributeType(arg *InstanceParametersGetLazyfreeLazyEvictionAttributeType, val InstanceParametersGetLazyfreeLazyEvictionRetType) {
	*arg = &val
}

/*
	types and functions for lazyfree-lazy-expire
*/

// isEnum

// InstanceParametersLazyfreeLazyExpire the model 'InstanceParameters'
type InstanceParametersLazyfreeLazyExpire string

// List of LazyfreeLazyExpire
const (
	INSTANCEPARAMETERSLAZYFREE_LAZY_EXPIRE_YES InstanceParametersLazyfreeLazyExpire = "yes"
	INSTANCEPARAMETERSLAZYFREE_LAZY_EXPIRE_NO  InstanceParametersLazyfreeLazyExpire = "no"
)

// All allowed values of InstanceParameters enum
var AllowedInstanceParametersLazyfreeLazyExpireEnumValues = []InstanceParametersLazyfreeLazyExpire{
	"yes",
	"no",
}

func (v *InstanceParametersLazyfreeLazyExpire) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InstanceParametersLazyfreeLazyExpire(value)
	for _, existing := range AllowedInstanceParametersLazyfreeLazyExpireEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceParameters", value)
}

// NewInstanceParametersLazyfreeLazyExpireFromValue returns a pointer to a valid InstanceParametersLazyfreeLazyExpire
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceParametersLazyfreeLazyExpireFromValue(v string) (*InstanceParametersLazyfreeLazyExpire, error) {
	ev := InstanceParametersLazyfreeLazyExpire(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceParametersLazyfreeLazyExpire: valid values are %v", v, AllowedInstanceParametersLazyfreeLazyExpireEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceParametersLazyfreeLazyExpire) IsValid() bool {
	for _, existing := range AllowedInstanceParametersLazyfreeLazyExpireEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LazyfreeLazyExpireLazyfreeLazyExpire value
func (v InstanceParametersLazyfreeLazyExpire) Ptr() *InstanceParametersLazyfreeLazyExpire {
	return &v
}

type NullableInstanceParametersLazyfreeLazyExpire struct {
	value *InstanceParametersLazyfreeLazyExpire
	isSet bool
}

func (v NullableInstanceParametersLazyfreeLazyExpire) Get() *InstanceParametersLazyfreeLazyExpire {
	return v.value
}

func (v *NullableInstanceParametersLazyfreeLazyExpire) Set(val *InstanceParametersLazyfreeLazyExpire) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceParametersLazyfreeLazyExpire) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceParametersLazyfreeLazyExpire) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceParametersLazyfreeLazyExpire(val *InstanceParametersLazyfreeLazyExpire) *NullableInstanceParametersLazyfreeLazyExpire {
	return &NullableInstanceParametersLazyfreeLazyExpire{value: val, isSet: true}
}

func (v NullableInstanceParametersLazyfreeLazyExpire) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceParametersLazyfreeLazyExpire) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type InstanceParametersGetLazyfreeLazyExpireAttributeType = *InstanceParametersLazyfreeLazyExpire
type InstanceParametersGetLazyfreeLazyExpireArgType = InstanceParametersLazyfreeLazyExpire
type InstanceParametersGetLazyfreeLazyExpireRetType = InstanceParametersLazyfreeLazyExpire

func getInstanceParametersGetLazyfreeLazyExpireAttributeTypeOk(arg InstanceParametersGetLazyfreeLazyExpireAttributeType) (ret InstanceParametersGetLazyfreeLazyExpireRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetLazyfreeLazyExpireAttributeType(arg *InstanceParametersGetLazyfreeLazyExpireAttributeType, val InstanceParametersGetLazyfreeLazyExpireRetType) {
	*arg = &val
}

/*
	types and functions for lua-time-limit
*/

// isInteger
type InstanceParametersGetLuaTimeLimitAttributeType = *int64
type InstanceParametersGetLuaTimeLimitArgType = int64
type InstanceParametersGetLuaTimeLimitRetType = int64

func getInstanceParametersGetLuaTimeLimitAttributeTypeOk(arg InstanceParametersGetLuaTimeLimitAttributeType) (ret InstanceParametersGetLuaTimeLimitRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetLuaTimeLimitAttributeType(arg *InstanceParametersGetLuaTimeLimitAttributeType, val InstanceParametersGetLuaTimeLimitRetType) {
	*arg = &val
}

/*
	types and functions for max_disk_threshold
*/

// isInteger
type InstanceParametersGetMaxDiskThresholdAttributeType = *int64
type InstanceParametersGetMaxDiskThresholdArgType = int64
type InstanceParametersGetMaxDiskThresholdRetType = int64

func getInstanceParametersGetMaxDiskThresholdAttributeTypeOk(arg InstanceParametersGetMaxDiskThresholdAttributeType) (ret InstanceParametersGetMaxDiskThresholdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMaxDiskThresholdAttributeType(arg *InstanceParametersGetMaxDiskThresholdAttributeType, val InstanceParametersGetMaxDiskThresholdRetType) {
	*arg = &val
}

/*
	types and functions for maxclients
*/

// isInteger
type InstanceParametersGetMaxclientsAttributeType = *int64
type InstanceParametersGetMaxclientsArgType = int64
type InstanceParametersGetMaxclientsRetType = int64

func getInstanceParametersGetMaxclientsAttributeTypeOk(arg InstanceParametersGetMaxclientsAttributeType) (ret InstanceParametersGetMaxclientsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMaxclientsAttributeType(arg *InstanceParametersGetMaxclientsAttributeType, val InstanceParametersGetMaxclientsRetType) {
	*arg = &val
}

/*
	types and functions for maxmemory-policy
*/

// isEnum

// InstanceParametersMaxmemoryPolicy the model 'InstanceParameters'
type InstanceParametersMaxmemoryPolicy string

// List of MaxmemoryPolicy
const (
	INSTANCEPARAMETERSMAXMEMORY_POLICY_VOLATILE_LRU    InstanceParametersMaxmemoryPolicy = "volatile-lru"
	INSTANCEPARAMETERSMAXMEMORY_POLICY_ALLKEYS_LRU     InstanceParametersMaxmemoryPolicy = "allkeys-lru"
	INSTANCEPARAMETERSMAXMEMORY_POLICY_VOLATILE_RANDOM InstanceParametersMaxmemoryPolicy = "volatile-random"
	INSTANCEPARAMETERSMAXMEMORY_POLICY_ALLKEYS_RANDOM  InstanceParametersMaxmemoryPolicy = "allkeys-random"
	INSTANCEPARAMETERSMAXMEMORY_POLICY_VOLATILE_TTL    InstanceParametersMaxmemoryPolicy = "volatile-ttl"
	INSTANCEPARAMETERSMAXMEMORY_POLICY_NOEVICTION      InstanceParametersMaxmemoryPolicy = "noeviction"
)

// All allowed values of InstanceParameters enum
var AllowedInstanceParametersMaxmemoryPolicyEnumValues = []InstanceParametersMaxmemoryPolicy{
	"volatile-lru",
	"allkeys-lru",
	"volatile-random",
	"allkeys-random",
	"volatile-ttl",
	"noeviction",
}

func (v *InstanceParametersMaxmemoryPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InstanceParametersMaxmemoryPolicy(value)
	for _, existing := range AllowedInstanceParametersMaxmemoryPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceParameters", value)
}

// NewInstanceParametersMaxmemoryPolicyFromValue returns a pointer to a valid InstanceParametersMaxmemoryPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceParametersMaxmemoryPolicyFromValue(v string) (*InstanceParametersMaxmemoryPolicy, error) {
	ev := InstanceParametersMaxmemoryPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceParametersMaxmemoryPolicy: valid values are %v", v, AllowedInstanceParametersMaxmemoryPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceParametersMaxmemoryPolicy) IsValid() bool {
	for _, existing := range AllowedInstanceParametersMaxmemoryPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaxmemoryPolicyMaxmemoryPolicy value
func (v InstanceParametersMaxmemoryPolicy) Ptr() *InstanceParametersMaxmemoryPolicy {
	return &v
}

type NullableInstanceParametersMaxmemoryPolicy struct {
	value *InstanceParametersMaxmemoryPolicy
	isSet bool
}

func (v NullableInstanceParametersMaxmemoryPolicy) Get() *InstanceParametersMaxmemoryPolicy {
	return v.value
}

func (v *NullableInstanceParametersMaxmemoryPolicy) Set(val *InstanceParametersMaxmemoryPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceParametersMaxmemoryPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceParametersMaxmemoryPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceParametersMaxmemoryPolicy(val *InstanceParametersMaxmemoryPolicy) *NullableInstanceParametersMaxmemoryPolicy {
	return &NullableInstanceParametersMaxmemoryPolicy{value: val, isSet: true}
}

func (v NullableInstanceParametersMaxmemoryPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceParametersMaxmemoryPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type InstanceParametersGetMaxmemoryPolicyAttributeType = *InstanceParametersMaxmemoryPolicy
type InstanceParametersGetMaxmemoryPolicyArgType = InstanceParametersMaxmemoryPolicy
type InstanceParametersGetMaxmemoryPolicyRetType = InstanceParametersMaxmemoryPolicy

func getInstanceParametersGetMaxmemoryPolicyAttributeTypeOk(arg InstanceParametersGetMaxmemoryPolicyAttributeType) (ret InstanceParametersGetMaxmemoryPolicyRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMaxmemoryPolicyAttributeType(arg *InstanceParametersGetMaxmemoryPolicyAttributeType, val InstanceParametersGetMaxmemoryPolicyRetType) {
	*arg = &val
}

/*
	types and functions for maxmemory-samples
*/

// isInteger
type InstanceParametersGetMaxmemorySamplesAttributeType = *int64
type InstanceParametersGetMaxmemorySamplesArgType = int64
type InstanceParametersGetMaxmemorySamplesRetType = int64

func getInstanceParametersGetMaxmemorySamplesAttributeTypeOk(arg InstanceParametersGetMaxmemorySamplesAttributeType) (ret InstanceParametersGetMaxmemorySamplesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMaxmemorySamplesAttributeType(arg *InstanceParametersGetMaxmemorySamplesAttributeType, val InstanceParametersGetMaxmemorySamplesRetType) {
	*arg = &val
}

/*
	types and functions for metrics_frequency
*/

// isInteger
type InstanceParametersGetMetricsFrequencyAttributeType = *int64
type InstanceParametersGetMetricsFrequencyArgType = int64
type InstanceParametersGetMetricsFrequencyRetType = int64

func getInstanceParametersGetMetricsFrequencyAttributeTypeOk(arg InstanceParametersGetMetricsFrequencyAttributeType) (ret InstanceParametersGetMetricsFrequencyRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMetricsFrequencyAttributeType(arg *InstanceParametersGetMetricsFrequencyAttributeType, val InstanceParametersGetMetricsFrequencyRetType) {
	*arg = &val
}

/*
	types and functions for metrics_prefix
*/

// isNotNullableString
type InstanceParametersGetMetricsPrefixAttributeType = *string

func getInstanceParametersGetMetricsPrefixAttributeTypeOk(arg InstanceParametersGetMetricsPrefixAttributeType) (ret InstanceParametersGetMetricsPrefixRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMetricsPrefixAttributeType(arg *InstanceParametersGetMetricsPrefixAttributeType, val InstanceParametersGetMetricsPrefixRetType) {
	*arg = &val
}

type InstanceParametersGetMetricsPrefixArgType = string
type InstanceParametersGetMetricsPrefixRetType = string

/*
	types and functions for min_replicas_max_lag
*/

// isInteger
type InstanceParametersGetMinReplicasMaxLagAttributeType = *int64
type InstanceParametersGetMinReplicasMaxLagArgType = int64
type InstanceParametersGetMinReplicasMaxLagRetType = int64

func getInstanceParametersGetMinReplicasMaxLagAttributeTypeOk(arg InstanceParametersGetMinReplicasMaxLagAttributeType) (ret InstanceParametersGetMinReplicasMaxLagRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMinReplicasMaxLagAttributeType(arg *InstanceParametersGetMinReplicasMaxLagAttributeType, val InstanceParametersGetMinReplicasMaxLagRetType) {
	*arg = &val
}

/*
	types and functions for monitoring_instance_id
*/

// isNotNullableString
type InstanceParametersGetMonitoringInstanceIdAttributeType = *string

func getInstanceParametersGetMonitoringInstanceIdAttributeTypeOk(arg InstanceParametersGetMonitoringInstanceIdAttributeType) (ret InstanceParametersGetMonitoringInstanceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetMonitoringInstanceIdAttributeType(arg *InstanceParametersGetMonitoringInstanceIdAttributeType, val InstanceParametersGetMonitoringInstanceIdRetType) {
	*arg = &val
}

type InstanceParametersGetMonitoringInstanceIdArgType = string
type InstanceParametersGetMonitoringInstanceIdRetType = string

/*
	types and functions for notify-keyspace-events
*/

// isNotNullableString
type InstanceParametersGetNotifyKeyspaceEventsAttributeType = *string

func getInstanceParametersGetNotifyKeyspaceEventsAttributeTypeOk(arg InstanceParametersGetNotifyKeyspaceEventsAttributeType) (ret InstanceParametersGetNotifyKeyspaceEventsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetNotifyKeyspaceEventsAttributeType(arg *InstanceParametersGetNotifyKeyspaceEventsAttributeType, val InstanceParametersGetNotifyKeyspaceEventsRetType) {
	*arg = &val
}

type InstanceParametersGetNotifyKeyspaceEventsArgType = string
type InstanceParametersGetNotifyKeyspaceEventsRetType = string

/*
	types and functions for sgw_acl
*/

// isNotNullableString
type InstanceParametersGetSgwAclAttributeType = *string

func getInstanceParametersGetSgwAclAttributeTypeOk(arg InstanceParametersGetSgwAclAttributeType) (ret InstanceParametersGetSgwAclRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetSgwAclAttributeType(arg *InstanceParametersGetSgwAclAttributeType, val InstanceParametersGetSgwAclRetType) {
	*arg = &val
}

type InstanceParametersGetSgwAclArgType = string
type InstanceParametersGetSgwAclRetType = string

/*
	types and functions for snapshot
*/

// isNotNullableString
type InstanceParametersGetSnapshotAttributeType = *string

func getInstanceParametersGetSnapshotAttributeTypeOk(arg InstanceParametersGetSnapshotAttributeType) (ret InstanceParametersGetSnapshotRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetSnapshotAttributeType(arg *InstanceParametersGetSnapshotAttributeType, val InstanceParametersGetSnapshotRetType) {
	*arg = &val
}

type InstanceParametersGetSnapshotArgType = string
type InstanceParametersGetSnapshotRetType = string

/*
	types and functions for syslog
*/

// isArray
type InstanceParametersGetSyslogAttributeType = *[]string
type InstanceParametersGetSyslogArgType = []string
type InstanceParametersGetSyslogRetType = []string

func getInstanceParametersGetSyslogAttributeTypeOk(arg InstanceParametersGetSyslogAttributeType) (ret InstanceParametersGetSyslogRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetSyslogAttributeType(arg *InstanceParametersGetSyslogAttributeType, val InstanceParametersGetSyslogRetType) {
	*arg = &val
}

/*
	types and functions for tls-ciphers
*/

// isArray
type InstanceParametersGetTlsCiphersAttributeType = *[]string
type InstanceParametersGetTlsCiphersArgType = []string
type InstanceParametersGetTlsCiphersRetType = []string

func getInstanceParametersGetTlsCiphersAttributeTypeOk(arg InstanceParametersGetTlsCiphersAttributeType) (ret InstanceParametersGetTlsCiphersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetTlsCiphersAttributeType(arg *InstanceParametersGetTlsCiphersAttributeType, val InstanceParametersGetTlsCiphersRetType) {
	*arg = &val
}

/*
	types and functions for tls-ciphersuites
*/

// isNotNullableString
type InstanceParametersGetTlsCiphersuitesAttributeType = *string

func getInstanceParametersGetTlsCiphersuitesAttributeTypeOk(arg InstanceParametersGetTlsCiphersuitesAttributeType) (ret InstanceParametersGetTlsCiphersuitesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetTlsCiphersuitesAttributeType(arg *InstanceParametersGetTlsCiphersuitesAttributeType, val InstanceParametersGetTlsCiphersuitesRetType) {
	*arg = &val
}

type InstanceParametersGetTlsCiphersuitesArgType = string
type InstanceParametersGetTlsCiphersuitesRetType = string

/*
	types and functions for tls-protocols
*/

// isEnum

// InstanceParametersTlsProtocols the model 'InstanceParameters'
type InstanceParametersTlsProtocols string

// List of TlsProtocols
const (
	INSTANCEPARAMETERSTLS_PROTOCOLS__2 InstanceParametersTlsProtocols = "TLSv1.2"
	INSTANCEPARAMETERSTLS_PROTOCOLS__3 InstanceParametersTlsProtocols = "TLSv1.3"
)

// All allowed values of InstanceParameters enum
var AllowedInstanceParametersTlsProtocolsEnumValues = []InstanceParametersTlsProtocols{
	"TLSv1.2",
	"TLSv1.3",
}

func (v *InstanceParametersTlsProtocols) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := InstanceParametersTlsProtocols(value)
	for _, existing := range AllowedInstanceParametersTlsProtocolsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceParameters", value)
}

// NewInstanceParametersTlsProtocolsFromValue returns a pointer to a valid InstanceParametersTlsProtocols
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceParametersTlsProtocolsFromValue(v string) (*InstanceParametersTlsProtocols, error) {
	ev := InstanceParametersTlsProtocols(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceParametersTlsProtocols: valid values are %v", v, AllowedInstanceParametersTlsProtocolsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceParametersTlsProtocols) IsValid() bool {
	for _, existing := range AllowedInstanceParametersTlsProtocolsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TlsProtocolsTlsProtocols value
func (v InstanceParametersTlsProtocols) Ptr() *InstanceParametersTlsProtocols {
	return &v
}

type NullableInstanceParametersTlsProtocols struct {
	value *InstanceParametersTlsProtocols
	isSet bool
}

func (v NullableInstanceParametersTlsProtocols) Get() *InstanceParametersTlsProtocols {
	return v.value
}

func (v *NullableInstanceParametersTlsProtocols) Set(val *InstanceParametersTlsProtocols) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceParametersTlsProtocols) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceParametersTlsProtocols) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceParametersTlsProtocols(val *InstanceParametersTlsProtocols) *NullableInstanceParametersTlsProtocols {
	return &NullableInstanceParametersTlsProtocols{value: val, isSet: true}
}

func (v NullableInstanceParametersTlsProtocols) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceParametersTlsProtocols) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type InstanceParametersGetTlsProtocolsAttributeType = *InstanceParametersTlsProtocols
type InstanceParametersGetTlsProtocolsArgType = InstanceParametersTlsProtocols
type InstanceParametersGetTlsProtocolsRetType = InstanceParametersTlsProtocols

func getInstanceParametersGetTlsProtocolsAttributeTypeOk(arg InstanceParametersGetTlsProtocolsAttributeType) (ret InstanceParametersGetTlsProtocolsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setInstanceParametersGetTlsProtocolsAttributeType(arg *InstanceParametersGetTlsProtocolsAttributeType, val InstanceParametersGetTlsProtocolsRetType) {
	*arg = &val
}

// InstanceParameters struct for InstanceParameters
type InstanceParameters struct {
	// The unit is milliseconds.
	// Can be cast to int32 without loss of precision.
	DownAfterMilliseconds InstanceParametersGetDownAfterMillisecondsAttributeType `json:"down-after-milliseconds,omitempty"`
	EnableMonitoring      InstanceParametersgetEnableMonitoringAttributeType      `json:"enable_monitoring,omitempty"`
	// The unit is milliseconds.
	// Can be cast to int32 without loss of precision.
	FailoverTimeout InstanceParametersGetFailoverTimeoutAttributeType `json:"failover-timeout,omitempty"`
	// If you want to monitor your service with Graphite, you can set the custom parameter graphite. It expects the host and port where the Graphite metrics should be sent to.
	Graphite             InstanceParametersGetGraphiteAttributeType             `json:"graphite,omitempty"`
	LazyfreeLazyEviction InstanceParametersGetLazyfreeLazyEvictionAttributeType `json:"lazyfree-lazy-eviction,omitempty"`
	LazyfreeLazyExpire   InstanceParametersGetLazyfreeLazyExpireAttributeType   `json:"lazyfree-lazy-expire,omitempty"`
	// Can be cast to int32 without loss of precision.
	LuaTimeLimit InstanceParametersGetLuaTimeLimitAttributeType `json:"lua-time-limit,omitempty"`
	// This component monitors ephemeral and persistent disk usage. If one of these disk usages reaches the default configured threshold of 80%, the a9s Parachute stops all processes on that node.
	// Can be cast to int32 without loss of precision.
	MaxDiskThreshold InstanceParametersGetMaxDiskThresholdAttributeType `json:"max_disk_threshold,omitempty"`
	// Can be cast to int32 without loss of precision.
	Maxclients      InstanceParametersGetMaxclientsAttributeType      `json:"maxclients,omitempty"`
	MaxmemoryPolicy InstanceParametersGetMaxmemoryPolicyAttributeType `json:"maxmemory-policy,omitempty"`
	// Can be cast to int32 without loss of precision.
	MaxmemorySamples InstanceParametersGetMaxmemorySamplesAttributeType `json:"maxmemory-samples,omitempty"`
	// Frequency of metrics being emitted in seconds
	// Can be cast to int32 without loss of precision.
	MetricsFrequency InstanceParametersGetMetricsFrequencyAttributeType `json:"metrics_frequency,omitempty"`
	// Depending on your graphite provider, you might need to prefix the metrics with a certain value, like an API key for example.
	MetricsPrefix InstanceParametersGetMetricsPrefixAttributeType `json:"metrics_prefix,omitempty"`
	// The unit is seconds.
	// Can be cast to int32 without loss of precision.
	MinReplicasMaxLag    InstanceParametersGetMinReplicasMaxLagAttributeType    `json:"min_replicas_max_lag,omitempty"`
	MonitoringInstanceId InstanceParametersGetMonitoringInstanceIdAttributeType `json:"monitoring_instance_id,omitempty"`
	// The allowed value must include the following characters only: [K,E,g,$,l,s,h,z,x,e,A,t]
	NotifyKeyspaceEvents InstanceParametersGetNotifyKeyspaceEventsAttributeType `json:"notify-keyspace-events,omitempty"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl InstanceParametersGetSgwAclAttributeType `json:"sgw_acl,omitempty"`
	// This setting must follow the original Redis configuration for RDB.
	Snapshot        InstanceParametersGetSnapshotAttributeType        `json:"snapshot,omitempty"`
	Syslog          InstanceParametersGetSyslogAttributeType          `json:"syslog,omitempty"`
	TlsCiphers      InstanceParametersGetTlsCiphersAttributeType      `json:"tls-ciphers,omitempty"`
	TlsCiphersuites InstanceParametersGetTlsCiphersuitesAttributeType `json:"tls-ciphersuites,omitempty"`
	TlsProtocols    InstanceParametersGetTlsProtocolsAttributeType    `json:"tls-protocols,omitempty"`
}

// NewInstanceParameters instantiates a new InstanceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceParameters() *InstanceParameters {
	this := InstanceParameters{}
	return &this
}

// NewInstanceParametersWithDefaults instantiates a new InstanceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceParametersWithDefaults() *InstanceParameters {
	this := InstanceParameters{}
	var downAfterMilliseconds int64 = 10000
	this.DownAfterMilliseconds = &downAfterMilliseconds
	var enableMonitoring bool = false
	this.EnableMonitoring = &enableMonitoring
	var failoverTimeout int64 = 30000
	this.FailoverTimeout = &failoverTimeout
	var lazyfreeLazyEviction InstanceParametersLazyfreeLazyEviction = "no"
	this.LazyfreeLazyEviction = &lazyfreeLazyEviction
	var lazyfreeLazyExpire InstanceParametersLazyfreeLazyExpire = "no"
	this.LazyfreeLazyExpire = &lazyfreeLazyExpire
	var luaTimeLimit int64 = 5000
	this.LuaTimeLimit = &luaTimeLimit
	var maxDiskThreshold int64 = 80
	this.MaxDiskThreshold = &maxDiskThreshold
	var maxclients int64 = 10000
	this.Maxclients = &maxclients
	var maxmemoryPolicy InstanceParametersMaxmemoryPolicy = "volatile-lru"
	this.MaxmemoryPolicy = &maxmemoryPolicy
	var maxmemorySamples int64 = 5
	this.MaxmemorySamples = &maxmemorySamples
	var metricsFrequency int64 = 10
	this.MetricsFrequency = &metricsFrequency
	var minReplicasMaxLag int64 = 10
	this.MinReplicasMaxLag = &minReplicasMaxLag
	var notifyKeyspaceEvents string = ""
	this.NotifyKeyspaceEvents = &notifyKeyspaceEvents
	return &this
}

// GetDownAfterMilliseconds returns the DownAfterMilliseconds field value if set, zero value otherwise.
func (o *InstanceParameters) GetDownAfterMilliseconds() (res InstanceParametersGetDownAfterMillisecondsRetType) {
	res, _ = o.GetDownAfterMillisecondsOk()
	return
}

// GetDownAfterMillisecondsOk returns a tuple with the DownAfterMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetDownAfterMillisecondsOk() (ret InstanceParametersGetDownAfterMillisecondsRetType, ok bool) {
	return getInstanceParametersGetDownAfterMillisecondsAttributeTypeOk(o.DownAfterMilliseconds)
}

// HasDownAfterMilliseconds returns a boolean if a field has been set.
func (o *InstanceParameters) HasDownAfterMilliseconds() bool {
	_, ok := o.GetDownAfterMillisecondsOk()
	return ok
}

// SetDownAfterMilliseconds gets a reference to the given int64 and assigns it to the DownAfterMilliseconds field.
func (o *InstanceParameters) SetDownAfterMilliseconds(v InstanceParametersGetDownAfterMillisecondsRetType) {
	setInstanceParametersGetDownAfterMillisecondsAttributeType(&o.DownAfterMilliseconds, v)
}

// GetEnableMonitoring returns the EnableMonitoring field value if set, zero value otherwise.
func (o *InstanceParameters) GetEnableMonitoring() (res InstanceParametersgetEnableMonitoringRetType) {
	res, _ = o.GetEnableMonitoringOk()
	return
}

// GetEnableMonitoringOk returns a tuple with the EnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetEnableMonitoringOk() (ret InstanceParametersgetEnableMonitoringRetType, ok bool) {
	return getInstanceParametersgetEnableMonitoringAttributeTypeOk(o.EnableMonitoring)
}

// HasEnableMonitoring returns a boolean if a field has been set.
func (o *InstanceParameters) HasEnableMonitoring() bool {
	_, ok := o.GetEnableMonitoringOk()
	return ok
}

// SetEnableMonitoring gets a reference to the given bool and assigns it to the EnableMonitoring field.
func (o *InstanceParameters) SetEnableMonitoring(v InstanceParametersgetEnableMonitoringRetType) {
	setInstanceParametersgetEnableMonitoringAttributeType(&o.EnableMonitoring, v)
}

// GetFailoverTimeout returns the FailoverTimeout field value if set, zero value otherwise.
func (o *InstanceParameters) GetFailoverTimeout() (res InstanceParametersGetFailoverTimeoutRetType) {
	res, _ = o.GetFailoverTimeoutOk()
	return
}

// GetFailoverTimeoutOk returns a tuple with the FailoverTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFailoverTimeoutOk() (ret InstanceParametersGetFailoverTimeoutRetType, ok bool) {
	return getInstanceParametersGetFailoverTimeoutAttributeTypeOk(o.FailoverTimeout)
}

// HasFailoverTimeout returns a boolean if a field has been set.
func (o *InstanceParameters) HasFailoverTimeout() bool {
	_, ok := o.GetFailoverTimeoutOk()
	return ok
}

// SetFailoverTimeout gets a reference to the given int64 and assigns it to the FailoverTimeout field.
func (o *InstanceParameters) SetFailoverTimeout(v InstanceParametersGetFailoverTimeoutRetType) {
	setInstanceParametersGetFailoverTimeoutAttributeType(&o.FailoverTimeout, v)
}

// GetGraphite returns the Graphite field value if set, zero value otherwise.
func (o *InstanceParameters) GetGraphite() (res InstanceParametersGetGraphiteRetType) {
	res, _ = o.GetGraphiteOk()
	return
}

// GetGraphiteOk returns a tuple with the Graphite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetGraphiteOk() (ret InstanceParametersGetGraphiteRetType, ok bool) {
	return getInstanceParametersGetGraphiteAttributeTypeOk(o.Graphite)
}

// HasGraphite returns a boolean if a field has been set.
func (o *InstanceParameters) HasGraphite() bool {
	_, ok := o.GetGraphiteOk()
	return ok
}

// SetGraphite gets a reference to the given string and assigns it to the Graphite field.
func (o *InstanceParameters) SetGraphite(v InstanceParametersGetGraphiteRetType) {
	setInstanceParametersGetGraphiteAttributeType(&o.Graphite, v)
}

// GetLazyfreeLazyEviction returns the LazyfreeLazyEviction field value if set, zero value otherwise.
func (o *InstanceParameters) GetLazyfreeLazyEviction() (res InstanceParametersGetLazyfreeLazyEvictionRetType) {
	res, _ = o.GetLazyfreeLazyEvictionOk()
	return
}

// GetLazyfreeLazyEvictionOk returns a tuple with the LazyfreeLazyEviction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetLazyfreeLazyEvictionOk() (ret InstanceParametersGetLazyfreeLazyEvictionRetType, ok bool) {
	return getInstanceParametersGetLazyfreeLazyEvictionAttributeTypeOk(o.LazyfreeLazyEviction)
}

// HasLazyfreeLazyEviction returns a boolean if a field has been set.
func (o *InstanceParameters) HasLazyfreeLazyEviction() bool {
	_, ok := o.GetLazyfreeLazyEvictionOk()
	return ok
}

// SetLazyfreeLazyEviction gets a reference to the given string and assigns it to the LazyfreeLazyEviction field.
func (o *InstanceParameters) SetLazyfreeLazyEviction(v InstanceParametersGetLazyfreeLazyEvictionRetType) {
	setInstanceParametersGetLazyfreeLazyEvictionAttributeType(&o.LazyfreeLazyEviction, v)
}

// GetLazyfreeLazyExpire returns the LazyfreeLazyExpire field value if set, zero value otherwise.
func (o *InstanceParameters) GetLazyfreeLazyExpire() (res InstanceParametersGetLazyfreeLazyExpireRetType) {
	res, _ = o.GetLazyfreeLazyExpireOk()
	return
}

// GetLazyfreeLazyExpireOk returns a tuple with the LazyfreeLazyExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetLazyfreeLazyExpireOk() (ret InstanceParametersGetLazyfreeLazyExpireRetType, ok bool) {
	return getInstanceParametersGetLazyfreeLazyExpireAttributeTypeOk(o.LazyfreeLazyExpire)
}

// HasLazyfreeLazyExpire returns a boolean if a field has been set.
func (o *InstanceParameters) HasLazyfreeLazyExpire() bool {
	_, ok := o.GetLazyfreeLazyExpireOk()
	return ok
}

// SetLazyfreeLazyExpire gets a reference to the given string and assigns it to the LazyfreeLazyExpire field.
func (o *InstanceParameters) SetLazyfreeLazyExpire(v InstanceParametersGetLazyfreeLazyExpireRetType) {
	setInstanceParametersGetLazyfreeLazyExpireAttributeType(&o.LazyfreeLazyExpire, v)
}

// GetLuaTimeLimit returns the LuaTimeLimit field value if set, zero value otherwise.
func (o *InstanceParameters) GetLuaTimeLimit() (res InstanceParametersGetLuaTimeLimitRetType) {
	res, _ = o.GetLuaTimeLimitOk()
	return
}

// GetLuaTimeLimitOk returns a tuple with the LuaTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetLuaTimeLimitOk() (ret InstanceParametersGetLuaTimeLimitRetType, ok bool) {
	return getInstanceParametersGetLuaTimeLimitAttributeTypeOk(o.LuaTimeLimit)
}

// HasLuaTimeLimit returns a boolean if a field has been set.
func (o *InstanceParameters) HasLuaTimeLimit() bool {
	_, ok := o.GetLuaTimeLimitOk()
	return ok
}

// SetLuaTimeLimit gets a reference to the given int64 and assigns it to the LuaTimeLimit field.
func (o *InstanceParameters) SetLuaTimeLimit(v InstanceParametersGetLuaTimeLimitRetType) {
	setInstanceParametersGetLuaTimeLimitAttributeType(&o.LuaTimeLimit, v)
}

// GetMaxDiskThreshold returns the MaxDiskThreshold field value if set, zero value otherwise.
func (o *InstanceParameters) GetMaxDiskThreshold() (res InstanceParametersGetMaxDiskThresholdRetType) {
	res, _ = o.GetMaxDiskThresholdOk()
	return
}

// GetMaxDiskThresholdOk returns a tuple with the MaxDiskThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMaxDiskThresholdOk() (ret InstanceParametersGetMaxDiskThresholdRetType, ok bool) {
	return getInstanceParametersGetMaxDiskThresholdAttributeTypeOk(o.MaxDiskThreshold)
}

// HasMaxDiskThreshold returns a boolean if a field has been set.
func (o *InstanceParameters) HasMaxDiskThreshold() bool {
	_, ok := o.GetMaxDiskThresholdOk()
	return ok
}

// SetMaxDiskThreshold gets a reference to the given int64 and assigns it to the MaxDiskThreshold field.
func (o *InstanceParameters) SetMaxDiskThreshold(v InstanceParametersGetMaxDiskThresholdRetType) {
	setInstanceParametersGetMaxDiskThresholdAttributeType(&o.MaxDiskThreshold, v)
}

// GetMaxclients returns the Maxclients field value if set, zero value otherwise.
func (o *InstanceParameters) GetMaxclients() (res InstanceParametersGetMaxclientsRetType) {
	res, _ = o.GetMaxclientsOk()
	return
}

// GetMaxclientsOk returns a tuple with the Maxclients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMaxclientsOk() (ret InstanceParametersGetMaxclientsRetType, ok bool) {
	return getInstanceParametersGetMaxclientsAttributeTypeOk(o.Maxclients)
}

// HasMaxclients returns a boolean if a field has been set.
func (o *InstanceParameters) HasMaxclients() bool {
	_, ok := o.GetMaxclientsOk()
	return ok
}

// SetMaxclients gets a reference to the given int64 and assigns it to the Maxclients field.
func (o *InstanceParameters) SetMaxclients(v InstanceParametersGetMaxclientsRetType) {
	setInstanceParametersGetMaxclientsAttributeType(&o.Maxclients, v)
}

// GetMaxmemoryPolicy returns the MaxmemoryPolicy field value if set, zero value otherwise.
func (o *InstanceParameters) GetMaxmemoryPolicy() (res InstanceParametersGetMaxmemoryPolicyRetType) {
	res, _ = o.GetMaxmemoryPolicyOk()
	return
}

// GetMaxmemoryPolicyOk returns a tuple with the MaxmemoryPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMaxmemoryPolicyOk() (ret InstanceParametersGetMaxmemoryPolicyRetType, ok bool) {
	return getInstanceParametersGetMaxmemoryPolicyAttributeTypeOk(o.MaxmemoryPolicy)
}

// HasMaxmemoryPolicy returns a boolean if a field has been set.
func (o *InstanceParameters) HasMaxmemoryPolicy() bool {
	_, ok := o.GetMaxmemoryPolicyOk()
	return ok
}

// SetMaxmemoryPolicy gets a reference to the given string and assigns it to the MaxmemoryPolicy field.
func (o *InstanceParameters) SetMaxmemoryPolicy(v InstanceParametersGetMaxmemoryPolicyRetType) {
	setInstanceParametersGetMaxmemoryPolicyAttributeType(&o.MaxmemoryPolicy, v)
}

// GetMaxmemorySamples returns the MaxmemorySamples field value if set, zero value otherwise.
func (o *InstanceParameters) GetMaxmemorySamples() (res InstanceParametersGetMaxmemorySamplesRetType) {
	res, _ = o.GetMaxmemorySamplesOk()
	return
}

// GetMaxmemorySamplesOk returns a tuple with the MaxmemorySamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMaxmemorySamplesOk() (ret InstanceParametersGetMaxmemorySamplesRetType, ok bool) {
	return getInstanceParametersGetMaxmemorySamplesAttributeTypeOk(o.MaxmemorySamples)
}

// HasMaxmemorySamples returns a boolean if a field has been set.
func (o *InstanceParameters) HasMaxmemorySamples() bool {
	_, ok := o.GetMaxmemorySamplesOk()
	return ok
}

// SetMaxmemorySamples gets a reference to the given int64 and assigns it to the MaxmemorySamples field.
func (o *InstanceParameters) SetMaxmemorySamples(v InstanceParametersGetMaxmemorySamplesRetType) {
	setInstanceParametersGetMaxmemorySamplesAttributeType(&o.MaxmemorySamples, v)
}

// GetMetricsFrequency returns the MetricsFrequency field value if set, zero value otherwise.
func (o *InstanceParameters) GetMetricsFrequency() (res InstanceParametersGetMetricsFrequencyRetType) {
	res, _ = o.GetMetricsFrequencyOk()
	return
}

// GetMetricsFrequencyOk returns a tuple with the MetricsFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMetricsFrequencyOk() (ret InstanceParametersGetMetricsFrequencyRetType, ok bool) {
	return getInstanceParametersGetMetricsFrequencyAttributeTypeOk(o.MetricsFrequency)
}

// HasMetricsFrequency returns a boolean if a field has been set.
func (o *InstanceParameters) HasMetricsFrequency() bool {
	_, ok := o.GetMetricsFrequencyOk()
	return ok
}

// SetMetricsFrequency gets a reference to the given int64 and assigns it to the MetricsFrequency field.
func (o *InstanceParameters) SetMetricsFrequency(v InstanceParametersGetMetricsFrequencyRetType) {
	setInstanceParametersGetMetricsFrequencyAttributeType(&o.MetricsFrequency, v)
}

// GetMetricsPrefix returns the MetricsPrefix field value if set, zero value otherwise.
func (o *InstanceParameters) GetMetricsPrefix() (res InstanceParametersGetMetricsPrefixRetType) {
	res, _ = o.GetMetricsPrefixOk()
	return
}

// GetMetricsPrefixOk returns a tuple with the MetricsPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMetricsPrefixOk() (ret InstanceParametersGetMetricsPrefixRetType, ok bool) {
	return getInstanceParametersGetMetricsPrefixAttributeTypeOk(o.MetricsPrefix)
}

// HasMetricsPrefix returns a boolean if a field has been set.
func (o *InstanceParameters) HasMetricsPrefix() bool {
	_, ok := o.GetMetricsPrefixOk()
	return ok
}

// SetMetricsPrefix gets a reference to the given string and assigns it to the MetricsPrefix field.
func (o *InstanceParameters) SetMetricsPrefix(v InstanceParametersGetMetricsPrefixRetType) {
	setInstanceParametersGetMetricsPrefixAttributeType(&o.MetricsPrefix, v)
}

// GetMinReplicasMaxLag returns the MinReplicasMaxLag field value if set, zero value otherwise.
func (o *InstanceParameters) GetMinReplicasMaxLag() (res InstanceParametersGetMinReplicasMaxLagRetType) {
	res, _ = o.GetMinReplicasMaxLagOk()
	return
}

// GetMinReplicasMaxLagOk returns a tuple with the MinReplicasMaxLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMinReplicasMaxLagOk() (ret InstanceParametersGetMinReplicasMaxLagRetType, ok bool) {
	return getInstanceParametersGetMinReplicasMaxLagAttributeTypeOk(o.MinReplicasMaxLag)
}

// HasMinReplicasMaxLag returns a boolean if a field has been set.
func (o *InstanceParameters) HasMinReplicasMaxLag() bool {
	_, ok := o.GetMinReplicasMaxLagOk()
	return ok
}

// SetMinReplicasMaxLag gets a reference to the given int64 and assigns it to the MinReplicasMaxLag field.
func (o *InstanceParameters) SetMinReplicasMaxLag(v InstanceParametersGetMinReplicasMaxLagRetType) {
	setInstanceParametersGetMinReplicasMaxLagAttributeType(&o.MinReplicasMaxLag, v)
}

// GetMonitoringInstanceId returns the MonitoringInstanceId field value if set, zero value otherwise.
func (o *InstanceParameters) GetMonitoringInstanceId() (res InstanceParametersGetMonitoringInstanceIdRetType) {
	res, _ = o.GetMonitoringInstanceIdOk()
	return
}

// GetMonitoringInstanceIdOk returns a tuple with the MonitoringInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMonitoringInstanceIdOk() (ret InstanceParametersGetMonitoringInstanceIdRetType, ok bool) {
	return getInstanceParametersGetMonitoringInstanceIdAttributeTypeOk(o.MonitoringInstanceId)
}

// HasMonitoringInstanceId returns a boolean if a field has been set.
func (o *InstanceParameters) HasMonitoringInstanceId() bool {
	_, ok := o.GetMonitoringInstanceIdOk()
	return ok
}

// SetMonitoringInstanceId gets a reference to the given string and assigns it to the MonitoringInstanceId field.
func (o *InstanceParameters) SetMonitoringInstanceId(v InstanceParametersGetMonitoringInstanceIdRetType) {
	setInstanceParametersGetMonitoringInstanceIdAttributeType(&o.MonitoringInstanceId, v)
}

// GetNotifyKeyspaceEvents returns the NotifyKeyspaceEvents field value if set, zero value otherwise.
func (o *InstanceParameters) GetNotifyKeyspaceEvents() (res InstanceParametersGetNotifyKeyspaceEventsRetType) {
	res, _ = o.GetNotifyKeyspaceEventsOk()
	return
}

// GetNotifyKeyspaceEventsOk returns a tuple with the NotifyKeyspaceEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetNotifyKeyspaceEventsOk() (ret InstanceParametersGetNotifyKeyspaceEventsRetType, ok bool) {
	return getInstanceParametersGetNotifyKeyspaceEventsAttributeTypeOk(o.NotifyKeyspaceEvents)
}

// HasNotifyKeyspaceEvents returns a boolean if a field has been set.
func (o *InstanceParameters) HasNotifyKeyspaceEvents() bool {
	_, ok := o.GetNotifyKeyspaceEventsOk()
	return ok
}

// SetNotifyKeyspaceEvents gets a reference to the given string and assigns it to the NotifyKeyspaceEvents field.
func (o *InstanceParameters) SetNotifyKeyspaceEvents(v InstanceParametersGetNotifyKeyspaceEventsRetType) {
	setInstanceParametersGetNotifyKeyspaceEventsAttributeType(&o.NotifyKeyspaceEvents, v)
}

// GetSgwAcl returns the SgwAcl field value if set, zero value otherwise.
func (o *InstanceParameters) GetSgwAcl() (res InstanceParametersGetSgwAclRetType) {
	res, _ = o.GetSgwAclOk()
	return
}

// GetSgwAclOk returns a tuple with the SgwAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetSgwAclOk() (ret InstanceParametersGetSgwAclRetType, ok bool) {
	return getInstanceParametersGetSgwAclAttributeTypeOk(o.SgwAcl)
}

// HasSgwAcl returns a boolean if a field has been set.
func (o *InstanceParameters) HasSgwAcl() bool {
	_, ok := o.GetSgwAclOk()
	return ok
}

// SetSgwAcl gets a reference to the given string and assigns it to the SgwAcl field.
func (o *InstanceParameters) SetSgwAcl(v InstanceParametersGetSgwAclRetType) {
	setInstanceParametersGetSgwAclAttributeType(&o.SgwAcl, v)
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *InstanceParameters) GetSnapshot() (res InstanceParametersGetSnapshotRetType) {
	res, _ = o.GetSnapshotOk()
	return
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetSnapshotOk() (ret InstanceParametersGetSnapshotRetType, ok bool) {
	return getInstanceParametersGetSnapshotAttributeTypeOk(o.Snapshot)
}

// HasSnapshot returns a boolean if a field has been set.
func (o *InstanceParameters) HasSnapshot() bool {
	_, ok := o.GetSnapshotOk()
	return ok
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *InstanceParameters) SetSnapshot(v InstanceParametersGetSnapshotRetType) {
	setInstanceParametersGetSnapshotAttributeType(&o.Snapshot, v)
}

// GetSyslog returns the Syslog field value if set, zero value otherwise.
func (o *InstanceParameters) GetSyslog() (res InstanceParametersGetSyslogRetType) {
	res, _ = o.GetSyslogOk()
	return
}

// GetSyslogOk returns a tuple with the Syslog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetSyslogOk() (ret InstanceParametersGetSyslogRetType, ok bool) {
	return getInstanceParametersGetSyslogAttributeTypeOk(o.Syslog)
}

// HasSyslog returns a boolean if a field has been set.
func (o *InstanceParameters) HasSyslog() bool {
	_, ok := o.GetSyslogOk()
	return ok
}

// SetSyslog gets a reference to the given []string and assigns it to the Syslog field.
func (o *InstanceParameters) SetSyslog(v InstanceParametersGetSyslogRetType) {
	setInstanceParametersGetSyslogAttributeType(&o.Syslog, v)
}

// GetTlsCiphers returns the TlsCiphers field value if set, zero value otherwise.
func (o *InstanceParameters) GetTlsCiphers() (res InstanceParametersGetTlsCiphersRetType) {
	res, _ = o.GetTlsCiphersOk()
	return
}

// GetTlsCiphersOk returns a tuple with the TlsCiphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetTlsCiphersOk() (ret InstanceParametersGetTlsCiphersRetType, ok bool) {
	return getInstanceParametersGetTlsCiphersAttributeTypeOk(o.TlsCiphers)
}

// HasTlsCiphers returns a boolean if a field has been set.
func (o *InstanceParameters) HasTlsCiphers() bool {
	_, ok := o.GetTlsCiphersOk()
	return ok
}

// SetTlsCiphers gets a reference to the given []string and assigns it to the TlsCiphers field.
func (o *InstanceParameters) SetTlsCiphers(v InstanceParametersGetTlsCiphersRetType) {
	setInstanceParametersGetTlsCiphersAttributeType(&o.TlsCiphers, v)
}

// GetTlsCiphersuites returns the TlsCiphersuites field value if set, zero value otherwise.
func (o *InstanceParameters) GetTlsCiphersuites() (res InstanceParametersGetTlsCiphersuitesRetType) {
	res, _ = o.GetTlsCiphersuitesOk()
	return
}

// GetTlsCiphersuitesOk returns a tuple with the TlsCiphersuites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetTlsCiphersuitesOk() (ret InstanceParametersGetTlsCiphersuitesRetType, ok bool) {
	return getInstanceParametersGetTlsCiphersuitesAttributeTypeOk(o.TlsCiphersuites)
}

// HasTlsCiphersuites returns a boolean if a field has been set.
func (o *InstanceParameters) HasTlsCiphersuites() bool {
	_, ok := o.GetTlsCiphersuitesOk()
	return ok
}

// SetTlsCiphersuites gets a reference to the given string and assigns it to the TlsCiphersuites field.
func (o *InstanceParameters) SetTlsCiphersuites(v InstanceParametersGetTlsCiphersuitesRetType) {
	setInstanceParametersGetTlsCiphersuitesAttributeType(&o.TlsCiphersuites, v)
}

// GetTlsProtocols returns the TlsProtocols field value if set, zero value otherwise.
func (o *InstanceParameters) GetTlsProtocols() (res InstanceParametersGetTlsProtocolsRetType) {
	res, _ = o.GetTlsProtocolsOk()
	return
}

// GetTlsProtocolsOk returns a tuple with the TlsProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetTlsProtocolsOk() (ret InstanceParametersGetTlsProtocolsRetType, ok bool) {
	return getInstanceParametersGetTlsProtocolsAttributeTypeOk(o.TlsProtocols)
}

// HasTlsProtocols returns a boolean if a field has been set.
func (o *InstanceParameters) HasTlsProtocols() bool {
	_, ok := o.GetTlsProtocolsOk()
	return ok
}

// SetTlsProtocols gets a reference to the given string and assigns it to the TlsProtocols field.
func (o *InstanceParameters) SetTlsProtocols(v InstanceParametersGetTlsProtocolsRetType) {
	setInstanceParametersGetTlsProtocolsAttributeType(&o.TlsProtocols, v)
}

func (o InstanceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getInstanceParametersGetDownAfterMillisecondsAttributeTypeOk(o.DownAfterMilliseconds); ok {
		toSerialize["DownAfterMilliseconds"] = val
	}
	if val, ok := getInstanceParametersgetEnableMonitoringAttributeTypeOk(o.EnableMonitoring); ok {
		toSerialize["EnableMonitoring"] = val
	}
	if val, ok := getInstanceParametersGetFailoverTimeoutAttributeTypeOk(o.FailoverTimeout); ok {
		toSerialize["FailoverTimeout"] = val
	}
	if val, ok := getInstanceParametersGetGraphiteAttributeTypeOk(o.Graphite); ok {
		toSerialize["Graphite"] = val
	}
	if val, ok := getInstanceParametersGetLazyfreeLazyEvictionAttributeTypeOk(o.LazyfreeLazyEviction); ok {
		toSerialize["LazyfreeLazyEviction"] = val
	}
	if val, ok := getInstanceParametersGetLazyfreeLazyExpireAttributeTypeOk(o.LazyfreeLazyExpire); ok {
		toSerialize["LazyfreeLazyExpire"] = val
	}
	if val, ok := getInstanceParametersGetLuaTimeLimitAttributeTypeOk(o.LuaTimeLimit); ok {
		toSerialize["LuaTimeLimit"] = val
	}
	if val, ok := getInstanceParametersGetMaxDiskThresholdAttributeTypeOk(o.MaxDiskThreshold); ok {
		toSerialize["MaxDiskThreshold"] = val
	}
	if val, ok := getInstanceParametersGetMaxclientsAttributeTypeOk(o.Maxclients); ok {
		toSerialize["Maxclients"] = val
	}
	if val, ok := getInstanceParametersGetMaxmemoryPolicyAttributeTypeOk(o.MaxmemoryPolicy); ok {
		toSerialize["MaxmemoryPolicy"] = val
	}
	if val, ok := getInstanceParametersGetMaxmemorySamplesAttributeTypeOk(o.MaxmemorySamples); ok {
		toSerialize["MaxmemorySamples"] = val
	}
	if val, ok := getInstanceParametersGetMetricsFrequencyAttributeTypeOk(o.MetricsFrequency); ok {
		toSerialize["MetricsFrequency"] = val
	}
	if val, ok := getInstanceParametersGetMetricsPrefixAttributeTypeOk(o.MetricsPrefix); ok {
		toSerialize["MetricsPrefix"] = val
	}
	if val, ok := getInstanceParametersGetMinReplicasMaxLagAttributeTypeOk(o.MinReplicasMaxLag); ok {
		toSerialize["MinReplicasMaxLag"] = val
	}
	if val, ok := getInstanceParametersGetMonitoringInstanceIdAttributeTypeOk(o.MonitoringInstanceId); ok {
		toSerialize["MonitoringInstanceId"] = val
	}
	if val, ok := getInstanceParametersGetNotifyKeyspaceEventsAttributeTypeOk(o.NotifyKeyspaceEvents); ok {
		toSerialize["NotifyKeyspaceEvents"] = val
	}
	if val, ok := getInstanceParametersGetSgwAclAttributeTypeOk(o.SgwAcl); ok {
		toSerialize["SgwAcl"] = val
	}
	if val, ok := getInstanceParametersGetSnapshotAttributeTypeOk(o.Snapshot); ok {
		toSerialize["Snapshot"] = val
	}
	if val, ok := getInstanceParametersGetSyslogAttributeTypeOk(o.Syslog); ok {
		toSerialize["Syslog"] = val
	}
	if val, ok := getInstanceParametersGetTlsCiphersAttributeTypeOk(o.TlsCiphers); ok {
		toSerialize["TlsCiphers"] = val
	}
	if val, ok := getInstanceParametersGetTlsCiphersuitesAttributeTypeOk(o.TlsCiphersuites); ok {
		toSerialize["TlsCiphersuites"] = val
	}
	if val, ok := getInstanceParametersGetTlsProtocolsAttributeTypeOk(o.TlsProtocols); ok {
		toSerialize["TlsProtocols"] = val
	}
	return toSerialize, nil
}

type NullableInstanceParameters struct {
	value *InstanceParameters
	isSet bool
}

func (v NullableInstanceParameters) Get() *InstanceParameters {
	return v.value
}

func (v *NullableInstanceParameters) Set(val *InstanceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceParameters(val *InstanceParameters) *NullableInstanceParameters {
	return &NullableInstanceParameters{value: val, isSet: true}
}

func (v NullableInstanceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
