/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
)

// checks if the ListProjectsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListProjectsResponse{}

// ListProjectsResponse struct for ListProjectsResponse
type ListProjectsResponse struct {
	// REQUIRED
	Items *[]Project `json:"items"`
	// The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	// REQUIRED
	Limit *float64 `json:"limit"`
	// The offset of the first item in the collection to return.
	// REQUIRED
	Offset *float64 `json:"offset"`
}

type _ListProjectsResponse ListProjectsResponse

// NewListProjectsResponse instantiates a new ListProjectsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProjectsResponse(items *[]Project, limit *float64, offset *float64) *ListProjectsResponse {
	this := ListProjectsResponse{}
	this.Items = items
	this.Limit = limit
	this.Offset = offset
	return &this
}

// NewListProjectsResponseWithDefaults instantiates a new ListProjectsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProjectsResponseWithDefaults() *ListProjectsResponse {
	this := ListProjectsResponse{}
	var limit float64 = 50
	this.Limit = &limit
	var offset float64 = 0
	this.Offset = &offset
	return &this
}

// GetItems returns the Items field value
func (o *ListProjectsResponse) GetItems() *[]Project {
	if o == nil {
		var ret *[]Project
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ListProjectsResponse) GetItemsOk() (*[]Project, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ListProjectsResponse) SetItems(v *[]Project) {
	o.Items = v
}

// GetLimit returns the Limit field value
func (o *ListProjectsResponse) GetLimit() *float64 {
	if o == nil {
		var ret *float64
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ListProjectsResponse) GetLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit, true
}

// SetLimit sets field value
func (o *ListProjectsResponse) SetLimit(v *float64) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *ListProjectsResponse) GetOffset() *float64 {
	if o == nil {
		var ret *float64
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *ListProjectsResponse) GetOffsetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Offset, true
}

// SetOffset sets field value
func (o *ListProjectsResponse) SetOffset(v *float64) {
	o.Offset = v
}

func (o ListProjectsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["limit"] = o.Limit
	toSerialize["offset"] = o.Offset
	return toSerialize, nil
}

type NullableListProjectsResponse struct {
	value *ListProjectsResponse
	isSet bool
}

func (v NullableListProjectsResponse) Get() *ListProjectsResponse {
	return v.value
}

func (v *NullableListProjectsResponse) Set(val *ListProjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListProjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListProjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProjectsResponse(val *ListProjectsResponse) *NullableListProjectsResponse {
	return &NullableListProjectsResponse{value: val, isSet: true}
}

func (v NullableListProjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
