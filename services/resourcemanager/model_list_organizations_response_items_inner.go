/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
	"time"
)

// checks if the ListOrganizationsResponseItemsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrganizationsResponseItemsInner{}

// ListOrganizationsResponseItemsInner struct for ListOrganizationsResponseItemsInner
type ListOrganizationsResponseItemsInner struct {
	// Globally unique, user-friendly identifier.
	// REQUIRED
	ContainerId *string `json:"containerId"`
	// Timestamp at which the organization was created.
	// REQUIRED
	CreationTime *time.Time `json:"creationTime"`
	// Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies.  - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`. - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *map[string]string `json:"labels,omitempty"`
	// REQUIRED
	LifecycleState *LifecycleState `json:"lifecycleState"`
	// Name of the organization.
	// REQUIRED
	Name *string `json:"name"`
	// Globally unique, organization identifier.
	// REQUIRED
	OrganizationId *string `json:"organizationId"`
	// Timestamp at which the organization was last modified.
	// REQUIRED
	UpdateTime *time.Time `json:"updateTime"`
}

type _ListOrganizationsResponseItemsInner ListOrganizationsResponseItemsInner

// NewListOrganizationsResponseItemsInner instantiates a new ListOrganizationsResponseItemsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrganizationsResponseItemsInner(containerId *string, creationTime *time.Time, lifecycleState *LifecycleState, name *string, organizationId *string, updateTime *time.Time) *ListOrganizationsResponseItemsInner {
	this := ListOrganizationsResponseItemsInner{}
	this.ContainerId = containerId
	this.CreationTime = creationTime
	this.LifecycleState = lifecycleState
	this.Name = name
	this.OrganizationId = organizationId
	this.UpdateTime = updateTime
	return &this
}

// NewListOrganizationsResponseItemsInnerWithDefaults instantiates a new ListOrganizationsResponseItemsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrganizationsResponseItemsInnerWithDefaults() *ListOrganizationsResponseItemsInner {
	this := ListOrganizationsResponseItemsInner{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *ListOrganizationsResponseItemsInner) GetContainerId() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetContainerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerId, true
}

// SetContainerId sets field value
func (o *ListOrganizationsResponseItemsInner) SetContainerId(v *string) {
	o.ContainerId = v
}

// GetCreationTime returns the CreationTime field value
func (o *ListOrganizationsResponseItemsInner) GetCreationTime() *time.Time {
	if o == nil {
		var ret *time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// SetCreationTime sets field value
func (o *ListOrganizationsResponseItemsInner) SetCreationTime(v *time.Time) {
	o.CreationTime = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ListOrganizationsResponseItemsInner) GetLabels() *map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ListOrganizationsResponseItemsInner) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ListOrganizationsResponseItemsInner) SetLabels(v *map[string]string) {
	o.Labels = v
}

// GetLifecycleState returns the LifecycleState field value
func (o *ListOrganizationsResponseItemsInner) GetLifecycleState() *LifecycleState {
	if o == nil {
		var ret *LifecycleState
		return ret
	}

	return o.LifecycleState
}

// GetLifecycleStateOk returns a tuple with the LifecycleState field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetLifecycleStateOk() (*LifecycleState, bool) {
	if o == nil {
		return nil, false
	}
	return o.LifecycleState, true
}

// SetLifecycleState sets field value
func (o *ListOrganizationsResponseItemsInner) SetLifecycleState(v *LifecycleState) {
	o.LifecycleState = v
}

// GetName returns the Name field value
func (o *ListOrganizationsResponseItemsInner) GetName() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *ListOrganizationsResponseItemsInner) SetName(v *string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *ListOrganizationsResponseItemsInner) GetOrganizationId() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ListOrganizationsResponseItemsInner) SetOrganizationId(v *string) {
	o.OrganizationId = v
}

// GetUpdateTime returns the UpdateTime field value
func (o *ListOrganizationsResponseItemsInner) GetUpdateTime() *time.Time {
	if o == nil {
		var ret *time.Time
		return ret
	}

	return o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponseItemsInner) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// SetUpdateTime sets field value
func (o *ListOrganizationsResponseItemsInner) SetUpdateTime(v *time.Time) {
	o.UpdateTime = v
}

func (o ListOrganizationsResponseItemsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerId"] = o.ContainerId
	toSerialize["creationTime"] = o.CreationTime
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["lifecycleState"] = o.LifecycleState
	toSerialize["name"] = o.Name
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["updateTime"] = o.UpdateTime
	return toSerialize, nil
}

type NullableListOrganizationsResponseItemsInner struct {
	value *ListOrganizationsResponseItemsInner
	isSet bool
}

func (v NullableListOrganizationsResponseItemsInner) Get() *ListOrganizationsResponseItemsInner {
	return v.value
}

func (v *NullableListOrganizationsResponseItemsInner) Set(val *ListOrganizationsResponseItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrganizationsResponseItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrganizationsResponseItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrganizationsResponseItemsInner(val *ListOrganizationsResponseItemsInner) *NullableListOrganizationsResponseItemsInner {
	return &NullableListOrganizationsResponseItemsInner{value: val, isSet: true}
}

func (v NullableListOrganizationsResponseItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrganizationsResponseItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
