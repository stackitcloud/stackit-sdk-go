/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

// ParentListInner struct for ParentListInner
type ParentListInner struct {
	// User-friendly identifier of either organization or folder (will replace id).
	// REQUIRED
	ContainerId *string `json:"containerId"`
	// User-friendly parent identifier of either organization or folder (will replace parentId).
	// REQUIRED
	ContainerParentId *string `json:"containerParentId"`
	// Identifier.
	// REQUIRED
	Id *string `json:"id"`
	// Parent container name.
	// REQUIRED
	Name *string `json:"name"`
	// Identifier of the parent resource container.
	// REQUIRED
	ParentId *string `json:"parentId"`
	// Parent container type.
	// REQUIRED
	Type *string `json:"type"`
}
