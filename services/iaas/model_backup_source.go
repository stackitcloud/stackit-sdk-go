/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the BackupSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupSource{}

// BackupSource The source object of a backup.
type BackupSource struct {
	// Universally Unique Identifier (UUID).
	// REQUIRED
	Id *string `json:"id"`
	// The source types of a backup. Possible values: `volume`, `snapshot`.
	// REQUIRED
	Type *string `json:"type"`
}

type _BackupSource BackupSource

// NewBackupSource instantiates a new BackupSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupSource(id *string, type_ *string) *BackupSource {
	this := BackupSource{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewBackupSourceWithDefaults instantiates a new BackupSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupSourceWithDefaults() *BackupSource {
	this := BackupSource{}
	return &this
}

// GetId returns the Id field value
func (o *BackupSource) GetId() *string {
	if o == nil || IsNil(o.Id) {
		var ret *string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackupSource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *BackupSource) SetId(v *string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *BackupSource) GetType() *string {
	if o == nil || IsNil(o.Type) {
		var ret *string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BackupSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *BackupSource) SetType(v *string) {
	o.Type = v
}

func (o BackupSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableBackupSource struct {
	value *BackupSource
	isSet bool
}

func (v NullableBackupSource) Get() *BackupSource {
	return v.value
}

func (v *NullableBackupSource) Set(val *BackupSource) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupSource) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupSource(val *BackupSource) *NullableBackupSource {
	return &NullableBackupSource{value: val, isSet: true}
}

func (v NullableBackupSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
