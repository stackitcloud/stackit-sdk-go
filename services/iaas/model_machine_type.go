/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the MachineType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineType{}

// MachineType Machine Type.
type MachineType struct {
	// Description Object. Allows string up to 127 Characters.
	Description *string `json:"description,omitempty"`
	// Size in Gigabyte.
	// REQUIRED
	Disk *int64 `json:"disk"`
	// Properties to control certain aspects or scheduling behavior for an object.
	ExtraSpecs *map[string]interface{} `json:"extraSpecs,omitempty"`
	// The name for a General Object. Matches Names and also UUIDs.
	// REQUIRED
	Name *string `json:"name"`
	// Size in Megabyte.
	// REQUIRED
	Ram *int64 `json:"ram"`
	// The number of virtual CPUs of a server.
	// REQUIRED
	Vcpus *int64 `json:"vcpus"`
}

type _MachineType MachineType

// NewMachineType instantiates a new MachineType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineType(disk *int64, name *string, ram *int64, vcpus *int64) *MachineType {
	this := MachineType{}
	this.Disk = disk
	this.Name = name
	this.Ram = ram
	this.Vcpus = vcpus
	return &this
}

// NewMachineTypeWithDefaults instantiates a new MachineType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineTypeWithDefaults() *MachineType {
	this := MachineType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MachineType) GetDescription() *string {
	if o == nil || IsNil(o.Description) {
		var ret *string
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MachineType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MachineType) SetDescription(v *string) {
	o.Description = v
}

// GetDisk returns the Disk field value
func (o *MachineType) GetDisk() *int64 {
	if o == nil || IsNil(o.Disk) {
		var ret *int64
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *MachineType) GetDiskOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disk, true
}

// SetDisk sets field value
func (o *MachineType) SetDisk(v *int64) {
	o.Disk = v
}

// GetExtraSpecs returns the ExtraSpecs field value if set, zero value otherwise.
func (o *MachineType) GetExtraSpecs() *map[string]interface{} {
	if o == nil || IsNil(o.ExtraSpecs) {
		var ret *map[string]interface{}
		return ret
	}
	return o.ExtraSpecs
}

// GetExtraSpecsOk returns a tuple with the ExtraSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineType) GetExtraSpecsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtraSpecs) {
		return &map[string]interface{}{}, false
	}
	return o.ExtraSpecs, true
}

// HasExtraSpecs returns a boolean if a field has been set.
func (o *MachineType) HasExtraSpecs() bool {
	if o != nil && !IsNil(o.ExtraSpecs) {
		return true
	}

	return false
}

// SetExtraSpecs gets a reference to the given map[string]interface{} and assigns it to the ExtraSpecs field.
func (o *MachineType) SetExtraSpecs(v *map[string]interface{}) {
	o.ExtraSpecs = v
}

// GetName returns the Name field value
func (o *MachineType) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MachineType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *MachineType) SetName(v *string) {
	o.Name = v
}

// GetRam returns the Ram field value
func (o *MachineType) GetRam() *int64 {
	if o == nil || IsNil(o.Ram) {
		var ret *int64
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *MachineType) GetRamOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ram, true
}

// SetRam sets field value
func (o *MachineType) SetRam(v *int64) {
	o.Ram = v
}

// GetVcpus returns the Vcpus field value
func (o *MachineType) GetVcpus() *int64 {
	if o == nil || IsNil(o.Vcpus) {
		var ret *int64
		return ret
	}

	return o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value
// and a boolean to check if the value has been set.
func (o *MachineType) GetVcpusOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vcpus, true
}

// SetVcpus sets field value
func (o *MachineType) SetVcpus(v *int64) {
	o.Vcpus = v
}

func (o MachineType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["disk"] = o.Disk
	if !IsNil(o.ExtraSpecs) {
		toSerialize["extraSpecs"] = o.ExtraSpecs
	}
	toSerialize["name"] = o.Name
	toSerialize["ram"] = o.Ram
	toSerialize["vcpus"] = o.Vcpus
	return toSerialize, nil
}

type NullableMachineType struct {
	value *MachineType
	isSet bool
}

func (v NullableMachineType) Get() *MachineType {
	return v.value
}

func (v *NullableMachineType) Set(val *MachineType) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineType) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineType(val *MachineType) *NullableMachineType {
	return &NullableMachineType{value: val, isSet: true}
}

func (v NullableMachineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
