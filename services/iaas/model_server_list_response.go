/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerListResponse{}

/*
	types and functions for items
*/

// isArray
type ServerListResponseGetItemsAttributeType = *[]Server
type ServerListResponseGetItemsArgType = []Server
type ServerListResponseGetItemsRetType = []Server

func getServerListResponseGetItemsAttributeTypeOk(arg ServerListResponseGetItemsAttributeType) (ret ServerListResponseGetItemsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServerListResponseGetItemsAttributeType(arg *ServerListResponseGetItemsAttributeType, val ServerListResponseGetItemsRetType) {
	*arg = &val
}

// ServerListResponse Response object for server list request.
type ServerListResponse struct {
	// A list of servers.
	// REQUIRED
	Items ServerListResponseGetItemsAttributeType `json:"items"`
}

type _ServerListResponse ServerListResponse

// NewServerListResponse instantiates a new ServerListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerListResponse(items ServerListResponseGetItemsArgType) *ServerListResponse {
	this := ServerListResponse{}
	setServerListResponseGetItemsAttributeType(&this.Items, items)
	return &this
}

// NewServerListResponseWithDefaults instantiates a new ServerListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerListResponseWithDefaults() *ServerListResponse {
	this := ServerListResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *ServerListResponse) GetItems() (ret ServerListResponseGetItemsRetType) {
	ret, _ = o.GetItemsOk()
	return ret
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ServerListResponse) GetItemsOk() (ret ServerListResponseGetItemsRetType, ok bool) {
	return getServerListResponseGetItemsAttributeTypeOk(o.Items)
}

// SetItems sets field value
func (o *ServerListResponse) SetItems(v ServerListResponseGetItemsRetType) {
	setServerListResponseGetItemsAttributeType(&o.Items, v)
}

func (o ServerListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getServerListResponseGetItemsAttributeTypeOk(o.Items); ok {
		toSerialize["Items"] = val
	}
	return toSerialize, nil
}

func (o *ServerListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerListResponse := _ServerListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerListResponse)

	if err != nil {
		return err
	}

	*o = ServerListResponse(varServerListResponse)

	return err
}

type NullableServerListResponse struct {
	value *ServerListResponse
	isSet bool
}

func (v NullableServerListResponse) Get() *ServerListResponse {
	return v.value
}

func (v *NullableServerListResponse) Set(val *ServerListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerListResponse(val *ServerListResponse) *NullableServerListResponse {
	return &NullableServerListResponse{value: val, isSet: true}
}

func (v NullableServerListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
