/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the VolumeAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeAttachment{}

// VolumeAttachment Object that represents a Volume attachment to a server.
type VolumeAttachment struct {
	// Delete the volume during the termination of the server. Defaults to false.
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`
	// Universally Unique Identifier (UUID).
	ServerId *string `json:"serverId,omitempty"`
	// Universally Unique Identifier (UUID).
	VolumeId *string `json:"volumeId,omitempty"`
}

// NewVolumeAttachment instantiates a new VolumeAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeAttachment() *VolumeAttachment {
	this := VolumeAttachment{}
	return &this
}

// NewVolumeAttachmentWithDefaults instantiates a new VolumeAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeAttachmentWithDefaults() *VolumeAttachment {
	this := VolumeAttachment{}
	return &this
}

// GetDeleteOnTermination returns the DeleteOnTermination field value if set, zero value otherwise.
func (o *VolumeAttachment) GetDeleteOnTermination() *bool {
	if o == nil || IsNil(o.DeleteOnTermination) {
		var ret *bool
		return ret
	}
	return o.DeleteOnTermination
}

// GetDeleteOnTerminationOk returns a tuple with the DeleteOnTermination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeAttachment) GetDeleteOnTerminationOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteOnTermination) {
		return nil, false
	}
	return o.DeleteOnTermination, true
}

// HasDeleteOnTermination returns a boolean if a field has been set.
func (o *VolumeAttachment) HasDeleteOnTermination() bool {
	if o != nil && !IsNil(o.DeleteOnTermination) {
		return true
	}

	return false
}

// SetDeleteOnTermination gets a reference to the given bool and assigns it to the DeleteOnTermination field.
func (o *VolumeAttachment) SetDeleteOnTermination(v *bool) {
	o.DeleteOnTermination = v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *VolumeAttachment) GetServerId() *string {
	if o == nil || IsNil(o.ServerId) {
		var ret *string
		return ret
	}
	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeAttachment) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *VolumeAttachment) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *VolumeAttachment) SetServerId(v *string) {
	o.ServerId = v
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise.
func (o *VolumeAttachment) GetVolumeId() *string {
	if o == nil || IsNil(o.VolumeId) {
		var ret *string
		return ret
	}
	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeAttachment) GetVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeId) {
		return nil, false
	}
	return o.VolumeId, true
}

// HasVolumeId returns a boolean if a field has been set.
func (o *VolumeAttachment) HasVolumeId() bool {
	if o != nil && !IsNil(o.VolumeId) {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given string and assigns it to the VolumeId field.
func (o *VolumeAttachment) SetVolumeId(v *string) {
	o.VolumeId = v
}

func (o VolumeAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteOnTermination) {
		toSerialize["deleteOnTermination"] = o.DeleteOnTermination
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.VolumeId) {
		toSerialize["volumeId"] = o.VolumeId
	}
	return toSerialize, nil
}

type NullableVolumeAttachment struct {
	value *VolumeAttachment
	isSet bool
}

func (v NullableVolumeAttachment) Get() *VolumeAttachment {
	return v.value
}

func (v *NullableVolumeAttachment) Set(val *VolumeAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeAttachment(val *VolumeAttachment) *NullableVolumeAttachment {
	return &NullableVolumeAttachment{value: val, isSet: true}
}

func (v NullableVolumeAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
