/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the CreateBackupPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBackupPayload{}

// CreateBackupPayload Object that represents a backup create request body.
type CreateBackupPayload struct {
	// Object that represents the labels of an object. Regex for keys: `^[a-z]((-|_|[a-z0-9])){0,62}$`. Regex for values: `^(-|_|[a-z0-9]){0,63}$`.
	Labels *map[string]interface{} `json:"labels,omitempty"`
	// The name for a General Object. Matches Names and also UUIDs.
	Name *string `json:"name,omitempty"`
	// REQUIRED
	Source *BackupSource `json:"source"`
}

type _CreateBackupPayload CreateBackupPayload

// NewCreateBackupPayload instantiates a new CreateBackupPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBackupPayload(source *BackupSource) *CreateBackupPayload {
	this := CreateBackupPayload{}
	this.Source = source
	return &this
}

// NewCreateBackupPayloadWithDefaults instantiates a new CreateBackupPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBackupPayloadWithDefaults() *CreateBackupPayload {
	this := CreateBackupPayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateBackupPayload) GetLabels() *map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBackupPayload) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateBackupPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *CreateBackupPayload) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateBackupPayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBackupPayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateBackupPayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateBackupPayload) SetName(v *string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *CreateBackupPayload) GetSource() *BackupSource {
	if o == nil || IsNil(o.Source) {
		var ret *BackupSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CreateBackupPayload) GetSourceOk() (*BackupSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *CreateBackupPayload) SetSource(v *BackupSource) {
	o.Source = v
}

func (o CreateBackupPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

type NullableCreateBackupPayload struct {
	value *CreateBackupPayload
	isSet bool
}

func (v NullableCreateBackupPayload) Get() *CreateBackupPayload {
	return v.value
}

func (v *NullableCreateBackupPayload) Set(val *CreateBackupPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBackupPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBackupPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBackupPayload(val *CreateBackupPayload) *NullableCreateBackupPayload {
	return &NullableCreateBackupPayload{value: val, isSet: true}
}

func (v NullableCreateBackupPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBackupPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
