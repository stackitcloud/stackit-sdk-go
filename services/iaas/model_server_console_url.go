/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerConsoleUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConsoleUrl{}

/*
	types and functions for url
*/

// isNotNullableString
type ServerConsoleUrlGetUrlAttributeType = *string

func getServerConsoleUrlGetUrlAttributeTypeOk(arg ServerConsoleUrlGetUrlAttributeType) (ret ServerConsoleUrlGetUrlRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setServerConsoleUrlGetUrlAttributeType(arg *ServerConsoleUrlGetUrlAttributeType, val ServerConsoleUrlGetUrlRetType) {
	*arg = &val
}

type ServerConsoleUrlGetUrlArgType = string
type ServerConsoleUrlGetUrlRetType = string

// ServerConsoleUrl Object that represents a server console URL.
type ServerConsoleUrl struct {
	// REQUIRED
	Url ServerConsoleUrlGetUrlAttributeType `json:"url"`
}

type _ServerConsoleUrl ServerConsoleUrl

// NewServerConsoleUrl instantiates a new ServerConsoleUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConsoleUrl(url ServerConsoleUrlGetUrlArgType) *ServerConsoleUrl {
	this := ServerConsoleUrl{}
	setServerConsoleUrlGetUrlAttributeType(&this.Url, url)
	return &this
}

// NewServerConsoleUrlWithDefaults instantiates a new ServerConsoleUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConsoleUrlWithDefaults() *ServerConsoleUrl {
	this := ServerConsoleUrl{}
	return &this
}

// GetUrl returns the Url field value
func (o *ServerConsoleUrl) GetUrl() (ret ServerConsoleUrlGetUrlRetType) {
	ret, _ = o.GetUrlOk()
	return ret
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ServerConsoleUrl) GetUrlOk() (ret ServerConsoleUrlGetUrlRetType, ok bool) {
	return getServerConsoleUrlGetUrlAttributeTypeOk(o.Url)
}

// SetUrl sets field value
func (o *ServerConsoleUrl) SetUrl(v ServerConsoleUrlGetUrlRetType) {
	setServerConsoleUrlGetUrlAttributeType(&o.Url, v)
}

func (o ServerConsoleUrl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConsoleUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getServerConsoleUrlGetUrlAttributeTypeOk(o.Url); ok {
		toSerialize["Url"] = val
	}
	return toSerialize, nil
}

func (o *ServerConsoleUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerConsoleUrl := _ServerConsoleUrl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerConsoleUrl)

	if err != nil {
		return err
	}

	*o = ServerConsoleUrl(varServerConsoleUrl)

	return err
}

type NullableServerConsoleUrl struct {
	value *ServerConsoleUrl
	isSet bool
}

func (v NullableServerConsoleUrl) Get() *ServerConsoleUrl {
	return v.value
}

func (v *NullableServerConsoleUrl) Set(val *ServerConsoleUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConsoleUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConsoleUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConsoleUrl(val *ServerConsoleUrl) *NullableServerConsoleUrl {
	return &NullableServerConsoleUrl{value: val, isSet: true}
}

func (v NullableServerConsoleUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConsoleUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
