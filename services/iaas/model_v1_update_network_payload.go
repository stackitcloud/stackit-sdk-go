/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the V1UpdateNetworkPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1UpdateNetworkPayload{}

// V1UpdateNetworkPayload Object that represents the request body for a network update.
type V1UpdateNetworkPayload struct {
	AddressFamily *UpdateNetworkAddressFamily `json:"addressFamily,omitempty"`
	// Object that represents the labels of an object.
	Labels *map[string]interface{} `json:"labels,omitempty"`
	// The name for a General Object. Matches Names and also UUIDs.
	Name *string `json:"name,omitempty"`
	// Shows if the network is routed and therefore accessible from other networks.
	Routed *bool `json:"routed,omitempty"`
}

// NewV1UpdateNetworkPayload instantiates a new V1UpdateNetworkPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UpdateNetworkPayload() *V1UpdateNetworkPayload {
	this := V1UpdateNetworkPayload{}
	return &this
}

// NewV1UpdateNetworkPayloadWithDefaults instantiates a new V1UpdateNetworkPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UpdateNetworkPayloadWithDefaults() *V1UpdateNetworkPayload {
	this := V1UpdateNetworkPayload{}
	return &this
}

// GetAddressFamily returns the AddressFamily field value if set, zero value otherwise.
func (o *V1UpdateNetworkPayload) GetAddressFamily() *UpdateNetworkAddressFamily {
	if o == nil || IsNil(o.AddressFamily) {
		var ret *UpdateNetworkAddressFamily
		return ret
	}
	return o.AddressFamily
}

// GetAddressFamilyOk returns a tuple with the AddressFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateNetworkPayload) GetAddressFamilyOk() (*UpdateNetworkAddressFamily, bool) {
	if o == nil || IsNil(o.AddressFamily) {
		return nil, false
	}
	return o.AddressFamily, true
}

// HasAddressFamily returns a boolean if a field has been set.
func (o *V1UpdateNetworkPayload) HasAddressFamily() bool {
	if o != nil && !IsNil(o.AddressFamily) {
		return true
	}

	return false
}

// SetAddressFamily gets a reference to the given UpdateNetworkAddressFamily and assigns it to the AddressFamily field.
func (o *V1UpdateNetworkPayload) SetAddressFamily(v *UpdateNetworkAddressFamily) {
	o.AddressFamily = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1UpdateNetworkPayload) GetLabels() *map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateNetworkPayload) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1UpdateNetworkPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *V1UpdateNetworkPayload) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1UpdateNetworkPayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateNetworkPayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1UpdateNetworkPayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1UpdateNetworkPayload) SetName(v *string) {
	o.Name = v
}

// GetRouted returns the Routed field value if set, zero value otherwise.
func (o *V1UpdateNetworkPayload) GetRouted() *bool {
	if o == nil || IsNil(o.Routed) {
		var ret *bool
		return ret
	}
	return o.Routed
}

// GetRoutedOk returns a tuple with the Routed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateNetworkPayload) GetRoutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Routed) {
		return nil, false
	}
	return o.Routed, true
}

// HasRouted returns a boolean if a field has been set.
func (o *V1UpdateNetworkPayload) HasRouted() bool {
	if o != nil && !IsNil(o.Routed) {
		return true
	}

	return false
}

// SetRouted gets a reference to the given bool and assigns it to the Routed field.
func (o *V1UpdateNetworkPayload) SetRouted(v *bool) {
	o.Routed = v
}

func (o V1UpdateNetworkPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressFamily) {
		toSerialize["addressFamily"] = o.AddressFamily
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Routed) {
		toSerialize["routed"] = o.Routed
	}
	return toSerialize, nil
}

type NullableV1UpdateNetworkPayload struct {
	value *V1UpdateNetworkPayload
	isSet bool
}

func (v NullableV1UpdateNetworkPayload) Get() *V1UpdateNetworkPayload {
	return v.value
}

func (v *NullableV1UpdateNetworkPayload) Set(val *V1UpdateNetworkPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UpdateNetworkPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UpdateNetworkPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UpdateNetworkPayload(val *V1UpdateNetworkPayload) *NullableV1UpdateNetworkPayload {
	return &NullableV1UpdateNetworkPayload{value: val, isSet: true}
}

func (v NullableV1UpdateNetworkPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UpdateNetworkPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
