/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the V1AddRoutesToAreaPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AddRoutesToAreaPayload{}

// V1AddRoutesToAreaPayload struct for V1AddRoutesToAreaPayload
type V1AddRoutesToAreaPayload struct {
	// A list of routes.
	Ipv4 *[]Route `json:"ipv4,omitempty"`
}

// NewV1AddRoutesToAreaPayload instantiates a new V1AddRoutesToAreaPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AddRoutesToAreaPayload() *V1AddRoutesToAreaPayload {
	this := V1AddRoutesToAreaPayload{}
	return &this
}

// NewV1AddRoutesToAreaPayloadWithDefaults instantiates a new V1AddRoutesToAreaPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AddRoutesToAreaPayloadWithDefaults() *V1AddRoutesToAreaPayload {
	this := V1AddRoutesToAreaPayload{}
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *V1AddRoutesToAreaPayload) GetIpv4() *[]Route {
	if o == nil || IsNil(o.Ipv4) {
		var ret *[]Route
		return ret
	}
	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AddRoutesToAreaPayload) GetIpv4Ok() (*[]Route, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *V1AddRoutesToAreaPayload) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given []Route and assigns it to the Ipv4 field.
func (o *V1AddRoutesToAreaPayload) SetIpv4(v *[]Route) {
	o.Ipv4 = v
}

func (o V1AddRoutesToAreaPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	return toSerialize, nil
}

type NullableV1AddRoutesToAreaPayload struct {
	value *V1AddRoutesToAreaPayload
	isSet bool
}

func (v NullableV1AddRoutesToAreaPayload) Get() *V1AddRoutesToAreaPayload {
	return v.value
}

func (v *NullableV1AddRoutesToAreaPayload) Set(val *V1AddRoutesToAreaPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AddRoutesToAreaPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AddRoutesToAreaPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AddRoutesToAreaPayload(val *V1AddRoutesToAreaPayload) *NullableV1AddRoutesToAreaPayload {
	return &NullableV1AddRoutesToAreaPayload{value: val, isSet: true}
}

func (v NullableV1AddRoutesToAreaPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AddRoutesToAreaPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
