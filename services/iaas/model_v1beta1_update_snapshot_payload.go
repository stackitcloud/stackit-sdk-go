/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the V1beta1UpdateSnapshotPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1UpdateSnapshotPayload{}

// V1beta1UpdateSnapshotPayload Object that represents an update request body of a snapshot.
type V1beta1UpdateSnapshotPayload struct {
	// Object that represents the labels of an object.
	Labels *map[string]interface{} `json:"labels,omitempty"`
	// The name for a General Object. Matches Names and also UUIDs.
	Name *string `json:"name,omitempty"`
}

// NewV1beta1UpdateSnapshotPayload instantiates a new V1beta1UpdateSnapshotPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1UpdateSnapshotPayload() *V1beta1UpdateSnapshotPayload {
	this := V1beta1UpdateSnapshotPayload{}
	return &this
}

// NewV1beta1UpdateSnapshotPayloadWithDefaults instantiates a new V1beta1UpdateSnapshotPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1UpdateSnapshotPayloadWithDefaults() *V1beta1UpdateSnapshotPayload {
	this := V1beta1UpdateSnapshotPayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1beta1UpdateSnapshotPayload) GetLabels() *map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret *map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1UpdateSnapshotPayload) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return &map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1beta1UpdateSnapshotPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *V1beta1UpdateSnapshotPayload) SetLabels(v *map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1beta1UpdateSnapshotPayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1UpdateSnapshotPayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1beta1UpdateSnapshotPayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1beta1UpdateSnapshotPayload) SetName(v *string) {
	o.Name = v
}

func (o V1beta1UpdateSnapshotPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableV1beta1UpdateSnapshotPayload struct {
	value *V1beta1UpdateSnapshotPayload
	isSet bool
}

func (v NullableV1beta1UpdateSnapshotPayload) Get() *V1beta1UpdateSnapshotPayload {
	return v.value
}

func (v *NullableV1beta1UpdateSnapshotPayload) Set(val *V1beta1UpdateSnapshotPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1UpdateSnapshotPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1UpdateSnapshotPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1UpdateSnapshotPayload(val *V1beta1UpdateSnapshotPayload) *NullableV1beta1UpdateSnapshotPayload {
	return &NullableV1beta1UpdateSnapshotPayload{value: val, isSet: true}
}

func (v NullableV1beta1UpdateSnapshotPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1UpdateSnapshotPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
