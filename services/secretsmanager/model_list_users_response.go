/*
STACKIT Secrets Manager API

This API provides endpoints for managing the Secrets-Manager.

API version: 1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretsmanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ListUsersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUsersResponse{}

/*
	types and functions for users
*/

// isArray
type ListUsersResponseGetUsersAttributeType = *[]User
type ListUsersResponseGetUsersArgType = []User
type ListUsersResponseGetUsersRetType = []User

func getListUsersResponseGetUsersAttributeTypeOk(arg ListUsersResponseGetUsersAttributeType) (ret ListUsersResponseGetUsersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListUsersResponseGetUsersAttributeType(arg *ListUsersResponseGetUsersAttributeType, val ListUsersResponseGetUsersRetType) {
	*arg = &val
}

// ListUsersResponse struct for ListUsersResponse
type ListUsersResponse struct {
	// REQUIRED
	Users ListUsersResponseGetUsersAttributeType `json:"users"`
}

type _ListUsersResponse ListUsersResponse

// NewListUsersResponse instantiates a new ListUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUsersResponse(users ListUsersResponseGetUsersArgType) *ListUsersResponse {
	this := ListUsersResponse{}
	setListUsersResponseGetUsersAttributeType(&this.Users, users)
	return &this
}

// NewListUsersResponseWithDefaults instantiates a new ListUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUsersResponseWithDefaults() *ListUsersResponse {
	this := ListUsersResponse{}
	return &this
}

// GetUsers returns the Users field value
func (o *ListUsersResponse) GetUsers() (ret ListUsersResponseGetUsersRetType) {
	ret, _ = o.GetUsersOk()
	return ret
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *ListUsersResponse) GetUsersOk() (ret ListUsersResponseGetUsersRetType, ok bool) {
	return getListUsersResponseGetUsersAttributeTypeOk(o.Users)
}

// SetUsers sets field value
func (o *ListUsersResponse) SetUsers(v ListUsersResponseGetUsersRetType) {
	setListUsersResponseGetUsersAttributeType(&o.Users, v)
}

func (o ListUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUsersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getListUsersResponseGetUsersAttributeTypeOk(o.Users); ok {
		toSerialize["Users"] = val
	}
	return toSerialize, nil
}

func (o *ListUsersResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListUsersResponse := _ListUsersResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListUsersResponse)

	if err != nil {
		return err
	}

	*o = ListUsersResponse(varListUsersResponse)

	return err
}

type NullableListUsersResponse struct {
	value *ListUsersResponse
	isSet bool
}

func (v NullableListUsersResponse) Get() *ListUsersResponse {
	return v.value
}

func (v *NullableListUsersResponse) Set(val *ListUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUsersResponse(val *ListUsersResponse) *NullableListUsersResponse {
	return &NullableListUsersResponse{value: val, isSet: true}
}

func (v NullableListUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
