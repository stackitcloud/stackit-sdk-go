/*
STACKIT Secrets Manager API

This API provides endpoints for managing the Secrets-Manager.

API version: 1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretsmanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateACLPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateACLPayload{}

/*
	types and functions for cidr
*/

// isNotNullableString
type CreateACLPayloadGetCidrAttributeType = *string

func getCreateACLPayloadGetCidrAttributeTypeOk(arg CreateACLPayloadGetCidrAttributeType) (ret CreateACLPayloadGetCidrRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateACLPayloadGetCidrAttributeType(arg *CreateACLPayloadGetCidrAttributeType, val CreateACLPayloadGetCidrRetType) {
	*arg = &val
}

type CreateACLPayloadGetCidrArgType = string
type CreateACLPayloadGetCidrRetType = string

// CreateACLPayload struct for CreateACLPayload
type CreateACLPayload struct {
	// The given IP/IP Range that is permitted to access.
	// REQUIRED
	Cidr CreateACLPayloadGetCidrAttributeType `json:"cidr"`
}

type _CreateACLPayload CreateACLPayload

// NewCreateACLPayload instantiates a new CreateACLPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateACLPayload(cidr CreateACLPayloadGetCidrArgType) *CreateACLPayload {
	this := CreateACLPayload{}
	setCreateACLPayloadGetCidrAttributeType(&this.Cidr, cidr)
	return &this
}

// NewCreateACLPayloadWithDefaults instantiates a new CreateACLPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateACLPayloadWithDefaults() *CreateACLPayload {
	this := CreateACLPayload{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *CreateACLPayload) GetCidr() (ret CreateACLPayloadGetCidrRetType) {
	ret, _ = o.GetCidrOk()
	return ret
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *CreateACLPayload) GetCidrOk() (ret CreateACLPayloadGetCidrRetType, ok bool) {
	return getCreateACLPayloadGetCidrAttributeTypeOk(o.Cidr)
}

// SetCidr sets field value
func (o *CreateACLPayload) SetCidr(v CreateACLPayloadGetCidrRetType) {
	setCreateACLPayloadGetCidrAttributeType(&o.Cidr, v)
}

func (o CreateACLPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateACLPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateACLPayloadGetCidrAttributeTypeOk(o.Cidr); ok {
		toSerialize["Cidr"] = val
	}
	return toSerialize, nil
}

func (o *CreateACLPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateACLPayload := _CreateACLPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateACLPayload)

	if err != nil {
		return err
	}

	*o = CreateACLPayload(varCreateACLPayload)

	return err
}

type NullableCreateACLPayload struct {
	value *CreateACLPayload
	isSet bool
}

func (v NullableCreateACLPayload) Get() *CreateACLPayload {
	return v.value
}

func (v *NullableCreateACLPayload) Set(val *CreateACLPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateACLPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateACLPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateACLPayload(val *CreateACLPayload) *NullableCreateACLPayload {
	return &NullableCreateACLPayload{value: val, isSet: true}
}

func (v NullableCreateACLPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateACLPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
