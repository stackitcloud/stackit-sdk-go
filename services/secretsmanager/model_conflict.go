/*
STACKIT Secrets Manager API

This API provides endpoints for managing the Secrets-Manager.

API version: 1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretsmanager

import (
	"encoding/json"
)

// checks if the Conflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conflict{}

/*
	types and functions for message
*/

// isNotNullableString
type ConflictGetMessageAttributeType = *string

func getConflictGetMessageAttributeTypeOk(arg ConflictGetMessageAttributeType) (ret ConflictGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setConflictGetMessageAttributeType(arg *ConflictGetMessageAttributeType, val ConflictGetMessageRetType) {
	*arg = &val
}

type ConflictGetMessageArgType = string
type ConflictGetMessageRetType = string

// Conflict struct for Conflict
type Conflict struct {
	// The error message for conflicts
	// REQUIRED
	Message ConflictGetMessageAttributeType `json:"message" required:"true"`
}

type _Conflict Conflict

// NewConflict instantiates a new Conflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConflict(message ConflictGetMessageArgType) *Conflict {
	this := Conflict{}
	setConflictGetMessageAttributeType(&this.Message, message)
	return &this
}

// NewConflictWithDefaults instantiates a new Conflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConflictWithDefaults() *Conflict {
	this := Conflict{}
	return &this
}

// GetMessage returns the Message field value
func (o *Conflict) GetMessage() (ret ConflictGetMessageRetType) {
	ret, _ = o.GetMessageOk()
	return ret
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Conflict) GetMessageOk() (ret ConflictGetMessageRetType, ok bool) {
	return getConflictGetMessageAttributeTypeOk(o.Message)
}

// SetMessage sets field value
func (o *Conflict) SetMessage(v ConflictGetMessageRetType) {
	setConflictGetMessageAttributeType(&o.Message, v)
}

func (o Conflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getConflictGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	return toSerialize, nil
}

type NullableConflict struct {
	value *Conflict
	isSet bool
}

func (v NullableConflict) Get() *Conflict {
	return v.value
}

func (v *NullableConflict) Set(val *Conflict) {
	v.value = val
	v.isSet = true
}

func (v NullableConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConflict(val *Conflict) *NullableConflict {
	return &NullableConflict{value: val, isSet: true}
}

func (v NullableConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
