/*
STACKIT Secrets Manager API

This API provides endpoints for managing the Secrets-Manager.

API version: 1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretsmanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotFound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotFound{}

/*
	types and functions for message
*/

// isNotNullableString
type NotFoundGetMessageAttributeType = *string

func getNotFoundGetMessageAttributeTypeOk(arg NotFoundGetMessageAttributeType) (ret NotFoundGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNotFoundGetMessageAttributeType(arg *NotFoundGetMessageAttributeType, val NotFoundGetMessageRetType) {
	*arg = &val
}

type NotFoundGetMessageArgType = string
type NotFoundGetMessageRetType = string

// NotFound struct for NotFound
type NotFound struct {
	// The error message for not found resources
	// REQUIRED
	Message NotFoundGetMessageAttributeType `json:"message"`
}

type _NotFound NotFound

// NewNotFound instantiates a new NotFound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotFound(message NotFoundGetMessageArgType) *NotFound {
	this := NotFound{}
	setNotFoundGetMessageAttributeType(&this.Message, message)
	return &this
}

// NewNotFoundWithDefaults instantiates a new NotFound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotFoundWithDefaults() *NotFound {
	this := NotFound{}
	return &this
}

// GetMessage returns the Message field value
func (o *NotFound) GetMessage() (ret NotFoundGetMessageRetType) {
	ret, _ = o.GetMessageOk()
	return ret
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NotFound) GetMessageOk() (ret NotFoundGetMessageRetType, ok bool) {
	return getNotFoundGetMessageAttributeTypeOk(o.Message)
}

// SetMessage sets field value
func (o *NotFound) SetMessage(v NotFoundGetMessageRetType) {
	setNotFoundGetMessageAttributeType(&o.Message, v)
}

func (o NotFound) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotFound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getNotFoundGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	return toSerialize, nil
}

func (o *NotFound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotFound := _NotFound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotFound)

	if err != nil {
		return err
	}

	*o = NotFound(varNotFound)

	return err
}

type NullableNotFound struct {
	value *NotFound
	isSet bool
}

func (v NullableNotFound) Get() *NotFound {
	return v.value
}

func (v *NullableNotFound) Set(val *NotFound) {
	v.value = val
	v.isSet = true
}

func (v NullableNotFound) IsSet() bool {
	return v.isSet
}

func (v *NullableNotFound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotFound(val *NotFound) *NullableNotFound {
	return &NullableNotFound{value: val, isSet: true}
}

func (v NullableNotFound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotFound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
