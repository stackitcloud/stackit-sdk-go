/*
STACKIT Secrets Manager API

This API provides endpoints for managing the Secrets-Manager.

API version: 1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretsmanager

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

/*
	types and functions for description
*/

// isNotNullableString
type UserGetDescriptionAttributeType = *string

func getUserGetDescriptionAttributeTypeOk(arg UserGetDescriptionAttributeType) (ret UserGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserGetDescriptionAttributeType(arg *UserGetDescriptionAttributeType, val UserGetDescriptionRetType) {
	*arg = &val
}

type UserGetDescriptionArgType = string
type UserGetDescriptionRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type UserGetIdAttributeType = *string

func getUserGetIdAttributeTypeOk(arg UserGetIdAttributeType) (ret UserGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserGetIdAttributeType(arg *UserGetIdAttributeType, val UserGetIdRetType) {
	*arg = &val
}

type UserGetIdArgType = string
type UserGetIdRetType = string

/*
	types and functions for password
*/

// isNotNullableString
type UserGetPasswordAttributeType = *string

func getUserGetPasswordAttributeTypeOk(arg UserGetPasswordAttributeType) (ret UserGetPasswordRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserGetPasswordAttributeType(arg *UserGetPasswordAttributeType, val UserGetPasswordRetType) {
	*arg = &val
}

type UserGetPasswordArgType = string
type UserGetPasswordRetType = string

/*
	types and functions for username
*/

// isNotNullableString
type UserGetUsernameAttributeType = *string

func getUserGetUsernameAttributeTypeOk(arg UserGetUsernameAttributeType) (ret UserGetUsernameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUserGetUsernameAttributeType(arg *UserGetUsernameAttributeType, val UserGetUsernameRetType) {
	*arg = &val
}

type UserGetUsernameArgType = string
type UserGetUsernameRetType = string

/*
	types and functions for write
*/

// isBoolean
type UsergetWriteAttributeType = *bool
type UsergetWriteArgType = bool
type UsergetWriteRetType = bool

func getUsergetWriteAttributeTypeOk(arg UsergetWriteAttributeType) (ret UsergetWriteRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUsergetWriteAttributeType(arg *UsergetWriteAttributeType, val UsergetWriteRetType) {
	*arg = &val
}

// User struct for User
type User struct {
	// A user chosen description to differentiate between multiple users.
	// REQUIRED
	Description UserGetDescriptionAttributeType `json:"description" required:"true"`
	// A auto generated unique id which identifies the users.
	// REQUIRED
	Id UserGetIdAttributeType `json:"id" required:"true"`
	// A auto generated password for logging in with the user.
	// REQUIRED
	Password UserGetPasswordAttributeType `json:"password" required:"true"`
	// A auto generated username for logging in with the user.
	// REQUIRED
	Username UserGetUsernameAttributeType `json:"username" required:"true"`
	// Is true if the user has write access to the secrets engine. Is false for a read-only user.
	// REQUIRED
	Write UsergetWriteAttributeType `json:"write" required:"true"`
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(description UserGetDescriptionArgType, id UserGetIdArgType, password UserGetPasswordArgType, username UserGetUsernameArgType, write UsergetWriteArgType) *User {
	this := User{}
	setUserGetDescriptionAttributeType(&this.Description, description)
	setUserGetIdAttributeType(&this.Id, id)
	setUserGetPasswordAttributeType(&this.Password, password)
	setUserGetUsernameAttributeType(&this.Username, username)
	setUsergetWriteAttributeType(&this.Write, write)
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetDescription returns the Description field value
func (o *User) GetDescription() (ret UserGetDescriptionRetType) {
	ret, _ = o.GetDescriptionOk()
	return ret
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *User) GetDescriptionOk() (ret UserGetDescriptionRetType, ok bool) {
	return getUserGetDescriptionAttributeTypeOk(o.Description)
}

// SetDescription sets field value
func (o *User) SetDescription(v UserGetDescriptionRetType) {
	setUserGetDescriptionAttributeType(&o.Description, v)
}

// GetId returns the Id field value
func (o *User) GetId() (ret UserGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (ret UserGetIdRetType, ok bool) {
	return getUserGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *User) SetId(v UserGetIdRetType) {
	setUserGetIdAttributeType(&o.Id, v)
}

// GetPassword returns the Password field value
func (o *User) GetPassword() (ret UserGetPasswordRetType) {
	ret, _ = o.GetPasswordOk()
	return ret
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *User) GetPasswordOk() (ret UserGetPasswordRetType, ok bool) {
	return getUserGetPasswordAttributeTypeOk(o.Password)
}

// SetPassword sets field value
func (o *User) SetPassword(v UserGetPasswordRetType) {
	setUserGetPasswordAttributeType(&o.Password, v)
}

// GetUsername returns the Username field value
func (o *User) GetUsername() (ret UserGetUsernameRetType) {
	ret, _ = o.GetUsernameOk()
	return ret
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (ret UserGetUsernameRetType, ok bool) {
	return getUserGetUsernameAttributeTypeOk(o.Username)
}

// SetUsername sets field value
func (o *User) SetUsername(v UserGetUsernameRetType) {
	setUserGetUsernameAttributeType(&o.Username, v)
}

// GetWrite returns the Write field value
func (o *User) GetWrite() (ret UsergetWriteRetType) {
	ret, _ = o.GetWriteOk()
	return ret
}

// GetWriteOk returns a tuple with the Write field value
// and a boolean to check if the value has been set.
func (o *User) GetWriteOk() (ret UsergetWriteRetType, ok bool) {
	return getUsergetWriteAttributeTypeOk(o.Write)
}

// SetWrite sets field value
func (o *User) SetWrite(v UsergetWriteRetType) {
	setUsergetWriteAttributeType(&o.Write, v)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUserGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getUserGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getUserGetPasswordAttributeTypeOk(o.Password); ok {
		toSerialize["Password"] = val
	}
	if val, ok := getUserGetUsernameAttributeTypeOk(o.Username); ok {
		toSerialize["Username"] = val
	}
	if val, ok := getUsergetWriteAttributeTypeOk(o.Write); ok {
		toSerialize["Write"] = val
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
