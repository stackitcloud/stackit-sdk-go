/*
STACKIT LogMe API

The STACKIT LogMe API provides endpoints to list service offerings, manage service instances and service credentials within STACKIT portal projects.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logme

import (
	"encoding/json"
)

// checks if the InstanceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceParameters{}

// InstanceParameters struct for InstanceParameters
type InstanceParameters struct {
	EnableMonitoring     *bool   `json:"enable_monitoring,omitempty"`
	FluentdTcp           *int64  `json:"fluentd-tcp,omitempty"`
	FluentdTls           *int64  `json:"fluentd-tls,omitempty"`
	FluentdTlsCiphers    *string `json:"fluentd-tls-ciphers,omitempty"`
	FluentdTlsMaxVersion *string `json:"fluentd-tls-max-version,omitempty"`
	FluentdTlsMinVersion *string `json:"fluentd-tls-min-version,omitempty"`
	FluentdTlsVersion    *string `json:"fluentd-tls-version,omitempty"`
	FluentdUdp           *int64  `json:"fluentd-udp,omitempty"`
	// If you want to monitor your service with Graphite, you can set the custom parameter graphite. It expects the host and port where the Graphite metrics should be sent to.
	Graphite *string                         `json:"graphite,omitempty"`
	Groks    *[]InstanceParametersGroksInner `json:"groks,omitempty"`
	// Combination of an integer and a timerange when an index will be considered 'd' and can be deleted from OpenSearch. Possible values for the timerange are s, m, h and d.
	IsmDeletionAfter *string  `json:"ism_deletion_after,omitempty"`
	IsmJitter        *float64 `json:"ism_jitter,omitempty"`
	IsmJobInterval   *int64   `json:"ism_job_interval,omitempty"`
	// Default: not set, 46% of available memory will be used. The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace *int64 `json:"java_heapspace,omitempty"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace *int64 `json:"java_maxmetaspace,omitempty"`
	// This component monitors ephemeral and persistent disk usage. If one of these disk usages reaches the default configured threshold of 80%, the a9s Parachute stops all processes on that node.
	MaxDiskThreshold *int64 `json:"max_disk_threshold,omitempty"`
	// Frequency of metrics being emitted in seconds
	MetricsFrequency *int64 `json:"metrics_frequency,omitempty"`
	// Depending on your graphite provider, you might need to prefix the metrics with a certain value, like an API key for example.
	MetricsPrefix          *string   `json:"metrics_prefix,omitempty"`
	MonitoringInstanceId   *string   `json:"monitoring_instance_id,omitempty"`
	OpensearchTlsCiphers   *[]string `json:"opensearch-tls-ciphers,omitempty"`
	OpensearchTlsProtocols *[]string `json:"opensearch-tls-protocols,omitempty"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl       *string   `json:"sgw_acl,omitempty"`
	Syslog       *[]string `json:"syslog,omitempty"`
	SyslogUseUdp *string   `json:"syslog-use-udp,omitempty"`
}

// NewInstanceParameters instantiates a new InstanceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceParameters() *InstanceParameters {
	this := InstanceParameters{}
	var enableMonitoring bool = false
	this.EnableMonitoring = &enableMonitoring
	var fluentdTcp int64 = 0
	this.FluentdTcp = &fluentdTcp
	var fluentdTls int64 = 6514
	this.FluentdTls = &fluentdTls
	var fluentdUdp int64 = 514
	this.FluentdUdp = &fluentdUdp
	var ismDeletionAfter string = "30d"
	this.IsmDeletionAfter = &ismDeletionAfter
	var ismJitter float64 = 0.6
	this.IsmJitter = &ismJitter
	var ismJobInterval int64 = 5
	this.IsmJobInterval = &ismJobInterval
	var javaMaxmetaspace int64 = 512
	this.JavaMaxmetaspace = &javaMaxmetaspace
	var maxDiskThreshold int64 = 80
	this.MaxDiskThreshold = &maxDiskThreshold
	var metricsFrequency int64 = 10
	this.MetricsFrequency = &metricsFrequency
	return &this
}

// NewInstanceParametersWithDefaults instantiates a new InstanceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceParametersWithDefaults() *InstanceParameters {
	this := InstanceParameters{}
	var enableMonitoring bool = false
	this.EnableMonitoring = &enableMonitoring
	var fluentdTcp int64 = 0
	this.FluentdTcp = &fluentdTcp
	var fluentdTls int64 = 6514
	this.FluentdTls = &fluentdTls
	var fluentdUdp int64 = 514
	this.FluentdUdp = &fluentdUdp
	var ismDeletionAfter string = "30d"
	this.IsmDeletionAfter = &ismDeletionAfter
	var ismJitter float64 = 0.6
	this.IsmJitter = &ismJitter
	var ismJobInterval int64 = 5
	this.IsmJobInterval = &ismJobInterval
	var javaMaxmetaspace int64 = 512
	this.JavaMaxmetaspace = &javaMaxmetaspace
	var maxDiskThreshold int64 = 80
	this.MaxDiskThreshold = &maxDiskThreshold
	var metricsFrequency int64 = 10
	this.MetricsFrequency = &metricsFrequency
	return &this
}

// GetEnableMonitoring returns the EnableMonitoring field value if set, zero value otherwise.
func (o *InstanceParameters) GetEnableMonitoring() *bool {
	if o == nil || IsNil(o.EnableMonitoring) {
		var ret *bool
		return ret
	}
	return o.EnableMonitoring
}

// GetEnableMonitoringOk returns a tuple with the EnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetEnableMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMonitoring) {
		return nil, false
	}
	return o.EnableMonitoring, true
}

// HasEnableMonitoring returns a boolean if a field has been set.
func (o *InstanceParameters) HasEnableMonitoring() bool {
	if o != nil && !IsNil(o.EnableMonitoring) {
		return true
	}

	return false
}

// SetEnableMonitoring gets a reference to the given bool and assigns it to the EnableMonitoring field.
func (o *InstanceParameters) SetEnableMonitoring(v *bool) {
	o.EnableMonitoring = v
}

// GetFluentdTcp returns the FluentdTcp field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdTcp() *int64 {
	if o == nil || IsNil(o.FluentdTcp) {
		var ret *int64
		return ret
	}
	return o.FluentdTcp
}

// GetFluentdTcpOk returns a tuple with the FluentdTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdTcpOk() (*int64, bool) {
	if o == nil || IsNil(o.FluentdTcp) {
		return nil, false
	}
	return o.FluentdTcp, true
}

// HasFluentdTcp returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdTcp() bool {
	if o != nil && !IsNil(o.FluentdTcp) {
		return true
	}

	return false
}

// SetFluentdTcp gets a reference to the given int64 and assigns it to the FluentdTcp field.
func (o *InstanceParameters) SetFluentdTcp(v *int64) {
	o.FluentdTcp = v
}

// GetFluentdTls returns the FluentdTls field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdTls() *int64 {
	if o == nil || IsNil(o.FluentdTls) {
		var ret *int64
		return ret
	}
	return o.FluentdTls
}

// GetFluentdTlsOk returns a tuple with the FluentdTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdTlsOk() (*int64, bool) {
	if o == nil || IsNil(o.FluentdTls) {
		return nil, false
	}
	return o.FluentdTls, true
}

// HasFluentdTls returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdTls() bool {
	if o != nil && !IsNil(o.FluentdTls) {
		return true
	}

	return false
}

// SetFluentdTls gets a reference to the given int64 and assigns it to the FluentdTls field.
func (o *InstanceParameters) SetFluentdTls(v *int64) {
	o.FluentdTls = v
}

// GetFluentdTlsCiphers returns the FluentdTlsCiphers field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdTlsCiphers() *string {
	if o == nil || IsNil(o.FluentdTlsCiphers) {
		var ret *string
		return ret
	}
	return o.FluentdTlsCiphers
}

// GetFluentdTlsCiphersOk returns a tuple with the FluentdTlsCiphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdTlsCiphersOk() (*string, bool) {
	if o == nil || IsNil(o.FluentdTlsCiphers) {
		return nil, false
	}
	return o.FluentdTlsCiphers, true
}

// HasFluentdTlsCiphers returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdTlsCiphers() bool {
	if o != nil && !IsNil(o.FluentdTlsCiphers) {
		return true
	}

	return false
}

// SetFluentdTlsCiphers gets a reference to the given string and assigns it to the FluentdTlsCiphers field.
func (o *InstanceParameters) SetFluentdTlsCiphers(v *string) {
	o.FluentdTlsCiphers = v
}

// GetFluentdTlsMaxVersion returns the FluentdTlsMaxVersion field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdTlsMaxVersion() *string {
	if o == nil || IsNil(o.FluentdTlsMaxVersion) {
		var ret *string
		return ret
	}
	return o.FluentdTlsMaxVersion
}

// GetFluentdTlsMaxVersionOk returns a tuple with the FluentdTlsMaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdTlsMaxVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FluentdTlsMaxVersion) {
		return nil, false
	}
	return o.FluentdTlsMaxVersion, true
}

// HasFluentdTlsMaxVersion returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdTlsMaxVersion() bool {
	if o != nil && !IsNil(o.FluentdTlsMaxVersion) {
		return true
	}

	return false
}

// SetFluentdTlsMaxVersion gets a reference to the given string and assigns it to the FluentdTlsMaxVersion field.
func (o *InstanceParameters) SetFluentdTlsMaxVersion(v *string) {
	o.FluentdTlsMaxVersion = v
}

// GetFluentdTlsMinVersion returns the FluentdTlsMinVersion field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdTlsMinVersion() *string {
	if o == nil || IsNil(o.FluentdTlsMinVersion) {
		var ret *string
		return ret
	}
	return o.FluentdTlsMinVersion
}

// GetFluentdTlsMinVersionOk returns a tuple with the FluentdTlsMinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdTlsMinVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FluentdTlsMinVersion) {
		return nil, false
	}
	return o.FluentdTlsMinVersion, true
}

// HasFluentdTlsMinVersion returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdTlsMinVersion() bool {
	if o != nil && !IsNil(o.FluentdTlsMinVersion) {
		return true
	}

	return false
}

// SetFluentdTlsMinVersion gets a reference to the given string and assigns it to the FluentdTlsMinVersion field.
func (o *InstanceParameters) SetFluentdTlsMinVersion(v *string) {
	o.FluentdTlsMinVersion = v
}

// GetFluentdTlsVersion returns the FluentdTlsVersion field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdTlsVersion() *string {
	if o == nil || IsNil(o.FluentdTlsVersion) {
		var ret *string
		return ret
	}
	return o.FluentdTlsVersion
}

// GetFluentdTlsVersionOk returns a tuple with the FluentdTlsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdTlsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FluentdTlsVersion) {
		return nil, false
	}
	return o.FluentdTlsVersion, true
}

// HasFluentdTlsVersion returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdTlsVersion() bool {
	if o != nil && !IsNil(o.FluentdTlsVersion) {
		return true
	}

	return false
}

// SetFluentdTlsVersion gets a reference to the given string and assigns it to the FluentdTlsVersion field.
func (o *InstanceParameters) SetFluentdTlsVersion(v *string) {
	o.FluentdTlsVersion = v
}

// GetFluentdUdp returns the FluentdUdp field value if set, zero value otherwise.
func (o *InstanceParameters) GetFluentdUdp() *int64 {
	if o == nil || IsNil(o.FluentdUdp) {
		var ret *int64
		return ret
	}
	return o.FluentdUdp
}

// GetFluentdUdpOk returns a tuple with the FluentdUdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetFluentdUdpOk() (*int64, bool) {
	if o == nil || IsNil(o.FluentdUdp) {
		return nil, false
	}
	return o.FluentdUdp, true
}

// HasFluentdUdp returns a boolean if a field has been set.
func (o *InstanceParameters) HasFluentdUdp() bool {
	if o != nil && !IsNil(o.FluentdUdp) {
		return true
	}

	return false
}

// SetFluentdUdp gets a reference to the given int64 and assigns it to the FluentdUdp field.
func (o *InstanceParameters) SetFluentdUdp(v *int64) {
	o.FluentdUdp = v
}

// GetGraphite returns the Graphite field value if set, zero value otherwise.
func (o *InstanceParameters) GetGraphite() *string {
	if o == nil || IsNil(o.Graphite) {
		var ret *string
		return ret
	}
	return o.Graphite
}

// GetGraphiteOk returns a tuple with the Graphite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetGraphiteOk() (*string, bool) {
	if o == nil || IsNil(o.Graphite) {
		return nil, false
	}
	return o.Graphite, true
}

// HasGraphite returns a boolean if a field has been set.
func (o *InstanceParameters) HasGraphite() bool {
	if o != nil && !IsNil(o.Graphite) {
		return true
	}

	return false
}

// SetGraphite gets a reference to the given string and assigns it to the Graphite field.
func (o *InstanceParameters) SetGraphite(v *string) {
	o.Graphite = v
}

// GetGroks returns the Groks field value if set, zero value otherwise.
func (o *InstanceParameters) GetGroks() *[]InstanceParametersGroksInner {
	if o == nil || IsNil(o.Groks) {
		var ret *[]InstanceParametersGroksInner
		return ret
	}
	return o.Groks
}

// GetGroksOk returns a tuple with the Groks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetGroksOk() (*[]InstanceParametersGroksInner, bool) {
	if o == nil || IsNil(o.Groks) {
		return nil, false
	}
	return o.Groks, true
}

// HasGroks returns a boolean if a field has been set.
func (o *InstanceParameters) HasGroks() bool {
	if o != nil && !IsNil(o.Groks) {
		return true
	}

	return false
}

// SetGroks gets a reference to the given []InstanceParametersGroksInner and assigns it to the Groks field.
func (o *InstanceParameters) SetGroks(v *[]InstanceParametersGroksInner) {
	o.Groks = v
}

// GetIsmDeletionAfter returns the IsmDeletionAfter field value if set, zero value otherwise.
func (o *InstanceParameters) GetIsmDeletionAfter() *string {
	if o == nil || IsNil(o.IsmDeletionAfter) {
		var ret *string
		return ret
	}
	return o.IsmDeletionAfter
}

// GetIsmDeletionAfterOk returns a tuple with the IsmDeletionAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetIsmDeletionAfterOk() (*string, bool) {
	if o == nil || IsNil(o.IsmDeletionAfter) {
		return nil, false
	}
	return o.IsmDeletionAfter, true
}

// HasIsmDeletionAfter returns a boolean if a field has been set.
func (o *InstanceParameters) HasIsmDeletionAfter() bool {
	if o != nil && !IsNil(o.IsmDeletionAfter) {
		return true
	}

	return false
}

// SetIsmDeletionAfter gets a reference to the given string and assigns it to the IsmDeletionAfter field.
func (o *InstanceParameters) SetIsmDeletionAfter(v *string) {
	o.IsmDeletionAfter = v
}

// GetIsmJitter returns the IsmJitter field value if set, zero value otherwise.
func (o *InstanceParameters) GetIsmJitter() *float64 {
	if o == nil || IsNil(o.IsmJitter) {
		var ret *float64
		return ret
	}
	return o.IsmJitter
}

// GetIsmJitterOk returns a tuple with the IsmJitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetIsmJitterOk() (*float64, bool) {
	if o == nil || IsNil(o.IsmJitter) {
		return nil, false
	}
	return o.IsmJitter, true
}

// HasIsmJitter returns a boolean if a field has been set.
func (o *InstanceParameters) HasIsmJitter() bool {
	if o != nil && !IsNil(o.IsmJitter) {
		return true
	}

	return false
}

// SetIsmJitter gets a reference to the given float64 and assigns it to the IsmJitter field.
func (o *InstanceParameters) SetIsmJitter(v *float64) {
	o.IsmJitter = v
}

// GetIsmJobInterval returns the IsmJobInterval field value if set, zero value otherwise.
func (o *InstanceParameters) GetIsmJobInterval() *int64 {
	if o == nil || IsNil(o.IsmJobInterval) {
		var ret *int64
		return ret
	}
	return o.IsmJobInterval
}

// GetIsmJobIntervalOk returns a tuple with the IsmJobInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetIsmJobIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.IsmJobInterval) {
		return nil, false
	}
	return o.IsmJobInterval, true
}

// HasIsmJobInterval returns a boolean if a field has been set.
func (o *InstanceParameters) HasIsmJobInterval() bool {
	if o != nil && !IsNil(o.IsmJobInterval) {
		return true
	}

	return false
}

// SetIsmJobInterval gets a reference to the given int64 and assigns it to the IsmJobInterval field.
func (o *InstanceParameters) SetIsmJobInterval(v *int64) {
	o.IsmJobInterval = v
}

// GetJavaHeapspace returns the JavaHeapspace field value if set, zero value otherwise.
func (o *InstanceParameters) GetJavaHeapspace() *int64 {
	if o == nil || IsNil(o.JavaHeapspace) {
		var ret *int64
		return ret
	}
	return o.JavaHeapspace
}

// GetJavaHeapspaceOk returns a tuple with the JavaHeapspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetJavaHeapspaceOk() (*int64, bool) {
	if o == nil || IsNil(o.JavaHeapspace) {
		return nil, false
	}
	return o.JavaHeapspace, true
}

// HasJavaHeapspace returns a boolean if a field has been set.
func (o *InstanceParameters) HasJavaHeapspace() bool {
	if o != nil && !IsNil(o.JavaHeapspace) {
		return true
	}

	return false
}

// SetJavaHeapspace gets a reference to the given int64 and assigns it to the JavaHeapspace field.
func (o *InstanceParameters) SetJavaHeapspace(v *int64) {
	o.JavaHeapspace = v
}

// GetJavaMaxmetaspace returns the JavaMaxmetaspace field value if set, zero value otherwise.
func (o *InstanceParameters) GetJavaMaxmetaspace() *int64 {
	if o == nil || IsNil(o.JavaMaxmetaspace) {
		var ret *int64
		return ret
	}
	return o.JavaMaxmetaspace
}

// GetJavaMaxmetaspaceOk returns a tuple with the JavaMaxmetaspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetJavaMaxmetaspaceOk() (*int64, bool) {
	if o == nil || IsNil(o.JavaMaxmetaspace) {
		return nil, false
	}
	return o.JavaMaxmetaspace, true
}

// HasJavaMaxmetaspace returns a boolean if a field has been set.
func (o *InstanceParameters) HasJavaMaxmetaspace() bool {
	if o != nil && !IsNil(o.JavaMaxmetaspace) {
		return true
	}

	return false
}

// SetJavaMaxmetaspace gets a reference to the given int64 and assigns it to the JavaMaxmetaspace field.
func (o *InstanceParameters) SetJavaMaxmetaspace(v *int64) {
	o.JavaMaxmetaspace = v
}

// GetMaxDiskThreshold returns the MaxDiskThreshold field value if set, zero value otherwise.
func (o *InstanceParameters) GetMaxDiskThreshold() *int64 {
	if o == nil || IsNil(o.MaxDiskThreshold) {
		var ret *int64
		return ret
	}
	return o.MaxDiskThreshold
}

// GetMaxDiskThresholdOk returns a tuple with the MaxDiskThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMaxDiskThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDiskThreshold) {
		return nil, false
	}
	return o.MaxDiskThreshold, true
}

// HasMaxDiskThreshold returns a boolean if a field has been set.
func (o *InstanceParameters) HasMaxDiskThreshold() bool {
	if o != nil && !IsNil(o.MaxDiskThreshold) {
		return true
	}

	return false
}

// SetMaxDiskThreshold gets a reference to the given int64 and assigns it to the MaxDiskThreshold field.
func (o *InstanceParameters) SetMaxDiskThreshold(v *int64) {
	o.MaxDiskThreshold = v
}

// GetMetricsFrequency returns the MetricsFrequency field value if set, zero value otherwise.
func (o *InstanceParameters) GetMetricsFrequency() *int64 {
	if o == nil || IsNil(o.MetricsFrequency) {
		var ret *int64
		return ret
	}
	return o.MetricsFrequency
}

// GetMetricsFrequencyOk returns a tuple with the MetricsFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMetricsFrequencyOk() (*int64, bool) {
	if o == nil || IsNil(o.MetricsFrequency) {
		return nil, false
	}
	return o.MetricsFrequency, true
}

// HasMetricsFrequency returns a boolean if a field has been set.
func (o *InstanceParameters) HasMetricsFrequency() bool {
	if o != nil && !IsNil(o.MetricsFrequency) {
		return true
	}

	return false
}

// SetMetricsFrequency gets a reference to the given int64 and assigns it to the MetricsFrequency field.
func (o *InstanceParameters) SetMetricsFrequency(v *int64) {
	o.MetricsFrequency = v
}

// GetMetricsPrefix returns the MetricsPrefix field value if set, zero value otherwise.
func (o *InstanceParameters) GetMetricsPrefix() *string {
	if o == nil || IsNil(o.MetricsPrefix) {
		var ret *string
		return ret
	}
	return o.MetricsPrefix
}

// GetMetricsPrefixOk returns a tuple with the MetricsPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMetricsPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MetricsPrefix) {
		return nil, false
	}
	return o.MetricsPrefix, true
}

// HasMetricsPrefix returns a boolean if a field has been set.
func (o *InstanceParameters) HasMetricsPrefix() bool {
	if o != nil && !IsNil(o.MetricsPrefix) {
		return true
	}

	return false
}

// SetMetricsPrefix gets a reference to the given string and assigns it to the MetricsPrefix field.
func (o *InstanceParameters) SetMetricsPrefix(v *string) {
	o.MetricsPrefix = v
}

// GetMonitoringInstanceId returns the MonitoringInstanceId field value if set, zero value otherwise.
func (o *InstanceParameters) GetMonitoringInstanceId() *string {
	if o == nil || IsNil(o.MonitoringInstanceId) {
		var ret *string
		return ret
	}
	return o.MonitoringInstanceId
}

// GetMonitoringInstanceIdOk returns a tuple with the MonitoringInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetMonitoringInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.MonitoringInstanceId) {
		return nil, false
	}
	return o.MonitoringInstanceId, true
}

// HasMonitoringInstanceId returns a boolean if a field has been set.
func (o *InstanceParameters) HasMonitoringInstanceId() bool {
	if o != nil && !IsNil(o.MonitoringInstanceId) {
		return true
	}

	return false
}

// SetMonitoringInstanceId gets a reference to the given string and assigns it to the MonitoringInstanceId field.
func (o *InstanceParameters) SetMonitoringInstanceId(v *string) {
	o.MonitoringInstanceId = v
}

// GetOpensearchTlsCiphers returns the OpensearchTlsCiphers field value if set, zero value otherwise.
func (o *InstanceParameters) GetOpensearchTlsCiphers() *[]string {
	if o == nil || IsNil(o.OpensearchTlsCiphers) {
		var ret *[]string
		return ret
	}
	return o.OpensearchTlsCiphers
}

// GetOpensearchTlsCiphersOk returns a tuple with the OpensearchTlsCiphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetOpensearchTlsCiphersOk() (*[]string, bool) {
	if o == nil || IsNil(o.OpensearchTlsCiphers) {
		return nil, false
	}
	return o.OpensearchTlsCiphers, true
}

// HasOpensearchTlsCiphers returns a boolean if a field has been set.
func (o *InstanceParameters) HasOpensearchTlsCiphers() bool {
	if o != nil && !IsNil(o.OpensearchTlsCiphers) {
		return true
	}

	return false
}

// SetOpensearchTlsCiphers gets a reference to the given []string and assigns it to the OpensearchTlsCiphers field.
func (o *InstanceParameters) SetOpensearchTlsCiphers(v *[]string) {
	o.OpensearchTlsCiphers = v
}

// GetOpensearchTlsProtocols returns the OpensearchTlsProtocols field value if set, zero value otherwise.
func (o *InstanceParameters) GetOpensearchTlsProtocols() *[]string {
	if o == nil || IsNil(o.OpensearchTlsProtocols) {
		var ret *[]string
		return ret
	}
	return o.OpensearchTlsProtocols
}

// GetOpensearchTlsProtocolsOk returns a tuple with the OpensearchTlsProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetOpensearchTlsProtocolsOk() (*[]string, bool) {
	if o == nil || IsNil(o.OpensearchTlsProtocols) {
		return nil, false
	}
	return o.OpensearchTlsProtocols, true
}

// HasOpensearchTlsProtocols returns a boolean if a field has been set.
func (o *InstanceParameters) HasOpensearchTlsProtocols() bool {
	if o != nil && !IsNil(o.OpensearchTlsProtocols) {
		return true
	}

	return false
}

// SetOpensearchTlsProtocols gets a reference to the given []string and assigns it to the OpensearchTlsProtocols field.
func (o *InstanceParameters) SetOpensearchTlsProtocols(v *[]string) {
	o.OpensearchTlsProtocols = v
}

// GetSgwAcl returns the SgwAcl field value if set, zero value otherwise.
func (o *InstanceParameters) GetSgwAcl() *string {
	if o == nil || IsNil(o.SgwAcl) {
		var ret *string
		return ret
	}
	return o.SgwAcl
}

// GetSgwAclOk returns a tuple with the SgwAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetSgwAclOk() (*string, bool) {
	if o == nil || IsNil(o.SgwAcl) {
		return nil, false
	}
	return o.SgwAcl, true
}

// HasSgwAcl returns a boolean if a field has been set.
func (o *InstanceParameters) HasSgwAcl() bool {
	if o != nil && !IsNil(o.SgwAcl) {
		return true
	}

	return false
}

// SetSgwAcl gets a reference to the given string and assigns it to the SgwAcl field.
func (o *InstanceParameters) SetSgwAcl(v *string) {
	o.SgwAcl = v
}

// GetSyslog returns the Syslog field value if set, zero value otherwise.
func (o *InstanceParameters) GetSyslog() *[]string {
	if o == nil || IsNil(o.Syslog) {
		var ret *[]string
		return ret
	}
	return o.Syslog
}

// GetSyslogOk returns a tuple with the Syslog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetSyslogOk() (*[]string, bool) {
	if o == nil || IsNil(o.Syslog) {
		return nil, false
	}
	return o.Syslog, true
}

// HasSyslog returns a boolean if a field has been set.
func (o *InstanceParameters) HasSyslog() bool {
	if o != nil && !IsNil(o.Syslog) {
		return true
	}

	return false
}

// SetSyslog gets a reference to the given []string and assigns it to the Syslog field.
func (o *InstanceParameters) SetSyslog(v *[]string) {
	o.Syslog = v
}

// GetSyslogUseUdp returns the SyslogUseUdp field value if set, zero value otherwise.
func (o *InstanceParameters) GetSyslogUseUdp() *string {
	if o == nil || IsNil(o.SyslogUseUdp) {
		var ret *string
		return ret
	}
	return o.SyslogUseUdp
}

// GetSyslogUseUdpOk returns a tuple with the SyslogUseUdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceParameters) GetSyslogUseUdpOk() (*string, bool) {
	if o == nil || IsNil(o.SyslogUseUdp) {
		return nil, false
	}
	return o.SyslogUseUdp, true
}

// HasSyslogUseUdp returns a boolean if a field has been set.
func (o *InstanceParameters) HasSyslogUseUdp() bool {
	if o != nil && !IsNil(o.SyslogUseUdp) {
		return true
	}

	return false
}

// SetSyslogUseUdp gets a reference to the given string and assigns it to the SyslogUseUdp field.
func (o *InstanceParameters) SetSyslogUseUdp(v *string) {
	o.SyslogUseUdp = v
}

func (o InstanceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableMonitoring) {
		toSerialize["enable_monitoring"] = o.EnableMonitoring
	}
	if !IsNil(o.FluentdTcp) {
		toSerialize["fluentd-tcp"] = o.FluentdTcp
	}
	if !IsNil(o.FluentdTls) {
		toSerialize["fluentd-tls"] = o.FluentdTls
	}
	if !IsNil(o.FluentdTlsCiphers) {
		toSerialize["fluentd-tls-ciphers"] = o.FluentdTlsCiphers
	}
	if !IsNil(o.FluentdTlsMaxVersion) {
		toSerialize["fluentd-tls-max-version"] = o.FluentdTlsMaxVersion
	}
	if !IsNil(o.FluentdTlsMinVersion) {
		toSerialize["fluentd-tls-min-version"] = o.FluentdTlsMinVersion
	}
	if !IsNil(o.FluentdTlsVersion) {
		toSerialize["fluentd-tls-version"] = o.FluentdTlsVersion
	}
	if !IsNil(o.FluentdUdp) {
		toSerialize["fluentd-udp"] = o.FluentdUdp
	}
	if !IsNil(o.Graphite) {
		toSerialize["graphite"] = o.Graphite
	}
	if !IsNil(o.Groks) {
		toSerialize["groks"] = o.Groks
	}
	if !IsNil(o.IsmDeletionAfter) {
		toSerialize["ism_deletion_after"] = o.IsmDeletionAfter
	}
	if !IsNil(o.IsmJitter) {
		toSerialize["ism_jitter"] = o.IsmJitter
	}
	if !IsNil(o.IsmJobInterval) {
		toSerialize["ism_job_interval"] = o.IsmJobInterval
	}
	if !IsNil(o.JavaHeapspace) {
		toSerialize["java_heapspace"] = o.JavaHeapspace
	}
	if !IsNil(o.JavaMaxmetaspace) {
		toSerialize["java_maxmetaspace"] = o.JavaMaxmetaspace
	}
	if !IsNil(o.MaxDiskThreshold) {
		toSerialize["max_disk_threshold"] = o.MaxDiskThreshold
	}
	if !IsNil(o.MetricsFrequency) {
		toSerialize["metrics_frequency"] = o.MetricsFrequency
	}
	if !IsNil(o.MetricsPrefix) {
		toSerialize["metrics_prefix"] = o.MetricsPrefix
	}
	if !IsNil(o.MonitoringInstanceId) {
		toSerialize["monitoring_instance_id"] = o.MonitoringInstanceId
	}
	if !IsNil(o.OpensearchTlsCiphers) {
		toSerialize["opensearch-tls-ciphers"] = o.OpensearchTlsCiphers
	}
	if !IsNil(o.OpensearchTlsProtocols) {
		toSerialize["opensearch-tls-protocols"] = o.OpensearchTlsProtocols
	}
	if !IsNil(o.SgwAcl) {
		toSerialize["sgw_acl"] = o.SgwAcl
	}
	if !IsNil(o.Syslog) {
		toSerialize["syslog"] = o.Syslog
	}
	if !IsNil(o.SyslogUseUdp) {
		toSerialize["syslog-use-udp"] = o.SyslogUseUdp
	}
	return toSerialize, nil
}

type NullableInstanceParameters struct {
	value *InstanceParameters
	isSet bool
}

func (v NullableInstanceParameters) Get() *InstanceParameters {
	return v.value
}

func (v *NullableInstanceParameters) Set(val *InstanceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceParameters(val *InstanceParameters) *NullableInstanceParameters {
	return &NullableInstanceParameters{value: val, isSet: true}
}

func (v NullableInstanceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
