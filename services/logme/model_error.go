/*
STACKIT LogMe API

The STACKIT LogMe API provides endpoints to list service offerings, manage service instances and service credentials within STACKIT portal projects.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logme

import (
	"encoding/json"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

/*
	types and functions for description
*/

// isNotNullableString
type ErrorGetDescriptionAttributeType = *string

func getErrorGetDescriptionAttributeTypeOk(arg ErrorGetDescriptionAttributeType) (ret ErrorGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetDescriptionAttributeType(arg *ErrorGetDescriptionAttributeType, val ErrorGetDescriptionRetType) {
	*arg = &val
}

type ErrorGetDescriptionArgType = string
type ErrorGetDescriptionRetType = string

/*
	types and functions for error
*/

// isNotNullableString
type ErrorGetErrorAttributeType = *string

func getErrorGetErrorAttributeTypeOk(arg ErrorGetErrorAttributeType) (ret ErrorGetErrorRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setErrorGetErrorAttributeType(arg *ErrorGetErrorAttributeType, val ErrorGetErrorRetType) {
	*arg = &val
}

type ErrorGetErrorArgType = string
type ErrorGetErrorRetType = string

// Error struct for Error
type Error struct {
	// REQUIRED
	Description ErrorGetDescriptionAttributeType `json:"description" required:"true"`
	// REQUIRED
	Error ErrorGetErrorAttributeType `json:"error" required:"true"`
}

type _Error Error

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(description ErrorGetDescriptionArgType, error_ ErrorGetErrorArgType) *Error {
	this := Error{}
	setErrorGetDescriptionAttributeType(&this.Description, description)
	setErrorGetErrorAttributeType(&this.Error, error_)
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetDescription returns the Description field value
func (o *Error) GetDescription() (ret ErrorGetDescriptionRetType) {
	ret, _ = o.GetDescriptionOk()
	return ret
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Error) GetDescriptionOk() (ret ErrorGetDescriptionRetType, ok bool) {
	return getErrorGetDescriptionAttributeTypeOk(o.Description)
}

// SetDescription sets field value
func (o *Error) SetDescription(v ErrorGetDescriptionRetType) {
	setErrorGetDescriptionAttributeType(&o.Description, v)
}

// GetError returns the Error field value
func (o *Error) GetError() (ret ErrorGetErrorRetType) {
	ret, _ = o.GetErrorOk()
	return ret
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *Error) GetErrorOk() (ret ErrorGetErrorRetType, ok bool) {
	return getErrorGetErrorAttributeTypeOk(o.Error)
}

// SetError sets field value
func (o *Error) SetError(v ErrorGetErrorRetType) {
	setErrorGetErrorAttributeType(&o.Error, v)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getErrorGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getErrorGetErrorAttributeTypeOk(o.Error); ok {
		toSerialize["Error"] = val
	}
	return toSerialize, nil
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
