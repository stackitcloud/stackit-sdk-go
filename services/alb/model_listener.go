/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
	"fmt"
)

// checks if the Listener type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Listener{}

/*
	types and functions for http
*/

// isModel
type ListenerGetHttpAttributeType = *ProtocolOptionsHTTP
type ListenerGetHttpArgType = ProtocolOptionsHTTP
type ListenerGetHttpRetType = ProtocolOptionsHTTP

func getListenerGetHttpAttributeTypeOk(arg ListenerGetHttpAttributeType) (ret ListenerGetHttpRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListenerGetHttpAttributeType(arg *ListenerGetHttpAttributeType, val ListenerGetHttpRetType) {
	*arg = &val
}

/*
	types and functions for https
*/

// isModel
type ListenerGetHttpsAttributeType = *ProtocolOptionsHTTPS
type ListenerGetHttpsArgType = ProtocolOptionsHTTPS
type ListenerGetHttpsRetType = ProtocolOptionsHTTPS

func getListenerGetHttpsAttributeTypeOk(arg ListenerGetHttpsAttributeType) (ret ListenerGetHttpsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListenerGetHttpsAttributeType(arg *ListenerGetHttpsAttributeType, val ListenerGetHttpsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type ListenerGetNameAttributeType = *string

func getListenerGetNameAttributeTypeOk(arg ListenerGetNameAttributeType) (ret ListenerGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListenerGetNameAttributeType(arg *ListenerGetNameAttributeType, val ListenerGetNameRetType) {
	*arg = &val
}

type ListenerGetNameArgType = string
type ListenerGetNameRetType = string

/*
	types and functions for port
*/

// isInteger
type ListenerGetPortAttributeType = *int64
type ListenerGetPortArgType = int64
type ListenerGetPortRetType = int64

func getListenerGetPortAttributeTypeOk(arg ListenerGetPortAttributeType) (ret ListenerGetPortRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListenerGetPortAttributeType(arg *ListenerGetPortAttributeType, val ListenerGetPortRetType) {
	*arg = &val
}

/*
	types and functions for protocol
*/

// isEnum

// ListenerProtocol Protocol is the highest network protocol we understand to load balance. Currently PROTOCOL_HTTP and PROTOCOL_HTTPS are supported.
type ListenerProtocol string

// List of Protocol
const (
	LISTENERPROTOCOL_UNSPECIFIED ListenerProtocol = "PROTOCOL_UNSPECIFIED"
	LISTENERPROTOCOL_HTTP        ListenerProtocol = "PROTOCOL_HTTP"
	LISTENERPROTOCOL_HTTPS       ListenerProtocol = "PROTOCOL_HTTPS"
)

// All allowed values of Listener enum
var AllowedListenerProtocolEnumValues = []ListenerProtocol{
	"PROTOCOL_UNSPECIFIED",
	"PROTOCOL_HTTP",
	"PROTOCOL_HTTPS",
}

func (v *ListenerProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ListenerProtocol(value)
	for _, existing := range AllowedListenerProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Listener", value)
}

// NewListenerProtocolFromValue returns a pointer to a valid ListenerProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListenerProtocolFromValue(v string) (*ListenerProtocol, error) {
	ev := ListenerProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListenerProtocol: valid values are %v", v, AllowedListenerProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListenerProtocol) IsValid() bool {
	for _, existing := range AllowedListenerProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolProtocol value
func (v ListenerProtocol) Ptr() *ListenerProtocol {
	return &v
}

type NullableListenerProtocol struct {
	value *ListenerProtocol
	isSet bool
}

func (v NullableListenerProtocol) Get() *ListenerProtocol {
	return v.value
}

func (v *NullableListenerProtocol) Set(val *ListenerProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableListenerProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableListenerProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListenerProtocol(val *ListenerProtocol) *NullableListenerProtocol {
	return &NullableListenerProtocol{value: val, isSet: true}
}

func (v NullableListenerProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListenerProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ListenerGetProtocolAttributeType = *ListenerProtocol
type ListenerGetProtocolArgType = ListenerProtocol
type ListenerGetProtocolRetType = ListenerProtocol

func getListenerGetProtocolAttributeTypeOk(arg ListenerGetProtocolAttributeType) (ret ListenerGetProtocolRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListenerGetProtocolAttributeType(arg *ListenerGetProtocolAttributeType, val ListenerGetProtocolRetType) {
	*arg = &val
}

// Listener struct for Listener
type Listener struct {
	Http  ListenerGetHttpAttributeType  `json:"http,omitempty"`
	Https ListenerGetHttpsAttributeType `json:"https,omitempty"`
	// Unique, system-generated identifier for the listener. It is derived from the protocol and port.
	Name ListenerGetNameAttributeType `json:"name,omitempty"`
	// Port number on which the listener receives incoming traffic.
	// Can be cast to int32 without loss of precision.
	Port ListenerGetPortAttributeType `json:"port,omitempty"`
	// Protocol is the highest network protocol we understand to load balance. Currently PROTOCOL_HTTP and PROTOCOL_HTTPS are supported.
	Protocol ListenerGetProtocolAttributeType `json:"protocol,omitempty"`
}

// NewListener instantiates a new Listener object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListener() *Listener {
	this := Listener{}
	return &this
}

// NewListenerWithDefaults instantiates a new Listener object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListenerWithDefaults() *Listener {
	this := Listener{}
	return &this
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *Listener) GetHttp() (res ListenerGetHttpRetType) {
	res, _ = o.GetHttpOk()
	return
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listener) GetHttpOk() (ret ListenerGetHttpRetType, ok bool) {
	return getListenerGetHttpAttributeTypeOk(o.Http)
}

// HasHttp returns a boolean if a field has been set.
func (o *Listener) HasHttp() bool {
	_, ok := o.GetHttpOk()
	return ok
}

// SetHttp gets a reference to the given ProtocolOptionsHTTP and assigns it to the Http field.
func (o *Listener) SetHttp(v ListenerGetHttpRetType) {
	setListenerGetHttpAttributeType(&o.Http, v)
}

// GetHttps returns the Https field value if set, zero value otherwise.
func (o *Listener) GetHttps() (res ListenerGetHttpsRetType) {
	res, _ = o.GetHttpsOk()
	return
}

// GetHttpsOk returns a tuple with the Https field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listener) GetHttpsOk() (ret ListenerGetHttpsRetType, ok bool) {
	return getListenerGetHttpsAttributeTypeOk(o.Https)
}

// HasHttps returns a boolean if a field has been set.
func (o *Listener) HasHttps() bool {
	_, ok := o.GetHttpsOk()
	return ok
}

// SetHttps gets a reference to the given ProtocolOptionsHTTPS and assigns it to the Https field.
func (o *Listener) SetHttps(v ListenerGetHttpsRetType) {
	setListenerGetHttpsAttributeType(&o.Https, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Listener) GetName() (res ListenerGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listener) GetNameOk() (ret ListenerGetNameRetType, ok bool) {
	return getListenerGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *Listener) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Listener) SetName(v ListenerGetNameRetType) {
	setListenerGetNameAttributeType(&o.Name, v)
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Listener) GetPort() (res ListenerGetPortRetType) {
	res, _ = o.GetPortOk()
	return
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listener) GetPortOk() (ret ListenerGetPortRetType, ok bool) {
	return getListenerGetPortAttributeTypeOk(o.Port)
}

// HasPort returns a boolean if a field has been set.
func (o *Listener) HasPort() bool {
	_, ok := o.GetPortOk()
	return ok
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *Listener) SetPort(v ListenerGetPortRetType) {
	setListenerGetPortAttributeType(&o.Port, v)
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Listener) GetProtocol() (res ListenerGetProtocolRetType) {
	res, _ = o.GetProtocolOk()
	return
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listener) GetProtocolOk() (ret ListenerGetProtocolRetType, ok bool) {
	return getListenerGetProtocolAttributeTypeOk(o.Protocol)
}

// HasProtocol returns a boolean if a field has been set.
func (o *Listener) HasProtocol() bool {
	_, ok := o.GetProtocolOk()
	return ok
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *Listener) SetProtocol(v ListenerGetProtocolRetType) {
	setListenerGetProtocolAttributeType(&o.Protocol, v)
}

func (o Listener) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getListenerGetHttpAttributeTypeOk(o.Http); ok {
		toSerialize["Http"] = val
	}
	if val, ok := getListenerGetHttpsAttributeTypeOk(o.Https); ok {
		toSerialize["Https"] = val
	}
	if val, ok := getListenerGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getListenerGetPortAttributeTypeOk(o.Port); ok {
		toSerialize["Port"] = val
	}
	if val, ok := getListenerGetProtocolAttributeTypeOk(o.Protocol); ok {
		toSerialize["Protocol"] = val
	}
	return toSerialize, nil
}

type NullableListener struct {
	value *Listener
	isSet bool
}

func (v NullableListener) Get() *Listener {
	return v.value
}

func (v *NullableListener) Set(val *Listener) {
	v.value = val
	v.isSet = true
}

func (v NullableListener) IsSet() bool {
	return v.isSet
}

func (v *NullableListener) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListener(val *Listener) *NullableListener {
	return &NullableListener{value: val, isSet: true}
}

func (v NullableListener) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListener) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
