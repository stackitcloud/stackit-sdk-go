/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the HostConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostConfig{}

/*
	types and functions for host
*/

// isNotNullableString
type HostConfigGetHostAttributeType = *string

func getHostConfigGetHostAttributeTypeOk(arg HostConfigGetHostAttributeType) (ret HostConfigGetHostRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHostConfigGetHostAttributeType(arg *HostConfigGetHostAttributeType, val HostConfigGetHostRetType) {
	*arg = &val
}

type HostConfigGetHostArgType = string
type HostConfigGetHostRetType = string

/*
	types and functions for rules
*/

// isArray
type HostConfigGetRulesAttributeType = *[]Rule
type HostConfigGetRulesArgType = []Rule
type HostConfigGetRulesRetType = []Rule

func getHostConfigGetRulesAttributeTypeOk(arg HostConfigGetRulesAttributeType) (ret HostConfigGetRulesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHostConfigGetRulesAttributeType(arg *HostConfigGetRulesAttributeType, val HostConfigGetRulesRetType) {
	*arg = &val
}

// HostConfig struct for HostConfig
type HostConfig struct {
	// Hostname to match. Supports wildcards (e.g. *.example.com).
	Host HostConfigGetHostAttributeType `json:"host,omitempty"`
	// Routing rules under the specified host, matched by path prefix.
	Rules HostConfigGetRulesAttributeType `json:"rules,omitempty"`
}

// NewHostConfig instantiates a new HostConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostConfig() *HostConfig {
	this := HostConfig{}
	return &this
}

// NewHostConfigWithDefaults instantiates a new HostConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostConfigWithDefaults() *HostConfig {
	this := HostConfig{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *HostConfig) GetHost() (res HostConfigGetHostRetType) {
	res, _ = o.GetHostOk()
	return
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostConfig) GetHostOk() (ret HostConfigGetHostRetType, ok bool) {
	return getHostConfigGetHostAttributeTypeOk(o.Host)
}

// HasHost returns a boolean if a field has been set.
func (o *HostConfig) HasHost() bool {
	_, ok := o.GetHostOk()
	return ok
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *HostConfig) SetHost(v HostConfigGetHostRetType) {
	setHostConfigGetHostAttributeType(&o.Host, v)
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *HostConfig) GetRules() (res HostConfigGetRulesRetType) {
	res, _ = o.GetRulesOk()
	return
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostConfig) GetRulesOk() (ret HostConfigGetRulesRetType, ok bool) {
	return getHostConfigGetRulesAttributeTypeOk(o.Rules)
}

// HasRules returns a boolean if a field has been set.
func (o *HostConfig) HasRules() bool {
	_, ok := o.GetRulesOk()
	return ok
}

// SetRules gets a reference to the given []Rule and assigns it to the Rules field.
func (o *HostConfig) SetRules(v HostConfigGetRulesRetType) {
	setHostConfigGetRulesAttributeType(&o.Rules, v)
}

func (o HostConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHostConfigGetHostAttributeTypeOk(o.Host); ok {
		toSerialize["Host"] = val
	}
	if val, ok := getHostConfigGetRulesAttributeTypeOk(o.Rules); ok {
		toSerialize["Rules"] = val
	}
	return toSerialize, nil
}

type NullableHostConfig struct {
	value *HostConfig
	isSet bool
}

func (v NullableHostConfig) Get() *HostConfig {
	return v.value
}

func (v *NullableHostConfig) Set(val *HostConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHostConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHostConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostConfig(val *HostConfig) *NullableHostConfig {
	return &NullableHostConfig{value: val, isSet: true}
}

func (v NullableHostConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
