/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the HttpHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpHeader{}

/*
	types and functions for exactMatch
*/

// isNotNullableString
type HttpHeaderGetExactMatchAttributeType = *string

func getHttpHeaderGetExactMatchAttributeTypeOk(arg HttpHeaderGetExactMatchAttributeType) (ret HttpHeaderGetExactMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHttpHeaderGetExactMatchAttributeType(arg *HttpHeaderGetExactMatchAttributeType, val HttpHeaderGetExactMatchRetType) {
	*arg = &val
}

type HttpHeaderGetExactMatchArgType = string
type HttpHeaderGetExactMatchRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type HttpHeaderGetNameAttributeType = *string

func getHttpHeaderGetNameAttributeTypeOk(arg HttpHeaderGetNameAttributeType) (ret HttpHeaderGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHttpHeaderGetNameAttributeType(arg *HttpHeaderGetNameAttributeType, val HttpHeaderGetNameRetType) {
	*arg = &val
}

type HttpHeaderGetNameArgType = string
type HttpHeaderGetNameRetType = string

// HttpHeader struct for HttpHeader
type HttpHeader struct {
	// Exact match for the header value.
	ExactMatch HttpHeaderGetExactMatchAttributeType `json:"exactMatch,omitempty"`
	// Header name.
	Name HttpHeaderGetNameAttributeType `json:"name,omitempty"`
}

// NewHttpHeader instantiates a new HttpHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpHeader() *HttpHeader {
	this := HttpHeader{}
	return &this
}

// NewHttpHeaderWithDefaults instantiates a new HttpHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpHeaderWithDefaults() *HttpHeader {
	this := HttpHeader{}
	return &this
}

// GetExactMatch returns the ExactMatch field value if set, zero value otherwise.
func (o *HttpHeader) GetExactMatch() (res HttpHeaderGetExactMatchRetType) {
	res, _ = o.GetExactMatchOk()
	return
}

// GetExactMatchOk returns a tuple with the ExactMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHeader) GetExactMatchOk() (ret HttpHeaderGetExactMatchRetType, ok bool) {
	return getHttpHeaderGetExactMatchAttributeTypeOk(o.ExactMatch)
}

// HasExactMatch returns a boolean if a field has been set.
func (o *HttpHeader) HasExactMatch() bool {
	_, ok := o.GetExactMatchOk()
	return ok
}

// SetExactMatch gets a reference to the given string and assigns it to the ExactMatch field.
func (o *HttpHeader) SetExactMatch(v HttpHeaderGetExactMatchRetType) {
	setHttpHeaderGetExactMatchAttributeType(&o.ExactMatch, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HttpHeader) GetName() (res HttpHeaderGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHeader) GetNameOk() (ret HttpHeaderGetNameRetType, ok bool) {
	return getHttpHeaderGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *HttpHeader) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HttpHeader) SetName(v HttpHeaderGetNameRetType) {
	setHttpHeaderGetNameAttributeType(&o.Name, v)
}

func (o HttpHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHttpHeaderGetExactMatchAttributeTypeOk(o.ExactMatch); ok {
		toSerialize["ExactMatch"] = val
	}
	if val, ok := getHttpHeaderGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullableHttpHeader struct {
	value *HttpHeader
	isSet bool
}

func (v NullableHttpHeader) Get() *HttpHeader {
	return v.value
}

func (v *NullableHttpHeader) Set(val *HttpHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpHeader(val *HttpHeader) *NullableHttpHeader {
	return &NullableHttpHeader{value: val, isSet: true}
}

func (v NullableHttpHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
