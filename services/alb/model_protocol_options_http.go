/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the ProtocolOptionsHTTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtocolOptionsHTTP{}

/*
	types and functions for hosts
*/

// isArray
type ProtocolOptionsHTTPGetHostsAttributeType = *[]HostConfig
type ProtocolOptionsHTTPGetHostsArgType = []HostConfig
type ProtocolOptionsHTTPGetHostsRetType = []HostConfig

func getProtocolOptionsHTTPGetHostsAttributeTypeOk(arg ProtocolOptionsHTTPGetHostsAttributeType) (ret ProtocolOptionsHTTPGetHostsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProtocolOptionsHTTPGetHostsAttributeType(arg *ProtocolOptionsHTTPGetHostsAttributeType, val ProtocolOptionsHTTPGetHostsRetType) {
	*arg = &val
}

// ProtocolOptionsHTTP struct for ProtocolOptionsHTTP
type ProtocolOptionsHTTP struct {
	// Defines routing rules grouped by hostname.
	Hosts ProtocolOptionsHTTPGetHostsAttributeType `json:"hosts,omitempty"`
}

// NewProtocolOptionsHTTP instantiates a new ProtocolOptionsHTTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolOptionsHTTP() *ProtocolOptionsHTTP {
	this := ProtocolOptionsHTTP{}
	return &this
}

// NewProtocolOptionsHTTPWithDefaults instantiates a new ProtocolOptionsHTTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolOptionsHTTPWithDefaults() *ProtocolOptionsHTTP {
	this := ProtocolOptionsHTTP{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *ProtocolOptionsHTTP) GetHosts() (res ProtocolOptionsHTTPGetHostsRetType) {
	res, _ = o.GetHostsOk()
	return
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolOptionsHTTP) GetHostsOk() (ret ProtocolOptionsHTTPGetHostsRetType, ok bool) {
	return getProtocolOptionsHTTPGetHostsAttributeTypeOk(o.Hosts)
}

// HasHosts returns a boolean if a field has been set.
func (o *ProtocolOptionsHTTP) HasHosts() bool {
	_, ok := o.GetHostsOk()
	return ok
}

// SetHosts gets a reference to the given []HostConfig and assigns it to the Hosts field.
func (o *ProtocolOptionsHTTP) SetHosts(v ProtocolOptionsHTTPGetHostsRetType) {
	setProtocolOptionsHTTPGetHostsAttributeType(&o.Hosts, v)
}

func (o ProtocolOptionsHTTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getProtocolOptionsHTTPGetHostsAttributeTypeOk(o.Hosts); ok {
		toSerialize["Hosts"] = val
	}
	return toSerialize, nil
}

type NullableProtocolOptionsHTTP struct {
	value *ProtocolOptionsHTTP
	isSet bool
}

func (v NullableProtocolOptionsHTTP) Get() *ProtocolOptionsHTTP {
	return v.value
}

func (v *NullableProtocolOptionsHTTP) Set(val *ProtocolOptionsHTTP) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolOptionsHTTP) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolOptionsHTTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolOptionsHTTP(val *ProtocolOptionsHTTP) *NullableProtocolOptionsHTTP {
	return &NullableProtocolOptionsHTTP{value: val, isSet: true}
}

func (v NullableProtocolOptionsHTTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolOptionsHTTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
