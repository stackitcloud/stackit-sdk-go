/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the TargetPoolTlsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetPoolTlsConfig{}

/*
	types and functions for customCa
*/

// isNotNullableString
type TargetPoolTlsConfigGetCustomCaAttributeType = *string

func getTargetPoolTlsConfigGetCustomCaAttributeTypeOk(arg TargetPoolTlsConfigGetCustomCaAttributeType) (ret TargetPoolTlsConfigGetCustomCaRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTargetPoolTlsConfigGetCustomCaAttributeType(arg *TargetPoolTlsConfigGetCustomCaAttributeType, val TargetPoolTlsConfigGetCustomCaRetType) {
	*arg = &val
}

type TargetPoolTlsConfigGetCustomCaArgType = string
type TargetPoolTlsConfigGetCustomCaRetType = string

/*
	types and functions for enabled
*/

// isBoolean
type TargetPoolTlsConfiggetEnabledAttributeType = *bool
type TargetPoolTlsConfiggetEnabledArgType = bool
type TargetPoolTlsConfiggetEnabledRetType = bool

func getTargetPoolTlsConfiggetEnabledAttributeTypeOk(arg TargetPoolTlsConfiggetEnabledAttributeType) (ret TargetPoolTlsConfiggetEnabledRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTargetPoolTlsConfiggetEnabledAttributeType(arg *TargetPoolTlsConfiggetEnabledAttributeType, val TargetPoolTlsConfiggetEnabledRetType) {
	*arg = &val
}

/*
	types and functions for skipCertificateValidation
*/

// isBoolean
type TargetPoolTlsConfiggetSkipCertificateValidationAttributeType = *bool
type TargetPoolTlsConfiggetSkipCertificateValidationArgType = bool
type TargetPoolTlsConfiggetSkipCertificateValidationRetType = bool

func getTargetPoolTlsConfiggetSkipCertificateValidationAttributeTypeOk(arg TargetPoolTlsConfiggetSkipCertificateValidationAttributeType) (ret TargetPoolTlsConfiggetSkipCertificateValidationRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setTargetPoolTlsConfiggetSkipCertificateValidationAttributeType(arg *TargetPoolTlsConfiggetSkipCertificateValidationAttributeType, val TargetPoolTlsConfiggetSkipCertificateValidationRetType) {
	*arg = &val
}

// TargetPoolTlsConfig struct for TargetPoolTlsConfig
type TargetPoolTlsConfig struct {
	// Specifies a custom Certificate Authority (CA). When provided, the target pool will trust certificates signed by this CA, in addition to any system-trusted CAs. This is useful for scenarios where the target pool needs to communicate with servers using self-signed or internally-issued certificates.
	CustomCa TargetPoolTlsConfigGetCustomCaAttributeType `json:"customCa,omitempty"`
	// Enable or disable TLS (Transport Layer Security) for connections to the target pool. When enabled, the load balancer will establish secure connections using TLS to the target pool.
	Enabled TargetPoolTlsConfiggetEnabledAttributeType `json:"enabled,omitempty"`
	// Bypass certificate validation for TLS connections to the target pool. This option is insecure.
	SkipCertificateValidation TargetPoolTlsConfiggetSkipCertificateValidationAttributeType `json:"skipCertificateValidation,omitempty"`
}

// NewTargetPoolTlsConfig instantiates a new TargetPoolTlsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetPoolTlsConfig() *TargetPoolTlsConfig {
	this := TargetPoolTlsConfig{}
	return &this
}

// NewTargetPoolTlsConfigWithDefaults instantiates a new TargetPoolTlsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetPoolTlsConfigWithDefaults() *TargetPoolTlsConfig {
	this := TargetPoolTlsConfig{}
	return &this
}

// GetCustomCa returns the CustomCa field value if set, zero value otherwise.
func (o *TargetPoolTlsConfig) GetCustomCa() (res TargetPoolTlsConfigGetCustomCaRetType) {
	res, _ = o.GetCustomCaOk()
	return
}

// GetCustomCaOk returns a tuple with the CustomCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetPoolTlsConfig) GetCustomCaOk() (ret TargetPoolTlsConfigGetCustomCaRetType, ok bool) {
	return getTargetPoolTlsConfigGetCustomCaAttributeTypeOk(o.CustomCa)
}

// HasCustomCa returns a boolean if a field has been set.
func (o *TargetPoolTlsConfig) HasCustomCa() bool {
	_, ok := o.GetCustomCaOk()
	return ok
}

// SetCustomCa gets a reference to the given string and assigns it to the CustomCa field.
func (o *TargetPoolTlsConfig) SetCustomCa(v TargetPoolTlsConfigGetCustomCaRetType) {
	setTargetPoolTlsConfigGetCustomCaAttributeType(&o.CustomCa, v)
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TargetPoolTlsConfig) GetEnabled() (res TargetPoolTlsConfiggetEnabledRetType) {
	res, _ = o.GetEnabledOk()
	return
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetPoolTlsConfig) GetEnabledOk() (ret TargetPoolTlsConfiggetEnabledRetType, ok bool) {
	return getTargetPoolTlsConfiggetEnabledAttributeTypeOk(o.Enabled)
}

// HasEnabled returns a boolean if a field has been set.
func (o *TargetPoolTlsConfig) HasEnabled() bool {
	_, ok := o.GetEnabledOk()
	return ok
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TargetPoolTlsConfig) SetEnabled(v TargetPoolTlsConfiggetEnabledRetType) {
	setTargetPoolTlsConfiggetEnabledAttributeType(&o.Enabled, v)
}

// GetSkipCertificateValidation returns the SkipCertificateValidation field value if set, zero value otherwise.
func (o *TargetPoolTlsConfig) GetSkipCertificateValidation() (res TargetPoolTlsConfiggetSkipCertificateValidationRetType) {
	res, _ = o.GetSkipCertificateValidationOk()
	return
}

// GetSkipCertificateValidationOk returns a tuple with the SkipCertificateValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetPoolTlsConfig) GetSkipCertificateValidationOk() (ret TargetPoolTlsConfiggetSkipCertificateValidationRetType, ok bool) {
	return getTargetPoolTlsConfiggetSkipCertificateValidationAttributeTypeOk(o.SkipCertificateValidation)
}

// HasSkipCertificateValidation returns a boolean if a field has been set.
func (o *TargetPoolTlsConfig) HasSkipCertificateValidation() bool {
	_, ok := o.GetSkipCertificateValidationOk()
	return ok
}

// SetSkipCertificateValidation gets a reference to the given bool and assigns it to the SkipCertificateValidation field.
func (o *TargetPoolTlsConfig) SetSkipCertificateValidation(v TargetPoolTlsConfiggetSkipCertificateValidationRetType) {
	setTargetPoolTlsConfiggetSkipCertificateValidationAttributeType(&o.SkipCertificateValidation, v)
}

func (o TargetPoolTlsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getTargetPoolTlsConfigGetCustomCaAttributeTypeOk(o.CustomCa); ok {
		toSerialize["CustomCa"] = val
	}
	if val, ok := getTargetPoolTlsConfiggetEnabledAttributeTypeOk(o.Enabled); ok {
		toSerialize["Enabled"] = val
	}
	if val, ok := getTargetPoolTlsConfiggetSkipCertificateValidationAttributeTypeOk(o.SkipCertificateValidation); ok {
		toSerialize["SkipCertificateValidation"] = val
	}
	return toSerialize, nil
}

type NullableTargetPoolTlsConfig struct {
	value *TargetPoolTlsConfig
	isSet bool
}

func (v NullableTargetPoolTlsConfig) Get() *TargetPoolTlsConfig {
	return v.value
}

func (v *NullableTargetPoolTlsConfig) Set(val *TargetPoolTlsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetPoolTlsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetPoolTlsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetPoolTlsConfig(val *TargetPoolTlsConfig) *NullableTargetPoolTlsConfig {
	return &NullableTargetPoolTlsConfig{value: val, isSet: true}
}

func (v NullableTargetPoolTlsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetPoolTlsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
