/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the SubRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubRule{}

// SubRule struct for SubRule
type SubRule struct {
	CookiePersistence *CookiePersistence `json:"cookiePersistence,omitempty"`
	// Headers for the subRule
	Headers *[]Header `json:"headers,omitempty"`
	// Path prefix for the subRule
	PathPrefix *string `json:"pathPrefix,omitempty"`
	// Query Parameters for the subRule
	QueryParameters *[]QueryParameters `json:"queryParameters,omitempty"`
	// Reference target pool by target pool name.
	TargetPool *string `json:"targetPool,omitempty"`
	// If enabled, when client sends an HTTP request with and Upgrade header, indicating the desire to establish a Websocket connection,  if backend server supports WebSocket, it responds with HTTP 101 status code, switching protocols from HTTP to WebSocket. Hence the client and the server can exchange data in real-time using one long-lived TCP connection.
	WebSocket *bool `json:"webSocket,omitempty"`
}

// NewSubRule instantiates a new SubRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubRule() *SubRule {
	this := SubRule{}
	return &this
}

// NewSubRuleWithDefaults instantiates a new SubRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubRuleWithDefaults() *SubRule {
	this := SubRule{}
	return &this
}

// GetCookiePersistence returns the CookiePersistence field value if set, zero value otherwise.
func (o *SubRule) GetCookiePersistence() *CookiePersistence {
	if o == nil || IsNil(o.CookiePersistence) {
		var ret *CookiePersistence
		return ret
	}
	return o.CookiePersistence
}

// GetCookiePersistenceOk returns a tuple with the CookiePersistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetCookiePersistenceOk() (*CookiePersistence, bool) {
	if o == nil || IsNil(o.CookiePersistence) {
		return nil, false
	}
	return o.CookiePersistence, true
}

// HasCookiePersistence returns a boolean if a field has been set.
func (o *SubRule) HasCookiePersistence() bool {
	if o != nil && !IsNil(o.CookiePersistence) {
		return true
	}

	return false
}

// SetCookiePersistence gets a reference to the given CookiePersistence and assigns it to the CookiePersistence field.
func (o *SubRule) SetCookiePersistence(v *CookiePersistence) {
	o.CookiePersistence = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *SubRule) GetHeaders() *[]Header {
	if o == nil || IsNil(o.Headers) {
		var ret *[]Header
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetHeadersOk() (*[]Header, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *SubRule) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []Header and assigns it to the Headers field.
func (o *SubRule) SetHeaders(v *[]Header) {
	o.Headers = v
}

// GetPathPrefix returns the PathPrefix field value if set, zero value otherwise.
func (o *SubRule) GetPathPrefix() *string {
	if o == nil || IsNil(o.PathPrefix) {
		var ret *string
		return ret
	}
	return o.PathPrefix
}

// GetPathPrefixOk returns a tuple with the PathPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetPathPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.PathPrefix) {
		return nil, false
	}
	return o.PathPrefix, true
}

// HasPathPrefix returns a boolean if a field has been set.
func (o *SubRule) HasPathPrefix() bool {
	if o != nil && !IsNil(o.PathPrefix) {
		return true
	}

	return false
}

// SetPathPrefix gets a reference to the given string and assigns it to the PathPrefix field.
func (o *SubRule) SetPathPrefix(v *string) {
	o.PathPrefix = v
}

// GetQueryParameters returns the QueryParameters field value if set, zero value otherwise.
func (o *SubRule) GetQueryParameters() *[]QueryParameters {
	if o == nil || IsNil(o.QueryParameters) {
		var ret *[]QueryParameters
		return ret
	}
	return o.QueryParameters
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetQueryParametersOk() (*[]QueryParameters, bool) {
	if o == nil || IsNil(o.QueryParameters) {
		return nil, false
	}
	return o.QueryParameters, true
}

// HasQueryParameters returns a boolean if a field has been set.
func (o *SubRule) HasQueryParameters() bool {
	if o != nil && !IsNil(o.QueryParameters) {
		return true
	}

	return false
}

// SetQueryParameters gets a reference to the given []QueryParameters and assigns it to the QueryParameters field.
func (o *SubRule) SetQueryParameters(v *[]QueryParameters) {
	o.QueryParameters = v
}

// GetTargetPool returns the TargetPool field value if set, zero value otherwise.
func (o *SubRule) GetTargetPool() *string {
	if o == nil || IsNil(o.TargetPool) {
		var ret *string
		return ret
	}
	return o.TargetPool
}

// GetTargetPoolOk returns a tuple with the TargetPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetTargetPoolOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPool) {
		return nil, false
	}
	return o.TargetPool, true
}

// HasTargetPool returns a boolean if a field has been set.
func (o *SubRule) HasTargetPool() bool {
	if o != nil && !IsNil(o.TargetPool) {
		return true
	}

	return false
}

// SetTargetPool gets a reference to the given string and assigns it to the TargetPool field.
func (o *SubRule) SetTargetPool(v *string) {
	o.TargetPool = v
}

// GetWebSocket returns the WebSocket field value if set, zero value otherwise.
func (o *SubRule) GetWebSocket() *bool {
	if o == nil || IsNil(o.WebSocket) {
		var ret *bool
		return ret
	}
	return o.WebSocket
}

// GetWebSocketOk returns a tuple with the WebSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetWebSocketOk() (*bool, bool) {
	if o == nil || IsNil(o.WebSocket) {
		return nil, false
	}
	return o.WebSocket, true
}

// HasWebSocket returns a boolean if a field has been set.
func (o *SubRule) HasWebSocket() bool {
	if o != nil && !IsNil(o.WebSocket) {
		return true
	}

	return false
}

// SetWebSocket gets a reference to the given bool and assigns it to the WebSocket field.
func (o *SubRule) SetWebSocket(v *bool) {
	o.WebSocket = v
}

func (o SubRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CookiePersistence) {
		toSerialize["cookiePersistence"] = o.CookiePersistence
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.PathPrefix) {
		toSerialize["pathPrefix"] = o.PathPrefix
	}
	if !IsNil(o.QueryParameters) {
		toSerialize["queryParameters"] = o.QueryParameters
	}
	if !IsNil(o.TargetPool) {
		toSerialize["targetPool"] = o.TargetPool
	}
	if !IsNil(o.WebSocket) {
		toSerialize["webSocket"] = o.WebSocket
	}
	return toSerialize, nil
}

type NullableSubRule struct {
	value *SubRule
	isSet bool
}

func (v NullableSubRule) Get() *SubRule {
	return v.value
}

func (v *NullableSubRule) Set(val *SubRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSubRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSubRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubRule(val *SubRule) *NullableSubRule {
	return &NullableSubRule{value: val, isSet: true}
}

func (v NullableSubRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
