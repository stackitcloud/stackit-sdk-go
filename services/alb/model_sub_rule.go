/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the SubRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubRule{}

/*
	types and functions for cookiePersistence
*/

// isModel
type SubRuleGetCookiePersistenceAttributeType = *CookiePersistence
type SubRuleGetCookiePersistenceArgType = CookiePersistence
type SubRuleGetCookiePersistenceRetType = CookiePersistence

func getSubRuleGetCookiePersistenceAttributeTypeOk(arg SubRuleGetCookiePersistenceAttributeType) (ret SubRuleGetCookiePersistenceRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubRuleGetCookiePersistenceAttributeType(arg *SubRuleGetCookiePersistenceAttributeType, val SubRuleGetCookiePersistenceRetType) {
	*arg = &val
}

/*
	types and functions for headers
*/

// isArray
type SubRuleGetHeadersAttributeType = *[]Header
type SubRuleGetHeadersArgType = []Header
type SubRuleGetHeadersRetType = []Header

func getSubRuleGetHeadersAttributeTypeOk(arg SubRuleGetHeadersAttributeType) (ret SubRuleGetHeadersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubRuleGetHeadersAttributeType(arg *SubRuleGetHeadersAttributeType, val SubRuleGetHeadersRetType) {
	*arg = &val
}

/*
	types and functions for pathPrefix
*/

// isNotNullableString
type SubRuleGetPathPrefixAttributeType = *string

func getSubRuleGetPathPrefixAttributeTypeOk(arg SubRuleGetPathPrefixAttributeType) (ret SubRuleGetPathPrefixRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubRuleGetPathPrefixAttributeType(arg *SubRuleGetPathPrefixAttributeType, val SubRuleGetPathPrefixRetType) {
	*arg = &val
}

type SubRuleGetPathPrefixArgType = string
type SubRuleGetPathPrefixRetType = string

/*
	types and functions for queryParameters
*/

// isArray
type SubRuleGetQueryParametersAttributeType = *[]QueryParameters
type SubRuleGetQueryParametersArgType = []QueryParameters
type SubRuleGetQueryParametersRetType = []QueryParameters

func getSubRuleGetQueryParametersAttributeTypeOk(arg SubRuleGetQueryParametersAttributeType) (ret SubRuleGetQueryParametersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubRuleGetQueryParametersAttributeType(arg *SubRuleGetQueryParametersAttributeType, val SubRuleGetQueryParametersRetType) {
	*arg = &val
}

/*
	types and functions for targetPool
*/

// isNotNullableString
type SubRuleGetTargetPoolAttributeType = *string

func getSubRuleGetTargetPoolAttributeTypeOk(arg SubRuleGetTargetPoolAttributeType) (ret SubRuleGetTargetPoolRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubRuleGetTargetPoolAttributeType(arg *SubRuleGetTargetPoolAttributeType, val SubRuleGetTargetPoolRetType) {
	*arg = &val
}

type SubRuleGetTargetPoolArgType = string
type SubRuleGetTargetPoolRetType = string

/*
	types and functions for webSocket
*/

// isBoolean
type SubRulegetWebSocketAttributeType = *bool
type SubRulegetWebSocketArgType = bool
type SubRulegetWebSocketRetType = bool

func getSubRulegetWebSocketAttributeTypeOk(arg SubRulegetWebSocketAttributeType) (ret SubRulegetWebSocketRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setSubRulegetWebSocketAttributeType(arg *SubRulegetWebSocketAttributeType, val SubRulegetWebSocketRetType) {
	*arg = &val
}

// SubRule struct for SubRule
type SubRule struct {
	CookiePersistence SubRuleGetCookiePersistenceAttributeType `json:"cookiePersistence,omitempty"`
	// Headers for the subRule
	Headers SubRuleGetHeadersAttributeType `json:"headers,omitempty"`
	// Path prefix for the subRule
	PathPrefix SubRuleGetPathPrefixAttributeType `json:"pathPrefix,omitempty"`
	// Query Parameters for the subRule
	QueryParameters SubRuleGetQueryParametersAttributeType `json:"queryParameters,omitempty"`
	// Reference target pool by target pool name.
	TargetPool SubRuleGetTargetPoolAttributeType `json:"targetPool,omitempty"`
	// If enabled, when client sends an HTTP request with and Upgrade header, indicating the desire to establish a Websocket connection,  if backend server supports WebSocket, it responds with HTTP 101 status code, switching protocols from HTTP to WebSocket. Hence the client and the server can exchange data in real-time using one long-lived TCP connection.
	WebSocket SubRulegetWebSocketAttributeType `json:"webSocket,omitempty"`
}

// NewSubRule instantiates a new SubRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubRule() *SubRule {
	this := SubRule{}
	return &this
}

// NewSubRuleWithDefaults instantiates a new SubRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubRuleWithDefaults() *SubRule {
	this := SubRule{}
	return &this
}

// GetCookiePersistence returns the CookiePersistence field value if set, zero value otherwise.
func (o *SubRule) GetCookiePersistence() (res SubRuleGetCookiePersistenceRetType) {
	res, _ = o.GetCookiePersistenceOk()
	return
}

// GetCookiePersistenceOk returns a tuple with the CookiePersistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetCookiePersistenceOk() (ret SubRuleGetCookiePersistenceRetType, ok bool) {
	return getSubRuleGetCookiePersistenceAttributeTypeOk(o.CookiePersistence)
}

// HasCookiePersistence returns a boolean if a field has been set.
func (o *SubRule) HasCookiePersistence() bool {
	_, ok := o.GetCookiePersistenceOk()
	return ok
}

// SetCookiePersistence gets a reference to the given CookiePersistence and assigns it to the CookiePersistence field.
func (o *SubRule) SetCookiePersistence(v SubRuleGetCookiePersistenceRetType) {
	setSubRuleGetCookiePersistenceAttributeType(&o.CookiePersistence, v)
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *SubRule) GetHeaders() (res SubRuleGetHeadersRetType) {
	res, _ = o.GetHeadersOk()
	return
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetHeadersOk() (ret SubRuleGetHeadersRetType, ok bool) {
	return getSubRuleGetHeadersAttributeTypeOk(o.Headers)
}

// HasHeaders returns a boolean if a field has been set.
func (o *SubRule) HasHeaders() bool {
	_, ok := o.GetHeadersOk()
	return ok
}

// SetHeaders gets a reference to the given []Header and assigns it to the Headers field.
func (o *SubRule) SetHeaders(v SubRuleGetHeadersRetType) {
	setSubRuleGetHeadersAttributeType(&o.Headers, v)
}

// GetPathPrefix returns the PathPrefix field value if set, zero value otherwise.
func (o *SubRule) GetPathPrefix() (res SubRuleGetPathPrefixRetType) {
	res, _ = o.GetPathPrefixOk()
	return
}

// GetPathPrefixOk returns a tuple with the PathPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetPathPrefixOk() (ret SubRuleGetPathPrefixRetType, ok bool) {
	return getSubRuleGetPathPrefixAttributeTypeOk(o.PathPrefix)
}

// HasPathPrefix returns a boolean if a field has been set.
func (o *SubRule) HasPathPrefix() bool {
	_, ok := o.GetPathPrefixOk()
	return ok
}

// SetPathPrefix gets a reference to the given string and assigns it to the PathPrefix field.
func (o *SubRule) SetPathPrefix(v SubRuleGetPathPrefixRetType) {
	setSubRuleGetPathPrefixAttributeType(&o.PathPrefix, v)
}

// GetQueryParameters returns the QueryParameters field value if set, zero value otherwise.
func (o *SubRule) GetQueryParameters() (res SubRuleGetQueryParametersRetType) {
	res, _ = o.GetQueryParametersOk()
	return
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetQueryParametersOk() (ret SubRuleGetQueryParametersRetType, ok bool) {
	return getSubRuleGetQueryParametersAttributeTypeOk(o.QueryParameters)
}

// HasQueryParameters returns a boolean if a field has been set.
func (o *SubRule) HasQueryParameters() bool {
	_, ok := o.GetQueryParametersOk()
	return ok
}

// SetQueryParameters gets a reference to the given []QueryParameters and assigns it to the QueryParameters field.
func (o *SubRule) SetQueryParameters(v SubRuleGetQueryParametersRetType) {
	setSubRuleGetQueryParametersAttributeType(&o.QueryParameters, v)
}

// GetTargetPool returns the TargetPool field value if set, zero value otherwise.
func (o *SubRule) GetTargetPool() (res SubRuleGetTargetPoolRetType) {
	res, _ = o.GetTargetPoolOk()
	return
}

// GetTargetPoolOk returns a tuple with the TargetPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetTargetPoolOk() (ret SubRuleGetTargetPoolRetType, ok bool) {
	return getSubRuleGetTargetPoolAttributeTypeOk(o.TargetPool)
}

// HasTargetPool returns a boolean if a field has been set.
func (o *SubRule) HasTargetPool() bool {
	_, ok := o.GetTargetPoolOk()
	return ok
}

// SetTargetPool gets a reference to the given string and assigns it to the TargetPool field.
func (o *SubRule) SetTargetPool(v SubRuleGetTargetPoolRetType) {
	setSubRuleGetTargetPoolAttributeType(&o.TargetPool, v)
}

// GetWebSocket returns the WebSocket field value if set, zero value otherwise.
func (o *SubRule) GetWebSocket() (res SubRulegetWebSocketRetType) {
	res, _ = o.GetWebSocketOk()
	return
}

// GetWebSocketOk returns a tuple with the WebSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRule) GetWebSocketOk() (ret SubRulegetWebSocketRetType, ok bool) {
	return getSubRulegetWebSocketAttributeTypeOk(o.WebSocket)
}

// HasWebSocket returns a boolean if a field has been set.
func (o *SubRule) HasWebSocket() bool {
	_, ok := o.GetWebSocketOk()
	return ok
}

// SetWebSocket gets a reference to the given bool and assigns it to the WebSocket field.
func (o *SubRule) SetWebSocket(v SubRulegetWebSocketRetType) {
	setSubRulegetWebSocketAttributeType(&o.WebSocket, v)
}

func (o SubRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getSubRuleGetCookiePersistenceAttributeTypeOk(o.CookiePersistence); ok {
		toSerialize["CookiePersistence"] = val
	}
	if val, ok := getSubRuleGetHeadersAttributeTypeOk(o.Headers); ok {
		toSerialize["Headers"] = val
	}
	if val, ok := getSubRuleGetPathPrefixAttributeTypeOk(o.PathPrefix); ok {
		toSerialize["PathPrefix"] = val
	}
	if val, ok := getSubRuleGetQueryParametersAttributeTypeOk(o.QueryParameters); ok {
		toSerialize["QueryParameters"] = val
	}
	if val, ok := getSubRuleGetTargetPoolAttributeTypeOk(o.TargetPool); ok {
		toSerialize["TargetPool"] = val
	}
	if val, ok := getSubRulegetWebSocketAttributeTypeOk(o.WebSocket); ok {
		toSerialize["WebSocket"] = val
	}
	return toSerialize, nil
}

type NullableSubRule struct {
	value *SubRule
	isSet bool
}

func (v NullableSubRule) Get() *SubRule {
	return v.value
}

func (v *NullableSubRule) Set(val *SubRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSubRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSubRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubRule(val *SubRule) *NullableSubRule {
	return &NullableSubRule{value: val, isSet: true}
}

func (v NullableSubRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
