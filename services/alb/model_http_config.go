/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 2beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alb

import (
	"encoding/json"
)

// checks if the HTTPConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HTTPConfig{}

/*
	types and functions for subRules
*/

// isArray
type HTTPConfigGetSubRulesAttributeType = *[]SubRule
type HTTPConfigGetSubRulesArgType = []SubRule
type HTTPConfigGetSubRulesRetType = []SubRule

func getHTTPConfigGetSubRulesAttributeTypeOk(arg HTTPConfigGetSubRulesAttributeType) (ret HTTPConfigGetSubRulesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHTTPConfigGetSubRulesAttributeType(arg *HTTPConfigGetSubRulesAttributeType, val HTTPConfigGetSubRulesRetType) {
	*arg = &val
}

// HTTPConfig struct for HTTPConfig
type HTTPConfig struct {
	SubRules HTTPConfigGetSubRulesAttributeType `json:"subRules,omitempty"`
}

// NewHTTPConfig instantiates a new HTTPConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPConfig() *HTTPConfig {
	this := HTTPConfig{}
	return &this
}

// NewHTTPConfigWithDefaults instantiates a new HTTPConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPConfigWithDefaults() *HTTPConfig {
	this := HTTPConfig{}
	return &this
}

// GetSubRules returns the SubRules field value if set, zero value otherwise.
func (o *HTTPConfig) GetSubRules() (res HTTPConfigGetSubRulesRetType) {
	res, _ = o.GetSubRulesOk()
	return
}

// GetSubRulesOk returns a tuple with the SubRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConfig) GetSubRulesOk() (ret HTTPConfigGetSubRulesRetType, ok bool) {
	return getHTTPConfigGetSubRulesAttributeTypeOk(o.SubRules)
}

// HasSubRules returns a boolean if a field has been set.
func (o *HTTPConfig) HasSubRules() bool {
	_, ok := o.GetSubRulesOk()
	return ok
}

// SetSubRules gets a reference to the given []SubRule and assigns it to the SubRules field.
func (o *HTTPConfig) SetSubRules(v HTTPConfigGetSubRulesRetType) {
	setHTTPConfigGetSubRulesAttributeType(&o.SubRules, v)
}

func (o HTTPConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHTTPConfigGetSubRulesAttributeTypeOk(o.SubRules); ok {
		toSerialize["SubRules"] = val
	}
	return toSerialize, nil
}

type NullableHTTPConfig struct {
	value *HTTPConfig
	isSet bool
}

func (v NullableHTTPConfig) Get() *HTTPConfig {
	return v.value
}

func (v *NullableHTTPConfig) Set(val *HTTPConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPConfig(val *HTTPConfig) *NullableHTTPConfig {
	return &NullableHTTPConfig{value: val, isSet: true}
}

func (v NullableHTTPConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
