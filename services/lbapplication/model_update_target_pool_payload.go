/*
Application Load Balancer API

### DEPRECATED! This service, lb-application, is no longer maintained. Please use the alb service, version v2beta2 instead  This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the UpdateTargetPoolPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTargetPoolPayload{}

/*
	types and functions for activeHealthCheck
*/

// isModel
type UpdateTargetPoolPayloadGetActiveHealthCheckAttributeType = *ActiveHealthCheck
type UpdateTargetPoolPayloadGetActiveHealthCheckArgType = ActiveHealthCheck
type UpdateTargetPoolPayloadGetActiveHealthCheckRetType = ActiveHealthCheck

func getUpdateTargetPoolPayloadGetActiveHealthCheckAttributeTypeOk(arg UpdateTargetPoolPayloadGetActiveHealthCheckAttributeType) (ret UpdateTargetPoolPayloadGetActiveHealthCheckRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateTargetPoolPayloadGetActiveHealthCheckAttributeType(arg *UpdateTargetPoolPayloadGetActiveHealthCheckAttributeType, val UpdateTargetPoolPayloadGetActiveHealthCheckRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type UpdateTargetPoolPayloadGetNameAttributeType = *string

func getUpdateTargetPoolPayloadGetNameAttributeTypeOk(arg UpdateTargetPoolPayloadGetNameAttributeType) (ret UpdateTargetPoolPayloadGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateTargetPoolPayloadGetNameAttributeType(arg *UpdateTargetPoolPayloadGetNameAttributeType, val UpdateTargetPoolPayloadGetNameRetType) {
	*arg = &val
}

type UpdateTargetPoolPayloadGetNameArgType = string
type UpdateTargetPoolPayloadGetNameRetType = string

/*
	types and functions for targetPort
*/

// isInteger
type UpdateTargetPoolPayloadGetTargetPortAttributeType = *int64
type UpdateTargetPoolPayloadGetTargetPortArgType = int64
type UpdateTargetPoolPayloadGetTargetPortRetType = int64

func getUpdateTargetPoolPayloadGetTargetPortAttributeTypeOk(arg UpdateTargetPoolPayloadGetTargetPortAttributeType) (ret UpdateTargetPoolPayloadGetTargetPortRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateTargetPoolPayloadGetTargetPortAttributeType(arg *UpdateTargetPoolPayloadGetTargetPortAttributeType, val UpdateTargetPoolPayloadGetTargetPortRetType) {
	*arg = &val
}

/*
	types and functions for targets
*/

// isArray
type UpdateTargetPoolPayloadGetTargetsAttributeType = *[]Target
type UpdateTargetPoolPayloadGetTargetsArgType = []Target
type UpdateTargetPoolPayloadGetTargetsRetType = []Target

func getUpdateTargetPoolPayloadGetTargetsAttributeTypeOk(arg UpdateTargetPoolPayloadGetTargetsAttributeType) (ret UpdateTargetPoolPayloadGetTargetsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setUpdateTargetPoolPayloadGetTargetsAttributeType(arg *UpdateTargetPoolPayloadGetTargetsAttributeType, val UpdateTargetPoolPayloadGetTargetsRetType) {
	*arg = &val
}

// UpdateTargetPoolPayload struct for UpdateTargetPoolPayload
type UpdateTargetPoolPayload struct {
	ActiveHealthCheck UpdateTargetPoolPayloadGetActiveHealthCheckAttributeType `json:"activeHealthCheck,omitempty"`
	// Target pool name
	Name UpdateTargetPoolPayloadGetNameAttributeType `json:"name,omitempty"`
	// The number identifying the port where each target listens for traffic.
	TargetPort UpdateTargetPoolPayloadGetTargetPortAttributeType `json:"targetPort,omitempty"`
	// List of all targets which will be used in the pool. Limited to 250.
	Targets UpdateTargetPoolPayloadGetTargetsAttributeType `json:"targets,omitempty"`
}

// NewUpdateTargetPoolPayload instantiates a new UpdateTargetPoolPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTargetPoolPayload() *UpdateTargetPoolPayload {
	this := UpdateTargetPoolPayload{}
	return &this
}

// NewUpdateTargetPoolPayloadWithDefaults instantiates a new UpdateTargetPoolPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTargetPoolPayloadWithDefaults() *UpdateTargetPoolPayload {
	this := UpdateTargetPoolPayload{}
	return &this
}

// GetActiveHealthCheck returns the ActiveHealthCheck field value if set, zero value otherwise.
func (o *UpdateTargetPoolPayload) GetActiveHealthCheck() (res UpdateTargetPoolPayloadGetActiveHealthCheckRetType) {
	res, _ = o.GetActiveHealthCheckOk()
	return
}

// GetActiveHealthCheckOk returns a tuple with the ActiveHealthCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTargetPoolPayload) GetActiveHealthCheckOk() (ret UpdateTargetPoolPayloadGetActiveHealthCheckRetType, ok bool) {
	return getUpdateTargetPoolPayloadGetActiveHealthCheckAttributeTypeOk(o.ActiveHealthCheck)
}

// HasActiveHealthCheck returns a boolean if a field has been set.
func (o *UpdateTargetPoolPayload) HasActiveHealthCheck() bool {
	_, ok := o.GetActiveHealthCheckOk()
	return ok
}

// SetActiveHealthCheck gets a reference to the given ActiveHealthCheck and assigns it to the ActiveHealthCheck field.
func (o *UpdateTargetPoolPayload) SetActiveHealthCheck(v UpdateTargetPoolPayloadGetActiveHealthCheckRetType) {
	setUpdateTargetPoolPayloadGetActiveHealthCheckAttributeType(&o.ActiveHealthCheck, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTargetPoolPayload) GetName() (res UpdateTargetPoolPayloadGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTargetPoolPayload) GetNameOk() (ret UpdateTargetPoolPayloadGetNameRetType, ok bool) {
	return getUpdateTargetPoolPayloadGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTargetPoolPayload) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTargetPoolPayload) SetName(v UpdateTargetPoolPayloadGetNameRetType) {
	setUpdateTargetPoolPayloadGetNameAttributeType(&o.Name, v)
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *UpdateTargetPoolPayload) GetTargetPort() (res UpdateTargetPoolPayloadGetTargetPortRetType) {
	res, _ = o.GetTargetPortOk()
	return
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTargetPoolPayload) GetTargetPortOk() (ret UpdateTargetPoolPayloadGetTargetPortRetType, ok bool) {
	return getUpdateTargetPoolPayloadGetTargetPortAttributeTypeOk(o.TargetPort)
}

// HasTargetPort returns a boolean if a field has been set.
func (o *UpdateTargetPoolPayload) HasTargetPort() bool {
	_, ok := o.GetTargetPortOk()
	return ok
}

// SetTargetPort gets a reference to the given int64 and assigns it to the TargetPort field.
func (o *UpdateTargetPoolPayload) SetTargetPort(v UpdateTargetPoolPayloadGetTargetPortRetType) {
	setUpdateTargetPoolPayloadGetTargetPortAttributeType(&o.TargetPort, v)
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *UpdateTargetPoolPayload) GetTargets() (res UpdateTargetPoolPayloadGetTargetsRetType) {
	res, _ = o.GetTargetsOk()
	return
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTargetPoolPayload) GetTargetsOk() (ret UpdateTargetPoolPayloadGetTargetsRetType, ok bool) {
	return getUpdateTargetPoolPayloadGetTargetsAttributeTypeOk(o.Targets)
}

// HasTargets returns a boolean if a field has been set.
func (o *UpdateTargetPoolPayload) HasTargets() bool {
	_, ok := o.GetTargetsOk()
	return ok
}

// SetTargets gets a reference to the given []Target and assigns it to the Targets field.
func (o *UpdateTargetPoolPayload) SetTargets(v UpdateTargetPoolPayloadGetTargetsRetType) {
	setUpdateTargetPoolPayloadGetTargetsAttributeType(&o.Targets, v)
}

func (o UpdateTargetPoolPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getUpdateTargetPoolPayloadGetActiveHealthCheckAttributeTypeOk(o.ActiveHealthCheck); ok {
		toSerialize["ActiveHealthCheck"] = val
	}
	if val, ok := getUpdateTargetPoolPayloadGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getUpdateTargetPoolPayloadGetTargetPortAttributeTypeOk(o.TargetPort); ok {
		toSerialize["TargetPort"] = val
	}
	if val, ok := getUpdateTargetPoolPayloadGetTargetsAttributeTypeOk(o.Targets); ok {
		toSerialize["Targets"] = val
	}
	return toSerialize, nil
}

type NullableUpdateTargetPoolPayload struct {
	value *UpdateTargetPoolPayload
	isSet bool
}

func (v NullableUpdateTargetPoolPayload) Get() *UpdateTargetPoolPayload {
	return v.value
}

func (v *NullableUpdateTargetPoolPayload) Set(val *UpdateTargetPoolPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTargetPoolPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTargetPoolPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTargetPoolPayload(val *UpdateTargetPoolPayload) *NullableUpdateTargetPoolPayload {
	return &NullableUpdateTargetPoolPayload{value: val, isSet: true}
}

func (v NullableUpdateTargetPoolPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTargetPoolPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
