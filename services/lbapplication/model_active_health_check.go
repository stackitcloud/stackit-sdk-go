/*
Application Load Balancer API

### DEPRECATED! This service, lb-application, is no longer maintained. Please use the alb service, version v2beta2 instead  This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the ActiveHealthCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveHealthCheck{}

/*
	types and functions for healthyThreshold
*/

// isInteger
type ActiveHealthCheckGetHealthyThresholdAttributeType = *int64
type ActiveHealthCheckGetHealthyThresholdArgType = int64
type ActiveHealthCheckGetHealthyThresholdRetType = int64

func getActiveHealthCheckGetHealthyThresholdAttributeTypeOk(arg ActiveHealthCheckGetHealthyThresholdAttributeType) (ret ActiveHealthCheckGetHealthyThresholdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActiveHealthCheckGetHealthyThresholdAttributeType(arg *ActiveHealthCheckGetHealthyThresholdAttributeType, val ActiveHealthCheckGetHealthyThresholdRetType) {
	*arg = &val
}

/*
	types and functions for httpHealthChecks
*/

// isModel
type ActiveHealthCheckGetHttpHealthChecksAttributeType = *HttpHealthChecks
type ActiveHealthCheckGetHttpHealthChecksArgType = HttpHealthChecks
type ActiveHealthCheckGetHttpHealthChecksRetType = HttpHealthChecks

func getActiveHealthCheckGetHttpHealthChecksAttributeTypeOk(arg ActiveHealthCheckGetHttpHealthChecksAttributeType) (ret ActiveHealthCheckGetHttpHealthChecksRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActiveHealthCheckGetHttpHealthChecksAttributeType(arg *ActiveHealthCheckGetHttpHealthChecksAttributeType, val ActiveHealthCheckGetHttpHealthChecksRetType) {
	*arg = &val
}

/*
	types and functions for interval
*/

// isNotNullableString
type ActiveHealthCheckGetIntervalAttributeType = *string

func getActiveHealthCheckGetIntervalAttributeTypeOk(arg ActiveHealthCheckGetIntervalAttributeType) (ret ActiveHealthCheckGetIntervalRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActiveHealthCheckGetIntervalAttributeType(arg *ActiveHealthCheckGetIntervalAttributeType, val ActiveHealthCheckGetIntervalRetType) {
	*arg = &val
}

type ActiveHealthCheckGetIntervalArgType = string
type ActiveHealthCheckGetIntervalRetType = string

/*
	types and functions for intervalJitter
*/

// isNotNullableString
type ActiveHealthCheckGetIntervalJitterAttributeType = *string

func getActiveHealthCheckGetIntervalJitterAttributeTypeOk(arg ActiveHealthCheckGetIntervalJitterAttributeType) (ret ActiveHealthCheckGetIntervalJitterRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActiveHealthCheckGetIntervalJitterAttributeType(arg *ActiveHealthCheckGetIntervalJitterAttributeType, val ActiveHealthCheckGetIntervalJitterRetType) {
	*arg = &val
}

type ActiveHealthCheckGetIntervalJitterArgType = string
type ActiveHealthCheckGetIntervalJitterRetType = string

/*
	types and functions for timeout
*/

// isNotNullableString
type ActiveHealthCheckGetTimeoutAttributeType = *string

func getActiveHealthCheckGetTimeoutAttributeTypeOk(arg ActiveHealthCheckGetTimeoutAttributeType) (ret ActiveHealthCheckGetTimeoutRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActiveHealthCheckGetTimeoutAttributeType(arg *ActiveHealthCheckGetTimeoutAttributeType, val ActiveHealthCheckGetTimeoutRetType) {
	*arg = &val
}

type ActiveHealthCheckGetTimeoutArgType = string
type ActiveHealthCheckGetTimeoutRetType = string

/*
	types and functions for unhealthyThreshold
*/

// isInteger
type ActiveHealthCheckGetUnhealthyThresholdAttributeType = *int64
type ActiveHealthCheckGetUnhealthyThresholdArgType = int64
type ActiveHealthCheckGetUnhealthyThresholdRetType = int64

func getActiveHealthCheckGetUnhealthyThresholdAttributeTypeOk(arg ActiveHealthCheckGetUnhealthyThresholdAttributeType) (ret ActiveHealthCheckGetUnhealthyThresholdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setActiveHealthCheckGetUnhealthyThresholdAttributeType(arg *ActiveHealthCheckGetUnhealthyThresholdAttributeType, val ActiveHealthCheckGetUnhealthyThresholdRetType) {
	*arg = &val
}

// ActiveHealthCheck struct for ActiveHealthCheck
type ActiveHealthCheck struct {
	// Healthy threshold of the health checking
	HealthyThreshold ActiveHealthCheckGetHealthyThresholdAttributeType `json:"healthyThreshold,omitempty"`
	HttpHealthChecks ActiveHealthCheckGetHttpHealthChecksAttributeType `json:"httpHealthChecks,omitempty"`
	// Interval duration of health checking in seconds
	Interval ActiveHealthCheckGetIntervalAttributeType `json:"interval,omitempty"`
	// Interval duration threshold of the health checking in seconds
	IntervalJitter ActiveHealthCheckGetIntervalJitterAttributeType `json:"intervalJitter,omitempty"`
	// Active health checking timeout duration in seconds
	Timeout ActiveHealthCheckGetTimeoutAttributeType `json:"timeout,omitempty"`
	// Unhealthy threshold of the health checking
	UnhealthyThreshold ActiveHealthCheckGetUnhealthyThresholdAttributeType `json:"unhealthyThreshold,omitempty"`
}

// NewActiveHealthCheck instantiates a new ActiveHealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveHealthCheck() *ActiveHealthCheck {
	this := ActiveHealthCheck{}
	return &this
}

// NewActiveHealthCheckWithDefaults instantiates a new ActiveHealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveHealthCheckWithDefaults() *ActiveHealthCheck {
	this := ActiveHealthCheck{}
	return &this
}

// GetHealthyThreshold returns the HealthyThreshold field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetHealthyThreshold() (res ActiveHealthCheckGetHealthyThresholdRetType) {
	res, _ = o.GetHealthyThresholdOk()
	return
}

// GetHealthyThresholdOk returns a tuple with the HealthyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetHealthyThresholdOk() (ret ActiveHealthCheckGetHealthyThresholdRetType, ok bool) {
	return getActiveHealthCheckGetHealthyThresholdAttributeTypeOk(o.HealthyThreshold)
}

// HasHealthyThreshold returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasHealthyThreshold() bool {
	_, ok := o.GetHealthyThresholdOk()
	return ok
}

// SetHealthyThreshold gets a reference to the given int64 and assigns it to the HealthyThreshold field.
func (o *ActiveHealthCheck) SetHealthyThreshold(v ActiveHealthCheckGetHealthyThresholdRetType) {
	setActiveHealthCheckGetHealthyThresholdAttributeType(&o.HealthyThreshold, v)
}

// GetHttpHealthChecks returns the HttpHealthChecks field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetHttpHealthChecks() (res ActiveHealthCheckGetHttpHealthChecksRetType) {
	res, _ = o.GetHttpHealthChecksOk()
	return
}

// GetHttpHealthChecksOk returns a tuple with the HttpHealthChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetHttpHealthChecksOk() (ret ActiveHealthCheckGetHttpHealthChecksRetType, ok bool) {
	return getActiveHealthCheckGetHttpHealthChecksAttributeTypeOk(o.HttpHealthChecks)
}

// HasHttpHealthChecks returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasHttpHealthChecks() bool {
	_, ok := o.GetHttpHealthChecksOk()
	return ok
}

// SetHttpHealthChecks gets a reference to the given HttpHealthChecks and assigns it to the HttpHealthChecks field.
func (o *ActiveHealthCheck) SetHttpHealthChecks(v ActiveHealthCheckGetHttpHealthChecksRetType) {
	setActiveHealthCheckGetHttpHealthChecksAttributeType(&o.HttpHealthChecks, v)
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetInterval() (res ActiveHealthCheckGetIntervalRetType) {
	res, _ = o.GetIntervalOk()
	return
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetIntervalOk() (ret ActiveHealthCheckGetIntervalRetType, ok bool) {
	return getActiveHealthCheckGetIntervalAttributeTypeOk(o.Interval)
}

// HasInterval returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasInterval() bool {
	_, ok := o.GetIntervalOk()
	return ok
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *ActiveHealthCheck) SetInterval(v ActiveHealthCheckGetIntervalRetType) {
	setActiveHealthCheckGetIntervalAttributeType(&o.Interval, v)
}

// GetIntervalJitter returns the IntervalJitter field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetIntervalJitter() (res ActiveHealthCheckGetIntervalJitterRetType) {
	res, _ = o.GetIntervalJitterOk()
	return
}

// GetIntervalJitterOk returns a tuple with the IntervalJitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetIntervalJitterOk() (ret ActiveHealthCheckGetIntervalJitterRetType, ok bool) {
	return getActiveHealthCheckGetIntervalJitterAttributeTypeOk(o.IntervalJitter)
}

// HasIntervalJitter returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasIntervalJitter() bool {
	_, ok := o.GetIntervalJitterOk()
	return ok
}

// SetIntervalJitter gets a reference to the given string and assigns it to the IntervalJitter field.
func (o *ActiveHealthCheck) SetIntervalJitter(v ActiveHealthCheckGetIntervalJitterRetType) {
	setActiveHealthCheckGetIntervalJitterAttributeType(&o.IntervalJitter, v)
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetTimeout() (res ActiveHealthCheckGetTimeoutRetType) {
	res, _ = o.GetTimeoutOk()
	return
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetTimeoutOk() (ret ActiveHealthCheckGetTimeoutRetType, ok bool) {
	return getActiveHealthCheckGetTimeoutAttributeTypeOk(o.Timeout)
}

// HasTimeout returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasTimeout() bool {
	_, ok := o.GetTimeoutOk()
	return ok
}

// SetTimeout gets a reference to the given string and assigns it to the Timeout field.
func (o *ActiveHealthCheck) SetTimeout(v ActiveHealthCheckGetTimeoutRetType) {
	setActiveHealthCheckGetTimeoutAttributeType(&o.Timeout, v)
}

// GetUnhealthyThreshold returns the UnhealthyThreshold field value if set, zero value otherwise.
func (o *ActiveHealthCheck) GetUnhealthyThreshold() (res ActiveHealthCheckGetUnhealthyThresholdRetType) {
	res, _ = o.GetUnhealthyThresholdOk()
	return
}

// GetUnhealthyThresholdOk returns a tuple with the UnhealthyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveHealthCheck) GetUnhealthyThresholdOk() (ret ActiveHealthCheckGetUnhealthyThresholdRetType, ok bool) {
	return getActiveHealthCheckGetUnhealthyThresholdAttributeTypeOk(o.UnhealthyThreshold)
}

// HasUnhealthyThreshold returns a boolean if a field has been set.
func (o *ActiveHealthCheck) HasUnhealthyThreshold() bool {
	_, ok := o.GetUnhealthyThresholdOk()
	return ok
}

// SetUnhealthyThreshold gets a reference to the given int64 and assigns it to the UnhealthyThreshold field.
func (o *ActiveHealthCheck) SetUnhealthyThreshold(v ActiveHealthCheckGetUnhealthyThresholdRetType) {
	setActiveHealthCheckGetUnhealthyThresholdAttributeType(&o.UnhealthyThreshold, v)
}

func (o ActiveHealthCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getActiveHealthCheckGetHealthyThresholdAttributeTypeOk(o.HealthyThreshold); ok {
		toSerialize["HealthyThreshold"] = val
	}
	if val, ok := getActiveHealthCheckGetHttpHealthChecksAttributeTypeOk(o.HttpHealthChecks); ok {
		toSerialize["HttpHealthChecks"] = val
	}
	if val, ok := getActiveHealthCheckGetIntervalAttributeTypeOk(o.Interval); ok {
		toSerialize["Interval"] = val
	}
	if val, ok := getActiveHealthCheckGetIntervalJitterAttributeTypeOk(o.IntervalJitter); ok {
		toSerialize["IntervalJitter"] = val
	}
	if val, ok := getActiveHealthCheckGetTimeoutAttributeTypeOk(o.Timeout); ok {
		toSerialize["Timeout"] = val
	}
	if val, ok := getActiveHealthCheckGetUnhealthyThresholdAttributeTypeOk(o.UnhealthyThreshold); ok {
		toSerialize["UnhealthyThreshold"] = val
	}
	return toSerialize, nil
}

type NullableActiveHealthCheck struct {
	value *ActiveHealthCheck
	isSet bool
}

func (v NullableActiveHealthCheck) Get() *ActiveHealthCheck {
	return v.value
}

func (v *NullableActiveHealthCheck) Set(val *ActiveHealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveHealthCheck(val *ActiveHealthCheck) *NullableActiveHealthCheck {
	return &NullableActiveHealthCheck{value: val, isSet: true}
}

func (v NullableActiveHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
