/*
Application Load Balancer API

### DEPRECATED! This service, lb-application, is no longer maintained. Please use the alb service, version v2beta2 instead  This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the Matcher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Matcher{}

/*
	types and functions for cookiePersistence
*/

// isModel
type MatcherGetCookiePersistenceAttributeType = *CookiePersistence
type MatcherGetCookiePersistenceArgType = CookiePersistence
type MatcherGetCookiePersistenceRetType = CookiePersistence

func getMatcherGetCookiePersistenceAttributeTypeOk(arg MatcherGetCookiePersistenceAttributeType) (ret MatcherGetCookiePersistenceRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMatcherGetCookiePersistenceAttributeType(arg *MatcherGetCookiePersistenceAttributeType, val MatcherGetCookiePersistenceRetType) {
	*arg = &val
}

/*
	types and functions for headers
*/

// isArray
type MatcherGetHeadersAttributeType = *[]Header
type MatcherGetHeadersArgType = []Header
type MatcherGetHeadersRetType = []Header

func getMatcherGetHeadersAttributeTypeOk(arg MatcherGetHeadersAttributeType) (ret MatcherGetHeadersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMatcherGetHeadersAttributeType(arg *MatcherGetHeadersAttributeType, val MatcherGetHeadersRetType) {
	*arg = &val
}

/*
	types and functions for pathPrefix
*/

// isNotNullableString
type MatcherGetPathPrefixAttributeType = *string

func getMatcherGetPathPrefixAttributeTypeOk(arg MatcherGetPathPrefixAttributeType) (ret MatcherGetPathPrefixRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMatcherGetPathPrefixAttributeType(arg *MatcherGetPathPrefixAttributeType, val MatcherGetPathPrefixRetType) {
	*arg = &val
}

type MatcherGetPathPrefixArgType = string
type MatcherGetPathPrefixRetType = string

/*
	types and functions for queryParameters
*/

// isArray
type MatcherGetQueryParametersAttributeType = *[]QueryParameters
type MatcherGetQueryParametersArgType = []QueryParameters
type MatcherGetQueryParametersRetType = []QueryParameters

func getMatcherGetQueryParametersAttributeTypeOk(arg MatcherGetQueryParametersAttributeType) (ret MatcherGetQueryParametersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMatcherGetQueryParametersAttributeType(arg *MatcherGetQueryParametersAttributeType, val MatcherGetQueryParametersRetType) {
	*arg = &val
}

/*
	types and functions for targetPool
*/

// isNotNullableString
type MatcherGetTargetPoolAttributeType = *string

func getMatcherGetTargetPoolAttributeTypeOk(arg MatcherGetTargetPoolAttributeType) (ret MatcherGetTargetPoolRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMatcherGetTargetPoolAttributeType(arg *MatcherGetTargetPoolAttributeType, val MatcherGetTargetPoolRetType) {
	*arg = &val
}

type MatcherGetTargetPoolArgType = string
type MatcherGetTargetPoolRetType = string

/*
	types and functions for webSocket
*/

// isBoolean
type MatchergetWebSocketAttributeType = *bool
type MatchergetWebSocketArgType = bool
type MatchergetWebSocketRetType = bool

func getMatchergetWebSocketAttributeTypeOk(arg MatchergetWebSocketAttributeType) (ret MatchergetWebSocketRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setMatchergetWebSocketAttributeType(arg *MatchergetWebSocketAttributeType, val MatchergetWebSocketRetType) {
	*arg = &val
}

// Matcher struct for Matcher
type Matcher struct {
	CookiePersistence MatcherGetCookiePersistenceAttributeType `json:"cookiePersistence,omitempty"`
	// Headers for the matcher
	Headers MatcherGetHeadersAttributeType `json:"headers,omitempty"`
	// Path prefix for the matcher
	PathPrefix MatcherGetPathPrefixAttributeType `json:"pathPrefix,omitempty"`
	// Query Parameters for the matcher
	QueryParameters MatcherGetQueryParametersAttributeType `json:"queryParameters,omitempty"`
	// Reference target pool by target pool name.
	TargetPool MatcherGetTargetPoolAttributeType `json:"targetPool,omitempty"`
	// If enabled, when client sends an HTTP request with and Upgrade header, indicating the desire to establish a Websocket connection,  if backend server supports WebSocket, it responds with HTTP 101 status code, switching protocols from HTTP to WebSocket. Hence the client and the server can exchange data in real-time using one long-lived TCP connection.
	WebSocket MatchergetWebSocketAttributeType `json:"webSocket,omitempty"`
}

// NewMatcher instantiates a new Matcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatcher() *Matcher {
	this := Matcher{}
	return &this
}

// NewMatcherWithDefaults instantiates a new Matcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatcherWithDefaults() *Matcher {
	this := Matcher{}
	return &this
}

// GetCookiePersistence returns the CookiePersistence field value if set, zero value otherwise.
func (o *Matcher) GetCookiePersistence() (res MatcherGetCookiePersistenceRetType) {
	res, _ = o.GetCookiePersistenceOk()
	return
}

// GetCookiePersistenceOk returns a tuple with the CookiePersistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetCookiePersistenceOk() (ret MatcherGetCookiePersistenceRetType, ok bool) {
	return getMatcherGetCookiePersistenceAttributeTypeOk(o.CookiePersistence)
}

// HasCookiePersistence returns a boolean if a field has been set.
func (o *Matcher) HasCookiePersistence() bool {
	_, ok := o.GetCookiePersistenceOk()
	return ok
}

// SetCookiePersistence gets a reference to the given CookiePersistence and assigns it to the CookiePersistence field.
func (o *Matcher) SetCookiePersistence(v MatcherGetCookiePersistenceRetType) {
	setMatcherGetCookiePersistenceAttributeType(&o.CookiePersistence, v)
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *Matcher) GetHeaders() (res MatcherGetHeadersRetType) {
	res, _ = o.GetHeadersOk()
	return
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetHeadersOk() (ret MatcherGetHeadersRetType, ok bool) {
	return getMatcherGetHeadersAttributeTypeOk(o.Headers)
}

// HasHeaders returns a boolean if a field has been set.
func (o *Matcher) HasHeaders() bool {
	_, ok := o.GetHeadersOk()
	return ok
}

// SetHeaders gets a reference to the given []Header and assigns it to the Headers field.
func (o *Matcher) SetHeaders(v MatcherGetHeadersRetType) {
	setMatcherGetHeadersAttributeType(&o.Headers, v)
}

// GetPathPrefix returns the PathPrefix field value if set, zero value otherwise.
func (o *Matcher) GetPathPrefix() (res MatcherGetPathPrefixRetType) {
	res, _ = o.GetPathPrefixOk()
	return
}

// GetPathPrefixOk returns a tuple with the PathPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetPathPrefixOk() (ret MatcherGetPathPrefixRetType, ok bool) {
	return getMatcherGetPathPrefixAttributeTypeOk(o.PathPrefix)
}

// HasPathPrefix returns a boolean if a field has been set.
func (o *Matcher) HasPathPrefix() bool {
	_, ok := o.GetPathPrefixOk()
	return ok
}

// SetPathPrefix gets a reference to the given string and assigns it to the PathPrefix field.
func (o *Matcher) SetPathPrefix(v MatcherGetPathPrefixRetType) {
	setMatcherGetPathPrefixAttributeType(&o.PathPrefix, v)
}

// GetQueryParameters returns the QueryParameters field value if set, zero value otherwise.
func (o *Matcher) GetQueryParameters() (res MatcherGetQueryParametersRetType) {
	res, _ = o.GetQueryParametersOk()
	return
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetQueryParametersOk() (ret MatcherGetQueryParametersRetType, ok bool) {
	return getMatcherGetQueryParametersAttributeTypeOk(o.QueryParameters)
}

// HasQueryParameters returns a boolean if a field has been set.
func (o *Matcher) HasQueryParameters() bool {
	_, ok := o.GetQueryParametersOk()
	return ok
}

// SetQueryParameters gets a reference to the given []QueryParameters and assigns it to the QueryParameters field.
func (o *Matcher) SetQueryParameters(v MatcherGetQueryParametersRetType) {
	setMatcherGetQueryParametersAttributeType(&o.QueryParameters, v)
}

// GetTargetPool returns the TargetPool field value if set, zero value otherwise.
func (o *Matcher) GetTargetPool() (res MatcherGetTargetPoolRetType) {
	res, _ = o.GetTargetPoolOk()
	return
}

// GetTargetPoolOk returns a tuple with the TargetPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetTargetPoolOk() (ret MatcherGetTargetPoolRetType, ok bool) {
	return getMatcherGetTargetPoolAttributeTypeOk(o.TargetPool)
}

// HasTargetPool returns a boolean if a field has been set.
func (o *Matcher) HasTargetPool() bool {
	_, ok := o.GetTargetPoolOk()
	return ok
}

// SetTargetPool gets a reference to the given string and assigns it to the TargetPool field.
func (o *Matcher) SetTargetPool(v MatcherGetTargetPoolRetType) {
	setMatcherGetTargetPoolAttributeType(&o.TargetPool, v)
}

// GetWebSocket returns the WebSocket field value if set, zero value otherwise.
func (o *Matcher) GetWebSocket() (res MatchergetWebSocketRetType) {
	res, _ = o.GetWebSocketOk()
	return
}

// GetWebSocketOk returns a tuple with the WebSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetWebSocketOk() (ret MatchergetWebSocketRetType, ok bool) {
	return getMatchergetWebSocketAttributeTypeOk(o.WebSocket)
}

// HasWebSocket returns a boolean if a field has been set.
func (o *Matcher) HasWebSocket() bool {
	_, ok := o.GetWebSocketOk()
	return ok
}

// SetWebSocket gets a reference to the given bool and assigns it to the WebSocket field.
func (o *Matcher) SetWebSocket(v MatchergetWebSocketRetType) {
	setMatchergetWebSocketAttributeType(&o.WebSocket, v)
}

func (o Matcher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getMatcherGetCookiePersistenceAttributeTypeOk(o.CookiePersistence); ok {
		toSerialize["CookiePersistence"] = val
	}
	if val, ok := getMatcherGetHeadersAttributeTypeOk(o.Headers); ok {
		toSerialize["Headers"] = val
	}
	if val, ok := getMatcherGetPathPrefixAttributeTypeOk(o.PathPrefix); ok {
		toSerialize["PathPrefix"] = val
	}
	if val, ok := getMatcherGetQueryParametersAttributeTypeOk(o.QueryParameters); ok {
		toSerialize["QueryParameters"] = val
	}
	if val, ok := getMatcherGetTargetPoolAttributeTypeOk(o.TargetPool); ok {
		toSerialize["TargetPool"] = val
	}
	if val, ok := getMatchergetWebSocketAttributeTypeOk(o.WebSocket); ok {
		toSerialize["WebSocket"] = val
	}
	return toSerialize, nil
}

type NullableMatcher struct {
	value *Matcher
	isSet bool
}

func (v NullableMatcher) Get() *Matcher {
	return v.value
}

func (v *NullableMatcher) Set(val *Matcher) {
	v.value = val
	v.isSet = true
}

func (v NullableMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatcher(val *Matcher) *NullableMatcher {
	return &NullableMatcher{value: val, isSet: true}
}

func (v NullableMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
