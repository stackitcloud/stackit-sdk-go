/*
Application Load Balancer API

This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the HttpHealthChecks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpHealthChecks{}

// HttpHealthChecks struct for HttpHealthChecks
type HttpHealthChecks struct {
	// List of HTTP status codes that indicate a healthy response
	OkStatuses *[]string `json:"okStatuses,omitempty"`
	// Path to send the health check request to
	Path *string `json:"path,omitempty"`
}

// NewHttpHealthChecks instantiates a new HttpHealthChecks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpHealthChecks() *HttpHealthChecks {
	this := HttpHealthChecks{}
	return &this
}

// NewHttpHealthChecksWithDefaults instantiates a new HttpHealthChecks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpHealthChecksWithDefaults() *HttpHealthChecks {
	this := HttpHealthChecks{}
	return &this
}

// GetOkStatuses returns the OkStatuses field value if set, zero value otherwise.
func (o *HttpHealthChecks) GetOkStatuses() *[]string {
	if o == nil || IsNil(o.OkStatuses) {
		var ret *[]string
		return ret
	}
	return o.OkStatuses
}

// GetOkStatusesOk returns a tuple with the OkStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHealthChecks) GetOkStatusesOk() (*[]string, bool) {
	if o == nil || IsNil(o.OkStatuses) {
		return nil, false
	}
	return o.OkStatuses, true
}

// HasOkStatuses returns a boolean if a field has been set.
func (o *HttpHealthChecks) HasOkStatuses() bool {
	if o != nil && !IsNil(o.OkStatuses) {
		return true
	}

	return false
}

// SetOkStatuses gets a reference to the given []string and assigns it to the OkStatuses field.
func (o *HttpHealthChecks) SetOkStatuses(v *[]string) {
	o.OkStatuses = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *HttpHealthChecks) GetPath() *string {
	if o == nil || IsNil(o.Path) {
		var ret *string
		return ret
	}
	return o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHealthChecks) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *HttpHealthChecks) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *HttpHealthChecks) SetPath(v *string) {
	o.Path = v
}

func (o HttpHealthChecks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OkStatuses) {
		toSerialize["okStatuses"] = o.OkStatuses
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableHttpHealthChecks struct {
	value *HttpHealthChecks
	isSet bool
}

func (v NullableHttpHealthChecks) Get() *HttpHealthChecks {
	return v.value
}

func (v *NullableHttpHealthChecks) Set(val *HttpHealthChecks) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpHealthChecks) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpHealthChecks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpHealthChecks(val *HttpHealthChecks) *NullableHttpHealthChecks {
	return &NullableHttpHealthChecks{value: val, isSet: true}
}

func (v NullableHttpHealthChecks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpHealthChecks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
