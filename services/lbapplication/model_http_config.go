/*
Application Load Balancer API

### DEPRECATED! This service, lb-application, is no longer maintained. Please use the alb service, version v2beta2 instead  This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the HTTPConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HTTPConfig{}

/*
	types and functions for matcher
*/

// isArray
type HTTPConfigGetMatcherAttributeType = *[]Matcher
type HTTPConfigGetMatcherArgType = []Matcher
type HTTPConfigGetMatcherRetType = []Matcher

func getHTTPConfigGetMatcherAttributeTypeOk(arg HTTPConfigGetMatcherAttributeType) (ret HTTPConfigGetMatcherRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHTTPConfigGetMatcherAttributeType(arg *HTTPConfigGetMatcherAttributeType, val HTTPConfigGetMatcherRetType) {
	*arg = &val
}

// HTTPConfig struct for HTTPConfig
type HTTPConfig struct {
	Matcher HTTPConfigGetMatcherAttributeType `json:"matcher,omitempty"`
}

// NewHTTPConfig instantiates a new HTTPConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPConfig() *HTTPConfig {
	this := HTTPConfig{}
	return &this
}

// NewHTTPConfigWithDefaults instantiates a new HTTPConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPConfigWithDefaults() *HTTPConfig {
	this := HTTPConfig{}
	return &this
}

// GetMatcher returns the Matcher field value if set, zero value otherwise.
func (o *HTTPConfig) GetMatcher() (res HTTPConfigGetMatcherRetType) {
	res, _ = o.GetMatcherOk()
	return
}

// GetMatcherOk returns a tuple with the Matcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConfig) GetMatcherOk() (ret HTTPConfigGetMatcherRetType, ok bool) {
	return getHTTPConfigGetMatcherAttributeTypeOk(o.Matcher)
}

// HasMatcher returns a boolean if a field has been set.
func (o *HTTPConfig) HasMatcher() bool {
	_, ok := o.GetMatcherOk()
	return ok
}

// SetMatcher gets a reference to the given []Matcher and assigns it to the Matcher field.
func (o *HTTPConfig) SetMatcher(v HTTPConfigGetMatcherRetType) {
	setHTTPConfigGetMatcherAttributeType(&o.Matcher, v)
}

func (o HTTPConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHTTPConfigGetMatcherAttributeTypeOk(o.Matcher); ok {
		toSerialize["Matcher"] = val
	}
	return toSerialize, nil
}

type NullableHTTPConfig struct {
	value *HTTPConfig
	isSet bool
}

func (v NullableHTTPConfig) Get() *HTTPConfig {
	return v.value
}

func (v *NullableHTTPConfig) Set(val *HTTPConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPConfig(val *HTTPConfig) *NullableHTTPConfig {
	return &NullableHTTPConfig{value: val, isSet: true}
}

func (v NullableHTTPConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
