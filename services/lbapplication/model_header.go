/*
Application Load Balancer API

### DEPRECATED! This service, lb-application, is no longer maintained. Please use the alb service, version v2beta2 instead  This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the Header type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Header{}

/*
	types and functions for exactMatch
*/

// isNotNullableString
type HeaderGetExactMatchAttributeType = *string

func getHeaderGetExactMatchAttributeTypeOk(arg HeaderGetExactMatchAttributeType) (ret HeaderGetExactMatchRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHeaderGetExactMatchAttributeType(arg *HeaderGetExactMatchAttributeType, val HeaderGetExactMatchRetType) {
	*arg = &val
}

type HeaderGetExactMatchArgType = string
type HeaderGetExactMatchRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type HeaderGetNameAttributeType = *string

func getHeaderGetNameAttributeTypeOk(arg HeaderGetNameAttributeType) (ret HeaderGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setHeaderGetNameAttributeType(arg *HeaderGetNameAttributeType, val HeaderGetNameRetType) {
	*arg = &val
}

type HeaderGetNameArgType = string
type HeaderGetNameRetType = string

// Header struct for Header
type Header struct {
	// Exact match for the header value.
	ExactMatch HeaderGetExactMatchAttributeType `json:"exactMatch,omitempty"`
	// Header name.
	Name HeaderGetNameAttributeType `json:"name,omitempty"`
}

// NewHeader instantiates a new Header object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeader() *Header {
	this := Header{}
	return &this
}

// NewHeaderWithDefaults instantiates a new Header object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeaderWithDefaults() *Header {
	this := Header{}
	return &this
}

// GetExactMatch returns the ExactMatch field value if set, zero value otherwise.
func (o *Header) GetExactMatch() (res HeaderGetExactMatchRetType) {
	res, _ = o.GetExactMatchOk()
	return
}

// GetExactMatchOk returns a tuple with the ExactMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Header) GetExactMatchOk() (ret HeaderGetExactMatchRetType, ok bool) {
	return getHeaderGetExactMatchAttributeTypeOk(o.ExactMatch)
}

// HasExactMatch returns a boolean if a field has been set.
func (o *Header) HasExactMatch() bool {
	_, ok := o.GetExactMatchOk()
	return ok
}

// SetExactMatch gets a reference to the given string and assigns it to the ExactMatch field.
func (o *Header) SetExactMatch(v HeaderGetExactMatchRetType) {
	setHeaderGetExactMatchAttributeType(&o.ExactMatch, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Header) GetName() (res HeaderGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Header) GetNameOk() (ret HeaderGetNameRetType, ok bool) {
	return getHeaderGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *Header) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Header) SetName(v HeaderGetNameRetType) {
	setHeaderGetNameAttributeType(&o.Name, v)
}

func (o Header) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getHeaderGetExactMatchAttributeTypeOk(o.ExactMatch); ok {
		toSerialize["ExactMatch"] = val
	}
	if val, ok := getHeaderGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullableHeader struct {
	value *Header
	isSet bool
}

func (v NullableHeader) Get() *Header {
	return v.value
}

func (v *NullableHeader) Set(val *Header) {
	v.value = val
	v.isSet = true
}

func (v NullableHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeader(val *Header) *NullableHeader {
	return &NullableHeader{value: val, isSet: true}
}

func (v NullableHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
