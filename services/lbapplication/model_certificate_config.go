/*
Application Load Balancer API

### DEPRECATED! This service, lb-application, is no longer maintained. Please use the alb service, version v2beta2 instead  This API offers an interface to provision and manage load balancing servers in your STACKIT project. It also has the possibility of pooling target servers for load balancing purposes.  For each application load balancer provided, two VMs are deployed in your OpenStack project subject to a fee.

API version: 1beta.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lbapplication

import (
	"encoding/json"
)

// checks if the CertificateConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateConfig{}

/*
	types and functions for certificateIds
*/

// isArray
type CertificateConfigGetCertificateIdsAttributeType = *[]string
type CertificateConfigGetCertificateIdsArgType = []string
type CertificateConfigGetCertificateIdsRetType = []string

func getCertificateConfigGetCertificateIdsAttributeTypeOk(arg CertificateConfigGetCertificateIdsAttributeType) (ret CertificateConfigGetCertificateIdsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCertificateConfigGetCertificateIdsAttributeType(arg *CertificateConfigGetCertificateIdsAttributeType, val CertificateConfigGetCertificateIdsRetType) {
	*arg = &val
}

// CertificateConfig struct for CertificateConfig
type CertificateConfig struct {
	// Certificate IDs for TLS termination
	CertificateIds CertificateConfigGetCertificateIdsAttributeType `json:"certificateIds,omitempty"`
}

// NewCertificateConfig instantiates a new CertificateConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateConfig() *CertificateConfig {
	this := CertificateConfig{}
	return &this
}

// NewCertificateConfigWithDefaults instantiates a new CertificateConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateConfigWithDefaults() *CertificateConfig {
	this := CertificateConfig{}
	return &this
}

// GetCertificateIds returns the CertificateIds field value if set, zero value otherwise.
func (o *CertificateConfig) GetCertificateIds() (res CertificateConfigGetCertificateIdsRetType) {
	res, _ = o.GetCertificateIdsOk()
	return
}

// GetCertificateIdsOk returns a tuple with the CertificateIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateConfig) GetCertificateIdsOk() (ret CertificateConfigGetCertificateIdsRetType, ok bool) {
	return getCertificateConfigGetCertificateIdsAttributeTypeOk(o.CertificateIds)
}

// HasCertificateIds returns a boolean if a field has been set.
func (o *CertificateConfig) HasCertificateIds() bool {
	_, ok := o.GetCertificateIdsOk()
	return ok
}

// SetCertificateIds gets a reference to the given []string and assigns it to the CertificateIds field.
func (o *CertificateConfig) SetCertificateIds(v CertificateConfigGetCertificateIdsRetType) {
	setCertificateConfigGetCertificateIdsAttributeType(&o.CertificateIds, v)
}

func (o CertificateConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCertificateConfigGetCertificateIdsAttributeTypeOk(o.CertificateIds); ok {
		toSerialize["CertificateIds"] = val
	}
	return toSerialize, nil
}

type NullableCertificateConfig struct {
	value *CertificateConfig
	isSet bool
}

func (v NullableCertificateConfig) Get() *CertificateConfig {
	return v.value
}

func (v *NullableCertificateConfig) Set(val *CertificateConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateConfig(val *CertificateConfig) *NullableCertificateConfig {
	return &NullableCertificateConfig{value: val, isSet: true}
}

func (v NullableCertificateConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
