/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DomainObservabilityExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainObservabilityExtension{}

/*
	types and functions for observabilityInstanceId
*/

// isNotNullableString
type DomainObservabilityExtensionGetObservabilityInstanceIdAttributeType = *string

func getDomainObservabilityExtensionGetObservabilityInstanceIdAttributeTypeOk(arg DomainObservabilityExtensionGetObservabilityInstanceIdAttributeType) (ret DomainObservabilityExtensionGetObservabilityInstanceIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDomainObservabilityExtensionGetObservabilityInstanceIdAttributeType(arg *DomainObservabilityExtensionGetObservabilityInstanceIdAttributeType, val DomainObservabilityExtensionGetObservabilityInstanceIdRetType) {
	*arg = &val
}

type DomainObservabilityExtensionGetObservabilityInstanceIdArgType = string
type DomainObservabilityExtensionGetObservabilityInstanceIdRetType = string

/*
	types and functions for state
*/

// isNotNullableString
type DomainObservabilityExtensionGetStateAttributeType = *string

func getDomainObservabilityExtensionGetStateAttributeTypeOk(arg DomainObservabilityExtensionGetStateAttributeType) (ret DomainObservabilityExtensionGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setDomainObservabilityExtensionGetStateAttributeType(arg *DomainObservabilityExtensionGetStateAttributeType, val DomainObservabilityExtensionGetStateRetType) {
	*arg = &val
}

type DomainObservabilityExtensionGetStateArgType = string
type DomainObservabilityExtensionGetStateRetType = string

// DomainObservabilityExtension struct for DomainObservabilityExtension
type DomainObservabilityExtension struct {
	// REQUIRED
	ObservabilityInstanceId DomainObservabilityExtensionGetObservabilityInstanceIdAttributeType `json:"observabilityInstanceId"`
	State                   DomainObservabilityExtensionGetStateAttributeType                   `json:"state,omitempty"`
}

type _DomainObservabilityExtension DomainObservabilityExtension

// NewDomainObservabilityExtension instantiates a new DomainObservabilityExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainObservabilityExtension(observabilityInstanceId DomainObservabilityExtensionGetObservabilityInstanceIdArgType) *DomainObservabilityExtension {
	this := DomainObservabilityExtension{}
	setDomainObservabilityExtensionGetObservabilityInstanceIdAttributeType(&this.ObservabilityInstanceId, observabilityInstanceId)
	return &this
}

// NewDomainObservabilityExtensionWithDefaults instantiates a new DomainObservabilityExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainObservabilityExtensionWithDefaults() *DomainObservabilityExtension {
	this := DomainObservabilityExtension{}
	return &this
}

// GetObservabilityInstanceId returns the ObservabilityInstanceId field value
func (o *DomainObservabilityExtension) GetObservabilityInstanceId() (ret DomainObservabilityExtensionGetObservabilityInstanceIdRetType) {
	ret, _ = o.GetObservabilityInstanceIdOk()
	return ret
}

// GetObservabilityInstanceIdOk returns a tuple with the ObservabilityInstanceId field value
// and a boolean to check if the value has been set.
func (o *DomainObservabilityExtension) GetObservabilityInstanceIdOk() (ret DomainObservabilityExtensionGetObservabilityInstanceIdRetType, ok bool) {
	return getDomainObservabilityExtensionGetObservabilityInstanceIdAttributeTypeOk(o.ObservabilityInstanceId)
}

// SetObservabilityInstanceId sets field value
func (o *DomainObservabilityExtension) SetObservabilityInstanceId(v DomainObservabilityExtensionGetObservabilityInstanceIdRetType) {
	setDomainObservabilityExtensionGetObservabilityInstanceIdAttributeType(&o.ObservabilityInstanceId, v)
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DomainObservabilityExtension) GetState() (res DomainObservabilityExtensionGetStateRetType) {
	res, _ = o.GetStateOk()
	return
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainObservabilityExtension) GetStateOk() (ret DomainObservabilityExtensionGetStateRetType, ok bool) {
	return getDomainObservabilityExtensionGetStateAttributeTypeOk(o.State)
}

// HasState returns a boolean if a field has been set.
func (o *DomainObservabilityExtension) HasState() bool {
	_, ok := o.GetStateOk()
	return ok
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DomainObservabilityExtension) SetState(v DomainObservabilityExtensionGetStateRetType) {
	setDomainObservabilityExtensionGetStateAttributeType(&o.State, v)
}

func (o DomainObservabilityExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getDomainObservabilityExtensionGetObservabilityInstanceIdAttributeTypeOk(o.ObservabilityInstanceId); ok {
		toSerialize["ObservabilityInstanceId"] = val
	}
	if val, ok := getDomainObservabilityExtensionGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	return toSerialize, nil
}

type NullableDomainObservabilityExtension struct {
	value *DomainObservabilityExtension
	isSet bool
}

func (v NullableDomainObservabilityExtension) Get() *DomainObservabilityExtension {
	return v.value
}

func (v *NullableDomainObservabilityExtension) Set(val *DomainObservabilityExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainObservabilityExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainObservabilityExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainObservabilityExtension(val *DomainObservabilityExtension) *NullableDomainObservabilityExtension {
	return &NullableDomainObservabilityExtension{value: val, isSet: true}
}

func (v NullableDomainObservabilityExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainObservabilityExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
