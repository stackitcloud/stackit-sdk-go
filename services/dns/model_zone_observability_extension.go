/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneObservabilityExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneObservabilityExtension{}

// ZoneObservabilityExtension struct for ZoneObservabilityExtension
type ZoneObservabilityExtension struct {
	// REQUIRED
	ObservabilityInstanceId *string `json:"observabilityInstanceId"`
	State                   *string `json:"state,omitempty"`
}

type _ZoneObservabilityExtension ZoneObservabilityExtension

// NewZoneObservabilityExtension instantiates a new ZoneObservabilityExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneObservabilityExtension(observabilityInstanceId *string) *ZoneObservabilityExtension {
	this := ZoneObservabilityExtension{}
	this.ObservabilityInstanceId = observabilityInstanceId
	return &this
}

// NewZoneObservabilityExtensionWithDefaults instantiates a new ZoneObservabilityExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneObservabilityExtensionWithDefaults() *ZoneObservabilityExtension {
	this := ZoneObservabilityExtension{}
	return &this
}

// GetObservabilityInstanceId returns the ObservabilityInstanceId field value
func (o *ZoneObservabilityExtension) GetObservabilityInstanceId() *string {
	if o == nil || IsNil(o.ObservabilityInstanceId) {
		var ret *string
		return ret
	}

	return o.ObservabilityInstanceId
}

// GetObservabilityInstanceIdOk returns a tuple with the ObservabilityInstanceId field value
// and a boolean to check if the value has been set.
func (o *ZoneObservabilityExtension) GetObservabilityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObservabilityInstanceId, true
}

// SetObservabilityInstanceId sets field value
func (o *ZoneObservabilityExtension) SetObservabilityInstanceId(v *string) {
	o.ObservabilityInstanceId = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ZoneObservabilityExtension) GetState() *string {
	if o == nil || IsNil(o.State) {
		var ret *string
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneObservabilityExtension) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ZoneObservabilityExtension) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ZoneObservabilityExtension) SetState(v *string) {
	o.State = v
}

func (o ZoneObservabilityExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["observabilityInstanceId"] = o.ObservabilityInstanceId
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableZoneObservabilityExtension struct {
	value *ZoneObservabilityExtension
	isSet bool
}

func (v NullableZoneObservabilityExtension) Get() *ZoneObservabilityExtension {
	return v.value
}

func (v *NullableZoneObservabilityExtension) Set(val *ZoneObservabilityExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneObservabilityExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneObservabilityExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneObservabilityExtension(val *ZoneObservabilityExtension) *NullableZoneObservabilityExtension {
	return &NullableZoneObservabilityExtension{value: val, isSet: true}
}

func (v NullableZoneObservabilityExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneObservabilityExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
