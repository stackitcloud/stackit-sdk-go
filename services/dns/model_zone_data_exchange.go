/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneDataExchange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneDataExchange{}

// ZoneDataExchange struct for ZoneDataExchange
type ZoneDataExchange struct {
	RrSets *[]RecordDataExchange `json:"rrSets,omitempty"`
}

// NewZoneDataExchange instantiates a new ZoneDataExchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneDataExchange() *ZoneDataExchange {
	this := ZoneDataExchange{}
	return &this
}

// NewZoneDataExchangeWithDefaults instantiates a new ZoneDataExchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneDataExchangeWithDefaults() *ZoneDataExchange {
	this := ZoneDataExchange{}
	return &this
}

// GetRrSets returns the RrSets field value if set, zero value otherwise.
func (o *ZoneDataExchange) GetRrSets() *[]RecordDataExchange {
	if o == nil || IsNil(o.RrSets) {
		var ret *[]RecordDataExchange
		return ret
	}
	return o.RrSets
}

// GetRrSetsOk returns a tuple with the RrSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDataExchange) GetRrSetsOk() (*[]RecordDataExchange, bool) {
	if o == nil || IsNil(o.RrSets) {
		return nil, false
	}
	return o.RrSets, true
}

// HasRrSets returns a boolean if a field has been set.
func (o *ZoneDataExchange) HasRrSets() bool {
	if o != nil && !IsNil(o.RrSets) {
		return true
	}

	return false
}

// SetRrSets gets a reference to the given []RecordDataExchange and assigns it to the RrSets field.
func (o *ZoneDataExchange) SetRrSets(v *[]RecordDataExchange) {
	o.RrSets = v
}

func (o ZoneDataExchange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RrSets) {
		toSerialize["rrSets"] = o.RrSets
	}
	return toSerialize, nil
}

type NullableZoneDataExchange struct {
	value *ZoneDataExchange
	isSet bool
}

func (v NullableZoneDataExchange) Get() *ZoneDataExchange {
	return v.value
}

func (v *NullableZoneDataExchange) Set(val *ZoneDataExchange) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneDataExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneDataExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneDataExchange(val *ZoneDataExchange) *NullableZoneDataExchange {
	return &NullableZoneDataExchange{value: val, isSet: true}
}

func (v NullableZoneDataExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneDataExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
