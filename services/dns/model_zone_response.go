/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ZoneResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneResponse{}

/*
	types and functions for message
*/

// isNotNullableString
type ZoneResponseGetMessageAttributeType = *string

func getZoneResponseGetMessageAttributeTypeOk(arg ZoneResponseGetMessageAttributeType) (ret ZoneResponseGetMessageRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneResponseGetMessageAttributeType(arg *ZoneResponseGetMessageAttributeType, val ZoneResponseGetMessageRetType) {
	*arg = &val
}

type ZoneResponseGetMessageArgType = string
type ZoneResponseGetMessageRetType = string

/*
	types and functions for zone
*/

// isModel
type ZoneResponseGetZoneAttributeType = *Zone
type ZoneResponseGetZoneArgType = Zone
type ZoneResponseGetZoneRetType = Zone

func getZoneResponseGetZoneAttributeTypeOk(arg ZoneResponseGetZoneAttributeType) (ret ZoneResponseGetZoneRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneResponseGetZoneAttributeType(arg *ZoneResponseGetZoneAttributeType, val ZoneResponseGetZoneRetType) {
	*arg = &val
}

// ZoneResponse ResponseZone for user info.
type ZoneResponse struct {
	Message ZoneResponseGetMessageAttributeType `json:"message,omitempty"`
	// REQUIRED
	Zone ZoneResponseGetZoneAttributeType `json:"zone"`
}

type _ZoneResponse ZoneResponse

// NewZoneResponse instantiates a new ZoneResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneResponse(zone ZoneResponseGetZoneArgType) *ZoneResponse {
	this := ZoneResponse{}
	setZoneResponseGetZoneAttributeType(&this.Zone, zone)
	return &this
}

// NewZoneResponseWithDefaults instantiates a new ZoneResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneResponseWithDefaults() *ZoneResponse {
	this := ZoneResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ZoneResponse) GetMessage() (res ZoneResponseGetMessageRetType) {
	res, _ = o.GetMessageOk()
	return
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneResponse) GetMessageOk() (ret ZoneResponseGetMessageRetType, ok bool) {
	return getZoneResponseGetMessageAttributeTypeOk(o.Message)
}

// HasMessage returns a boolean if a field has been set.
func (o *ZoneResponse) HasMessage() bool {
	_, ok := o.GetMessageOk()
	return ok
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ZoneResponse) SetMessage(v ZoneResponseGetMessageRetType) {
	setZoneResponseGetMessageAttributeType(&o.Message, v)
}

// GetZone returns the Zone field value
func (o *ZoneResponse) GetZone() (ret ZoneResponseGetZoneRetType) {
	ret, _ = o.GetZoneOk()
	return ret
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *ZoneResponse) GetZoneOk() (ret ZoneResponseGetZoneRetType, ok bool) {
	return getZoneResponseGetZoneAttributeTypeOk(o.Zone)
}

// SetZone sets field value
func (o *ZoneResponse) SetZone(v ZoneResponseGetZoneRetType) {
	setZoneResponseGetZoneAttributeType(&o.Zone, v)
}

func (o ZoneResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getZoneResponseGetMessageAttributeTypeOk(o.Message); ok {
		toSerialize["Message"] = val
	}
	if val, ok := getZoneResponseGetZoneAttributeTypeOk(o.Zone); ok {
		toSerialize["Zone"] = val
	}
	return toSerialize, nil
}

func (o *ZoneResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneResponse := _ZoneResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZoneResponse)

	if err != nil {
		return err
	}

	*o = ZoneResponse(varZoneResponse)

	return err
}

type NullableZoneResponse struct {
	value *ZoneResponse
	isSet bool
}

func (v NullableZoneResponse) Get() *ZoneResponse {
	return v.value
}

func (v *NullableZoneResponse) Set(val *ZoneResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneResponse(val *ZoneResponse) *NullableZoneResponse {
	return &NullableZoneResponse{value: val, isSet: true}
}

func (v NullableZoneResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
