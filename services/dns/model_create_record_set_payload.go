/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the CreateRecordSetPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRecordSetPayload{}

// CreateRecordSetPayload RRSetPost for rr set info.
type CreateRecordSetPayload struct {
	// user comment
	Comment *string `json:"comment,omitempty"`
	// name of the record which should be a valid domain according to rfc1035 Section 2.3.4
	// REQUIRED
	Name *string `json:"name"`
	// records
	// REQUIRED
	Records *[]RecordPayload `json:"records"`
	// time to live. If nothing provided we will set the zone ttl.
	Ttl *int64 `json:"ttl,omitempty"`
	// record set type
	// REQUIRED
	Type *string `json:"type"`
}

type _CreateRecordSetPayload CreateRecordSetPayload

// NewCreateRecordSetPayload instantiates a new CreateRecordSetPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRecordSetPayload(name *string, records *[]RecordPayload, type_ *string) *CreateRecordSetPayload {
	this := CreateRecordSetPayload{}
	this.Name = name
	this.Records = records
	this.Type = type_
	return &this
}

// NewCreateRecordSetPayloadWithDefaults instantiates a new CreateRecordSetPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRecordSetPayloadWithDefaults() *CreateRecordSetPayload {
	this := CreateRecordSetPayload{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CreateRecordSetPayload) GetComment() *string {
	if o == nil || IsNil(o.Comment) {
		var ret *string
		return ret
	}
	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CreateRecordSetPayload) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CreateRecordSetPayload) SetComment(v *string) {
	o.Comment = v
}

// GetName returns the Name field value
func (o *CreateRecordSetPayload) GetName() *string {
	if o == nil || IsNil(o.Name) {
		var ret *string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *CreateRecordSetPayload) SetName(v *string) {
	o.Name = v
}

// GetRecords returns the Records field value
func (o *CreateRecordSetPayload) GetRecords() *[]RecordPayload {
	if o == nil || IsNil(o.Records) {
		var ret *[]RecordPayload
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetRecordsOk() (*[]RecordPayload, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *CreateRecordSetPayload) SetRecords(v *[]RecordPayload) {
	o.Records = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *CreateRecordSetPayload) GetTtl() *int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret *int64
		return ret
	}
	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *CreateRecordSetPayload) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *CreateRecordSetPayload) SetTtl(v *int64) {
	o.Ttl = v
}

// GetType returns the Type field value
func (o *CreateRecordSetPayload) GetType() *string {
	if o == nil || IsNil(o.Type) {
		var ret *string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *CreateRecordSetPayload) SetType(v *string) {
	o.Type = v
}

func (o CreateRecordSetPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["name"] = o.Name
	toSerialize["records"] = o.Records
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCreateRecordSetPayload struct {
	value *CreateRecordSetPayload
	isSet bool
}

func (v NullableCreateRecordSetPayload) Get() *CreateRecordSetPayload {
	return v.value
}

func (v *NullableCreateRecordSetPayload) Set(val *CreateRecordSetPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordSetPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordSetPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordSetPayload(val *CreateRecordSetPayload) *NullableCreateRecordSetPayload {
	return &NullableCreateRecordSetPayload{value: val, isSet: true}
}

func (v NullableCreateRecordSetPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordSetPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
