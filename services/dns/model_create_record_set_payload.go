/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateRecordSetPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRecordSetPayload{}

/*
	types and functions for comment
*/

// isNotNullableString
type CreateRecordSetPayloadGetCommentAttributeType = *string

func getCreateRecordSetPayloadGetCommentAttributeTypeOk(arg CreateRecordSetPayloadGetCommentAttributeType) (ret CreateRecordSetPayloadGetCommentRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateRecordSetPayloadGetCommentAttributeType(arg *CreateRecordSetPayloadGetCommentAttributeType, val CreateRecordSetPayloadGetCommentRetType) {
	*arg = &val
}

type CreateRecordSetPayloadGetCommentArgType = string
type CreateRecordSetPayloadGetCommentRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type CreateRecordSetPayloadGetNameAttributeType = *string

func getCreateRecordSetPayloadGetNameAttributeTypeOk(arg CreateRecordSetPayloadGetNameAttributeType) (ret CreateRecordSetPayloadGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateRecordSetPayloadGetNameAttributeType(arg *CreateRecordSetPayloadGetNameAttributeType, val CreateRecordSetPayloadGetNameRetType) {
	*arg = &val
}

type CreateRecordSetPayloadGetNameArgType = string
type CreateRecordSetPayloadGetNameRetType = string

/*
	types and functions for records
*/

// isArray
type CreateRecordSetPayloadGetRecordsAttributeType = *[]RecordPayload
type CreateRecordSetPayloadGetRecordsArgType = []RecordPayload
type CreateRecordSetPayloadGetRecordsRetType = []RecordPayload

func getCreateRecordSetPayloadGetRecordsAttributeTypeOk(arg CreateRecordSetPayloadGetRecordsAttributeType) (ret CreateRecordSetPayloadGetRecordsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateRecordSetPayloadGetRecordsAttributeType(arg *CreateRecordSetPayloadGetRecordsAttributeType, val CreateRecordSetPayloadGetRecordsRetType) {
	*arg = &val
}

/*
	types and functions for ttl
*/

// isInteger
type CreateRecordSetPayloadGetTtlAttributeType = *int64
type CreateRecordSetPayloadGetTtlArgType = int64
type CreateRecordSetPayloadGetTtlRetType = int64

func getCreateRecordSetPayloadGetTtlAttributeTypeOk(arg CreateRecordSetPayloadGetTtlAttributeType) (ret CreateRecordSetPayloadGetTtlRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateRecordSetPayloadGetTtlAttributeType(arg *CreateRecordSetPayloadGetTtlAttributeType, val CreateRecordSetPayloadGetTtlRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isEnum

// CreateRecordSetPayloadTypes record set type
type CreateRecordSetPayloadTypes string

// List of Type
const (
	CREATERECORDSETPAYLOADTYPE_A      CreateRecordSetPayloadTypes = "A"
	CREATERECORDSETPAYLOADTYPE_AAAA   CreateRecordSetPayloadTypes = "AAAA"
	CREATERECORDSETPAYLOADTYPE_SOA    CreateRecordSetPayloadTypes = "SOA"
	CREATERECORDSETPAYLOADTYPE_CNAME  CreateRecordSetPayloadTypes = "CNAME"
	CREATERECORDSETPAYLOADTYPE_NS     CreateRecordSetPayloadTypes = "NS"
	CREATERECORDSETPAYLOADTYPE_MX     CreateRecordSetPayloadTypes = "MX"
	CREATERECORDSETPAYLOADTYPE_TXT    CreateRecordSetPayloadTypes = "TXT"
	CREATERECORDSETPAYLOADTYPE_SRV    CreateRecordSetPayloadTypes = "SRV"
	CREATERECORDSETPAYLOADTYPE_PTR    CreateRecordSetPayloadTypes = "PTR"
	CREATERECORDSETPAYLOADTYPE_ALIAS  CreateRecordSetPayloadTypes = "ALIAS"
	CREATERECORDSETPAYLOADTYPE_DNAME  CreateRecordSetPayloadTypes = "DNAME"
	CREATERECORDSETPAYLOADTYPE_CAA    CreateRecordSetPayloadTypes = "CAA"
	CREATERECORDSETPAYLOADTYPE_DNSKEY CreateRecordSetPayloadTypes = "DNSKEY"
	CREATERECORDSETPAYLOADTYPE_DS     CreateRecordSetPayloadTypes = "DS"
	CREATERECORDSETPAYLOADTYPE_LOC    CreateRecordSetPayloadTypes = "LOC"
	CREATERECORDSETPAYLOADTYPE_NAPTR  CreateRecordSetPayloadTypes = "NAPTR"
	CREATERECORDSETPAYLOADTYPE_SSHFP  CreateRecordSetPayloadTypes = "SSHFP"
	CREATERECORDSETPAYLOADTYPE_TLSA   CreateRecordSetPayloadTypes = "TLSA"
	CREATERECORDSETPAYLOADTYPE_URI    CreateRecordSetPayloadTypes = "URI"
	CREATERECORDSETPAYLOADTYPE_CERT   CreateRecordSetPayloadTypes = "CERT"
	CREATERECORDSETPAYLOADTYPE_SVCB   CreateRecordSetPayloadTypes = "SVCB"
)

// All allowed values of CreateRecordSetPayload enum
var AllowedCreateRecordSetPayloadTypesEnumValues = []CreateRecordSetPayloadTypes{
	"A",
	"AAAA",
	"SOA",
	"CNAME",
	"NS",
	"MX",
	"TXT",
	"SRV",
	"PTR",
	"ALIAS",
	"DNAME",
	"CAA",
	"DNSKEY",
	"DS",
	"LOC",
	"NAPTR",
	"SSHFP",
	"TLSA",
	"URI",
	"CERT",
	"SVCB",
}

func (v *CreateRecordSetPayloadTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := CreateRecordSetPayloadTypes(value)
	for _, existing := range AllowedCreateRecordSetPayloadTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreateRecordSetPayload", value)
}

// NewCreateRecordSetPayloadTypesFromValue returns a pointer to a valid CreateRecordSetPayloadTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreateRecordSetPayloadTypesFromValue(v string) (*CreateRecordSetPayloadTypes, error) {
	ev := CreateRecordSetPayloadTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreateRecordSetPayloadTypes: valid values are %v", v, AllowedCreateRecordSetPayloadTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreateRecordSetPayloadTypes) IsValid() bool {
	for _, existing := range AllowedCreateRecordSetPayloadTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v CreateRecordSetPayloadTypes) Ptr() *CreateRecordSetPayloadTypes {
	return &v
}

type NullableCreateRecordSetPayloadTypes struct {
	value *CreateRecordSetPayloadTypes
	isSet bool
}

func (v NullableCreateRecordSetPayloadTypes) Get() *CreateRecordSetPayloadTypes {
	return v.value
}

func (v *NullableCreateRecordSetPayloadTypes) Set(val *CreateRecordSetPayloadTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordSetPayloadTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordSetPayloadTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordSetPayloadTypes(val *CreateRecordSetPayloadTypes) *NullableCreateRecordSetPayloadTypes {
	return &NullableCreateRecordSetPayloadTypes{value: val, isSet: true}
}

func (v NullableCreateRecordSetPayloadTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordSetPayloadTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type CreateRecordSetPayloadGetTypeAttributeType = *CreateRecordSetPayloadTypes
type CreateRecordSetPayloadGetTypeArgType = CreateRecordSetPayloadTypes
type CreateRecordSetPayloadGetTypeRetType = CreateRecordSetPayloadTypes

func getCreateRecordSetPayloadGetTypeAttributeTypeOk(arg CreateRecordSetPayloadGetTypeAttributeType) (ret CreateRecordSetPayloadGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateRecordSetPayloadGetTypeAttributeType(arg *CreateRecordSetPayloadGetTypeAttributeType, val CreateRecordSetPayloadGetTypeRetType) {
	*arg = &val
}

// CreateRecordSetPayload RRSetPost for rr set info.
type CreateRecordSetPayload struct {
	// user comment
	Comment CreateRecordSetPayloadGetCommentAttributeType `json:"comment,omitempty"`
	// name of the record which should be a valid domain according to rfc1035 Section 2.3.4
	// REQUIRED
	Name CreateRecordSetPayloadGetNameAttributeType `json:"name"`
	// records
	// REQUIRED
	Records CreateRecordSetPayloadGetRecordsAttributeType `json:"records"`
	// time to live. If nothing provided we will set the zone ttl.
	// Can be cast to int32 without loss of precision.
	Ttl CreateRecordSetPayloadGetTtlAttributeType `json:"ttl,omitempty"`
	// record set type
	// REQUIRED
	Type CreateRecordSetPayloadGetTypeAttributeType `json:"type"`
}

type _CreateRecordSetPayload CreateRecordSetPayload

// NewCreateRecordSetPayload instantiates a new CreateRecordSetPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRecordSetPayload(name CreateRecordSetPayloadGetNameArgType, records CreateRecordSetPayloadGetRecordsArgType, types CreateRecordSetPayloadGetTypeArgType) *CreateRecordSetPayload {
	this := CreateRecordSetPayload{}
	setCreateRecordSetPayloadGetNameAttributeType(&this.Name, name)
	setCreateRecordSetPayloadGetRecordsAttributeType(&this.Records, records)
	setCreateRecordSetPayloadGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewCreateRecordSetPayloadWithDefaults instantiates a new CreateRecordSetPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRecordSetPayloadWithDefaults() *CreateRecordSetPayload {
	this := CreateRecordSetPayload{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CreateRecordSetPayload) GetComment() (res CreateRecordSetPayloadGetCommentRetType) {
	res, _ = o.GetCommentOk()
	return
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetCommentOk() (ret CreateRecordSetPayloadGetCommentRetType, ok bool) {
	return getCreateRecordSetPayloadGetCommentAttributeTypeOk(o.Comment)
}

// HasComment returns a boolean if a field has been set.
func (o *CreateRecordSetPayload) HasComment() bool {
	_, ok := o.GetCommentOk()
	return ok
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CreateRecordSetPayload) SetComment(v CreateRecordSetPayloadGetCommentRetType) {
	setCreateRecordSetPayloadGetCommentAttributeType(&o.Comment, v)
}

// GetName returns the Name field value
func (o *CreateRecordSetPayload) GetName() (ret CreateRecordSetPayloadGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetNameOk() (ret CreateRecordSetPayloadGetNameRetType, ok bool) {
	return getCreateRecordSetPayloadGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *CreateRecordSetPayload) SetName(v CreateRecordSetPayloadGetNameRetType) {
	setCreateRecordSetPayloadGetNameAttributeType(&o.Name, v)
}

// GetRecords returns the Records field value
func (o *CreateRecordSetPayload) GetRecords() (ret CreateRecordSetPayloadGetRecordsRetType) {
	ret, _ = o.GetRecordsOk()
	return ret
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetRecordsOk() (ret CreateRecordSetPayloadGetRecordsRetType, ok bool) {
	return getCreateRecordSetPayloadGetRecordsAttributeTypeOk(o.Records)
}

// SetRecords sets field value
func (o *CreateRecordSetPayload) SetRecords(v CreateRecordSetPayloadGetRecordsRetType) {
	setCreateRecordSetPayloadGetRecordsAttributeType(&o.Records, v)
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *CreateRecordSetPayload) GetTtl() (res CreateRecordSetPayloadGetTtlRetType) {
	res, _ = o.GetTtlOk()
	return
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetTtlOk() (ret CreateRecordSetPayloadGetTtlRetType, ok bool) {
	return getCreateRecordSetPayloadGetTtlAttributeTypeOk(o.Ttl)
}

// HasTtl returns a boolean if a field has been set.
func (o *CreateRecordSetPayload) HasTtl() bool {
	_, ok := o.GetTtlOk()
	return ok
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *CreateRecordSetPayload) SetTtl(v CreateRecordSetPayloadGetTtlRetType) {
	setCreateRecordSetPayloadGetTtlAttributeType(&o.Ttl, v)
}

// GetType returns the Type field value
func (o *CreateRecordSetPayload) GetType() (ret CreateRecordSetPayloadGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateRecordSetPayload) GetTypeOk() (ret CreateRecordSetPayloadGetTypeRetType, ok bool) {
	return getCreateRecordSetPayloadGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *CreateRecordSetPayload) SetType(v CreateRecordSetPayloadGetTypeRetType) {
	setCreateRecordSetPayloadGetTypeAttributeType(&o.Type, v)
}

func (o CreateRecordSetPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateRecordSetPayloadGetCommentAttributeTypeOk(o.Comment); ok {
		toSerialize["Comment"] = val
	}
	if val, ok := getCreateRecordSetPayloadGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getCreateRecordSetPayloadGetRecordsAttributeTypeOk(o.Records); ok {
		toSerialize["Records"] = val
	}
	if val, ok := getCreateRecordSetPayloadGetTtlAttributeTypeOk(o.Ttl); ok {
		toSerialize["Ttl"] = val
	}
	if val, ok := getCreateRecordSetPayloadGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableCreateRecordSetPayload struct {
	value *CreateRecordSetPayload
	isSet bool
}

func (v NullableCreateRecordSetPayload) Get() *CreateRecordSetPayload {
	return v.value
}

func (v *NullableCreateRecordSetPayload) Set(val *CreateRecordSetPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordSetPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordSetPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordSetPayload(val *CreateRecordSetPayload) *NullableCreateRecordSetPayload {
	return &NullableCreateRecordSetPayload{value: val, isSet: true}
}

func (v NullableCreateRecordSetPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordSetPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
