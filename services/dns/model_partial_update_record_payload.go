/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the PartialUpdateRecordPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialUpdateRecordPayload{}

/*
	types and functions for action
*/

// isEnum

// PartialUpdateRecordPayloadAction the model 'PartialUpdateRecordPayload'
type PartialUpdateRecordPayloadAction string

// List of Action
const (
	PARTIALUPDATERECORDPAYLOADACTION_ADD    PartialUpdateRecordPayloadAction = "add"
	PARTIALUPDATERECORDPAYLOADACTION_DELETE PartialUpdateRecordPayloadAction = "delete"
)

// All allowed values of PartialUpdateRecordPayload enum
var AllowedPartialUpdateRecordPayloadActionEnumValues = []PartialUpdateRecordPayloadAction{
	"add",
	"delete",
}

func (v *PartialUpdateRecordPayloadAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := PartialUpdateRecordPayloadAction(value)
	for _, existing := range AllowedPartialUpdateRecordPayloadActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PartialUpdateRecordPayload", value)
}

// NewPartialUpdateRecordPayloadActionFromValue returns a pointer to a valid PartialUpdateRecordPayloadAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartialUpdateRecordPayloadActionFromValue(v string) (*PartialUpdateRecordPayloadAction, error) {
	ev := PartialUpdateRecordPayloadAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PartialUpdateRecordPayloadAction: valid values are %v", v, AllowedPartialUpdateRecordPayloadActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PartialUpdateRecordPayloadAction) IsValid() bool {
	for _, existing := range AllowedPartialUpdateRecordPayloadActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionAction value
func (v PartialUpdateRecordPayloadAction) Ptr() *PartialUpdateRecordPayloadAction {
	return &v
}

type NullablePartialUpdateRecordPayloadAction struct {
	value *PartialUpdateRecordPayloadAction
	isSet bool
}

func (v NullablePartialUpdateRecordPayloadAction) Get() *PartialUpdateRecordPayloadAction {
	return v.value
}

func (v *NullablePartialUpdateRecordPayloadAction) Set(val *PartialUpdateRecordPayloadAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialUpdateRecordPayloadAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialUpdateRecordPayloadAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialUpdateRecordPayloadAction(val *PartialUpdateRecordPayloadAction) *NullablePartialUpdateRecordPayloadAction {
	return &NullablePartialUpdateRecordPayloadAction{value: val, isSet: true}
}

func (v NullablePartialUpdateRecordPayloadAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialUpdateRecordPayloadAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type PartialUpdateRecordPayloadGetActionAttributeType = *PartialUpdateRecordPayloadAction
type PartialUpdateRecordPayloadGetActionArgType = PartialUpdateRecordPayloadAction
type PartialUpdateRecordPayloadGetActionRetType = PartialUpdateRecordPayloadAction

func getPartialUpdateRecordPayloadGetActionAttributeTypeOk(arg PartialUpdateRecordPayloadGetActionAttributeType) (ret PartialUpdateRecordPayloadGetActionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateRecordPayloadGetActionAttributeType(arg *PartialUpdateRecordPayloadGetActionAttributeType, val PartialUpdateRecordPayloadGetActionRetType) {
	*arg = &val
}

/*
	types and functions for records
*/

// isArray
type PartialUpdateRecordPayloadGetRecordsAttributeType = *[]RecordPayload
type PartialUpdateRecordPayloadGetRecordsArgType = []RecordPayload
type PartialUpdateRecordPayloadGetRecordsRetType = []RecordPayload

func getPartialUpdateRecordPayloadGetRecordsAttributeTypeOk(arg PartialUpdateRecordPayloadGetRecordsAttributeType) (ret PartialUpdateRecordPayloadGetRecordsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateRecordPayloadGetRecordsAttributeType(arg *PartialUpdateRecordPayloadGetRecordsAttributeType, val PartialUpdateRecordPayloadGetRecordsRetType) {
	*arg = &val
}

// PartialUpdateRecordPayload RecordPatch for record patch in record set.
type PartialUpdateRecordPayload struct {
	// REQUIRED
	Action PartialUpdateRecordPayloadGetActionAttributeType `json:"action"`
	// records
	// REQUIRED
	Records PartialUpdateRecordPayloadGetRecordsAttributeType `json:"records"`
}

type _PartialUpdateRecordPayload PartialUpdateRecordPayload

// NewPartialUpdateRecordPayload instantiates a new PartialUpdateRecordPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialUpdateRecordPayload(action PartialUpdateRecordPayloadGetActionArgType, records PartialUpdateRecordPayloadGetRecordsArgType) *PartialUpdateRecordPayload {
	this := PartialUpdateRecordPayload{}
	setPartialUpdateRecordPayloadGetActionAttributeType(&this.Action, action)
	setPartialUpdateRecordPayloadGetRecordsAttributeType(&this.Records, records)
	return &this
}

// NewPartialUpdateRecordPayloadWithDefaults instantiates a new PartialUpdateRecordPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialUpdateRecordPayloadWithDefaults() *PartialUpdateRecordPayload {
	this := PartialUpdateRecordPayload{}
	return &this
}

// GetAction returns the Action field value
func (o *PartialUpdateRecordPayload) GetAction() (ret PartialUpdateRecordPayloadGetActionRetType) {
	ret, _ = o.GetActionOk()
	return ret
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PartialUpdateRecordPayload) GetActionOk() (ret PartialUpdateRecordPayloadGetActionRetType, ok bool) {
	return getPartialUpdateRecordPayloadGetActionAttributeTypeOk(o.Action)
}

// SetAction sets field value
func (o *PartialUpdateRecordPayload) SetAction(v PartialUpdateRecordPayloadGetActionRetType) {
	setPartialUpdateRecordPayloadGetActionAttributeType(&o.Action, v)
}

// GetRecords returns the Records field value
func (o *PartialUpdateRecordPayload) GetRecords() (ret PartialUpdateRecordPayloadGetRecordsRetType) {
	ret, _ = o.GetRecordsOk()
	return ret
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *PartialUpdateRecordPayload) GetRecordsOk() (ret PartialUpdateRecordPayloadGetRecordsRetType, ok bool) {
	return getPartialUpdateRecordPayloadGetRecordsAttributeTypeOk(o.Records)
}

// SetRecords sets field value
func (o *PartialUpdateRecordPayload) SetRecords(v PartialUpdateRecordPayloadGetRecordsRetType) {
	setPartialUpdateRecordPayloadGetRecordsAttributeType(&o.Records, v)
}

func (o PartialUpdateRecordPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getPartialUpdateRecordPayloadGetActionAttributeTypeOk(o.Action); ok {
		toSerialize["Action"] = val
	}
	if val, ok := getPartialUpdateRecordPayloadGetRecordsAttributeTypeOk(o.Records); ok {
		toSerialize["Records"] = val
	}
	return toSerialize, nil
}

type NullablePartialUpdateRecordPayload struct {
	value *PartialUpdateRecordPayload
	isSet bool
}

func (v NullablePartialUpdateRecordPayload) Get() *PartialUpdateRecordPayload {
	return v.value
}

func (v *NullablePartialUpdateRecordPayload) Set(val *PartialUpdateRecordPayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialUpdateRecordPayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialUpdateRecordPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialUpdateRecordPayload(val *PartialUpdateRecordPayload) *NullablePartialUpdateRecordPayload {
	return &NullablePartialUpdateRecordPayload{value: val, isSet: true}
}

func (v NullablePartialUpdateRecordPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialUpdateRecordPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
