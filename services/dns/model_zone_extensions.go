/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneExtensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneExtensions{}

/*
	types and functions for observabilityExtension
*/

// isModel
type ZoneExtensionsGetObservabilityExtensionAttributeType = *ZoneObservabilityExtension
type ZoneExtensionsGetObservabilityExtensionArgType = ZoneObservabilityExtension
type ZoneExtensionsGetObservabilityExtensionRetType = ZoneObservabilityExtension

func getZoneExtensionsGetObservabilityExtensionAttributeTypeOk(arg ZoneExtensionsGetObservabilityExtensionAttributeType) (ret ZoneExtensionsGetObservabilityExtensionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneExtensionsGetObservabilityExtensionAttributeType(arg *ZoneExtensionsGetObservabilityExtensionAttributeType, val ZoneExtensionsGetObservabilityExtensionRetType) {
	*arg = &val
}

// ZoneExtensions struct for ZoneExtensions
type ZoneExtensions struct {
	ObservabilityExtension ZoneExtensionsGetObservabilityExtensionAttributeType `json:"observabilityExtension,omitempty"`
}

// NewZoneExtensions instantiates a new ZoneExtensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneExtensions() *ZoneExtensions {
	this := ZoneExtensions{}
	return &this
}

// NewZoneExtensionsWithDefaults instantiates a new ZoneExtensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneExtensionsWithDefaults() *ZoneExtensions {
	this := ZoneExtensions{}
	return &this
}

// GetObservabilityExtension returns the ObservabilityExtension field value if set, zero value otherwise.
func (o *ZoneExtensions) GetObservabilityExtension() (res ZoneExtensionsGetObservabilityExtensionRetType) {
	res, _ = o.GetObservabilityExtensionOk()
	return
}

// GetObservabilityExtensionOk returns a tuple with the ObservabilityExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneExtensions) GetObservabilityExtensionOk() (ret ZoneExtensionsGetObservabilityExtensionRetType, ok bool) {
	return getZoneExtensionsGetObservabilityExtensionAttributeTypeOk(o.ObservabilityExtension)
}

// HasObservabilityExtension returns a boolean if a field has been set.
func (o *ZoneExtensions) HasObservabilityExtension() bool {
	_, ok := o.GetObservabilityExtensionOk()
	return ok
}

// SetObservabilityExtension gets a reference to the given ZoneObservabilityExtension and assigns it to the ObservabilityExtension field.
func (o *ZoneExtensions) SetObservabilityExtension(v ZoneExtensionsGetObservabilityExtensionRetType) {
	setZoneExtensionsGetObservabilityExtensionAttributeType(&o.ObservabilityExtension, v)
}

func (o ZoneExtensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getZoneExtensionsGetObservabilityExtensionAttributeTypeOk(o.ObservabilityExtension); ok {
		toSerialize["ObservabilityExtension"] = val
	}
	return toSerialize, nil
}

type NullableZoneExtensions struct {
	value *ZoneExtensions
	isSet bool
}

func (v NullableZoneExtensions) Get() *ZoneExtensions {
	return v.value
}

func (v *NullableZoneExtensions) Set(val *ZoneExtensions) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneExtensions) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneExtensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneExtensions(val *ZoneExtensions) *NullableZoneExtensions {
	return &NullableZoneExtensions{value: val, isSet: true}
}

func (v NullableZoneExtensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneExtensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
