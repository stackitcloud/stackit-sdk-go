/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the MoveZonePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveZonePayload{}

// MoveZonePayload body to move zone from one project to another.
type MoveZonePayload struct {
	// Code to move the zone. It must be valid, not expired and belong
	// REQUIRED
	Code *string `json:"code"`
	// ZoneDnsName is the dns name of the zone to move
	// REQUIRED
	ZoneDnsName *string `json:"zoneDnsName"`
}

type _MoveZonePayload MoveZonePayload

// NewMoveZonePayload instantiates a new MoveZonePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveZonePayload(code *string, zoneDnsName *string) *MoveZonePayload {
	this := MoveZonePayload{}
	this.Code = code
	this.ZoneDnsName = zoneDnsName
	return &this
}

// NewMoveZonePayloadWithDefaults instantiates a new MoveZonePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveZonePayloadWithDefaults() *MoveZonePayload {
	this := MoveZonePayload{}
	return &this
}

// GetCode returns the Code field value
func (o *MoveZonePayload) GetCode() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *MoveZonePayload) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code, true
}

// SetCode sets field value
func (o *MoveZonePayload) SetCode(v *string) {
	o.Code = v
}

// GetZoneDnsName returns the ZoneDnsName field value
func (o *MoveZonePayload) GetZoneDnsName() *string {
	if o == nil {
		var ret *string
		return ret
	}

	return o.ZoneDnsName
}

// GetZoneDnsNameOk returns a tuple with the ZoneDnsName field value
// and a boolean to check if the value has been set.
func (o *MoveZonePayload) GetZoneDnsNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoneDnsName, true
}

// SetZoneDnsName sets field value
func (o *MoveZonePayload) SetZoneDnsName(v *string) {
	o.ZoneDnsName = v
}

func (o MoveZonePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["zoneDnsName"] = o.ZoneDnsName
	return toSerialize, nil
}

type NullableMoveZonePayload struct {
	value *MoveZonePayload
	isSet bool
}

func (v NullableMoveZonePayload) Get() *MoveZonePayload {
	return v.value
}

func (v *NullableMoveZonePayload) Set(val *MoveZonePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveZonePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveZonePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveZonePayload(val *MoveZonePayload) *NullableMoveZonePayload {
	return &NullableMoveZonePayload{value: val, isSet: true}
}

func (v NullableMoveZonePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveZonePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
