/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"testing"
)

// isEnum

func TestCreateRecordSetPayloadTypes_UnmarshalJSON(t *testing.T) {
	type args struct {
		src []byte
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: `success - possible enum value no. 1`,
			args: args{
				src: []byte(`"A"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 2`,
			args: args{
				src: []byte(`"AAAA"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 3`,
			args: args{
				src: []byte(`"SOA"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 4`,
			args: args{
				src: []byte(`"CNAME"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 5`,
			args: args{
				src: []byte(`"NS"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 6`,
			args: args{
				src: []byte(`"MX"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 7`,
			args: args{
				src: []byte(`"TXT"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 8`,
			args: args{
				src: []byte(`"SRV"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 9`,
			args: args{
				src: []byte(`"PTR"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 10`,
			args: args{
				src: []byte(`"ALIAS"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 11`,
			args: args{
				src: []byte(`"DNAME"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 12`,
			args: args{
				src: []byte(`"CAA"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 13`,
			args: args{
				src: []byte(`"DNSKEY"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 14`,
			args: args{
				src: []byte(`"DS"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 15`,
			args: args{
				src: []byte(`"LOC"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 16`,
			args: args{
				src: []byte(`"NAPTR"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 17`,
			args: args{
				src: []byte(`"SSHFP"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 18`,
			args: args{
				src: []byte(`"TLSA"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 19`,
			args: args{
				src: []byte(`"URI"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 20`,
			args: args{
				src: []byte(`"CERT"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 21`,
			args: args{
				src: []byte(`"SVCB"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 22`,
			args: args{
				src: []byte(`"TYPE"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 23`,
			args: args{
				src: []byte(`"CSYNC"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 24`,
			args: args{
				src: []byte(`"HINFO"`),
			},
			wantErr: false,
		},
		{
			name: `success - possible enum value no. 25`,
			args: args{
				src: []byte(`"HTTPS"`),
			},
			wantErr: false,
		},
		{
			name: "fail",
			args: args{
				src: []byte("\"FOOBAR\""),
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			v := CreateRecordSetPayloadTypes("")
			if err := v.UnmarshalJSON(tt.args.src); (err != nil) != tt.wantErr {
				t.Errorf("UnmarshalJSON() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
