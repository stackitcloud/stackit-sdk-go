/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the Zone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Zone{}

/*
	types and functions for acl
*/

// isNotNullableString
type ZoneGetAclAttributeType = *string

func getZoneGetAclAttributeTypeOk(arg ZoneGetAclAttributeType) (ret ZoneGetAclRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetAclAttributeType(arg *ZoneGetAclAttributeType, val ZoneGetAclRetType) {
	*arg = &val
}

type ZoneGetAclArgType = string
type ZoneGetAclRetType = string

/*
	types and functions for active
*/

// isBoolean
type ZonegetActiveAttributeType = *bool
type ZonegetActiveArgType = bool
type ZonegetActiveRetType = bool

func getZonegetActiveAttributeTypeOk(arg ZonegetActiveAttributeType) (ret ZonegetActiveRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZonegetActiveAttributeType(arg *ZonegetActiveAttributeType, val ZonegetActiveRetType) {
	*arg = &val
}

/*
	types and functions for contactEmail
*/

// isNotNullableString
type ZoneGetContactEmailAttributeType = *string

func getZoneGetContactEmailAttributeTypeOk(arg ZoneGetContactEmailAttributeType) (ret ZoneGetContactEmailRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetContactEmailAttributeType(arg *ZoneGetContactEmailAttributeType, val ZoneGetContactEmailRetType) {
	*arg = &val
}

type ZoneGetContactEmailArgType = string
type ZoneGetContactEmailRetType = string

/*
	types and functions for creationFinished
*/

// isNotNullableString
type ZoneGetCreationFinishedAttributeType = *string

func getZoneGetCreationFinishedAttributeTypeOk(arg ZoneGetCreationFinishedAttributeType) (ret ZoneGetCreationFinishedRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetCreationFinishedAttributeType(arg *ZoneGetCreationFinishedAttributeType, val ZoneGetCreationFinishedRetType) {
	*arg = &val
}

type ZoneGetCreationFinishedArgType = string
type ZoneGetCreationFinishedRetType = string

/*
	types and functions for creationStarted
*/

// isNotNullableString
type ZoneGetCreationStartedAttributeType = *string

func getZoneGetCreationStartedAttributeTypeOk(arg ZoneGetCreationStartedAttributeType) (ret ZoneGetCreationStartedRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetCreationStartedAttributeType(arg *ZoneGetCreationStartedAttributeType, val ZoneGetCreationStartedRetType) {
	*arg = &val
}

type ZoneGetCreationStartedArgType = string
type ZoneGetCreationStartedRetType = string

/*
	types and functions for defaultTTL
*/

// isInteger
type ZoneGetDefaultTTLAttributeType = *int64
type ZoneGetDefaultTTLArgType = int64
type ZoneGetDefaultTTLRetType = int64

func getZoneGetDefaultTTLAttributeTypeOk(arg ZoneGetDefaultTTLAttributeType) (ret ZoneGetDefaultTTLRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetDefaultTTLAttributeType(arg *ZoneGetDefaultTTLAttributeType, val ZoneGetDefaultTTLRetType) {
	*arg = &val
}

/*
	types and functions for description
*/

// isNotNullableString
type ZoneGetDescriptionAttributeType = *string

func getZoneGetDescriptionAttributeTypeOk(arg ZoneGetDescriptionAttributeType) (ret ZoneGetDescriptionRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetDescriptionAttributeType(arg *ZoneGetDescriptionAttributeType, val ZoneGetDescriptionRetType) {
	*arg = &val
}

type ZoneGetDescriptionArgType = string
type ZoneGetDescriptionRetType = string

/*
	types and functions for dnsName
*/

// isNotNullableString
type ZoneGetDnsNameAttributeType = *string

func getZoneGetDnsNameAttributeTypeOk(arg ZoneGetDnsNameAttributeType) (ret ZoneGetDnsNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetDnsNameAttributeType(arg *ZoneGetDnsNameAttributeType, val ZoneGetDnsNameRetType) {
	*arg = &val
}

type ZoneGetDnsNameArgType = string
type ZoneGetDnsNameRetType = string

/*
	types and functions for error
*/

// isNotNullableString
type ZoneGetErrorAttributeType = *string

func getZoneGetErrorAttributeTypeOk(arg ZoneGetErrorAttributeType) (ret ZoneGetErrorRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetErrorAttributeType(arg *ZoneGetErrorAttributeType, val ZoneGetErrorRetType) {
	*arg = &val
}

type ZoneGetErrorArgType = string
type ZoneGetErrorRetType = string

/*
	types and functions for expireTime
*/

// isInteger
type ZoneGetExpireTimeAttributeType = *int64
type ZoneGetExpireTimeArgType = int64
type ZoneGetExpireTimeRetType = int64

func getZoneGetExpireTimeAttributeTypeOk(arg ZoneGetExpireTimeAttributeType) (ret ZoneGetExpireTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetExpireTimeAttributeType(arg *ZoneGetExpireTimeAttributeType, val ZoneGetExpireTimeRetType) {
	*arg = &val
}

/*
	types and functions for extensions
*/

// isModel
type ZoneGetExtensionsAttributeType = *DomainExtensions
type ZoneGetExtensionsArgType = DomainExtensions
type ZoneGetExtensionsRetType = DomainExtensions

func getZoneGetExtensionsAttributeTypeOk(arg ZoneGetExtensionsAttributeType) (ret ZoneGetExtensionsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetExtensionsAttributeType(arg *ZoneGetExtensionsAttributeType, val ZoneGetExtensionsRetType) {
	*arg = &val
}

/*
	types and functions for id
*/

// isNotNullableString
type ZoneGetIdAttributeType = *string

func getZoneGetIdAttributeTypeOk(arg ZoneGetIdAttributeType) (ret ZoneGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetIdAttributeType(arg *ZoneGetIdAttributeType, val ZoneGetIdRetType) {
	*arg = &val
}

type ZoneGetIdArgType = string
type ZoneGetIdRetType = string

/*
	types and functions for isReverseZone
*/

// isBoolean
type ZonegetIsReverseZoneAttributeType = *bool
type ZonegetIsReverseZoneArgType = bool
type ZonegetIsReverseZoneRetType = bool

func getZonegetIsReverseZoneAttributeTypeOk(arg ZonegetIsReverseZoneAttributeType) (ret ZonegetIsReverseZoneRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZonegetIsReverseZoneAttributeType(arg *ZonegetIsReverseZoneAttributeType, val ZonegetIsReverseZoneRetType) {
	*arg = &val
}

/*
	types and functions for labels
*/

// isArray
type ZoneGetLabelsAttributeType = *[]Label
type ZoneGetLabelsArgType = []Label
type ZoneGetLabelsRetType = []Label

func getZoneGetLabelsAttributeTypeOk(arg ZoneGetLabelsAttributeType) (ret ZoneGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetLabelsAttributeType(arg *ZoneGetLabelsAttributeType, val ZoneGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type ZoneGetNameAttributeType = *string

func getZoneGetNameAttributeTypeOk(arg ZoneGetNameAttributeType) (ret ZoneGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetNameAttributeType(arg *ZoneGetNameAttributeType, val ZoneGetNameRetType) {
	*arg = &val
}

type ZoneGetNameArgType = string
type ZoneGetNameRetType = string

/*
	types and functions for negativeCache
*/

// isInteger
type ZoneGetNegativeCacheAttributeType = *int64
type ZoneGetNegativeCacheArgType = int64
type ZoneGetNegativeCacheRetType = int64

func getZoneGetNegativeCacheAttributeTypeOk(arg ZoneGetNegativeCacheAttributeType) (ret ZoneGetNegativeCacheRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetNegativeCacheAttributeType(arg *ZoneGetNegativeCacheAttributeType, val ZoneGetNegativeCacheRetType) {
	*arg = &val
}

/*
	types and functions for primaries
*/

// isArray
type ZoneGetPrimariesAttributeType = *[]string
type ZoneGetPrimariesArgType = []string
type ZoneGetPrimariesRetType = []string

func getZoneGetPrimariesAttributeTypeOk(arg ZoneGetPrimariesAttributeType) (ret ZoneGetPrimariesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetPrimariesAttributeType(arg *ZoneGetPrimariesAttributeType, val ZoneGetPrimariesRetType) {
	*arg = &val
}

/*
	types and functions for primaryNameServer
*/

// isNotNullableString
type ZoneGetPrimaryNameServerAttributeType = *string

func getZoneGetPrimaryNameServerAttributeTypeOk(arg ZoneGetPrimaryNameServerAttributeType) (ret ZoneGetPrimaryNameServerRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetPrimaryNameServerAttributeType(arg *ZoneGetPrimaryNameServerAttributeType, val ZoneGetPrimaryNameServerRetType) {
	*arg = &val
}

type ZoneGetPrimaryNameServerArgType = string
type ZoneGetPrimaryNameServerRetType = string

/*
	types and functions for recordCount
*/

// isInteger
type ZoneGetRecordCountAttributeType = *int64
type ZoneGetRecordCountArgType = int64
type ZoneGetRecordCountRetType = int64

func getZoneGetRecordCountAttributeTypeOk(arg ZoneGetRecordCountAttributeType) (ret ZoneGetRecordCountRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetRecordCountAttributeType(arg *ZoneGetRecordCountAttributeType, val ZoneGetRecordCountRetType) {
	*arg = &val
}

/*
	types and functions for refreshTime
*/

// isInteger
type ZoneGetRefreshTimeAttributeType = *int64
type ZoneGetRefreshTimeArgType = int64
type ZoneGetRefreshTimeRetType = int64

func getZoneGetRefreshTimeAttributeTypeOk(arg ZoneGetRefreshTimeAttributeType) (ret ZoneGetRefreshTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetRefreshTimeAttributeType(arg *ZoneGetRefreshTimeAttributeType, val ZoneGetRefreshTimeRetType) {
	*arg = &val
}

/*
	types and functions for retryTime
*/

// isInteger
type ZoneGetRetryTimeAttributeType = *int64
type ZoneGetRetryTimeArgType = int64
type ZoneGetRetryTimeRetType = int64

func getZoneGetRetryTimeAttributeTypeOk(arg ZoneGetRetryTimeAttributeType) (ret ZoneGetRetryTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetRetryTimeAttributeType(arg *ZoneGetRetryTimeAttributeType, val ZoneGetRetryTimeRetType) {
	*arg = &val
}

/*
	types and functions for serialNumber
*/

// isInteger
type ZoneGetSerialNumberAttributeType = *int64
type ZoneGetSerialNumberArgType = int64
type ZoneGetSerialNumberRetType = int64

func getZoneGetSerialNumberAttributeTypeOk(arg ZoneGetSerialNumberAttributeType) (ret ZoneGetSerialNumberRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetSerialNumberAttributeType(arg *ZoneGetSerialNumberAttributeType, val ZoneGetSerialNumberRetType) {
	*arg = &val
}

/*
	types and functions for state
*/

// isEnum

// ZoneState zone state
type ZoneState string

// List of State
const (
	ZONESTATE_CREATING         ZoneState = "CREATING"
	ZONESTATE_CREATE_SUCCEEDED ZoneState = "CREATE_SUCCEEDED"
	ZONESTATE_CREATE_FAILED    ZoneState = "CREATE_FAILED"
	ZONESTATE_DELETING         ZoneState = "DELETING"
	ZONESTATE_DELETE_SUCCEEDED ZoneState = "DELETE_SUCCEEDED"
	ZONESTATE_DELETE_FAILED    ZoneState = "DELETE_FAILED"
	ZONESTATE_UPDATING         ZoneState = "UPDATING"
	ZONESTATE_UPDATE_SUCCEEDED ZoneState = "UPDATE_SUCCEEDED"
	ZONESTATE_UPDATE_FAILED    ZoneState = "UPDATE_FAILED"
)

// All allowed values of Zone enum
var AllowedZoneStateEnumValues = []ZoneState{
	"CREATING",
	"CREATE_SUCCEEDED",
	"CREATE_FAILED",
	"DELETING",
	"DELETE_SUCCEEDED",
	"DELETE_FAILED",
	"UPDATING",
	"UPDATE_SUCCEEDED",
	"UPDATE_FAILED",
}

func (v *ZoneState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ZoneState(value)
	for _, existing := range AllowedZoneStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Zone", value)
}

// NewZoneStateFromValue returns a pointer to a valid ZoneState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZoneStateFromValue(v string) (*ZoneState, error) {
	ev := ZoneState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZoneState: valid values are %v", v, AllowedZoneStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZoneState) IsValid() bool {
	for _, existing := range AllowedZoneStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateState value
func (v ZoneState) Ptr() *ZoneState {
	return &v
}

type NullableZoneState struct {
	value *ZoneState
	isSet bool
}

func (v NullableZoneState) Get() *ZoneState {
	return v.value
}

func (v *NullableZoneState) Set(val *ZoneState) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneState) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneState(val *ZoneState) *NullableZoneState {
	return &NullableZoneState{value: val, isSet: true}
}

func (v NullableZoneState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ZoneGetStateAttributeType = *ZoneState
type ZoneGetStateArgType = ZoneState
type ZoneGetStateRetType = ZoneState

func getZoneGetStateAttributeTypeOk(arg ZoneGetStateAttributeType) (ret ZoneGetStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetStateAttributeType(arg *ZoneGetStateAttributeType, val ZoneGetStateRetType) {
	*arg = &val
}

/*
	types and functions for type
*/

// isEnum

// ZoneTypes zone type
type ZoneTypes string

// List of Type
const (
	ZONETYPE_PRIMARY   ZoneTypes = "primary"
	ZONETYPE_SECONDARY ZoneTypes = "secondary"
)

// All allowed values of Zone enum
var AllowedZoneTypesEnumValues = []ZoneTypes{
	"primary",
	"secondary",
}

func (v *ZoneTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ZoneTypes(value)
	for _, existing := range AllowedZoneTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Zone", value)
}

// NewZoneTypesFromValue returns a pointer to a valid ZoneTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZoneTypesFromValue(v string) (*ZoneTypes, error) {
	ev := ZoneTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZoneTypes: valid values are %v", v, AllowedZoneTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZoneTypes) IsValid() bool {
	for _, existing := range AllowedZoneTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v ZoneTypes) Ptr() *ZoneTypes {
	return &v
}

type NullableZoneTypes struct {
	value *ZoneTypes
	isSet bool
}

func (v NullableZoneTypes) Get() *ZoneTypes {
	return v.value
}

func (v *NullableZoneTypes) Set(val *ZoneTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneTypes(val *ZoneTypes) *NullableZoneTypes {
	return &NullableZoneTypes{value: val, isSet: true}
}

func (v NullableZoneTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ZoneGetTypeAttributeType = *ZoneTypes
type ZoneGetTypeArgType = ZoneTypes
type ZoneGetTypeRetType = ZoneTypes

func getZoneGetTypeAttributeTypeOk(arg ZoneGetTypeAttributeType) (ret ZoneGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetTypeAttributeType(arg *ZoneGetTypeAttributeType, val ZoneGetTypeRetType) {
	*arg = &val
}

/*
	types and functions for updateFinished
*/

// isNotNullableString
type ZoneGetUpdateFinishedAttributeType = *string

func getZoneGetUpdateFinishedAttributeTypeOk(arg ZoneGetUpdateFinishedAttributeType) (ret ZoneGetUpdateFinishedRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetUpdateFinishedAttributeType(arg *ZoneGetUpdateFinishedAttributeType, val ZoneGetUpdateFinishedRetType) {
	*arg = &val
}

type ZoneGetUpdateFinishedArgType = string
type ZoneGetUpdateFinishedRetType = string

/*
	types and functions for updateStarted
*/

// isNotNullableString
type ZoneGetUpdateStartedAttributeType = *string

func getZoneGetUpdateStartedAttributeTypeOk(arg ZoneGetUpdateStartedAttributeType) (ret ZoneGetUpdateStartedRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetUpdateStartedAttributeType(arg *ZoneGetUpdateStartedAttributeType, val ZoneGetUpdateStartedRetType) {
	*arg = &val
}

type ZoneGetUpdateStartedArgType = string
type ZoneGetUpdateStartedRetType = string

/*
	types and functions for visibility
*/

// isEnum

// ZoneVisibility visibility of the zone
type ZoneVisibility string

// List of Visibility
const (
	ZONEVISIBILITY_PUBLIC ZoneVisibility = "public"
)

// All allowed values of Zone enum
var AllowedZoneVisibilityEnumValues = []ZoneVisibility{
	"public",
}

func (v *ZoneVisibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue string
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ZoneVisibility(value)
	for _, existing := range AllowedZoneVisibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Zone", value)
}

// NewZoneVisibilityFromValue returns a pointer to a valid ZoneVisibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZoneVisibilityFromValue(v string) (*ZoneVisibility, error) {
	ev := ZoneVisibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZoneVisibility: valid values are %v", v, AllowedZoneVisibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZoneVisibility) IsValid() bool {
	for _, existing := range AllowedZoneVisibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VisibilityVisibility value
func (v ZoneVisibility) Ptr() *ZoneVisibility {
	return &v
}

type NullableZoneVisibility struct {
	value *ZoneVisibility
	isSet bool
}

func (v NullableZoneVisibility) Get() *ZoneVisibility {
	return v.value
}

func (v *NullableZoneVisibility) Set(val *ZoneVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneVisibility(val *ZoneVisibility) *NullableZoneVisibility {
	return &NullableZoneVisibility{value: val, isSet: true}
}

func (v NullableZoneVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ZoneGetVisibilityAttributeType = *ZoneVisibility
type ZoneGetVisibilityArgType = ZoneVisibility
type ZoneGetVisibilityRetType = ZoneVisibility

func getZoneGetVisibilityAttributeTypeOk(arg ZoneGetVisibilityAttributeType) (ret ZoneGetVisibilityRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setZoneGetVisibilityAttributeType(arg *ZoneGetVisibilityAttributeType, val ZoneGetVisibilityRetType) {
	*arg = &val
}

// Zone Zone.
type Zone struct {
	// access control list
	// REQUIRED
	Acl    ZoneGetAclAttributeType    `json:"acl"`
	Active ZonegetActiveAttributeType `json:"active,omitempty"`
	// contact email from soa record
	ContactEmail ZoneGetContactEmailAttributeType `json:"contactEmail,omitempty"`
	// when zone creation finished
	// REQUIRED
	CreationFinished ZoneGetCreationFinishedAttributeType `json:"creationFinished"`
	// when zone creation started
	// REQUIRED
	CreationStarted ZoneGetCreationStartedAttributeType `json:"creationStarted"`
	// default time to live
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	DefaultTTL ZoneGetDefaultTTLAttributeType `json:"defaultTTL"`
	// description of the zone
	Description ZoneGetDescriptionAttributeType `json:"description,omitempty"`
	// zone name
	// REQUIRED
	DnsName ZoneGetDnsNameAttributeType `json:"dnsName"`
	// Error shows error in case create/update/delete failed
	Error ZoneGetErrorAttributeType `json:"error,omitempty"`
	// expire time
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	ExpireTime ZoneGetExpireTimeAttributeType `json:"expireTime"`
	Extensions ZoneGetExtensionsAttributeType `json:"extensions,omitempty"`
	// zone id
	// REQUIRED
	Id ZoneGetIdAttributeType `json:"id"`
	// if the zone is a reverse zone or not
	IsReverseZone ZonegetIsReverseZoneAttributeType `json:"isReverseZone,omitempty"`
	Labels        ZoneGetLabelsAttributeType        `json:"labels,omitempty"`
	// user given name
	// REQUIRED
	Name ZoneGetNameAttributeType `json:"name"`
	// negative caching
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	NegativeCache ZoneGetNegativeCacheAttributeType `json:"negativeCache"`
	// primary name server for secondary zone
	Primaries ZoneGetPrimariesAttributeType `json:"primaries,omitempty"`
	// primary name server. FQDN
	// REQUIRED
	PrimaryNameServer ZoneGetPrimaryNameServerAttributeType `json:"primaryNameServer"`
	// record count how many records are in the zone
	// Can be cast to int32 without loss of precision.
	RecordCount ZoneGetRecordCountAttributeType `json:"recordCount,omitempty"`
	// refresh time
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	RefreshTime ZoneGetRefreshTimeAttributeType `json:"refreshTime"`
	// retry time
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	RetryTime ZoneGetRetryTimeAttributeType `json:"retryTime"`
	// serial number
	// Can be cast to int32 without loss of precision.
	// REQUIRED
	SerialNumber ZoneGetSerialNumberAttributeType `json:"serialNumber"`
	// zone state
	// REQUIRED
	State ZoneGetStateAttributeType `json:"state"`
	// zone type
	// REQUIRED
	Type ZoneGetTypeAttributeType `json:"type"`
	// when zone update/deletion finished
	// REQUIRED
	UpdateFinished ZoneGetUpdateFinishedAttributeType `json:"updateFinished"`
	// when zone update/deletion started
	// REQUIRED
	UpdateStarted ZoneGetUpdateStartedAttributeType `json:"updateStarted"`
	// visibility of the zone
	// REQUIRED
	Visibility ZoneGetVisibilityAttributeType `json:"visibility"`
}

type _Zone Zone

// NewZone instantiates a new Zone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZone(acl ZoneGetAclArgType, creationFinished ZoneGetCreationFinishedArgType, creationStarted ZoneGetCreationStartedArgType, defaultTTL ZoneGetDefaultTTLArgType, dnsName ZoneGetDnsNameArgType, expireTime ZoneGetExpireTimeArgType, id ZoneGetIdArgType, name ZoneGetNameArgType, negativeCache ZoneGetNegativeCacheArgType, primaryNameServer ZoneGetPrimaryNameServerArgType, refreshTime ZoneGetRefreshTimeArgType, retryTime ZoneGetRetryTimeArgType, serialNumber ZoneGetSerialNumberArgType, state ZoneGetStateArgType, types ZoneGetTypeArgType, updateFinished ZoneGetUpdateFinishedArgType, updateStarted ZoneGetUpdateStartedArgType, visibility ZoneGetVisibilityArgType) *Zone {
	this := Zone{}
	setZoneGetAclAttributeType(&this.Acl, acl)
	setZoneGetCreationFinishedAttributeType(&this.CreationFinished, creationFinished)
	setZoneGetCreationStartedAttributeType(&this.CreationStarted, creationStarted)
	setZoneGetDefaultTTLAttributeType(&this.DefaultTTL, defaultTTL)
	setZoneGetDnsNameAttributeType(&this.DnsName, dnsName)
	setZoneGetExpireTimeAttributeType(&this.ExpireTime, expireTime)
	setZoneGetIdAttributeType(&this.Id, id)
	setZoneGetNameAttributeType(&this.Name, name)
	setZoneGetNegativeCacheAttributeType(&this.NegativeCache, negativeCache)
	setZoneGetPrimaryNameServerAttributeType(&this.PrimaryNameServer, primaryNameServer)
	setZoneGetRefreshTimeAttributeType(&this.RefreshTime, refreshTime)
	setZoneGetRetryTimeAttributeType(&this.RetryTime, retryTime)
	setZoneGetSerialNumberAttributeType(&this.SerialNumber, serialNumber)
	setZoneGetStateAttributeType(&this.State, state)
	setZoneGetTypeAttributeType(&this.Type, types)
	setZoneGetUpdateFinishedAttributeType(&this.UpdateFinished, updateFinished)
	setZoneGetUpdateStartedAttributeType(&this.UpdateStarted, updateStarted)
	setZoneGetVisibilityAttributeType(&this.Visibility, visibility)
	return &this
}

// NewZoneWithDefaults instantiates a new Zone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneWithDefaults() *Zone {
	this := Zone{}
	return &this
}

// GetAcl returns the Acl field value
func (o *Zone) GetAcl() (ret ZoneGetAclRetType) {
	ret, _ = o.GetAclOk()
	return ret
}

// GetAclOk returns a tuple with the Acl field value
// and a boolean to check if the value has been set.
func (o *Zone) GetAclOk() (ret ZoneGetAclRetType, ok bool) {
	return getZoneGetAclAttributeTypeOk(o.Acl)
}

// SetAcl sets field value
func (o *Zone) SetAcl(v ZoneGetAclRetType) {
	setZoneGetAclAttributeType(&o.Acl, v)
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Zone) GetActive() (res ZonegetActiveRetType) {
	res, _ = o.GetActiveOk()
	return
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetActiveOk() (ret ZonegetActiveRetType, ok bool) {
	return getZonegetActiveAttributeTypeOk(o.Active)
}

// HasActive returns a boolean if a field has been set.
func (o *Zone) HasActive() bool {
	_, ok := o.GetActiveOk()
	return ok
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Zone) SetActive(v ZonegetActiveRetType) {
	setZonegetActiveAttributeType(&o.Active, v)
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *Zone) GetContactEmail() (res ZoneGetContactEmailRetType) {
	res, _ = o.GetContactEmailOk()
	return
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetContactEmailOk() (ret ZoneGetContactEmailRetType, ok bool) {
	return getZoneGetContactEmailAttributeTypeOk(o.ContactEmail)
}

// HasContactEmail returns a boolean if a field has been set.
func (o *Zone) HasContactEmail() bool {
	_, ok := o.GetContactEmailOk()
	return ok
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *Zone) SetContactEmail(v ZoneGetContactEmailRetType) {
	setZoneGetContactEmailAttributeType(&o.ContactEmail, v)
}

// GetCreationFinished returns the CreationFinished field value
func (o *Zone) GetCreationFinished() (ret ZoneGetCreationFinishedRetType) {
	ret, _ = o.GetCreationFinishedOk()
	return ret
}

// GetCreationFinishedOk returns a tuple with the CreationFinished field value
// and a boolean to check if the value has been set.
func (o *Zone) GetCreationFinishedOk() (ret ZoneGetCreationFinishedRetType, ok bool) {
	return getZoneGetCreationFinishedAttributeTypeOk(o.CreationFinished)
}

// SetCreationFinished sets field value
func (o *Zone) SetCreationFinished(v ZoneGetCreationFinishedRetType) {
	setZoneGetCreationFinishedAttributeType(&o.CreationFinished, v)
}

// GetCreationStarted returns the CreationStarted field value
func (o *Zone) GetCreationStarted() (ret ZoneGetCreationStartedRetType) {
	ret, _ = o.GetCreationStartedOk()
	return ret
}

// GetCreationStartedOk returns a tuple with the CreationStarted field value
// and a boolean to check if the value has been set.
func (o *Zone) GetCreationStartedOk() (ret ZoneGetCreationStartedRetType, ok bool) {
	return getZoneGetCreationStartedAttributeTypeOk(o.CreationStarted)
}

// SetCreationStarted sets field value
func (o *Zone) SetCreationStarted(v ZoneGetCreationStartedRetType) {
	setZoneGetCreationStartedAttributeType(&o.CreationStarted, v)
}

// GetDefaultTTL returns the DefaultTTL field value
func (o *Zone) GetDefaultTTL() (ret ZoneGetDefaultTTLRetType) {
	ret, _ = o.GetDefaultTTLOk()
	return ret
}

// GetDefaultTTLOk returns a tuple with the DefaultTTL field value
// and a boolean to check if the value has been set.
func (o *Zone) GetDefaultTTLOk() (ret ZoneGetDefaultTTLRetType, ok bool) {
	return getZoneGetDefaultTTLAttributeTypeOk(o.DefaultTTL)
}

// SetDefaultTTL sets field value
func (o *Zone) SetDefaultTTL(v ZoneGetDefaultTTLRetType) {
	setZoneGetDefaultTTLAttributeType(&o.DefaultTTL, v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Zone) GetDescription() (res ZoneGetDescriptionRetType) {
	res, _ = o.GetDescriptionOk()
	return
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetDescriptionOk() (ret ZoneGetDescriptionRetType, ok bool) {
	return getZoneGetDescriptionAttributeTypeOk(o.Description)
}

// HasDescription returns a boolean if a field has been set.
func (o *Zone) HasDescription() bool {
	_, ok := o.GetDescriptionOk()
	return ok
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Zone) SetDescription(v ZoneGetDescriptionRetType) {
	setZoneGetDescriptionAttributeType(&o.Description, v)
}

// GetDnsName returns the DnsName field value
func (o *Zone) GetDnsName() (ret ZoneGetDnsNameRetType) {
	ret, _ = o.GetDnsNameOk()
	return ret
}

// GetDnsNameOk returns a tuple with the DnsName field value
// and a boolean to check if the value has been set.
func (o *Zone) GetDnsNameOk() (ret ZoneGetDnsNameRetType, ok bool) {
	return getZoneGetDnsNameAttributeTypeOk(o.DnsName)
}

// SetDnsName sets field value
func (o *Zone) SetDnsName(v ZoneGetDnsNameRetType) {
	setZoneGetDnsNameAttributeType(&o.DnsName, v)
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Zone) GetError() (res ZoneGetErrorRetType) {
	res, _ = o.GetErrorOk()
	return
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetErrorOk() (ret ZoneGetErrorRetType, ok bool) {
	return getZoneGetErrorAttributeTypeOk(o.Error)
}

// HasError returns a boolean if a field has been set.
func (o *Zone) HasError() bool {
	_, ok := o.GetErrorOk()
	return ok
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Zone) SetError(v ZoneGetErrorRetType) {
	setZoneGetErrorAttributeType(&o.Error, v)
}

// GetExpireTime returns the ExpireTime field value
func (o *Zone) GetExpireTime() (ret ZoneGetExpireTimeRetType) {
	ret, _ = o.GetExpireTimeOk()
	return ret
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value
// and a boolean to check if the value has been set.
func (o *Zone) GetExpireTimeOk() (ret ZoneGetExpireTimeRetType, ok bool) {
	return getZoneGetExpireTimeAttributeTypeOk(o.ExpireTime)
}

// SetExpireTime sets field value
func (o *Zone) SetExpireTime(v ZoneGetExpireTimeRetType) {
	setZoneGetExpireTimeAttributeType(&o.ExpireTime, v)
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Zone) GetExtensions() (res ZoneGetExtensionsRetType) {
	res, _ = o.GetExtensionsOk()
	return
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetExtensionsOk() (ret ZoneGetExtensionsRetType, ok bool) {
	return getZoneGetExtensionsAttributeTypeOk(o.Extensions)
}

// HasExtensions returns a boolean if a field has been set.
func (o *Zone) HasExtensions() bool {
	_, ok := o.GetExtensionsOk()
	return ok
}

// SetExtensions gets a reference to the given DomainExtensions and assigns it to the Extensions field.
func (o *Zone) SetExtensions(v ZoneGetExtensionsRetType) {
	setZoneGetExtensionsAttributeType(&o.Extensions, v)
}

// GetId returns the Id field value
func (o *Zone) GetId() (ret ZoneGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Zone) GetIdOk() (ret ZoneGetIdRetType, ok bool) {
	return getZoneGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Zone) SetId(v ZoneGetIdRetType) {
	setZoneGetIdAttributeType(&o.Id, v)
}

// GetIsReverseZone returns the IsReverseZone field value if set, zero value otherwise.
func (o *Zone) GetIsReverseZone() (res ZonegetIsReverseZoneRetType) {
	res, _ = o.GetIsReverseZoneOk()
	return
}

// GetIsReverseZoneOk returns a tuple with the IsReverseZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetIsReverseZoneOk() (ret ZonegetIsReverseZoneRetType, ok bool) {
	return getZonegetIsReverseZoneAttributeTypeOk(o.IsReverseZone)
}

// HasIsReverseZone returns a boolean if a field has been set.
func (o *Zone) HasIsReverseZone() bool {
	_, ok := o.GetIsReverseZoneOk()
	return ok
}

// SetIsReverseZone gets a reference to the given bool and assigns it to the IsReverseZone field.
func (o *Zone) SetIsReverseZone(v ZonegetIsReverseZoneRetType) {
	setZonegetIsReverseZoneAttributeType(&o.IsReverseZone, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Zone) GetLabels() (res ZoneGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetLabelsOk() (ret ZoneGetLabelsRetType, ok bool) {
	return getZoneGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *Zone) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *Zone) SetLabels(v ZoneGetLabelsRetType) {
	setZoneGetLabelsAttributeType(&o.Labels, v)
}

// GetName returns the Name field value
func (o *Zone) GetName() (ret ZoneGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Zone) GetNameOk() (ret ZoneGetNameRetType, ok bool) {
	return getZoneGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Zone) SetName(v ZoneGetNameRetType) {
	setZoneGetNameAttributeType(&o.Name, v)
}

// GetNegativeCache returns the NegativeCache field value
func (o *Zone) GetNegativeCache() (ret ZoneGetNegativeCacheRetType) {
	ret, _ = o.GetNegativeCacheOk()
	return ret
}

// GetNegativeCacheOk returns a tuple with the NegativeCache field value
// and a boolean to check if the value has been set.
func (o *Zone) GetNegativeCacheOk() (ret ZoneGetNegativeCacheRetType, ok bool) {
	return getZoneGetNegativeCacheAttributeTypeOk(o.NegativeCache)
}

// SetNegativeCache sets field value
func (o *Zone) SetNegativeCache(v ZoneGetNegativeCacheRetType) {
	setZoneGetNegativeCacheAttributeType(&o.NegativeCache, v)
}

// GetPrimaries returns the Primaries field value if set, zero value otherwise.
func (o *Zone) GetPrimaries() (res ZoneGetPrimariesRetType) {
	res, _ = o.GetPrimariesOk()
	return
}

// GetPrimariesOk returns a tuple with the Primaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetPrimariesOk() (ret ZoneGetPrimariesRetType, ok bool) {
	return getZoneGetPrimariesAttributeTypeOk(o.Primaries)
}

// HasPrimaries returns a boolean if a field has been set.
func (o *Zone) HasPrimaries() bool {
	_, ok := o.GetPrimariesOk()
	return ok
}

// SetPrimaries gets a reference to the given []string and assigns it to the Primaries field.
func (o *Zone) SetPrimaries(v ZoneGetPrimariesRetType) {
	setZoneGetPrimariesAttributeType(&o.Primaries, v)
}

// GetPrimaryNameServer returns the PrimaryNameServer field value
func (o *Zone) GetPrimaryNameServer() (ret ZoneGetPrimaryNameServerRetType) {
	ret, _ = o.GetPrimaryNameServerOk()
	return ret
}

// GetPrimaryNameServerOk returns a tuple with the PrimaryNameServer field value
// and a boolean to check if the value has been set.
func (o *Zone) GetPrimaryNameServerOk() (ret ZoneGetPrimaryNameServerRetType, ok bool) {
	return getZoneGetPrimaryNameServerAttributeTypeOk(o.PrimaryNameServer)
}

// SetPrimaryNameServer sets field value
func (o *Zone) SetPrimaryNameServer(v ZoneGetPrimaryNameServerRetType) {
	setZoneGetPrimaryNameServerAttributeType(&o.PrimaryNameServer, v)
}

// GetRecordCount returns the RecordCount field value if set, zero value otherwise.
func (o *Zone) GetRecordCount() (res ZoneGetRecordCountRetType) {
	res, _ = o.GetRecordCountOk()
	return
}

// GetRecordCountOk returns a tuple with the RecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetRecordCountOk() (ret ZoneGetRecordCountRetType, ok bool) {
	return getZoneGetRecordCountAttributeTypeOk(o.RecordCount)
}

// HasRecordCount returns a boolean if a field has been set.
func (o *Zone) HasRecordCount() bool {
	_, ok := o.GetRecordCountOk()
	return ok
}

// SetRecordCount gets a reference to the given int64 and assigns it to the RecordCount field.
func (o *Zone) SetRecordCount(v ZoneGetRecordCountRetType) {
	setZoneGetRecordCountAttributeType(&o.RecordCount, v)
}

// GetRefreshTime returns the RefreshTime field value
func (o *Zone) GetRefreshTime() (ret ZoneGetRefreshTimeRetType) {
	ret, _ = o.GetRefreshTimeOk()
	return ret
}

// GetRefreshTimeOk returns a tuple with the RefreshTime field value
// and a boolean to check if the value has been set.
func (o *Zone) GetRefreshTimeOk() (ret ZoneGetRefreshTimeRetType, ok bool) {
	return getZoneGetRefreshTimeAttributeTypeOk(o.RefreshTime)
}

// SetRefreshTime sets field value
func (o *Zone) SetRefreshTime(v ZoneGetRefreshTimeRetType) {
	setZoneGetRefreshTimeAttributeType(&o.RefreshTime, v)
}

// GetRetryTime returns the RetryTime field value
func (o *Zone) GetRetryTime() (ret ZoneGetRetryTimeRetType) {
	ret, _ = o.GetRetryTimeOk()
	return ret
}

// GetRetryTimeOk returns a tuple with the RetryTime field value
// and a boolean to check if the value has been set.
func (o *Zone) GetRetryTimeOk() (ret ZoneGetRetryTimeRetType, ok bool) {
	return getZoneGetRetryTimeAttributeTypeOk(o.RetryTime)
}

// SetRetryTime sets field value
func (o *Zone) SetRetryTime(v ZoneGetRetryTimeRetType) {
	setZoneGetRetryTimeAttributeType(&o.RetryTime, v)
}

// GetSerialNumber returns the SerialNumber field value
func (o *Zone) GetSerialNumber() (ret ZoneGetSerialNumberRetType) {
	ret, _ = o.GetSerialNumberOk()
	return ret
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *Zone) GetSerialNumberOk() (ret ZoneGetSerialNumberRetType, ok bool) {
	return getZoneGetSerialNumberAttributeTypeOk(o.SerialNumber)
}

// SetSerialNumber sets field value
func (o *Zone) SetSerialNumber(v ZoneGetSerialNumberRetType) {
	setZoneGetSerialNumberAttributeType(&o.SerialNumber, v)
}

// GetState returns the State field value
func (o *Zone) GetState() (ret ZoneGetStateRetType) {
	ret, _ = o.GetStateOk()
	return ret
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Zone) GetStateOk() (ret ZoneGetStateRetType, ok bool) {
	return getZoneGetStateAttributeTypeOk(o.State)
}

// SetState sets field value
func (o *Zone) SetState(v ZoneGetStateRetType) {
	setZoneGetStateAttributeType(&o.State, v)
}

// GetType returns the Type field value
func (o *Zone) GetType() (ret ZoneGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Zone) GetTypeOk() (ret ZoneGetTypeRetType, ok bool) {
	return getZoneGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *Zone) SetType(v ZoneGetTypeRetType) {
	setZoneGetTypeAttributeType(&o.Type, v)
}

// GetUpdateFinished returns the UpdateFinished field value
func (o *Zone) GetUpdateFinished() (ret ZoneGetUpdateFinishedRetType) {
	ret, _ = o.GetUpdateFinishedOk()
	return ret
}

// GetUpdateFinishedOk returns a tuple with the UpdateFinished field value
// and a boolean to check if the value has been set.
func (o *Zone) GetUpdateFinishedOk() (ret ZoneGetUpdateFinishedRetType, ok bool) {
	return getZoneGetUpdateFinishedAttributeTypeOk(o.UpdateFinished)
}

// SetUpdateFinished sets field value
func (o *Zone) SetUpdateFinished(v ZoneGetUpdateFinishedRetType) {
	setZoneGetUpdateFinishedAttributeType(&o.UpdateFinished, v)
}

// GetUpdateStarted returns the UpdateStarted field value
func (o *Zone) GetUpdateStarted() (ret ZoneGetUpdateStartedRetType) {
	ret, _ = o.GetUpdateStartedOk()
	return ret
}

// GetUpdateStartedOk returns a tuple with the UpdateStarted field value
// and a boolean to check if the value has been set.
func (o *Zone) GetUpdateStartedOk() (ret ZoneGetUpdateStartedRetType, ok bool) {
	return getZoneGetUpdateStartedAttributeTypeOk(o.UpdateStarted)
}

// SetUpdateStarted sets field value
func (o *Zone) SetUpdateStarted(v ZoneGetUpdateStartedRetType) {
	setZoneGetUpdateStartedAttributeType(&o.UpdateStarted, v)
}

// GetVisibility returns the Visibility field value
func (o *Zone) GetVisibility() (ret ZoneGetVisibilityRetType) {
	ret, _ = o.GetVisibilityOk()
	return ret
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *Zone) GetVisibilityOk() (ret ZoneGetVisibilityRetType, ok bool) {
	return getZoneGetVisibilityAttributeTypeOk(o.Visibility)
}

// SetVisibility sets field value
func (o *Zone) SetVisibility(v ZoneGetVisibilityRetType) {
	setZoneGetVisibilityAttributeType(&o.Visibility, v)
}

func (o Zone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getZoneGetAclAttributeTypeOk(o.Acl); ok {
		toSerialize["Acl"] = val
	}
	if val, ok := getZonegetActiveAttributeTypeOk(o.Active); ok {
		toSerialize["Active"] = val
	}
	if val, ok := getZoneGetContactEmailAttributeTypeOk(o.ContactEmail); ok {
		toSerialize["ContactEmail"] = val
	}
	if val, ok := getZoneGetCreationFinishedAttributeTypeOk(o.CreationFinished); ok {
		toSerialize["CreationFinished"] = val
	}
	if val, ok := getZoneGetCreationStartedAttributeTypeOk(o.CreationStarted); ok {
		toSerialize["CreationStarted"] = val
	}
	if val, ok := getZoneGetDefaultTTLAttributeTypeOk(o.DefaultTTL); ok {
		toSerialize["DefaultTTL"] = val
	}
	if val, ok := getZoneGetDescriptionAttributeTypeOk(o.Description); ok {
		toSerialize["Description"] = val
	}
	if val, ok := getZoneGetDnsNameAttributeTypeOk(o.DnsName); ok {
		toSerialize["DnsName"] = val
	}
	if val, ok := getZoneGetErrorAttributeTypeOk(o.Error); ok {
		toSerialize["Error"] = val
	}
	if val, ok := getZoneGetExpireTimeAttributeTypeOk(o.ExpireTime); ok {
		toSerialize["ExpireTime"] = val
	}
	if val, ok := getZoneGetExtensionsAttributeTypeOk(o.Extensions); ok {
		toSerialize["Extensions"] = val
	}
	if val, ok := getZoneGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getZonegetIsReverseZoneAttributeTypeOk(o.IsReverseZone); ok {
		toSerialize["IsReverseZone"] = val
	}
	if val, ok := getZoneGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getZoneGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getZoneGetNegativeCacheAttributeTypeOk(o.NegativeCache); ok {
		toSerialize["NegativeCache"] = val
	}
	if val, ok := getZoneGetPrimariesAttributeTypeOk(o.Primaries); ok {
		toSerialize["Primaries"] = val
	}
	if val, ok := getZoneGetPrimaryNameServerAttributeTypeOk(o.PrimaryNameServer); ok {
		toSerialize["PrimaryNameServer"] = val
	}
	if val, ok := getZoneGetRecordCountAttributeTypeOk(o.RecordCount); ok {
		toSerialize["RecordCount"] = val
	}
	if val, ok := getZoneGetRefreshTimeAttributeTypeOk(o.RefreshTime); ok {
		toSerialize["RefreshTime"] = val
	}
	if val, ok := getZoneGetRetryTimeAttributeTypeOk(o.RetryTime); ok {
		toSerialize["RetryTime"] = val
	}
	if val, ok := getZoneGetSerialNumberAttributeTypeOk(o.SerialNumber); ok {
		toSerialize["SerialNumber"] = val
	}
	if val, ok := getZoneGetStateAttributeTypeOk(o.State); ok {
		toSerialize["State"] = val
	}
	if val, ok := getZoneGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	if val, ok := getZoneGetUpdateFinishedAttributeTypeOk(o.UpdateFinished); ok {
		toSerialize["UpdateFinished"] = val
	}
	if val, ok := getZoneGetUpdateStartedAttributeTypeOk(o.UpdateStarted); ok {
		toSerialize["UpdateStarted"] = val
	}
	if val, ok := getZoneGetVisibilityAttributeTypeOk(o.Visibility); ok {
		toSerialize["Visibility"] = val
	}
	return toSerialize, nil
}

type NullableZone struct {
	value *Zone
	isSet bool
}

func (v NullableZone) Get() *Zone {
	return v.value
}

func (v *NullableZone) Set(val *Zone) {
	v.value = val
	v.isSet = true
}

func (v NullableZone) IsSet() bool {
	return v.isSet
}

func (v *NullableZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZone(val *Zone) *NullableZone {
	return &NullableZone{value: val, isSet: true}
}

func (v NullableZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
