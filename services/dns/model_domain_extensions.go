/*
STACKIT DNS API

This api provides dns

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DomainExtensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainExtensions{}

// DomainExtensions struct for DomainExtensions
type DomainExtensions struct {
	ObservabilityExtension *DomainObservabilityExtension `json:"observabilityExtension,omitempty"`
}

// NewDomainExtensions instantiates a new DomainExtensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainExtensions() *DomainExtensions {
	this := DomainExtensions{}
	return &this
}

// NewDomainExtensionsWithDefaults instantiates a new DomainExtensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainExtensionsWithDefaults() *DomainExtensions {
	this := DomainExtensions{}
	return &this
}

// GetObservabilityExtension returns the ObservabilityExtension field value if set, zero value otherwise.
func (o *DomainExtensions) GetObservabilityExtension() *DomainObservabilityExtension {
	if o == nil || IsNil(o.ObservabilityExtension) {
		var ret *DomainObservabilityExtension
		return ret
	}
	return o.ObservabilityExtension
}

// GetObservabilityExtensionOk returns a tuple with the ObservabilityExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainExtensions) GetObservabilityExtensionOk() (*DomainObservabilityExtension, bool) {
	if o == nil || IsNil(o.ObservabilityExtension) {
		return nil, false
	}
	return o.ObservabilityExtension, true
}

// HasObservabilityExtension returns a boolean if a field has been set.
func (o *DomainExtensions) HasObservabilityExtension() bool {
	if o != nil && !IsNil(o.ObservabilityExtension) {
		return true
	}

	return false
}

// SetObservabilityExtension gets a reference to the given DomainObservabilityExtension and assigns it to the ObservabilityExtension field.
func (o *DomainExtensions) SetObservabilityExtension(v *DomainObservabilityExtension) {
	o.ObservabilityExtension = v
}

func (o DomainExtensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObservabilityExtension) {
		toSerialize["observabilityExtension"] = o.ObservabilityExtension
	}
	return toSerialize, nil
}

type NullableDomainExtensions struct {
	value *DomainExtensions
	isSet bool
}

func (v NullableDomainExtensions) Get() *DomainExtensions {
	return v.value
}

func (v *NullableDomainExtensions) Set(val *DomainExtensions) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainExtensions) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainExtensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainExtensions(val *DomainExtensions) *NullableDomainExtensions {
	return &NullableDomainExtensions{value: val, isSet: true}
}

func (v NullableDomainExtensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainExtensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
